
Version_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ae30  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003984  0801b000  0801b000  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e984  0801e984  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801e984  0801e984  0002e984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e98c  0801e98c  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e98c  0801e98c  0002e98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e990  0801e990  0002e990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801e994  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000db54  20000080  0801ea14  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000dbd4  0801ea14  0003dbd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00052d57  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000093d9  00000000  00000000  00082e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002200  00000000  00000000  0008c1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002060  00000000  00000000  0008e3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000137de  00000000  00000000  00090440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a843  00000000  00000000  000a3c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010edc7  00000000  00000000  000de461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ed228  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091c8  00000000  00000000  001ed27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801afe8 	.word	0x0801afe8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	0801afe8 	.word	0x0801afe8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f000 fbe1 	bl	8000d72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f81e 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 f8ec 	bl	8000790 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005b8:	f000 f88a 	bl	80006d0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005bc:	f000 f8b8 	bl	8000730 <MX_USART6_UART_Init>




    //Initialize Modbus library
  SModbus_Init();
 80005c0:	f006 fc46 	bl	8006e50 <SModbus_Init>
  MMaster_Init();
 80005c4:	f005 fe5e 	bl	8006284 <MMaster_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c8:	f007 fe8a 	bl	80082e0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005cc:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <main+0x3c>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <main+0x40>)
 80005d2:	f007 ff17 	bl	8008404 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a04      	ldr	r2, [pc, #16]	; (80005ec <main+0x44>)
 80005da:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005dc:	f007 feb4 	bl	8008348 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	e7fe      	b.n	80005e0 <main+0x38>
 80005e2:	bf00      	nop
 80005e4:	0801e608 	.word	0x0801e608
 80005e8:	08000821 	.word	0x08000821
 80005ec:	20004c5c 	.word	0x20004c5c

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f019 fd5d 	bl	801a0be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000614:	f002 f91c 	bl	8002850 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000618:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <SystemClock_Config+0xd8>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a2a      	ldr	r2, [pc, #168]	; (80006c8 <SystemClock_Config+0xd8>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0xd8>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <SystemClock_Config+0xdc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a25      	ldr	r2, [pc, #148]	; (80006cc <SystemClock_Config+0xdc>)
 8000636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <SystemClock_Config+0xdc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800065c:	2319      	movs	r3, #25
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000660:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800066a:	2309      	movs	r3, #9
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	4618      	mov	r0, r3
 8000674:	f002 f94c 	bl	8002910 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800067e:	f000 f907 	bl	8000890 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000682:	f002 f8f5 	bl	8002870 <HAL_PWREx_EnableOverDrive>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800068c:	f000 f900 	bl	8000890 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2106      	movs	r1, #6
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fbd2 	bl	8002e58 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xce>
  {
    Error_Handler();
 80006ba:	f000 f8e9 	bl	8000890 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <MX_USART1_UART_Init+0x5c>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART1_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART1_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART1_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART1_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART1_UART_Init+0x58>)
 8000714:	f003 f966 	bl	80039e4 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800071e:	f000 f8b7 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20004f74 	.word	0x20004f74
 800072c:	40011000 	.word	0x40011000

08000730 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_USART6_UART_Init+0x58>)
 8000736:	4a15      	ldr	r2, [pc, #84]	; (800078c <MX_USART6_UART_Init+0x5c>)
 8000738:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_USART6_UART_Init+0x58>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART6_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_USART6_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART6_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART6_UART_Init+0x58>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART6_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART6_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART6_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART6_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART6_UART_Init+0x58>)
 8000774:	f003 f936 	bl	80039e4 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800077e:	f000 f887 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20004ff8 	.word	0x20004ff8
 800078c:	40011400 	.word	0x40011400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b087      	sub	sp, #28
 8000794:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <MX_GPIO_Init+0x8c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a20      	ldr	r2, [pc, #128]	; (800081c <MX_GPIO_Init+0x8c>)
 800079c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b1e      	ldr	r3, [pc, #120]	; (800081c <MX_GPIO_Init+0x8c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <MX_GPIO_Init+0x8c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a1a      	ldr	r2, [pc, #104]	; (800081c <MX_GPIO_Init+0x8c>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b18      	ldr	r3, [pc, #96]	; (800081c <MX_GPIO_Init+0x8c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <MX_GPIO_Init+0x8c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a14      	ldr	r2, [pc, #80]	; (800081c <MX_GPIO_Init+0x8c>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <MX_GPIO_Init+0x8c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_GPIO_Init+0x8c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a0e      	ldr	r2, [pc, #56]	; (800081c <MX_GPIO_Init+0x8c>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_GPIO_Init+0x8c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_GPIO_Init+0x8c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a08      	ldr	r2, [pc, #32]	; (800081c <MX_GPIO_Init+0x8c>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_GPIO_Init+0x8c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

}
 800080e:	bf00      	nop
 8000810:	371c      	adds	r7, #28
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b08d      	sub	sp, #52	; 0x34
 8000824:	af04      	add	r7, sp, #16
 8000826:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000828:	f004 fdf2 	bl	8005410 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 800082c:	2064      	movs	r0, #100	; 0x64
 800082e:	f007 fe9b 	bl	8008568 <osDelay>
    	if(xSemaphoreTake((QueueHandle_t)Master_Modbus.ModBusSphrHandle , 300)==pdTRUE)
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <StartDefaultTask+0x68>)
 8000834:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000838:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800083c:	4618      	mov	r0, r3
 800083e:	f009 f9f5 	bl	8009c2c <xQueueSemaphoreTake>
 8000842:	4603      	mov	r3, r0
 8000844:	2b01      	cmp	r3, #1
 8000846:	d1f1      	bne.n	800082c <StartDefaultTask+0xc>
	   {
	       modbus_t telegram[1];
	       telegram[0].u8id = 1; // slave address
 8000848:	2301      	movs	r3, #1
 800084a:	723b      	strb	r3, [r7, #8]
	       telegram[0].u8fct = MB_FC_READ_REGISTERS; // function code (this one is registers write)
 800084c:	2303      	movs	r3, #3
 800084e:	727b      	strb	r3, [r7, #9]
	       telegram[0].u16RegAdd = 0x0;
 8000850:	2300      	movs	r3, #0
 8000852:	817b      	strh	r3, [r7, #10]
	       telegram[0].u16CoilsNo = 1; // number of elements (coils or registers) to read
 8000854:	2301      	movs	r3, #1
 8000856:	81bb      	strh	r3, [r7, #12]
	       telegram[0].u16reg = Master_ModbusData; // pointer to a memory array
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <StartDefaultTask+0x6c>)
 800085a:	613b      	str	r3, [r7, #16]
	       ModbusQuery(&Master_Modbus, telegram[0]);
 800085c:	466c      	mov	r4, sp
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000866:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <StartDefaultTask+0x68>)
 8000872:	f005 fce4 	bl	800623e <ModbusQuery>
	       //if(reg != ModbusDATARX[0])
	       //{
		    // reg = Master_ModbusData[0];
	       // }
	       xSemaphoreGive((QueueHandle_t)Master_Modbus.ModBusSphrHandle);
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <StartDefaultTask+0x68>)
 8000878:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800087c:	2300      	movs	r3, #0
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	f008 feb1 	bl	80095e8 <xQueueGenericSend>
    osDelay(100);
 8000886:	e7d1      	b.n	800082c <StartDefaultTask+0xc>
 8000888:	20004c68 	.word	0x20004c68
 800088c:	200050cc 	.word	0x200050cc

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	210f      	movs	r1, #15
 80008d6:	f06f 0001 	mvn.w	r0, #1
 80008da:	f000 fba6 	bl	800102a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0ae      	sub	sp, #184	; 0xb8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000904:	f107 0320 	add.w	r3, r7, #32
 8000908:	2284      	movs	r2, #132	; 0x84
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f019 fbd6 	bl	801a0be <memset>
  if(huart->Instance==USART1)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a6c      	ldr	r2, [pc, #432]	; (8000ac8 <HAL_UART_MspInit+0x1dc>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d165      	bne.n	80009e8 <HAL_UART_MspInit+0xfc>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800091c:	2340      	movs	r3, #64	; 0x40
 800091e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000920:	2300      	movs	r3, #0
 8000922:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000924:	f107 0320 	add.w	r3, r7, #32
 8000928:	4618      	mov	r0, r3
 800092a:	f002 fc6b 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000934:	f7ff ffac 	bl	8000890 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000938:	4b64      	ldr	r3, [pc, #400]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 800093a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093c:	4a63      	ldr	r2, [pc, #396]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 800093e:	f043 0310 	orr.w	r3, r3, #16
 8000942:	6453      	str	r3, [r2, #68]	; 0x44
 8000944:	4b61      	ldr	r3, [pc, #388]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 8000946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000948:	f003 0310 	and.w	r3, r3, #16
 800094c:	61fb      	str	r3, [r7, #28]
 800094e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000950:	4b5e      	ldr	r3, [pc, #376]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	4a5d      	ldr	r2, [pc, #372]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 8000956:	f043 0302 	orr.w	r3, r3, #2
 800095a:	6313      	str	r3, [r2, #48]	; 0x30
 800095c:	4b5b      	ldr	r3, [pc, #364]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 800095e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	61bb      	str	r3, [r7, #24]
 8000966:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b58      	ldr	r3, [pc, #352]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 800096a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096c:	4a57      	ldr	r2, [pc, #348]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6313      	str	r3, [r2, #48]	; 0x30
 8000974:	4b55      	ldr	r3, [pc, #340]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000992:	2303      	movs	r3, #3
 8000994:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000998:	2307      	movs	r3, #7
 800099a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009a2:	4619      	mov	r1, r3
 80009a4:	484a      	ldr	r0, [pc, #296]	; (8000ad0 <HAL_UART_MspInit+0x1e4>)
 80009a6:	f001 fd8d 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009c4:	2307      	movs	r3, #7
 80009c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009ce:	4619      	mov	r1, r3
 80009d0:	4840      	ldr	r0, [pc, #256]	; (8000ad4 <HAL_UART_MspInit+0x1e8>)
 80009d2:	f001 fd77 	bl	80024c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2105      	movs	r1, #5
 80009da:	2025      	movs	r0, #37	; 0x25
 80009dc:	f000 fb25 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009e0:	2025      	movs	r0, #37	; 0x25
 80009e2:	f000 fb3e 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80009e6:	e06a      	b.n	8000abe <HAL_UART_MspInit+0x1d2>
  else if(huart->Instance==USART6)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a3a      	ldr	r2, [pc, #232]	; (8000ad8 <HAL_UART_MspInit+0x1ec>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d165      	bne.n	8000abe <HAL_UART_MspInit+0x1d2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80009f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009f6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80009f8:	2300      	movs	r3, #0
 80009fa:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009fc:	f107 0320 	add.w	r3, r7, #32
 8000a00:	4618      	mov	r0, r3
 8000a02:	f002 fbff 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <HAL_UART_MspInit+0x124>
      Error_Handler();
 8000a0c:	f7ff ff40 	bl	8000890 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000a10:	4b2e      	ldr	r3, [pc, #184]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 8000a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a14:	4a2d      	ldr	r2, [pc, #180]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 8000a16:	f043 0320 	orr.w	r3, r3, #32
 8000a1a:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 8000a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a20:	f003 0320 	and.w	r3, r3, #32
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a28:	4b28      	ldr	r3, [pc, #160]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	4a27      	ldr	r2, [pc, #156]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 8000a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a32:	6313      	str	r3, [r2, #48]	; 0x30
 8000a34:	4b25      	ldr	r3, [pc, #148]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	4a21      	ldr	r2, [pc, #132]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <HAL_UART_MspInit+0x1e0>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a72:	2308      	movs	r3, #8
 8000a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4817      	ldr	r0, [pc, #92]	; (8000adc <HAL_UART_MspInit+0x1f0>)
 8000a80:	f001 fd20 	bl	80024c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a84:	2340      	movs	r3, #64	; 0x40
 8000a86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a9c:	2308      	movs	r3, #8
 8000a9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <HAL_UART_MspInit+0x1f4>)
 8000aaa:	f001 fd0b 	bl	80024c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2105      	movs	r1, #5
 8000ab2:	2047      	movs	r0, #71	; 0x47
 8000ab4:	f000 fab9 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000ab8:	2047      	movs	r0, #71	; 0x47
 8000aba:	f000 fad2 	bl	8001062 <HAL_NVIC_EnableIRQ>
}
 8000abe:	bf00      	nop
 8000ac0:	37b8      	adds	r7, #184	; 0xb8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40011000 	.word	0x40011000
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	40011400 	.word	0x40011400
 8000adc:	40021800 	.word	0x40021800
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 f96a 	bl	8000dec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b18:	f00a fac2 	bl	800b0a0 <xTaskGetSchedulerState>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d001      	beq.n	8000b26 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b22:	f00b fbf9 	bl	800c318 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b30:	4802      	ldr	r0, [pc, #8]	; (8000b3c <USART1_IRQHandler+0x10>)
 8000b32:	f003 f927 	bl	8003d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20004f74 	.word	0x20004f74

08000b40 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <ETH_IRQHandler+0x10>)
 8000b46:	f000 ff1b 	bl	8001980 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20006a2c 	.word	0x20006a2c

08000b54 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <USART6_IRQHandler+0x10>)
 8000b5a:	f003 f913 	bl	8003d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20004ff8 	.word	0x20004ff8

08000b68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
	return 1;
 8000b6c:	2301      	movs	r3, #1
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_kill>:

int _kill(int pid, int sig)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <_kill+0x20>)
 8000b84:	2216      	movs	r2, #22
 8000b86:	601a      	str	r2, [r3, #0]
	return -1;
 8000b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	2000dbc0 	.word	0x2000dbc0

08000b9c <_exit>:

void _exit (int status)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ffe5 	bl	8000b78 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bae:	e7fe      	b.n	8000bae <_exit+0x12>

08000bb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	e00a      	b.n	8000bd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bc2:	f3af 8000 	nop.w
 8000bc6:	4601      	mov	r1, r0
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	60ba      	str	r2, [r7, #8]
 8000bce:	b2ca      	uxtb	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dbf0      	blt.n	8000bc2 <_read+0x12>
	}

return len;
 8000be0:	687b      	ldr	r3, [r7, #4]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	60f8      	str	r0, [r7, #12]
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	e009      	b.n	8000c10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	1c5a      	adds	r2, r3, #1
 8000c00:	60ba      	str	r2, [r7, #8]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	dbf1      	blt.n	8000bfc <_write+0x12>
	}
	return len;
 8000c18:	687b      	ldr	r3, [r7, #4]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_close>:

int _close(int file)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
	return -1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c4a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <_isatty>:

int _isatty(int file)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
	return 1;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c94:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <_sbrk+0x5c>)
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <_sbrk+0x60>)
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <_sbrk+0x64>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <_sbrk+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d205      	bcs.n	8000cc8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <_sbrk+0x6c>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	e009      	b.n	8000cdc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <_sbrk+0x64>)
 8000cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cda:	68fb      	ldr	r3, [r7, #12]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	371c      	adds	r7, #28
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	20050000 	.word	0x20050000
 8000cec:	00000400 	.word	0x00000400
 8000cf0:	2000009c 	.word	0x2000009c
 8000cf4:	2000dbd8 	.word	0x2000dbd8
 8000cf8:	2000dbc0 	.word	0x2000dbc0

08000cfc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d26:	490e      	ldr	r1, [pc, #56]	; (8000d60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d3c:	4c0b      	ldr	r4, [pc, #44]	; (8000d6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d4a:	f7ff ffd7 	bl	8000cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f019 f973 	bl	801a038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d52:	f7ff fc29 	bl	80005a8 <main>
  bx  lr    
 8000d56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d58:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d64:	0801e994 	.word	0x0801e994
  ldr r2, =_sbss
 8000d68:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d6c:	2000dbd4 	.word	0x2000dbd4

08000d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC_IRQHandler>

08000d72 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d76:	2003      	movs	r0, #3
 8000d78:	f000 f94c 	bl	8001014 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7c:	200f      	movs	r0, #15
 8000d7e:	f000 f805 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d82:	f7ff fd8b 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x54>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 f967 	bl	800107e <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00e      	b.n	8000dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d80a      	bhi.n	8000dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f000 f92f 	bl	800102a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_InitTick+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x20>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x24>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_IncTick+0x24>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	200050e0 	.word	0x200050e0

08000e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	200050e0 	.word	0x200050e0

08000e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e34:	f7ff ffee 	bl	8000e14 <HAL_GetTick>
 8000e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e44:	d005      	beq.n	8000e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_Delay+0x44>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e52:	bf00      	nop
 8000e54:	f7ff ffde 	bl	8000e14 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d8f7      	bhi.n	8000e54 <HAL_Delay+0x28>
  {
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008

08000e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e84:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e90:	4013      	ands	r3, r2
 8000e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00
 8000eb8:	05fa0000 	.word	0x05fa0000

08000ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	0a1b      	lsrs	r3, r3, #8
 8000ec6:	f003 0307 	and.w	r3, r3, #7
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	db0b      	blt.n	8000f02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f003 021f 	and.w	r2, r3, #31
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <__NVIC_EnableIRQ+0x38>)
 8000ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	2001      	movs	r0, #1
 8000efa:	fa00 f202 	lsl.w	r2, r0, r2
 8000efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	db0a      	blt.n	8000f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	490c      	ldr	r1, [pc, #48]	; (8000f60 <__NVIC_SetPriority+0x4c>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	b2d2      	uxtb	r2, r2
 8000f36:	440b      	add	r3, r1
 8000f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f3c:	e00a      	b.n	8000f54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4908      	ldr	r1, [pc, #32]	; (8000f64 <__NVIC_SetPriority+0x50>)
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	3b04      	subs	r3, #4
 8000f4c:	0112      	lsls	r2, r2, #4
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	440b      	add	r3, r1
 8000f52:	761a      	strb	r2, [r3, #24]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	f1c3 0307 	rsb	r3, r3, #7
 8000f82:	2b04      	cmp	r3, #4
 8000f84:	bf28      	it	cs
 8000f86:	2304      	movcs	r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3304      	adds	r3, #4
 8000f8e:	2b06      	cmp	r3, #6
 8000f90:	d902      	bls.n	8000f98 <NVIC_EncodePriority+0x30>
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3b03      	subs	r3, #3
 8000f96:	e000      	b.n	8000f9a <NVIC_EncodePriority+0x32>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43da      	mvns	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	401a      	ands	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fba:	43d9      	mvns	r1, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	4313      	orrs	r3, r2
         );
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe0:	d301      	bcc.n	8000fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e00f      	b.n	8001006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <SysTick_Config+0x40>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fee:	210f      	movs	r1, #15
 8000ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff4:	f7ff ff8e 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <SysTick_Config+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffe:	4b04      	ldr	r3, [pc, #16]	; (8001010 <SysTick_Config+0x40>)
 8001000:	2207      	movs	r2, #7
 8001002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	e000e010 	.word	0xe000e010

08001014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff29 	bl	8000e74 <__NVIC_SetPriorityGrouping>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	60b9      	str	r1, [r7, #8]
 8001034:	607a      	str	r2, [r7, #4]
 8001036:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff3e 	bl	8000ebc <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff8e 	bl	8000f68 <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5d 	bl	8000f14 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff31 	bl	8000ed8 <__NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffa2 	bl	8000fd0 <SysTick_Config>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010a4:	f7ff feb6 	bl	8000e14 <HAL_GetTick>
 80010a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d008      	beq.n	80010c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2280      	movs	r2, #128	; 0x80
 80010ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e052      	b.n	800116e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0216 	bic.w	r2, r2, #22
 80010d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d103      	bne.n	80010f8 <HAL_DMA_Abort+0x62>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d007      	beq.n	8001108 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0208 	bic.w	r2, r2, #8
 8001106:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f022 0201 	bic.w	r2, r2, #1
 8001116:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001118:	e013      	b.n	8001142 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800111a:	f7ff fe7b 	bl	8000e14 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b05      	cmp	r3, #5
 8001126:	d90c      	bls.n	8001142 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2220      	movs	r2, #32
 800112c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2203      	movs	r2, #3
 8001132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e015      	b.n	800116e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d1e4      	bne.n	800111a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001154:	223f      	movs	r2, #63	; 0x3f
 8001156:	409a      	lsls	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d004      	beq.n	8001194 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2280      	movs	r2, #128	; 0x80
 800118e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e00c      	b.n	80011ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2205      	movs	r2, #5
 8001198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80011cc:	4ba9      	ldr	r3, [pc, #676]	; (8001474 <HAL_ETH_Init+0x2b8>)
 80011ce:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e181      	b.n	80014e6 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d106      	bne.n	80011fc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f004 fa6c 	bl	80056d4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fc:	4b9e      	ldr	r3, [pc, #632]	; (8001478 <HAL_ETH_Init+0x2bc>)
 80011fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001200:	4a9d      	ldr	r2, [pc, #628]	; (8001478 <HAL_ETH_Init+0x2bc>)
 8001202:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001206:	6453      	str	r3, [r2, #68]	; 0x44
 8001208:	4b9b      	ldr	r3, [pc, #620]	; (8001478 <HAL_ETH_Init+0x2bc>)
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001214:	4b99      	ldr	r3, [pc, #612]	; (800147c <HAL_ETH_Init+0x2c0>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4a98      	ldr	r2, [pc, #608]	; (800147c <HAL_ETH_Init+0x2c0>)
 800121a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800121e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001220:	4b96      	ldr	r3, [pc, #600]	; (800147c <HAL_ETH_Init+0x2c0>)
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	4994      	ldr	r1, [pc, #592]	; (800147c <HAL_ETH_Init+0x2c0>)
 800122a:	4313      	orrs	r3, r2
 800122c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f042 0201 	orr.w	r2, r2, #1
 8001240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001244:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001246:	f7ff fde5 	bl	8000e14 <HAL_GetTick>
 800124a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800124c:	e011      	b.n	8001272 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800124e:	f7ff fde1 	bl	8000e14 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800125c:	d909      	bls.n	8001272 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2203      	movs	r2, #3
 8001262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e139      	b.n	80014e6 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1e4      	bne.n	800124e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	691b      	ldr	r3, [r3, #16]
 800128a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f023 031c 	bic.w	r3, r3, #28
 8001292:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001294:	f001 ff82 	bl	800319c <HAL_RCC_GetHCLKFreq>
 8001298:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	4a78      	ldr	r2, [pc, #480]	; (8001480 <HAL_ETH_Init+0x2c4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d908      	bls.n	80012b4 <HAL_ETH_Init+0xf8>
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4a77      	ldr	r2, [pc, #476]	; (8001484 <HAL_ETH_Init+0x2c8>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d804      	bhi.n	80012b4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	f043 0308 	orr.w	r3, r3, #8
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	e027      	b.n	8001304 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	4a73      	ldr	r2, [pc, #460]	; (8001484 <HAL_ETH_Init+0x2c8>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d908      	bls.n	80012ce <HAL_ETH_Init+0x112>
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	4a6d      	ldr	r2, [pc, #436]	; (8001474 <HAL_ETH_Init+0x2b8>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d204      	bcs.n	80012ce <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f043 030c 	orr.w	r3, r3, #12
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	e01a      	b.n	8001304 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	4a68      	ldr	r2, [pc, #416]	; (8001474 <HAL_ETH_Init+0x2b8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d303      	bcc.n	80012de <HAL_ETH_Init+0x122>
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	4a6b      	ldr	r2, [pc, #428]	; (8001488 <HAL_ETH_Init+0x2cc>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d911      	bls.n	8001302 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	4a69      	ldr	r2, [pc, #420]	; (8001488 <HAL_ETH_Init+0x2cc>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d908      	bls.n	80012f8 <HAL_ETH_Init+0x13c>
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	4a68      	ldr	r2, [pc, #416]	; (800148c <HAL_ETH_Init+0x2d0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d804      	bhi.n	80012f8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	61fb      	str	r3, [r7, #28]
 80012f6:	e005      	b.n	8001304 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f043 0310 	orr.w	r3, r3, #16
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	e000      	b.n	8001304 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001302:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	69fa      	ldr	r2, [r7, #28]
 800130a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800130c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001310:	2100      	movs	r1, #0
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 fc17 	bl	8001b46 <HAL_ETH_WritePHYRegister>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00b      	beq.n	8001336 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001322:	6939      	ldr	r1, [r7, #16]
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 fdcd 	bl	8001ec4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0d7      	b.n	80014e6 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001336:	20ff      	movs	r0, #255	; 0xff
 8001338:	f7ff fd78 	bl	8000e2c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 80a5 	beq.w	8001490 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001346:	f7ff fd65 	bl	8000e14 <HAL_GetTick>
 800134a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	461a      	mov	r2, r3
 8001352:	2101      	movs	r1, #1
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 fb8e 	bl	8001a76 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800135a:	f7ff fd5b 	bl	8000e14 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	f241 3288 	movw	r2, #5000	; 0x1388
 8001368:	4293      	cmp	r3, r2
 800136a:	d90f      	bls.n	800138c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001370:	6939      	ldr	r1, [r7, #16]
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 fda6 	bl	8001ec4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e0ac      	b.n	80014e6 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0da      	beq.n	800134c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001396:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800139a:	2100      	movs	r1, #0
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 fbd2 	bl	8001b46 <HAL_ETH_WritePHYRegister>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00b      	beq.n	80013c0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013ac:	6939      	ldr	r1, [r7, #16]
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fd88 	bl	8001ec4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80013bc:	2301      	movs	r3, #1
 80013be:	e092      	b.n	80014e6 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80013c0:	f7ff fd28 	bl	8000e14 <HAL_GetTick>
 80013c4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	461a      	mov	r2, r3
 80013cc:	2101      	movs	r1, #1
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 fb51 	bl	8001a76 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80013d4:	f7ff fd1e 	bl	8000e14 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d90f      	bls.n	8001406 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80013ea:	6939      	ldr	r1, [r7, #16]
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 fd69 	bl	8001ec4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e06f      	b.n	80014e6 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f003 0320 	and.w	r3, r3, #32
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0da      	beq.n	80013c6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	461a      	mov	r2, r3
 8001416:	2110      	movs	r1, #16
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fb2c 	bl	8001a76 <HAL_ETH_ReadPHYRegister>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00b      	beq.n	800143c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001428:	6939      	ldr	r1, [r7, #16]
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fd4a 	bl	8001ec4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001438:	2301      	movs	r3, #1
 800143a:	e054      	b.n	80014e6 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	2b00      	cmp	r3, #0
 8001444:	d004      	beq.n	8001450 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	e002      	b.n	8001456 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	e035      	b.n	80014d4 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	e030      	b.n	80014d4 <HAL_ETH_Init+0x318>
 8001472:	bf00      	nop
 8001474:	03938700 	.word	0x03938700
 8001478:	40023800 	.word	0x40023800
 800147c:	40013800 	.word	0x40013800
 8001480:	01312cff 	.word	0x01312cff
 8001484:	02160ebf 	.word	0x02160ebf
 8001488:	05f5e0ff 	.word	0x05f5e0ff
 800148c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	08db      	lsrs	r3, r3, #3
 8001496:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	085b      	lsrs	r3, r3, #1
 800149e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80014a0:	4313      	orrs	r3, r2
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	2100      	movs	r1, #0
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 fb4c 	bl	8001b46 <HAL_ETH_WritePHYRegister>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00b      	beq.n	80014cc <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014b8:	6939      	ldr	r1, [r7, #16]
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fd02 	bl	8001ec4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e00c      	b.n	80014e6 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80014cc:	f640 70ff 	movw	r0, #4095	; 0xfff
 80014d0:	f7ff fcac 	bl	8000e2c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80014d4:	6939      	ldr	r1, [r7, #16]
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 fcf4 	bl	8001ec4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2201      	movs	r2, #1
 80014e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop

080014f0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
 80014fc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <HAL_ETH_DMATxDescListInit+0x20>
 800150c:	2302      	movs	r3, #2
 800150e:	e052      	b.n	80015b6 <HAL_ETH_DMATxDescListInit+0xc6>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2202      	movs	r2, #2
 800151c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	e030      	b.n	800158e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	015b      	lsls	r3, r3, #5
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	4413      	add	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800153c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001544:	fb02 f303 	mul.w	r3, r2, r3
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	4413      	add	r3, r2
 800154c:	461a      	mov	r2, r3
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d105      	bne.n	8001566 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	3b01      	subs	r3, #1
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	429a      	cmp	r2, r3
 800156e:	d208      	bcs.n	8001582 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	3301      	adds	r3, #1
 8001574:	015b      	lsls	r3, r3, #5
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	4413      	add	r3, r2
 800157a:	461a      	mov	r2, r3
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	e002      	b.n	8001588 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3301      	adds	r3, #1
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d3ca      	bcc.n	800152c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6819      	ldr	r1, [r3, #0]
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f241 0310 	movw	r3, #4112	; 0x1010
 80015a0:	440b      	add	r3, r1
 80015a2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	371c      	adds	r7, #28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b087      	sub	sp, #28
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d101      	bne.n	80015e2 <HAL_ETH_DMARxDescListInit+0x20>
 80015de:	2302      	movs	r3, #2
 80015e0:	e056      	b.n	8001690 <HAL_ETH_DMARxDescListInit+0xce>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2202      	movs	r2, #2
 80015ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e034      	b.n	8001668 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	015b      	lsls	r3, r3, #5
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	4413      	add	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800160e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001616:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800161e:	fb02 f303 	mul.w	r3, r2, r3
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	461a      	mov	r2, r3
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d105      	bne.n	8001640 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	3b01      	subs	r3, #1
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	429a      	cmp	r2, r3
 8001648:	d208      	bcs.n	800165c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3301      	adds	r3, #1
 800164e:	015b      	lsls	r3, r3, #5
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	4413      	add	r3, r2
 8001654:	461a      	mov	r2, r3
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	e002      	b.n	8001662 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800165c:	68ba      	ldr	r2, [r7, #8]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3301      	adds	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	429a      	cmp	r2, r3
 800166e:	d3c6      	bcc.n	80015fe <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6819      	ldr	r1, [r3, #0]
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	f241 030c 	movw	r3, #4108	; 0x100c
 800167a:	440b      	add	r3, r1
 800167c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_ETH_TransmitFrame+0x24>
 80016bc:	2302      	movs	r3, #2
 80016be:	e0cd      	b.n	800185c <HAL_ETH_TransmitFrame+0x1c0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2202      	movs	r2, #2
 80016cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d109      	bne.n	80016ea <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80016e6:	2301      	movs	r3, #1
 80016e8:	e0b8      	b.n	800185c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	da09      	bge.n	8001708 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2212      	movs	r2, #18
 80016f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0a9      	b.n	800185c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800170e:	4293      	cmp	r3, r2
 8001710:	d915      	bls.n	800173e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	4a54      	ldr	r2, [pc, #336]	; (8001868 <HAL_ETH_TransmitFrame+0x1cc>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	0a9b      	lsrs	r3, r3, #10
 800171c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	4b51      	ldr	r3, [pc, #324]	; (8001868 <HAL_ETH_TransmitFrame+0x1cc>)
 8001722:	fba3 1302 	umull	r1, r3, r3, r2
 8001726:	0a9b      	lsrs	r3, r3, #10
 8001728:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800172c:	fb01 f303 	mul.w	r3, r1, r3
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3301      	adds	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	e001      	b.n	8001742 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800173e:	2301      	movs	r3, #1
 8001740:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d11c      	bne.n	8001782 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001756:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001762:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001772:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	461a      	mov	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001780:	e04b      	b.n	800181a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	e044      	b.n	8001812 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001796:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d107      	bne.n	80017ae <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017ac:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017b6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d116      	bne.n	80017f0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80017d0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	4a25      	ldr	r2, [pc, #148]	; (800186c <HAL_ETH_TransmitFrame+0x1d0>)
 80017d6:	fb02 f203 	mul.w	r2, r2, r3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	4413      	add	r3, r2
 80017de:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80017e2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80017ee:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017fe:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	461a      	mov	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	3301      	adds	r3, #1
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	429a      	cmp	r2, r3
 8001818:	d3b6      	bcc.n	8001788 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001822:	4413      	add	r3, r2
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00d      	beq.n	800184a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	f241 0314 	movw	r3, #4116	; 0x1014
 8001836:	4413      	add	r3, r2
 8001838:	2204      	movs	r2, #4
 800183a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	f241 0304 	movw	r3, #4100	; 0x1004
 8001844:	4413      	add	r3, r2
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2201      	movs	r2, #1
 800184e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	ac02b00b 	.word	0xac02b00b
 800186c:	fffffa0c 	.word	0xfffffa0c

08001870 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001882:	2b01      	cmp	r3, #1
 8001884:	d101      	bne.n	800188a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001886:	2302      	movs	r3, #2
 8001888:	e074      	b.n	8001974 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2202      	movs	r2, #2
 8001896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800189a:	e05a      	b.n	8001952 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3301      	adds	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b0:	d10d      	bne.n	80018ce <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	461a      	mov	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
 80018cc:	e041      	b.n	8001952 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10b      	bne.n	80018f4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	461a      	mov	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	629a      	str	r2, [r3, #40]	; 0x28
 80018f2:	e02e      	b.n	8001952 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190a:	2b01      	cmp	r3, #1
 800190c:	d103      	bne.n	8001916 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0c1b      	lsrs	r3, r3, #16
 800191e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001922:	1f1a      	subs	r2, r3, #4
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	461a      	mov	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e010      	b.n	8001974 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db02      	blt.n	8001962 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d99c      	bls.n	800189c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001990:	4413      	add	r3, r2
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001998:	2b40      	cmp	r3, #64	; 0x40
 800199a:	d112      	bne.n	80019c2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f003 ff3b 	bl	8005818 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	f241 0314 	movw	r3, #4116	; 0x1014
 80019aa:	4413      	add	r3, r2
 80019ac:	2240      	movs	r2, #64	; 0x40
 80019ae:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019c0:	e01b      	b.n	80019fa <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	f241 0314 	movw	r3, #4116	; 0x1014
 80019ca:	4413      	add	r3, r2
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d111      	bne.n	80019fa <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 f839 	bl	8001a4e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	f241 0314 	movw	r3, #4116	; 0x1014
 80019e4:	4413      	add	r3, r2
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a02:	4413      	add	r3, r2
 8001a04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a08:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a12:	4413      	add	r3, r2
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a1e:	d112      	bne.n	8001a46 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 f81e 	bl	8001a62 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001a2e:	4413      	add	r3, r2
 8001a30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a34:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b083      	sub	sp, #12
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b82      	cmp	r3, #130	; 0x82
 8001a96:	d101      	bne.n	8001a9c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e050      	b.n	8001b3e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2282      	movs	r2, #130	; 0x82
 8001aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f003 031c 	and.w	r3, r3, #28
 8001ab2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8a1b      	ldrh	r3, [r3, #16]
 8001ab8:	02db      	lsls	r3, r3, #11
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001ac2:	897b      	ldrh	r3, [r7, #10]
 8001ac4:	019b      	lsls	r3, r3, #6
 8001ac6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f023 0302 	bic.w	r3, r3, #2
 8001ad6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ae8:	f7ff f994 	bl	8000e14 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001aee:	e015      	b.n	8001b1c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001af0:	f7ff f990 	bl	8000e14 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afe:	d309      	bcc.n	8001b14 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e014      	b.n	8001b3e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1e4      	bne.n	8001af0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	461a      	mov	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b42      	cmp	r3, #66	; 0x42
 8001b66:	d101      	bne.n	8001b6c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e04e      	b.n	8001c0a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2242      	movs	r2, #66	; 0x42
 8001b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f003 031c 	and.w	r3, r3, #28
 8001b82:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8a1b      	ldrh	r3, [r3, #16]
 8001b88:	02db      	lsls	r3, r3, #11
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001b92:	897b      	ldrh	r3, [r7, #10]
 8001b94:	019b      	lsls	r3, r3, #6
 8001b96:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001bc2:	f7ff f927 	bl	8000e14 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bc8:	e015      	b.n	8001bf6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001bca:	f7ff f923 	bl	8000e14 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd8:	d309      	bcc.n	8001bee <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e00d      	b.n	8001c0a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1e4      	bne.n	8001bca <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_ETH_Start+0x16>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e01f      	b.n	8001c68 <HAL_ETH_Start+0x56>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fb45 	bl	80022c8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fb7c 	bl	800233c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 fc13 	bl	8002470 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fbb0 	bl	80023b0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 fbdd 	bl	8002410 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_ETH_Stop+0x16>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e01f      	b.n	8001cc6 <HAL_ETH_Stop+0x56>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2202      	movs	r2, #2
 8001c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 fba2 	bl	80023e0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 fbcf 	bl	8002440 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 fb67 	bl	8002376 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 fbe1 	bl	8002470 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fb27 	bl	8002302 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_ETH_ConfigMAC+0x1c>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e0e4      	b.n	8001eb6 <HAL_ETH_ConfigMAC+0x1e6>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80b1 	beq.w	8001e66 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4b6c      	ldr	r3, [pc, #432]	; (8001ec0 <HAL_ETH_ConfigMAC+0x1f0>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001d1c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001d22:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001d28:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001d2e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001d34:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001d3a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001d40:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001d46:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001d4c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001d52:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001d58:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001d5e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d76:	2001      	movs	r0, #1
 8001d78:	f7ff f858 	bl	8000e2c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001d8c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001d92:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001d98:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001d9e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001da4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001daa:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001db6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001db8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f7ff f832 	bl	8000e2c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001dd8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001de2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001df2:	4013      	ands	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001e00:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001e06:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001e0c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001e12:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001e18:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e30:	2001      	movs	r0, #1
 8001e32:	f7fe fffb 	bl	8000e2c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e56:	2001      	movs	r0, #1
 8001e58:	f7fe ffe8 	bl	8000e2c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	61da      	str	r2, [r3, #28]
 8001e64:	e01e      	b.n	8001ea4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001e74:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7fe ffc8 	bl	8000e2c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68fa      	ldr	r2, [r7, #12]
 8001ea2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	ff20810f 	.word	0xff20810f

08001ec4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b0b0      	sub	sp, #192	; 0xc0
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d007      	beq.n	8001eea <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ee0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ee8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001eea:	2300      	movs	r3, #0
 8001eec:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d103      	bne.n	8001f12 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0e:	663b      	str	r3, [r7, #96]	; 0x60
 8001f10:	e001      	b.n	8001f16 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f1a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f20:	2300      	movs	r3, #0
 8001f22:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001f30:	2340      	movs	r3, #64	; 0x40
 8001f32:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001f82:	2300      	movs	r3, #0
 8001f84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8001f98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f9c:	4bab      	ldr	r3, [pc, #684]	; (800224c <ETH_MACDMAConfig+0x388>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001fa8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001fac:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001fb0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001fb6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001fba:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001fbe:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001fc4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001fc8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001fca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001fcc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001fd0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001fd4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001fd8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8001fda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fec:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f7fe ff17 	bl	8000e2c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002006:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002008:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800200a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800200c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800200e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002010:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002012:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002016:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002018:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800201c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800201e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002022:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002024:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002028:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800202c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002034:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002036:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002042:	2001      	movs	r0, #1
 8002044:	f7fe fef2 	bl	8000e2c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002050:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800205a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002064:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002070:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002074:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002078:	4013      	ands	r3, r2
 800207a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800207e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002082:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002084:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002088:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800208a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800208e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002090:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002094:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800209a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800209c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80020a0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80020a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020b4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020c0:	2001      	movs	r0, #1
 80020c2:	f7fe feb3 	bl	8000e2c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020ce:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020d0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80020d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ea:	2001      	movs	r0, #1
 80020ec:	f7fe fe9e 	bl	8000e2c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020f8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80020fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002102:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002108:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800210c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800211e:	2304      	movs	r3, #4
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002122:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800212c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800212e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002132:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002138:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800213e:	2300      	movs	r3, #0
 8002140:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002142:	2300      	movs	r3, #0
 8002144:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	f241 0318 	movw	r3, #4120	; 0x1018
 800214e:	4413      	add	r3, r2
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002156:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800215a:	4b3d      	ldr	r3, [pc, #244]	; (8002250 <ETH_MACDMAConfig+0x38c>)
 800215c:	4013      	ands	r3, r2
 800215e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002162:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002164:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002166:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002168:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800216a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800216c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800216e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002170:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002172:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002174:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002176:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002178:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800217a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800217e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002180:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002182:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002184:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	f241 0318 	movw	r3, #4120	; 0x1018
 8002196:	4413      	add	r3, r2
 8002198:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800219c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	f241 0318 	movw	r3, #4120	; 0x1018
 80021a6:	4413      	add	r3, r2
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ae:	2001      	movs	r0, #1
 80021b0:	f7fe fe3c 	bl	8000e2c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	f241 0318 	movw	r3, #4120	; 0x1018
 80021bc:	4413      	add	r3, r2
 80021be:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80021c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021c8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80021cc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80021ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80021d0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80021d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80021d4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80021d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021d8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80021da:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80021dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80021de:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80021e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ec:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80021fc:	2001      	movs	r0, #1
 80021fe:	f7fe fe15 	bl	8000e2c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800220a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800220e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d10d      	bne.n	8002234 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002220:	4413      	add	r3, r2
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6811      	ldr	r1, [r2, #0]
 8002228:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <ETH_MACDMAConfig+0x390>)
 800222a:	431a      	orrs	r2, r3
 800222c:	f241 031c 	movw	r3, #4124	; 0x101c
 8002230:	440b      	add	r3, r1
 8002232:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	461a      	mov	r2, r3
 800223a:	2100      	movs	r1, #0
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f80b 	bl	8002258 <ETH_MACAddressConfig>
}
 8002242:	bf00      	nop
 8002244:	37c0      	adds	r7, #192	; 0xc0
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	ff20810f 	.word	0xff20810f
 8002250:	f8de3f23 	.word	0xf8de3f23
 8002254:	00010040 	.word	0x00010040

08002258 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3305      	adds	r3, #5
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	3204      	adds	r2, #4
 8002270:	7812      	ldrb	r2, [r2, #0]
 8002272:	4313      	orrs	r3, r2
 8002274:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	4b11      	ldr	r3, [pc, #68]	; (80022c0 <ETH_MACAddressConfig+0x68>)
 800227a:	4413      	add	r3, r2
 800227c:	461a      	mov	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3303      	adds	r3, #3
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	061a      	lsls	r2, r3, #24
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3302      	adds	r3, #2
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	041b      	lsls	r3, r3, #16
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3301      	adds	r3, #1
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	4313      	orrs	r3, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	7812      	ldrb	r2, [r2, #0]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <ETH_MACAddressConfig+0x6c>)
 80022aa:	4413      	add	r3, r2
 80022ac:	461a      	mov	r2, r3
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	6013      	str	r3, [r2, #0]
}
 80022b2:	bf00      	nop
 80022b4:	371c      	adds	r7, #28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40028040 	.word	0x40028040
 80022c4:	40028044 	.word	0x40028044

080022c8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0208 	orr.w	r2, r2, #8
 80022e2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ec:	2001      	movs	r0, #1
 80022ee:	f7fe fd9d 	bl	8000e2c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	601a      	str	r2, [r3, #0]
}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0208 	bic.w	r2, r2, #8
 800231c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002326:	2001      	movs	r0, #1
 8002328:	f7fe fd80 	bl	8000e2c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	601a      	str	r2, [r3, #0]
}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0204 	orr.w	r2, r2, #4
 8002356:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002360:	2001      	movs	r0, #1
 8002362:	f7fe fd63 	bl	8000e2c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	601a      	str	r2, [r3, #0]
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002376:	b580      	push	{r7, lr}
 8002378:	b084      	sub	sp, #16
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0204 	bic.w	r2, r2, #4
 8002390:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800239a:	2001      	movs	r0, #1
 800239c:	f7fe fd46 	bl	8000e2c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	601a      	str	r2, [r3, #0]
}
 80023a8:	bf00      	nop
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	f241 0318 	movw	r3, #4120	; 0x1018
 80023c0:	4413      	add	r3, r2
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6811      	ldr	r1, [r2, #0]
 80023c8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80023cc:	f241 0318 	movw	r3, #4120	; 0x1018
 80023d0:	440b      	add	r3, r1
 80023d2:	601a      	str	r2, [r3, #0]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	f241 0318 	movw	r3, #4120	; 0x1018
 80023f0:	4413      	add	r3, r2
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6811      	ldr	r1, [r2, #0]
 80023f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80023fc:	f241 0318 	movw	r3, #4120	; 0x1018
 8002400:	440b      	add	r3, r1
 8002402:	601a      	str	r2, [r3, #0]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002420:	4413      	add	r3, r2
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6811      	ldr	r1, [r2, #0]
 8002428:	f043 0202 	orr.w	r2, r3, #2
 800242c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002430:	440b      	add	r3, r1
 8002432:	601a      	str	r2, [r3, #0]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002450:	4413      	add	r3, r2
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6811      	ldr	r1, [r2, #0]
 8002458:	f023 0202 	bic.w	r2, r3, #2
 800245c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002460:	440b      	add	r3, r1
 8002462:	601a      	str	r2, [r3, #0]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	f241 0318 	movw	r3, #4120	; 0x1018
 8002484:	4413      	add	r3, r2
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6811      	ldr	r1, [r2, #0]
 800248c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002490:	f241 0318 	movw	r3, #4120	; 0x1018
 8002494:	440b      	add	r3, r1
 8002496:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	f241 0318 	movw	r3, #4120	; 0x1018
 80024a0:	4413      	add	r3, r2
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f7fe fcc0 	bl	8000e2c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6819      	ldr	r1, [r3, #0]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	f241 0318 	movw	r3, #4120	; 0x1018
 80024b6:	440b      	add	r3, r1
 80024b8:	601a      	str	r2, [r3, #0]
}
 80024ba:	bf00      	nop
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	e175      	b.n	80027d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024e4:	2201      	movs	r2, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	f040 8164 	bne.w	80027ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b01      	cmp	r3, #1
 800250c:	d005      	beq.n	800251a <HAL_GPIO_Init+0x56>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d130      	bne.n	800257c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002550:	2201      	movs	r2, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 0201 	and.w	r2, r3, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b03      	cmp	r3, #3
 8002586:	d017      	beq.n	80025b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d123      	bne.n	800260c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	08da      	lsrs	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3208      	adds	r2, #8
 80025cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	08da      	lsrs	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3208      	adds	r2, #8
 8002606:	69b9      	ldr	r1, [r7, #24]
 8002608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80be 	beq.w	80027ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	4b66      	ldr	r3, [pc, #408]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	4a65      	ldr	r2, [pc, #404]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002658:	6453      	str	r3, [r2, #68]	; 0x44
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <HAL_GPIO_Init+0x324>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002666:	4a61      	ldr	r2, [pc, #388]	; (80027ec <HAL_GPIO_Init+0x328>)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a58      	ldr	r2, [pc, #352]	; (80027f0 <HAL_GPIO_Init+0x32c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d037      	beq.n	8002702 <HAL_GPIO_Init+0x23e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a57      	ldr	r2, [pc, #348]	; (80027f4 <HAL_GPIO_Init+0x330>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d031      	beq.n	80026fe <HAL_GPIO_Init+0x23a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a56      	ldr	r2, [pc, #344]	; (80027f8 <HAL_GPIO_Init+0x334>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02b      	beq.n	80026fa <HAL_GPIO_Init+0x236>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a55      	ldr	r2, [pc, #340]	; (80027fc <HAL_GPIO_Init+0x338>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d025      	beq.n	80026f6 <HAL_GPIO_Init+0x232>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a54      	ldr	r2, [pc, #336]	; (8002800 <HAL_GPIO_Init+0x33c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <HAL_GPIO_Init+0x22e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a53      	ldr	r2, [pc, #332]	; (8002804 <HAL_GPIO_Init+0x340>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x22a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a52      	ldr	r2, [pc, #328]	; (8002808 <HAL_GPIO_Init+0x344>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x226>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a51      	ldr	r2, [pc, #324]	; (800280c <HAL_GPIO_Init+0x348>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x222>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a50      	ldr	r2, [pc, #320]	; (8002810 <HAL_GPIO_Init+0x34c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x21e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4f      	ldr	r2, [pc, #316]	; (8002814 <HAL_GPIO_Init+0x350>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x21a>
 80026da:	2309      	movs	r3, #9
 80026dc:	e012      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026de:	230a      	movs	r3, #10
 80026e0:	e010      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e2:	2308      	movs	r3, #8
 80026e4:	e00e      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e6:	2307      	movs	r3, #7
 80026e8:	e00c      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ea:	2306      	movs	r3, #6
 80026ec:	e00a      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e008      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e004      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_GPIO_Init+0x240>
 8002702:	2300      	movs	r3, #0
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f002 0203 	and.w	r2, r2, #3
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	4093      	lsls	r3, r2
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002714:	4935      	ldr	r1, [pc, #212]	; (80027ec <HAL_GPIO_Init+0x328>)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002722:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002746:	4a34      	ldr	r2, [pc, #208]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800274c:	4b32      	ldr	r3, [pc, #200]	; (8002818 <HAL_GPIO_Init+0x354>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002770:	4a29      	ldr	r2, [pc, #164]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002776:	4b28      	ldr	r3, [pc, #160]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800279a:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <HAL_GPIO_Init+0x354>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_GPIO_Init+0x354>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c4:	4a14      	ldr	r2, [pc, #80]	; (8002818 <HAL_GPIO_Init+0x354>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3301      	adds	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	f67f ae86 	bls.w	80024e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	3724      	adds	r7, #36	; 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40020000 	.word	0x40020000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	40020800 	.word	0x40020800
 80027fc:	40020c00 	.word	0x40020c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40021400 	.word	0x40021400
 8002808:	40021800 	.word	0x40021800
 800280c:	40021c00 	.word	0x40021c00
 8002810:	40022000 	.word	0x40022000
 8002814:	40022400 	.word	0x40022400
 8002818:	40013c00 	.word	0x40013c00

0800281c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
 8002828:	4613      	mov	r3, r2
 800282a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800282c:	787b      	ldrb	r3, [r7, #1]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002838:	e003      	b.n	8002842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800283a:	887b      	ldrh	r3, [r7, #2]
 800283c:	041a      	lsls	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	619a      	str	r2, [r3, #24]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a04      	ldr	r2, [pc, #16]	; (800286c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800285a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285e:	6013      	str	r3, [r2, #0]
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40007000 	.word	0x40007000

08002870 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	4b23      	ldr	r3, [pc, #140]	; (8002908 <HAL_PWREx_EnableOverDrive+0x98>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a22      	ldr	r2, [pc, #136]	; (8002908 <HAL_PWREx_EnableOverDrive+0x98>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b20      	ldr	r3, [pc, #128]	; (8002908 <HAL_PWREx_EnableOverDrive+0x98>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1d      	ldr	r2, [pc, #116]	; (800290c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800289e:	f7fe fab9 	bl	8000e14 <HAL_GetTick>
 80028a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028a4:	e009      	b.n	80028ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028a6:	f7fe fab5 	bl	8000e14 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028b4:	d901      	bls.n	80028ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e022      	b.n	8002900 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028ba:	4b14      	ldr	r3, [pc, #80]	; (800290c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c6:	d1ee      	bne.n	80028a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0f      	ldr	r2, [pc, #60]	; (800290c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028d4:	f7fe fa9e 	bl	8000e14 <HAL_GetTick>
 80028d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028da:	e009      	b.n	80028f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028dc:	f7fe fa9a 	bl	8000e14 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ea:	d901      	bls.n	80028f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e007      	b.n	8002900 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028fc:	d1ee      	bne.n	80028dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40023800 	.word	0x40023800
 800290c:	40007000 	.word	0x40007000

08002910 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002918:	2300      	movs	r3, #0
 800291a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e291      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8087 	beq.w	8002a42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002934:	4b96      	ldr	r3, [pc, #600]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 030c 	and.w	r3, r3, #12
 800293c:	2b04      	cmp	r3, #4
 800293e:	d00c      	beq.n	800295a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002940:	4b93      	ldr	r3, [pc, #588]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 030c 	and.w	r3, r3, #12
 8002948:	2b08      	cmp	r3, #8
 800294a:	d112      	bne.n	8002972 <HAL_RCC_OscConfig+0x62>
 800294c:	4b90      	ldr	r3, [pc, #576]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002958:	d10b      	bne.n	8002972 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295a:	4b8d      	ldr	r3, [pc, #564]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d06c      	beq.n	8002a40 <HAL_RCC_OscConfig+0x130>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d168      	bne.n	8002a40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e26b      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800297a:	d106      	bne.n	800298a <HAL_RCC_OscConfig+0x7a>
 800297c:	4b84      	ldr	r3, [pc, #528]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a83      	ldr	r2, [pc, #524]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	e02e      	b.n	80029e8 <HAL_RCC_OscConfig+0xd8>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0x9c>
 8002992:	4b7f      	ldr	r3, [pc, #508]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a7e      	ldr	r2, [pc, #504]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b7c      	ldr	r3, [pc, #496]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a7b      	ldr	r2, [pc, #492]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e01d      	b.n	80029e8 <HAL_RCC_OscConfig+0xd8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0xc0>
 80029b6:	4b76      	ldr	r3, [pc, #472]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a75      	ldr	r2, [pc, #468]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b73      	ldr	r3, [pc, #460]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a72      	ldr	r2, [pc, #456]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e00b      	b.n	80029e8 <HAL_RCC_OscConfig+0xd8>
 80029d0:	4b6f      	ldr	r3, [pc, #444]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a6e      	ldr	r2, [pc, #440]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	4b6c      	ldr	r3, [pc, #432]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a6b      	ldr	r2, [pc, #428]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d013      	beq.n	8002a18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe fa10 	bl	8000e14 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f8:	f7fe fa0c 	bl	8000e14 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e21f      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	4b61      	ldr	r3, [pc, #388]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0xe8>
 8002a16:	e014      	b.n	8002a42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7fe f9fc 	bl	8000e14 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a20:	f7fe f9f8 	bl	8000e14 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e20b      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a32:	4b57      	ldr	r3, [pc, #348]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x110>
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d069      	beq.n	8002b22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a4e:	4b50      	ldr	r3, [pc, #320]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a5a:	4b4d      	ldr	r3, [pc, #308]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d11c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x190>
 8002a66:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d116      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a72:	4b47      	ldr	r3, [pc, #284]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_RCC_OscConfig+0x17a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e1df      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8a:	4b41      	ldr	r3, [pc, #260]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	493d      	ldr	r1, [pc, #244]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9e:	e040      	b.n	8002b22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d023      	beq.n	8002af0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa8:	4b39      	ldr	r3, [pc, #228]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a38      	ldr	r2, [pc, #224]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7fe f9ae 	bl	8000e14 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002abc:	f7fe f9aa 	bl	8000e14 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1bd      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ace:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ada:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4929      	ldr	r1, [pc, #164]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]
 8002aee:	e018      	b.n	8002b22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af0:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7fe f98a 	bl	8000e14 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b04:	f7fe f986 	bl	8000e14 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e199      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b16:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d038      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d019      	beq.n	8002b6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b36:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3a:	4a15      	ldr	r2, [pc, #84]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7fe f967 	bl	8000e14 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4a:	f7fe f963 	bl	8000e14 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e176      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x23a>
 8002b68:	e01a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6e:	4a08      	ldr	r2, [pc, #32]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b76:	f7fe f94d 	bl	8000e14 <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b7e:	f7fe f949 	bl	8000e14 <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d903      	bls.n	8002b94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e15c      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
 8002b90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b94:	4b91      	ldr	r3, [pc, #580]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1ee      	bne.n	8002b7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80a4 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bae:	4b8b      	ldr	r3, [pc, #556]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10d      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bba:	4b88      	ldr	r3, [pc, #544]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	4a87      	ldr	r2, [pc, #540]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc6:	4b85      	ldr	r3, [pc, #532]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd6:	4b82      	ldr	r3, [pc, #520]	; (8002de0 <HAL_RCC_OscConfig+0x4d0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d118      	bne.n	8002c14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002be2:	4b7f      	ldr	r3, [pc, #508]	; (8002de0 <HAL_RCC_OscConfig+0x4d0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a7e      	ldr	r2, [pc, #504]	; (8002de0 <HAL_RCC_OscConfig+0x4d0>)
 8002be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bee:	f7fe f911 	bl	8000e14 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf6:	f7fe f90d 	bl	8000e14 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b64      	cmp	r3, #100	; 0x64
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e120      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c08:	4b75      	ldr	r3, [pc, #468]	; (8002de0 <HAL_RCC_OscConfig+0x4d0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCC_OscConfig+0x31a>
 8002c1c:	4b6f      	ldr	r3, [pc, #444]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	4a6e      	ldr	r2, [pc, #440]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6713      	str	r3, [r2, #112]	; 0x70
 8002c28:	e02d      	b.n	8002c86 <HAL_RCC_OscConfig+0x376>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x33c>
 8002c32:	4b6a      	ldr	r3, [pc, #424]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a69      	ldr	r2, [pc, #420]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3e:	4b67      	ldr	r3, [pc, #412]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a66      	ldr	r2, [pc, #408]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c44:	f023 0304 	bic.w	r3, r3, #4
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4a:	e01c      	b.n	8002c86 <HAL_RCC_OscConfig+0x376>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b05      	cmp	r3, #5
 8002c52:	d10c      	bne.n	8002c6e <HAL_RCC_OscConfig+0x35e>
 8002c54:	4b61      	ldr	r3, [pc, #388]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	4a60      	ldr	r2, [pc, #384]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c5a:	f043 0304 	orr.w	r3, r3, #4
 8002c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c60:	4b5e      	ldr	r3, [pc, #376]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c64:	4a5d      	ldr	r2, [pc, #372]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6c:	e00b      	b.n	8002c86 <HAL_RCC_OscConfig+0x376>
 8002c6e:	4b5b      	ldr	r3, [pc, #364]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	4a5a      	ldr	r2, [pc, #360]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7a:	4b58      	ldr	r3, [pc, #352]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	4a57      	ldr	r2, [pc, #348]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c80:	f023 0304 	bic.w	r3, r3, #4
 8002c84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d015      	beq.n	8002cba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8e:	f7fe f8c1 	bl	8000e14 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c94:	e00a      	b.n	8002cac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f7fe f8bd 	bl	8000e14 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e0ce      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cac:	4b4b      	ldr	r3, [pc, #300]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0ee      	beq.n	8002c96 <HAL_RCC_OscConfig+0x386>
 8002cb8:	e014      	b.n	8002ce4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cba:	f7fe f8ab 	bl	8000e14 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f7fe f8a7 	bl	8000e14 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e0b8      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd8:	4b40      	ldr	r3, [pc, #256]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1ee      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d105      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cea:	4b3c      	ldr	r3, [pc, #240]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	4a3b      	ldr	r2, [pc, #236]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80a4 	beq.w	8002e48 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d00:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d06b      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d149      	bne.n	8002da8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d14:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a30      	ldr	r2, [pc, #192]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe f878 	bl	8000e14 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d28:	f7fe f874 	bl	8000e14 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e087      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3a:	4b28      	ldr	r3, [pc, #160]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69da      	ldr	r2, [r3, #28]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	019b      	lsls	r3, r3, #6
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	041b      	lsls	r3, r3, #16
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	061b      	lsls	r3, r3, #24
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	4a1b      	ldr	r2, [pc, #108]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe f848 	bl	8000e14 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fe f844 	bl	8000e14 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e057      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x478>
 8002da6:	e04f      	b.n	8002e48 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0b      	ldr	r2, [pc, #44]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fe f82e 	bl	8000e14 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fe f82a 	bl	8000e14 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e03d      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dce:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4ac>
 8002dda:	e035      	b.n	8002e48 <HAL_RCC_OscConfig+0x538>
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002de4:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <HAL_RCC_OscConfig+0x544>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d028      	beq.n	8002e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d121      	bne.n	8002e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d11a      	bne.n	8002e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e14:	4013      	ands	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d111      	bne.n	8002e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2a:	085b      	lsrs	r3, r3, #1
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d107      	bne.n	8002e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800

08002e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0d0      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e70:	4b6a      	ldr	r3, [pc, #424]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d910      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b67      	ldr	r3, [pc, #412]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 020f 	bic.w	r2, r3, #15
 8002e86:	4965      	ldr	r1, [pc, #404]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b63      	ldr	r3, [pc, #396]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0b8      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d020      	beq.n	8002eee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb8:	4b59      	ldr	r3, [pc, #356]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4a58      	ldr	r2, [pc, #352]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ec2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed0:	4b53      	ldr	r3, [pc, #332]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	4a52      	ldr	r2, [pc, #328]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002edc:	4b50      	ldr	r3, [pc, #320]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	494d      	ldr	r1, [pc, #308]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d040      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d107      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f02:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d115      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e07f      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d107      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1a:	4b41      	ldr	r3, [pc, #260]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e073      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e06b      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3a:	4b39      	ldr	r3, [pc, #228]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f023 0203 	bic.w	r2, r3, #3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4936      	ldr	r1, [pc, #216]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f4c:	f7fd ff62 	bl	8000e14 <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f52:	e00a      	b.n	8002f6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f54:	f7fd ff5e 	bl	8000e14 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e053      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	4b2d      	ldr	r3, [pc, #180]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 020c 	and.w	r2, r3, #12
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d1eb      	bne.n	8002f54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b27      	ldr	r3, [pc, #156]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d210      	bcs.n	8002fac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b24      	ldr	r3, [pc, #144]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 020f 	bic.w	r2, r3, #15
 8002f92:	4922      	ldr	r1, [pc, #136]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e032      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4916      	ldr	r1, [pc, #88]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d009      	beq.n	8002fea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fd6:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	490e      	ldr	r1, [pc, #56]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fea:	f000 f821 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	490a      	ldr	r1, [pc, #40]	; (8003024 <HAL_RCC_ClockConfig+0x1cc>)
 8002ffc:	5ccb      	ldrb	r3, [r1, r3]
 8002ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8003002:	4a09      	ldr	r2, [pc, #36]	; (8003028 <HAL_RCC_ClockConfig+0x1d0>)
 8003004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1d4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd febe 	bl	8000d8c <HAL_InitTick>

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023c00 	.word	0x40023c00
 8003020:	40023800 	.word	0x40023800
 8003024:	0801e62c 	.word	0x0801e62c
 8003028:	20000000 	.word	0x20000000
 800302c:	20000004 	.word	0x20000004

08003030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003030:	b5b0      	push	{r4, r5, r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003036:	2100      	movs	r1, #0
 8003038:	6079      	str	r1, [r7, #4]
 800303a:	2100      	movs	r1, #0
 800303c:	60f9      	str	r1, [r7, #12]
 800303e:	2100      	movs	r1, #0
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003042:	2100      	movs	r1, #0
 8003044:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003046:	4952      	ldr	r1, [pc, #328]	; (8003190 <HAL_RCC_GetSysClockFreq+0x160>)
 8003048:	6889      	ldr	r1, [r1, #8]
 800304a:	f001 010c 	and.w	r1, r1, #12
 800304e:	2908      	cmp	r1, #8
 8003050:	d00d      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x3e>
 8003052:	2908      	cmp	r1, #8
 8003054:	f200 8094 	bhi.w	8003180 <HAL_RCC_GetSysClockFreq+0x150>
 8003058:	2900      	cmp	r1, #0
 800305a:	d002      	beq.n	8003062 <HAL_RCC_GetSysClockFreq+0x32>
 800305c:	2904      	cmp	r1, #4
 800305e:	d003      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x38>
 8003060:	e08e      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003062:	4b4c      	ldr	r3, [pc, #304]	; (8003194 <HAL_RCC_GetSysClockFreq+0x164>)
 8003064:	60bb      	str	r3, [r7, #8]
      break;
 8003066:	e08e      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003068:	4b4b      	ldr	r3, [pc, #300]	; (8003198 <HAL_RCC_GetSysClockFreq+0x168>)
 800306a:	60bb      	str	r3, [r7, #8]
      break;
 800306c:	e08b      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800306e:	4948      	ldr	r1, [pc, #288]	; (8003190 <HAL_RCC_GetSysClockFreq+0x160>)
 8003070:	6849      	ldr	r1, [r1, #4]
 8003072:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003076:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003078:	4945      	ldr	r1, [pc, #276]	; (8003190 <HAL_RCC_GetSysClockFreq+0x160>)
 800307a:	6849      	ldr	r1, [r1, #4]
 800307c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003080:	2900      	cmp	r1, #0
 8003082:	d024      	beq.n	80030ce <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003084:	4942      	ldr	r1, [pc, #264]	; (8003190 <HAL_RCC_GetSysClockFreq+0x160>)
 8003086:	6849      	ldr	r1, [r1, #4]
 8003088:	0989      	lsrs	r1, r1, #6
 800308a:	4608      	mov	r0, r1
 800308c:	f04f 0100 	mov.w	r1, #0
 8003090:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003094:	f04f 0500 	mov.w	r5, #0
 8003098:	ea00 0204 	and.w	r2, r0, r4
 800309c:	ea01 0305 	and.w	r3, r1, r5
 80030a0:	493d      	ldr	r1, [pc, #244]	; (8003198 <HAL_RCC_GetSysClockFreq+0x168>)
 80030a2:	fb01 f003 	mul.w	r0, r1, r3
 80030a6:	2100      	movs	r1, #0
 80030a8:	fb01 f102 	mul.w	r1, r1, r2
 80030ac:	1844      	adds	r4, r0, r1
 80030ae:	493a      	ldr	r1, [pc, #232]	; (8003198 <HAL_RCC_GetSysClockFreq+0x168>)
 80030b0:	fba2 0101 	umull	r0, r1, r2, r1
 80030b4:	1863      	adds	r3, r4, r1
 80030b6:	4619      	mov	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	f7fd f8f6 	bl	80002b0 <__aeabi_uldivmod>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4613      	mov	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e04a      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ce:	4b30      	ldr	r3, [pc, #192]	; (8003190 <HAL_RCC_GetSysClockFreq+0x160>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	099b      	lsrs	r3, r3, #6
 80030d4:	461a      	mov	r2, r3
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	ea02 0400 	and.w	r4, r2, r0
 80030e6:	ea03 0501 	and.w	r5, r3, r1
 80030ea:	4620      	mov	r0, r4
 80030ec:	4629      	mov	r1, r5
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	014b      	lsls	r3, r1, #5
 80030f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030fc:	0142      	lsls	r2, r0, #5
 80030fe:	4610      	mov	r0, r2
 8003100:	4619      	mov	r1, r3
 8003102:	1b00      	subs	r0, r0, r4
 8003104:	eb61 0105 	sbc.w	r1, r1, r5
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	018b      	lsls	r3, r1, #6
 8003112:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003116:	0182      	lsls	r2, r0, #6
 8003118:	1a12      	subs	r2, r2, r0
 800311a:	eb63 0301 	sbc.w	r3, r3, r1
 800311e:	f04f 0000 	mov.w	r0, #0
 8003122:	f04f 0100 	mov.w	r1, #0
 8003126:	00d9      	lsls	r1, r3, #3
 8003128:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800312c:	00d0      	lsls	r0, r2, #3
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	1912      	adds	r2, r2, r4
 8003134:	eb45 0303 	adc.w	r3, r5, r3
 8003138:	f04f 0000 	mov.w	r0, #0
 800313c:	f04f 0100 	mov.w	r1, #0
 8003140:	0299      	lsls	r1, r3, #10
 8003142:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003146:	0290      	lsls	r0, r2, #10
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	461a      	mov	r2, r3
 8003154:	f04f 0300 	mov.w	r3, #0
 8003158:	f7fd f8aa 	bl	80002b0 <__aeabi_uldivmod>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4613      	mov	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <HAL_RCC_GetSysClockFreq+0x160>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	0c1b      	lsrs	r3, r3, #16
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	3301      	adds	r3, #1
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	fbb2 f3f3 	udiv	r3, r2, r3
 800317c:	60bb      	str	r3, [r7, #8]
      break;
 800317e:	e002      	b.n	8003186 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <HAL_RCC_GetSysClockFreq+0x164>)
 8003182:	60bb      	str	r3, [r7, #8]
      break;
 8003184:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003186:	68bb      	ldr	r3, [r7, #8]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bdb0      	pop	{r4, r5, r7, pc}
 8003190:	40023800 	.word	0x40023800
 8003194:	00f42400 	.word	0x00f42400
 8003198:	017d7840 	.word	0x017d7840

0800319c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000000 	.word	0x20000000

080031b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031b8:	f7ff fff0 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	0a9b      	lsrs	r3, r3, #10
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	4903      	ldr	r1, [pc, #12]	; (80031d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ca:	5ccb      	ldrb	r3, [r1, r3]
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40023800 	.word	0x40023800
 80031d8:	0801e63c 	.word	0x0801e63c

080031dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031e0:	f7ff ffdc 	bl	800319c <HAL_RCC_GetHCLKFreq>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	0b5b      	lsrs	r3, r3, #13
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	4903      	ldr	r1, [pc, #12]	; (8003200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f2:	5ccb      	ldrb	r3, [r1, r3]
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40023800 	.word	0x40023800
 8003200:	0801e63c 	.word	0x0801e63c

08003204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d012      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800322c:	4b69      	ldr	r3, [pc, #420]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	4a68      	ldr	r2, [pc, #416]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003232:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003236:	6093      	str	r3, [r2, #8]
 8003238:	4b66      	ldr	r3, [pc, #408]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003240:	4964      	ldr	r1, [pc, #400]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800324e:	2301      	movs	r3, #1
 8003250:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d017      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800325e:	4b5d      	ldr	r3, [pc, #372]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003264:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326c:	4959      	ldr	r1, [pc, #356]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800327c:	d101      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800327e:	2301      	movs	r3, #1
 8003280:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800328a:	2301      	movs	r3, #1
 800328c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d017      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800329a:	4b4e      	ldr	r3, [pc, #312]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	494a      	ldr	r1, [pc, #296]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032b8:	d101      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80032ba:	2301      	movs	r3, #1
 80032bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80032c6:	2301      	movs	r3, #1
 80032c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80032d6:	2301      	movs	r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 808b 	beq.w	80033fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032e8:	4b3a      	ldr	r3, [pc, #232]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	4a39      	ldr	r2, [pc, #228]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f2:	6413      	str	r3, [r2, #64]	; 0x40
 80032f4:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fc:	60bb      	str	r3, [r7, #8]
 80032fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003300:	4b35      	ldr	r3, [pc, #212]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a34      	ldr	r2, [pc, #208]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330c:	f7fd fd82 	bl	8000e14 <HAL_GetTick>
 8003310:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003314:	f7fd fd7e 	bl	8000e14 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	; 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e357      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003326:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003332:	4b28      	ldr	r3, [pc, #160]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800333a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d035      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	429a      	cmp	r2, r3
 800334e:	d02e      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003358:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800335a:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003364:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003366:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	4a1a      	ldr	r2, [pc, #104]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800336c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003370:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003372:	4a18      	ldr	r2, [pc, #96]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003378:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b01      	cmp	r3, #1
 8003382:	d114      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fd fd46 	bl	8000e14 <HAL_GetTick>
 8003388:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338a:	e00a      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800338c:	f7fd fd42 	bl	8000e14 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	; 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e319      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a2:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0ee      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ba:	d111      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033ca:	400b      	ands	r3, r1
 80033cc:	4901      	ldr	r1, [pc, #4]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
 80033d2:	e00b      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40007000 	.word	0x40007000
 80033dc:	0ffffcff 	.word	0x0ffffcff
 80033e0:	4bb1      	ldr	r3, [pc, #708]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	4ab0      	ldr	r2, [pc, #704]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033ea:	6093      	str	r3, [r2, #8]
 80033ec:	4bae      	ldr	r3, [pc, #696]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f8:	49ab      	ldr	r1, [pc, #684]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	d010      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800340a:	4ba7      	ldr	r3, [pc, #668]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800340c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003410:	4aa5      	ldr	r2, [pc, #660]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003416:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800341a:	4ba3      	ldr	r3, [pc, #652]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800341c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003424:	49a0      	ldr	r1, [pc, #640]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003438:	4b9b      	ldr	r3, [pc, #620]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800343a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800343e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003446:	4998      	ldr	r1, [pc, #608]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00a      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800345a:	4b93      	ldr	r3, [pc, #588]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003468:	498f      	ldr	r1, [pc, #572]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800347c:	4b8a      	ldr	r3, [pc, #552]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800348a:	4987      	ldr	r1, [pc, #540]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800349e:	4b82      	ldr	r3, [pc, #520]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	497e      	ldr	r1, [pc, #504]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034c0:	4b79      	ldr	r3, [pc, #484]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f023 0203 	bic.w	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	4976      	ldr	r1, [pc, #472]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034e2:	4b71      	ldr	r3, [pc, #452]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	f023 020c 	bic.w	r2, r3, #12
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034f0:	496d      	ldr	r1, [pc, #436]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003504:	4b68      	ldr	r3, [pc, #416]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003512:	4965      	ldr	r1, [pc, #404]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003526:	4b60      	ldr	r3, [pc, #384]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003534:	495c      	ldr	r1, [pc, #368]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003548:	4b57      	ldr	r3, [pc, #348]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800354a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003556:	4954      	ldr	r1, [pc, #336]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800356a:	4b4f      	ldr	r3, [pc, #316]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800356c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003570:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	494b      	ldr	r1, [pc, #300]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800358c:	4b46      	ldr	r3, [pc, #280]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003592:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359a:	4943      	ldr	r1, [pc, #268]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035ae:	4b3e      	ldr	r3, [pc, #248]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035bc:	493a      	ldr	r1, [pc, #232]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035d0:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035de:	4932      	ldr	r1, [pc, #200]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d011      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80035f2:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003600:	4929      	ldr	r1, [pc, #164]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800360c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003610:	d101      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003612:	2301      	movs	r3, #1
 8003614:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003622:	2301      	movs	r3, #1
 8003624:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003632:	4b1d      	ldr	r3, [pc, #116]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003638:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003640:	4919      	ldr	r1, [pc, #100]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00b      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003654:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003664:	4910      	ldr	r1, [pc, #64]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d006      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80d9 	beq.w	8003832 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003680:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003686:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800368a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800368c:	f7fd fbc2 	bl	8000e14 <HAL_GetTick>
 8003690:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003692:	e00b      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003694:	f7fd fbbe 	bl	8000e14 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	; 0x64
 80036a0:	d904      	bls.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e197      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036ac:	4b6c      	ldr	r3, [pc, #432]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1ed      	bne.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d021      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d11d      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80036cc:	4b64      	ldr	r3, [pc, #400]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036d2:	0c1b      	lsrs	r3, r3, #16
 80036d4:	f003 0303 	and.w	r3, r3, #3
 80036d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036da:	4b61      	ldr	r3, [pc, #388]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e0:	0e1b      	lsrs	r3, r3, #24
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	019a      	lsls	r2, r3, #6
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	041b      	lsls	r3, r3, #16
 80036f2:	431a      	orrs	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	061b      	lsls	r3, r3, #24
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	071b      	lsls	r3, r3, #28
 8003700:	4957      	ldr	r1, [pc, #348]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003702:	4313      	orrs	r3, r2
 8003704:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003726:	2b00      	cmp	r3, #0
 8003728:	d02e      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003732:	d129      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003734:	4b4a      	ldr	r3, [pc, #296]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800373a:	0c1b      	lsrs	r3, r3, #16
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003742:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003744:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003748:	0f1b      	lsrs	r3, r3, #28
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	019a      	lsls	r2, r3, #6
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	041b      	lsls	r3, r3, #16
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	061b      	lsls	r3, r3, #24
 8003762:	431a      	orrs	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	071b      	lsls	r3, r3, #28
 8003768:	493d      	ldr	r1, [pc, #244]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800376a:	4313      	orrs	r3, r2
 800376c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003770:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003776:	f023 021f 	bic.w	r2, r3, #31
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	3b01      	subs	r3, #1
 8003780:	4937      	ldr	r1, [pc, #220]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d01d      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003794:	4b32      	ldr	r3, [pc, #200]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800379a:	0e1b      	lsrs	r3, r3, #24
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037a2:	4b2f      	ldr	r3, [pc, #188]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037a8:	0f1b      	lsrs	r3, r3, #28
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	019a      	lsls	r2, r3, #6
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	041b      	lsls	r3, r3, #16
 80037bc:	431a      	orrs	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	061b      	lsls	r3, r3, #24
 80037c2:	431a      	orrs	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	071b      	lsls	r3, r3, #28
 80037c8:	4925      	ldr	r1, [pc, #148]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d011      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	019a      	lsls	r2, r3, #6
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	041b      	lsls	r3, r3, #16
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	061b      	lsls	r3, r3, #24
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	071b      	lsls	r3, r3, #28
 80037f8:	4919      	ldr	r1, [pc, #100]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003800:	4b17      	ldr	r3, [pc, #92]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a16      	ldr	r2, [pc, #88]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800380a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380c:	f7fd fb02 	bl	8000e14 <HAL_GetTick>
 8003810:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003814:	f7fd fafe 	bl	8000e14 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e0d7      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003826:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b01      	cmp	r3, #1
 8003836:	f040 80cd 	bne.w	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a08      	ldr	r2, [pc, #32]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003844:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003846:	f7fd fae5 	bl	8000e14 <HAL_GetTick>
 800384a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800384c:	e00a      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800384e:	f7fd fae1 	bl	8000e14 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b64      	cmp	r3, #100	; 0x64
 800385a:	d903      	bls.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e0ba      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003860:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003864:	4b5e      	ldr	r3, [pc, #376]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800386c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003870:	d0ed      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d009      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800388e:	2b00      	cmp	r3, #0
 8003890:	d02e      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d12a      	bne.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800389a:	4b51      	ldr	r3, [pc, #324]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038a8:	4b4d      	ldr	r3, [pc, #308]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ae:	0f1b      	lsrs	r3, r3, #28
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	019a      	lsls	r2, r3, #6
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	041b      	lsls	r3, r3, #16
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	061b      	lsls	r3, r3, #24
 80038c8:	431a      	orrs	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	071b      	lsls	r3, r3, #28
 80038ce:	4944      	ldr	r1, [pc, #272]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80038d6:	4b42      	ldr	r3, [pc, #264]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	3b01      	subs	r3, #1
 80038e6:	021b      	lsls	r3, r3, #8
 80038e8:	493d      	ldr	r1, [pc, #244]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d022      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003900:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003904:	d11d      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003906:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	0e1b      	lsrs	r3, r3, #24
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003914:	4b32      	ldr	r3, [pc, #200]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391a:	0f1b      	lsrs	r3, r3, #28
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	019a      	lsls	r2, r3, #6
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	041b      	lsls	r3, r3, #16
 800392e:	431a      	orrs	r2, r3
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	061b      	lsls	r3, r3, #24
 8003934:	431a      	orrs	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	071b      	lsls	r3, r3, #28
 800393a:	4929      	ldr	r1, [pc, #164]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800393c:	4313      	orrs	r3, r2
 800393e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d028      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800394e:	4b24      	ldr	r3, [pc, #144]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003954:	0e1b      	lsrs	r3, r3, #24
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800395c:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	0c1b      	lsrs	r3, r3, #16
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	019a      	lsls	r2, r3, #6
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	041b      	lsls	r3, r3, #16
 8003974:	431a      	orrs	r2, r3
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	061b      	lsls	r3, r3, #24
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	071b      	lsls	r3, r3, #28
 8003982:	4917      	ldr	r1, [pc, #92]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003984:	4313      	orrs	r3, r2
 8003986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800398a:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800398c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	4911      	ldr	r1, [pc, #68]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039a0:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a0e      	ldr	r2, [pc, #56]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ac:	f7fd fa32 	bl	8000e14 <HAL_GetTick>
 80039b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039b4:	f7fd fa2e 	bl	8000e14 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e007      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039d2:	d1ef      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800

080039e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e040      	b.n	8003a78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fc ff70 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2224      	movs	r2, #36	; 0x24
 8003a10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0201 	bic.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fd50 	bl	80044c8 <UART_SetConfig>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e022      	b.n	8003a78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 ffa6 	bl	800498c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f001 f82d 	bl	8004ad0 <UART_CheckIdleState>
 8003a76:	4603      	mov	r3, r0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b08b      	sub	sp, #44	; 0x2c
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	d156      	bne.n	8003b44 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <HAL_UART_Transmit_IT+0x22>
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e04f      	b.n	8003b46 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_UART_Transmit_IT+0x34>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e048      	b.n	8003b46 <HAL_UART_Transmit_IT+0xc6>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	88fa      	ldrh	r2, [r7, #6]
 8003ac6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	88fa      	ldrh	r2, [r7, #6]
 8003ace:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2221      	movs	r2, #33	; 0x21
 8003ae4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aee:	d107      	bne.n	8003b00 <HAL_UART_Transmit_IT+0x80>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	691b      	ldr	r3, [r3, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d103      	bne.n	8003b00 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a16      	ldr	r2, [pc, #88]	; (8003b54 <HAL_UART_Transmit_IT+0xd4>)
 8003afc:	669a      	str	r2, [r3, #104]	; 0x68
 8003afe:	e002      	b.n	8003b06 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a15      	ldr	r2, [pc, #84]	; (8003b58 <HAL_UART_Transmit_IT+0xd8>)
 8003b04:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	e853 3f00 	ldrex	r3, [r3]
 8003b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	623b      	str	r3, [r7, #32]
 8003b2e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b30:	69f9      	ldr	r1, [r7, #28]
 8003b32:	6a3a      	ldr	r2, [r7, #32]
 8003b34:	e841 2300 	strex	r3, r2, [r1]
 8003b38:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1e6      	bne.n	8003b0e <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	e000      	b.n	8003b46 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003b44:	2302      	movs	r3, #2
  }
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	372c      	adds	r7, #44	; 0x2c
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	08005045 	.word	0x08005045
 8003b58:	08004f8f 	.word	0x08004f8f

08003b5c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08a      	sub	sp, #40	; 0x28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	4613      	mov	r3, r2
 8003b68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d13d      	bne.n	8003bee <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_UART_Receive_IT+0x22>
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e036      	b.n	8003bf0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_UART_Receive_IT+0x34>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e02f      	b.n	8003bf0 <HAL_UART_Receive_IT+0x94>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d018      	beq.n	8003bde <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	623b      	str	r3, [r7, #32]
 8003bcc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	69f9      	ldr	r1, [r7, #28]
 8003bd0:	6a3a      	ldr	r2, [r7, #32]
 8003bd2:	e841 2300 	strex	r3, r2, [r1]
 8003bd6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e6      	bne.n	8003bac <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bde:	88fb      	ldrh	r3, [r7, #6]
 8003be0:	461a      	mov	r2, r3
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f001 f86b 	bl	8004cc0 <UART_Start_Receive_IT>
 8003bea:	4603      	mov	r3, r0
 8003bec:	e000      	b.n	8003bf0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
  }
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3728      	adds	r7, #40	; 0x28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b09a      	sub	sp, #104	; 0x68
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c14:	667b      	str	r3, [r7, #100]	; 0x64
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c1e:	657b      	str	r3, [r7, #84]	; 0x54
 8003c20:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003c24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e6      	bne.n	8003c00 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3308      	adds	r3, #8
 8003c38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c44:	f023 0301 	bic.w	r3, r3, #1
 8003c48:	663b      	str	r3, [r7, #96]	; 0x60
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3308      	adds	r3, #8
 8003c50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c52:	643a      	str	r2, [r7, #64]	; 0x40
 8003c54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e5      	bne.n	8003c32 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d118      	bne.n	8003ca0 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	6a3b      	ldr	r3, [r7, #32]
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f023 0310 	bic.w	r3, r3, #16
 8003c82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c8e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c94:	e841 2300 	strex	r3, r2, [r1]
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e6      	bne.n	8003c6e <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003caa:	2b40      	cmp	r3, #64	; 0x40
 8003cac:	d14e      	bne.n	8003d4c <HAL_UART_AbortReceive_IT+0x154>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3308      	adds	r3, #8
 8003cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3308      	adds	r3, #8
 8003ccc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cce:	61ba      	str	r2, [r7, #24]
 8003cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd2:	6979      	ldr	r1, [r7, #20]
 8003cd4:	69ba      	ldr	r2, [r7, #24]
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	613b      	str	r3, [r7, #16]
   return(result);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1e5      	bne.n	8003cae <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d013      	beq.n	8003d12 <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	4a24      	ldr	r2, [pc, #144]	; (8003d80 <HAL_UART_AbortReceive_IT+0x188>)
 8003cf0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd fa3d 	bl	8001176 <HAL_DMA_Abort_IT>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d038      	beq.n	8003d74 <HAL_UART_AbortReceive_IT+0x17c>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4798      	blx	r3
 8003d10:	e030      	b.n	8003d74 <HAL_UART_AbortReceive_IT+0x17c>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	220f      	movs	r2, #15
 8003d26:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0208 	orr.w	r2, r2, #8
 8003d36:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	67da      	str	r2, [r3, #124]	; 0x7c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 faf1 	bl	800432c <HAL_UART_AbortReceiveCpltCallback>
 8003d4a:	e013      	b.n	8003d74 <HAL_UART_AbortReceive_IT+0x17c>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	220f      	movs	r2, #15
 8003d60:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 fadc 	bl	800432c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3768      	adds	r7, #104	; 0x68
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	08004f47 	.word	0x08004f47

08003d84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b0ba      	sub	sp, #232	; 0xe8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003daa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003dae:	f640 030f 	movw	r3, #2063	; 0x80f
 8003db2:	4013      	ands	r3, r2
 8003db4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003db8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d115      	bne.n	8003dec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00f      	beq.n	8003dec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d009      	beq.n	8003dec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 828f 	beq.w	8004300 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	4798      	blx	r3
      }
      return;
 8003dea:	e289      	b.n	8004300 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8117 	beq.w	8004024 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e06:	4b85      	ldr	r3, [pc, #532]	; (800401c <HAL_UART_IRQHandler+0x298>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 810a 	beq.w	8004024 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d011      	beq.n	8003e40 <HAL_UART_IRQHandler+0xbc>
 8003e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00b      	beq.n	8003e40 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e36:	f043 0201 	orr.w	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d011      	beq.n	8003e70 <HAL_UART_IRQHandler+0xec>
 8003e4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00b      	beq.n	8003e70 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e66:	f043 0204 	orr.w	r2, r3, #4
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d011      	beq.n	8003ea0 <HAL_UART_IRQHandler+0x11c>
 8003e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00b      	beq.n	8003ea0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e96:	f043 0202 	orr.w	r2, r3, #2
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d017      	beq.n	8003edc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb0:	f003 0320 	and.w	r3, r3, #32
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d105      	bne.n	8003ec4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ebc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00b      	beq.n	8003edc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2208      	movs	r2, #8
 8003eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed2:	f043 0208 	orr.w	r2, r3, #8
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d012      	beq.n	8003f0e <HAL_UART_IRQHandler+0x18a>
 8003ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00c      	beq.n	8003f0e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003efc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f04:	f043 0220 	orr.w	r2, r3, #32
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 81f5 	beq.w	8004304 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d007      	beq.n	8003f42 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f56:	2b40      	cmp	r3, #64	; 0x40
 8003f58:	d005      	beq.n	8003f66 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d04f      	beq.n	8004006 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 ff74 	bl	8004e54 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f76:	2b40      	cmp	r3, #64	; 0x40
 8003f78:	d141      	bne.n	8003ffe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3308      	adds	r3, #8
 8003f80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f88:	e853 3f00 	ldrex	r3, [r3]
 8003f8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003fa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003fb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003fb6:	e841 2300 	strex	r3, r2, [r1]
 8003fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003fbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1d9      	bne.n	8003f7a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d013      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	4a13      	ldr	r2, [pc, #76]	; (8004020 <HAL_UART_IRQHandler+0x29c>)
 8003fd4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fd f8cb 	bl	8001176 <HAL_DMA_Abort_IT>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d017      	beq.n	8004016 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ff4:	e00f      	b.n	8004016 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f98e 	bl	8004318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ffc:	e00b      	b.n	8004016 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f98a 	bl	8004318 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004004:	e007      	b.n	8004016 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f986 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004014:	e176      	b.n	8004304 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004016:	bf00      	nop
    return;
 8004018:	e174      	b.n	8004304 <HAL_UART_IRQHandler+0x580>
 800401a:	bf00      	nop
 800401c:	04000120 	.word	0x04000120
 8004020:	08004f1b 	.word	0x08004f1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004028:	2b01      	cmp	r3, #1
 800402a:	f040 8144 	bne.w	80042b6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800402e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 813d 	beq.w	80042b6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800403c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 8136 	beq.w	80042b6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2210      	movs	r2, #16
 8004050:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b40      	cmp	r3, #64	; 0x40
 800405e:	f040 80b2 	bne.w	80041c6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800406e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8148 	beq.w	8004308 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800407e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004082:	429a      	cmp	r2, r3
 8004084:	f080 8140 	bcs.w	8004308 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800408e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800409c:	f000 8085 	beq.w	80041aa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80040b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80040ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80040ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80040d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80040e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1da      	bne.n	80040a0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3308      	adds	r3, #8
 80040f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040fc:	f023 0301 	bic.w	r3, r3, #1
 8004100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3308      	adds	r3, #8
 800410a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800410e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004112:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004116:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004120:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1e1      	bne.n	80040ea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3308      	adds	r3, #8
 800412c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004130:	e853 3f00 	ldrex	r3, [r3]
 8004134:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800413c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3308      	adds	r3, #8
 8004146:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800414a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800414c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004150:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004158:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e3      	bne.n	8004126 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2220      	movs	r2, #32
 8004162:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004172:	e853 3f00 	ldrex	r3, [r3]
 8004176:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800417a:	f023 0310 	bic.w	r3, r3, #16
 800417e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800418c:	65bb      	str	r3, [r7, #88]	; 0x58
 800418e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004192:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800419a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e4      	bne.n	800416a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fc ff76 	bl	8001096 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	4619      	mov	r1, r3
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f8be 	bl	8004340 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041c4:	e0a0      	b.n	8004308 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f000 8092 	beq.w	800430c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80041e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 808d 	beq.w	800430c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	e853 3f00 	ldrex	r3, [r3]
 80041fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004202:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004206:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004214:	647b      	str	r3, [r7, #68]	; 0x44
 8004216:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800421a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800421c:	e841 2300 	strex	r3, r2, [r1]
 8004220:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e4      	bne.n	80041f2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3308      	adds	r3, #8
 800422e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	623b      	str	r3, [r7, #32]
   return(result);
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3308      	adds	r3, #8
 8004248:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800424c:	633a      	str	r2, [r7, #48]	; 0x30
 800424e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004254:	e841 2300 	strex	r3, r2, [r1]
 8004258:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e3      	bne.n	8004228 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0310 	bic.w	r3, r3, #16
 8004286:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	69b9      	ldr	r1, [r7, #24]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	617b      	str	r3, [r7, #20]
   return(result);
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e4      	bne.n	8004272 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042ac:	4619      	mov	r1, r3
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f846 	bl	8004340 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042b4:	e02a      	b.n	800430c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80042b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00e      	beq.n	80042e0 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80042c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d008      	beq.n	80042e0 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d01c      	beq.n	8004310 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	4798      	blx	r3
    }
    return;
 80042de:	e017      	b.n	8004310 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80042e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d012      	beq.n	8004312 <HAL_UART_IRQHandler+0x58e>
 80042ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00c      	beq.n	8004312 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 ff03 	bl	8005104 <UART_EndTransmit_IT>
    return;
 80042fe:	e008      	b.n	8004312 <HAL_UART_IRQHandler+0x58e>
      return;
 8004300:	bf00      	nop
 8004302:	e006      	b.n	8004312 <HAL_UART_IRQHandler+0x58e>
    return;
 8004304:	bf00      	nop
 8004306:	e004      	b.n	8004312 <HAL_UART_IRQHandler+0x58e>
      return;
 8004308:	bf00      	nop
 800430a:	e002      	b.n	8004312 <HAL_UART_IRQHandler+0x58e>
      return;
 800430c:	bf00      	nop
 800430e:	e000      	b.n	8004312 <HAL_UART_IRQHandler+0x58e>
    return;
 8004310:	bf00      	nop
  }

}
 8004312:	37e8      	adds	r7, #232	; 0xe8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004334:	bf00      	nop
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8004358:	b480      	push	{r7}
 800435a:	b08f      	sub	sp, #60	; 0x3c
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_HalfDuplex_EnableTransmitter+0x16>
 800436a:	2302      	movs	r3, #2
 800436c:	e040      	b.n	80043f0 <HAL_HalfDuplex_EnableTransmitter+0x98>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2224      	movs	r2, #36	; 0x24
 800437a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	61fb      	str	r3, [r7, #28]
   return(result);
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f023 030c 	bic.w	r3, r3, #12
 8004390:	637b      	str	r3, [r7, #52]	; 0x34
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800439c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1e6      	bne.n	800437c <HAL_HalfDuplex_EnableTransmitter+0x24>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f043 0308 	orr.w	r3, r3, #8
 80043c2:	633b      	str	r3, [r7, #48]	; 0x30
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	461a      	mov	r2, r3
 80043ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d0:	6979      	ldr	r1, [r7, #20]
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	e841 2300 	strex	r3, r2, [r1]
 80043d8:	613b      	str	r3, [r7, #16]
   return(result);
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1e6      	bne.n	80043ae <HAL_HalfDuplex_EnableTransmitter+0x56>

  huart->gState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	373c      	adds	r7, #60	; 0x3c
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b08f      	sub	sp, #60	; 0x3c
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_HalfDuplex_EnableReceiver+0x16>
 800440e:	2302      	movs	r3, #2
 8004410:	e040      	b.n	8004494 <HAL_HalfDuplex_EnableReceiver+0x98>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  huart->gState = HAL_UART_STATE_BUSY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2224      	movs	r2, #36	; 0x24
 800441e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	61fb      	str	r3, [r7, #28]
   return(result);
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	f023 030c 	bic.w	r3, r3, #12
 8004434:	637b      	str	r3, [r7, #52]	; 0x34
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004440:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004446:	e841 2300 	strex	r3, r2, [r1]
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1e6      	bne.n	8004420 <HAL_HalfDuplex_EnableReceiver+0x24>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f043 0304 	orr.w	r3, r3, #4
 8004466:	633b      	str	r3, [r7, #48]	; 0x30
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6979      	ldr	r1, [r7, #20]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	613b      	str	r3, [r7, #16]
   return(result);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e6      	bne.n	8004452 <HAL_HalfDuplex_EnableReceiver+0x56>

  huart->gState = HAL_UART_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	373c      	adds	r7, #60	; 0x3c
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ac:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044b2:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4313      	orrs	r3, r2
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	4ba7      	ldr	r3, [pc, #668]	; (8004790 <UART_SetConfig+0x2c8>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	6979      	ldr	r1, [r7, #20]
 80044fc:	430b      	orrs	r3, r1
 80044fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	430a      	orrs	r2, r1
 8004538:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a95      	ldr	r2, [pc, #596]	; (8004794 <UART_SetConfig+0x2cc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d120      	bne.n	8004586 <UART_SetConfig+0xbe>
 8004544:	4b94      	ldr	r3, [pc, #592]	; (8004798 <UART_SetConfig+0x2d0>)
 8004546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b03      	cmp	r3, #3
 8004550:	d816      	bhi.n	8004580 <UART_SetConfig+0xb8>
 8004552:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <UART_SetConfig+0x90>)
 8004554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004558:	08004569 	.word	0x08004569
 800455c:	08004575 	.word	0x08004575
 8004560:	0800456f 	.word	0x0800456f
 8004564:	0800457b 	.word	0x0800457b
 8004568:	2301      	movs	r3, #1
 800456a:	77fb      	strb	r3, [r7, #31]
 800456c:	e14f      	b.n	800480e <UART_SetConfig+0x346>
 800456e:	2302      	movs	r3, #2
 8004570:	77fb      	strb	r3, [r7, #31]
 8004572:	e14c      	b.n	800480e <UART_SetConfig+0x346>
 8004574:	2304      	movs	r3, #4
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e149      	b.n	800480e <UART_SetConfig+0x346>
 800457a:	2308      	movs	r3, #8
 800457c:	77fb      	strb	r3, [r7, #31]
 800457e:	e146      	b.n	800480e <UART_SetConfig+0x346>
 8004580:	2310      	movs	r3, #16
 8004582:	77fb      	strb	r3, [r7, #31]
 8004584:	e143      	b.n	800480e <UART_SetConfig+0x346>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a84      	ldr	r2, [pc, #528]	; (800479c <UART_SetConfig+0x2d4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d132      	bne.n	80045f6 <UART_SetConfig+0x12e>
 8004590:	4b81      	ldr	r3, [pc, #516]	; (8004798 <UART_SetConfig+0x2d0>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	2b0c      	cmp	r3, #12
 800459c:	d828      	bhi.n	80045f0 <UART_SetConfig+0x128>
 800459e:	a201      	add	r2, pc, #4	; (adr r2, 80045a4 <UART_SetConfig+0xdc>)
 80045a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a4:	080045d9 	.word	0x080045d9
 80045a8:	080045f1 	.word	0x080045f1
 80045ac:	080045f1 	.word	0x080045f1
 80045b0:	080045f1 	.word	0x080045f1
 80045b4:	080045e5 	.word	0x080045e5
 80045b8:	080045f1 	.word	0x080045f1
 80045bc:	080045f1 	.word	0x080045f1
 80045c0:	080045f1 	.word	0x080045f1
 80045c4:	080045df 	.word	0x080045df
 80045c8:	080045f1 	.word	0x080045f1
 80045cc:	080045f1 	.word	0x080045f1
 80045d0:	080045f1 	.word	0x080045f1
 80045d4:	080045eb 	.word	0x080045eb
 80045d8:	2300      	movs	r3, #0
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	e117      	b.n	800480e <UART_SetConfig+0x346>
 80045de:	2302      	movs	r3, #2
 80045e0:	77fb      	strb	r3, [r7, #31]
 80045e2:	e114      	b.n	800480e <UART_SetConfig+0x346>
 80045e4:	2304      	movs	r3, #4
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e111      	b.n	800480e <UART_SetConfig+0x346>
 80045ea:	2308      	movs	r3, #8
 80045ec:	77fb      	strb	r3, [r7, #31]
 80045ee:	e10e      	b.n	800480e <UART_SetConfig+0x346>
 80045f0:	2310      	movs	r3, #16
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e10b      	b.n	800480e <UART_SetConfig+0x346>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a69      	ldr	r2, [pc, #420]	; (80047a0 <UART_SetConfig+0x2d8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d120      	bne.n	8004642 <UART_SetConfig+0x17a>
 8004600:	4b65      	ldr	r3, [pc, #404]	; (8004798 <UART_SetConfig+0x2d0>)
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800460a:	2b30      	cmp	r3, #48	; 0x30
 800460c:	d013      	beq.n	8004636 <UART_SetConfig+0x16e>
 800460e:	2b30      	cmp	r3, #48	; 0x30
 8004610:	d814      	bhi.n	800463c <UART_SetConfig+0x174>
 8004612:	2b20      	cmp	r3, #32
 8004614:	d009      	beq.n	800462a <UART_SetConfig+0x162>
 8004616:	2b20      	cmp	r3, #32
 8004618:	d810      	bhi.n	800463c <UART_SetConfig+0x174>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <UART_SetConfig+0x15c>
 800461e:	2b10      	cmp	r3, #16
 8004620:	d006      	beq.n	8004630 <UART_SetConfig+0x168>
 8004622:	e00b      	b.n	800463c <UART_SetConfig+0x174>
 8004624:	2300      	movs	r3, #0
 8004626:	77fb      	strb	r3, [r7, #31]
 8004628:	e0f1      	b.n	800480e <UART_SetConfig+0x346>
 800462a:	2302      	movs	r3, #2
 800462c:	77fb      	strb	r3, [r7, #31]
 800462e:	e0ee      	b.n	800480e <UART_SetConfig+0x346>
 8004630:	2304      	movs	r3, #4
 8004632:	77fb      	strb	r3, [r7, #31]
 8004634:	e0eb      	b.n	800480e <UART_SetConfig+0x346>
 8004636:	2308      	movs	r3, #8
 8004638:	77fb      	strb	r3, [r7, #31]
 800463a:	e0e8      	b.n	800480e <UART_SetConfig+0x346>
 800463c:	2310      	movs	r3, #16
 800463e:	77fb      	strb	r3, [r7, #31]
 8004640:	e0e5      	b.n	800480e <UART_SetConfig+0x346>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a57      	ldr	r2, [pc, #348]	; (80047a4 <UART_SetConfig+0x2dc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d120      	bne.n	800468e <UART_SetConfig+0x1c6>
 800464c:	4b52      	ldr	r3, [pc, #328]	; (8004798 <UART_SetConfig+0x2d0>)
 800464e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004652:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004656:	2bc0      	cmp	r3, #192	; 0xc0
 8004658:	d013      	beq.n	8004682 <UART_SetConfig+0x1ba>
 800465a:	2bc0      	cmp	r3, #192	; 0xc0
 800465c:	d814      	bhi.n	8004688 <UART_SetConfig+0x1c0>
 800465e:	2b80      	cmp	r3, #128	; 0x80
 8004660:	d009      	beq.n	8004676 <UART_SetConfig+0x1ae>
 8004662:	2b80      	cmp	r3, #128	; 0x80
 8004664:	d810      	bhi.n	8004688 <UART_SetConfig+0x1c0>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <UART_SetConfig+0x1a8>
 800466a:	2b40      	cmp	r3, #64	; 0x40
 800466c:	d006      	beq.n	800467c <UART_SetConfig+0x1b4>
 800466e:	e00b      	b.n	8004688 <UART_SetConfig+0x1c0>
 8004670:	2300      	movs	r3, #0
 8004672:	77fb      	strb	r3, [r7, #31]
 8004674:	e0cb      	b.n	800480e <UART_SetConfig+0x346>
 8004676:	2302      	movs	r3, #2
 8004678:	77fb      	strb	r3, [r7, #31]
 800467a:	e0c8      	b.n	800480e <UART_SetConfig+0x346>
 800467c:	2304      	movs	r3, #4
 800467e:	77fb      	strb	r3, [r7, #31]
 8004680:	e0c5      	b.n	800480e <UART_SetConfig+0x346>
 8004682:	2308      	movs	r3, #8
 8004684:	77fb      	strb	r3, [r7, #31]
 8004686:	e0c2      	b.n	800480e <UART_SetConfig+0x346>
 8004688:	2310      	movs	r3, #16
 800468a:	77fb      	strb	r3, [r7, #31]
 800468c:	e0bf      	b.n	800480e <UART_SetConfig+0x346>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a45      	ldr	r2, [pc, #276]	; (80047a8 <UART_SetConfig+0x2e0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d125      	bne.n	80046e4 <UART_SetConfig+0x21c>
 8004698:	4b3f      	ldr	r3, [pc, #252]	; (8004798 <UART_SetConfig+0x2d0>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046a6:	d017      	beq.n	80046d8 <UART_SetConfig+0x210>
 80046a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ac:	d817      	bhi.n	80046de <UART_SetConfig+0x216>
 80046ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b2:	d00b      	beq.n	80046cc <UART_SetConfig+0x204>
 80046b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046b8:	d811      	bhi.n	80046de <UART_SetConfig+0x216>
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <UART_SetConfig+0x1fe>
 80046be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c2:	d006      	beq.n	80046d2 <UART_SetConfig+0x20a>
 80046c4:	e00b      	b.n	80046de <UART_SetConfig+0x216>
 80046c6:	2300      	movs	r3, #0
 80046c8:	77fb      	strb	r3, [r7, #31]
 80046ca:	e0a0      	b.n	800480e <UART_SetConfig+0x346>
 80046cc:	2302      	movs	r3, #2
 80046ce:	77fb      	strb	r3, [r7, #31]
 80046d0:	e09d      	b.n	800480e <UART_SetConfig+0x346>
 80046d2:	2304      	movs	r3, #4
 80046d4:	77fb      	strb	r3, [r7, #31]
 80046d6:	e09a      	b.n	800480e <UART_SetConfig+0x346>
 80046d8:	2308      	movs	r3, #8
 80046da:	77fb      	strb	r3, [r7, #31]
 80046dc:	e097      	b.n	800480e <UART_SetConfig+0x346>
 80046de:	2310      	movs	r3, #16
 80046e0:	77fb      	strb	r3, [r7, #31]
 80046e2:	e094      	b.n	800480e <UART_SetConfig+0x346>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a30      	ldr	r2, [pc, #192]	; (80047ac <UART_SetConfig+0x2e4>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d125      	bne.n	800473a <UART_SetConfig+0x272>
 80046ee:	4b2a      	ldr	r3, [pc, #168]	; (8004798 <UART_SetConfig+0x2d0>)
 80046f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046fc:	d017      	beq.n	800472e <UART_SetConfig+0x266>
 80046fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004702:	d817      	bhi.n	8004734 <UART_SetConfig+0x26c>
 8004704:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004708:	d00b      	beq.n	8004722 <UART_SetConfig+0x25a>
 800470a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800470e:	d811      	bhi.n	8004734 <UART_SetConfig+0x26c>
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <UART_SetConfig+0x254>
 8004714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004718:	d006      	beq.n	8004728 <UART_SetConfig+0x260>
 800471a:	e00b      	b.n	8004734 <UART_SetConfig+0x26c>
 800471c:	2301      	movs	r3, #1
 800471e:	77fb      	strb	r3, [r7, #31]
 8004720:	e075      	b.n	800480e <UART_SetConfig+0x346>
 8004722:	2302      	movs	r3, #2
 8004724:	77fb      	strb	r3, [r7, #31]
 8004726:	e072      	b.n	800480e <UART_SetConfig+0x346>
 8004728:	2304      	movs	r3, #4
 800472a:	77fb      	strb	r3, [r7, #31]
 800472c:	e06f      	b.n	800480e <UART_SetConfig+0x346>
 800472e:	2308      	movs	r3, #8
 8004730:	77fb      	strb	r3, [r7, #31]
 8004732:	e06c      	b.n	800480e <UART_SetConfig+0x346>
 8004734:	2310      	movs	r3, #16
 8004736:	77fb      	strb	r3, [r7, #31]
 8004738:	e069      	b.n	800480e <UART_SetConfig+0x346>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a1c      	ldr	r2, [pc, #112]	; (80047b0 <UART_SetConfig+0x2e8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d137      	bne.n	80047b4 <UART_SetConfig+0x2ec>
 8004744:	4b14      	ldr	r3, [pc, #80]	; (8004798 <UART_SetConfig+0x2d0>)
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800474e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004752:	d017      	beq.n	8004784 <UART_SetConfig+0x2bc>
 8004754:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004758:	d817      	bhi.n	800478a <UART_SetConfig+0x2c2>
 800475a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475e:	d00b      	beq.n	8004778 <UART_SetConfig+0x2b0>
 8004760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004764:	d811      	bhi.n	800478a <UART_SetConfig+0x2c2>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <UART_SetConfig+0x2aa>
 800476a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476e:	d006      	beq.n	800477e <UART_SetConfig+0x2b6>
 8004770:	e00b      	b.n	800478a <UART_SetConfig+0x2c2>
 8004772:	2300      	movs	r3, #0
 8004774:	77fb      	strb	r3, [r7, #31]
 8004776:	e04a      	b.n	800480e <UART_SetConfig+0x346>
 8004778:	2302      	movs	r3, #2
 800477a:	77fb      	strb	r3, [r7, #31]
 800477c:	e047      	b.n	800480e <UART_SetConfig+0x346>
 800477e:	2304      	movs	r3, #4
 8004780:	77fb      	strb	r3, [r7, #31]
 8004782:	e044      	b.n	800480e <UART_SetConfig+0x346>
 8004784:	2308      	movs	r3, #8
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	e041      	b.n	800480e <UART_SetConfig+0x346>
 800478a:	2310      	movs	r3, #16
 800478c:	77fb      	strb	r3, [r7, #31]
 800478e:	e03e      	b.n	800480e <UART_SetConfig+0x346>
 8004790:	efff69f3 	.word	0xefff69f3
 8004794:	40011000 	.word	0x40011000
 8004798:	40023800 	.word	0x40023800
 800479c:	40004400 	.word	0x40004400
 80047a0:	40004800 	.word	0x40004800
 80047a4:	40004c00 	.word	0x40004c00
 80047a8:	40005000 	.word	0x40005000
 80047ac:	40011400 	.word	0x40011400
 80047b0:	40007800 	.word	0x40007800
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a71      	ldr	r2, [pc, #452]	; (8004980 <UART_SetConfig+0x4b8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d125      	bne.n	800480a <UART_SetConfig+0x342>
 80047be:	4b71      	ldr	r3, [pc, #452]	; (8004984 <UART_SetConfig+0x4bc>)
 80047c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047cc:	d017      	beq.n	80047fe <UART_SetConfig+0x336>
 80047ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047d2:	d817      	bhi.n	8004804 <UART_SetConfig+0x33c>
 80047d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d8:	d00b      	beq.n	80047f2 <UART_SetConfig+0x32a>
 80047da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047de:	d811      	bhi.n	8004804 <UART_SetConfig+0x33c>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <UART_SetConfig+0x324>
 80047e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047e8:	d006      	beq.n	80047f8 <UART_SetConfig+0x330>
 80047ea:	e00b      	b.n	8004804 <UART_SetConfig+0x33c>
 80047ec:	2300      	movs	r3, #0
 80047ee:	77fb      	strb	r3, [r7, #31]
 80047f0:	e00d      	b.n	800480e <UART_SetConfig+0x346>
 80047f2:	2302      	movs	r3, #2
 80047f4:	77fb      	strb	r3, [r7, #31]
 80047f6:	e00a      	b.n	800480e <UART_SetConfig+0x346>
 80047f8:	2304      	movs	r3, #4
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	e007      	b.n	800480e <UART_SetConfig+0x346>
 80047fe:	2308      	movs	r3, #8
 8004800:	77fb      	strb	r3, [r7, #31]
 8004802:	e004      	b.n	800480e <UART_SetConfig+0x346>
 8004804:	2310      	movs	r3, #16
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e001      	b.n	800480e <UART_SetConfig+0x346>
 800480a:	2310      	movs	r3, #16
 800480c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004816:	d15a      	bne.n	80048ce <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004818:	7ffb      	ldrb	r3, [r7, #31]
 800481a:	2b08      	cmp	r3, #8
 800481c:	d827      	bhi.n	800486e <UART_SetConfig+0x3a6>
 800481e:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <UART_SetConfig+0x35c>)
 8004820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004824:	08004849 	.word	0x08004849
 8004828:	08004851 	.word	0x08004851
 800482c:	08004859 	.word	0x08004859
 8004830:	0800486f 	.word	0x0800486f
 8004834:	0800485f 	.word	0x0800485f
 8004838:	0800486f 	.word	0x0800486f
 800483c:	0800486f 	.word	0x0800486f
 8004840:	0800486f 	.word	0x0800486f
 8004844:	08004867 	.word	0x08004867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004848:	f7fe fcb4 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 800484c:	61b8      	str	r0, [r7, #24]
        break;
 800484e:	e013      	b.n	8004878 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004850:	f7fe fcc4 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 8004854:	61b8      	str	r0, [r7, #24]
        break;
 8004856:	e00f      	b.n	8004878 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004858:	4b4b      	ldr	r3, [pc, #300]	; (8004988 <UART_SetConfig+0x4c0>)
 800485a:	61bb      	str	r3, [r7, #24]
        break;
 800485c:	e00c      	b.n	8004878 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485e:	f7fe fbe7 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8004862:	61b8      	str	r0, [r7, #24]
        break;
 8004864:	e008      	b.n	8004878 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800486a:	61bb      	str	r3, [r7, #24]
        break;
 800486c:	e004      	b.n	8004878 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	77bb      	strb	r3, [r7, #30]
        break;
 8004876:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d074      	beq.n	8004968 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	005a      	lsls	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	441a      	add	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004892:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b0f      	cmp	r3, #15
 8004898:	d916      	bls.n	80048c8 <UART_SetConfig+0x400>
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a0:	d212      	bcs.n	80048c8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f023 030f 	bic.w	r3, r3, #15
 80048aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	89fb      	ldrh	r3, [r7, #14]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	89fa      	ldrh	r2, [r7, #14]
 80048c4:	60da      	str	r2, [r3, #12]
 80048c6:	e04f      	b.n	8004968 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	77bb      	strb	r3, [r7, #30]
 80048cc:	e04c      	b.n	8004968 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048ce:	7ffb      	ldrb	r3, [r7, #31]
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d828      	bhi.n	8004926 <UART_SetConfig+0x45e>
 80048d4:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <UART_SetConfig+0x414>)
 80048d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048da:	bf00      	nop
 80048dc:	08004901 	.word	0x08004901
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004911 	.word	0x08004911
 80048e8:	08004927 	.word	0x08004927
 80048ec:	08004917 	.word	0x08004917
 80048f0:	08004927 	.word	0x08004927
 80048f4:	08004927 	.word	0x08004927
 80048f8:	08004927 	.word	0x08004927
 80048fc:	0800491f 	.word	0x0800491f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004900:	f7fe fc58 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 8004904:	61b8      	str	r0, [r7, #24]
        break;
 8004906:	e013      	b.n	8004930 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004908:	f7fe fc68 	bl	80031dc <HAL_RCC_GetPCLK2Freq>
 800490c:	61b8      	str	r0, [r7, #24]
        break;
 800490e:	e00f      	b.n	8004930 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004910:	4b1d      	ldr	r3, [pc, #116]	; (8004988 <UART_SetConfig+0x4c0>)
 8004912:	61bb      	str	r3, [r7, #24]
        break;
 8004914:	e00c      	b.n	8004930 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004916:	f7fe fb8b 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 800491a:	61b8      	str	r0, [r7, #24]
        break;
 800491c:	e008      	b.n	8004930 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800491e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004922:	61bb      	str	r3, [r7, #24]
        break;
 8004924:	e004      	b.n	8004930 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004926:	2300      	movs	r3, #0
 8004928:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	77bb      	strb	r3, [r7, #30]
        break;
 800492e:	bf00      	nop
    }

    if (pclk != 0U)
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d018      	beq.n	8004968 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	085a      	lsrs	r2, r3, #1
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	441a      	add	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b0f      	cmp	r3, #15
 800494e:	d909      	bls.n	8004964 <UART_SetConfig+0x49c>
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004956:	d205      	bcs.n	8004964 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	b29a      	uxth	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	e001      	b.n	8004968 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004974:	7fbb      	ldrb	r3, [r7, #30]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3720      	adds	r7, #32
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40007c00 	.word	0x40007c00
 8004984:	40023800 	.word	0x40023800
 8004988:	00f42400 	.word	0x00f42400

0800498c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	f003 0320 	and.w	r3, r3, #32
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01a      	beq.n	8004aa2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a8a:	d10a      	bne.n	8004aa2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	605a      	str	r2, [r3, #4]
  }
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae0:	f7fc f998 	bl	8000e14 <HAL_GetTick>
 8004ae4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d10e      	bne.n	8004b12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004af4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f817 	bl	8004b36 <UART_WaitOnFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e00d      	b.n	8004b2e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b09c      	sub	sp, #112	; 0x70
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	603b      	str	r3, [r7, #0]
 8004b42:	4613      	mov	r3, r2
 8004b44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b46:	e0a5      	b.n	8004c94 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4e:	f000 80a1 	beq.w	8004c94 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b52:	f7fc f95f 	bl	8000e14 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d302      	bcc.n	8004b68 <UART_WaitOnFlagUntilTimeout+0x32>
 8004b62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d13e      	bne.n	8004be6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b7c:	667b      	str	r3, [r7, #100]	; 0x64
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b88:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e6      	bne.n	8004b68 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3308      	adds	r3, #8
 8004ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bba:	64ba      	str	r2, [r7, #72]	; 0x48
 8004bbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e5      	bne.n	8004b9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e067      	b.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d04f      	beq.n	8004c94 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c02:	d147      	bne.n	8004c94 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e6      	bne.n	8004c0e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3308      	adds	r3, #8
 8004c46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	e853 3f00 	ldrex	r3, [r3]
 8004c4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c60:	623a      	str	r2, [r7, #32]
 8004c62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c64:	69f9      	ldr	r1, [r7, #28]
 8004c66:	6a3a      	ldr	r2, [r7, #32]
 8004c68:	e841 2300 	strex	r3, r2, [r1]
 8004c6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1e5      	bne.n	8004c40 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e010      	b.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69da      	ldr	r2, [r3, #28]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	bf0c      	ite	eq
 8004ca4:	2301      	moveq	r3, #1
 8004ca6:	2300      	movne	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	461a      	mov	r2, r3
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	f43f af4a 	beq.w	8004b48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3770      	adds	r7, #112	; 0x70
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b097      	sub	sp, #92	; 0x5c
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	88fa      	ldrh	r2, [r7, #6]
 8004cd8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	88fa      	ldrh	r2, [r7, #6]
 8004ce0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf2:	d10e      	bne.n	8004d12 <UART_Start_Receive_IT+0x52>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d105      	bne.n	8004d08 <UART_Start_Receive_IT+0x48>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004d02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d06:	e02d      	b.n	8004d64 <UART_Start_Receive_IT+0xa4>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	22ff      	movs	r2, #255	; 0xff
 8004d0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d10:	e028      	b.n	8004d64 <UART_Start_Receive_IT+0xa4>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10d      	bne.n	8004d36 <UART_Start_Receive_IT+0x76>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d104      	bne.n	8004d2c <UART_Start_Receive_IT+0x6c>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	22ff      	movs	r2, #255	; 0xff
 8004d26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d2a:	e01b      	b.n	8004d64 <UART_Start_Receive_IT+0xa4>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	227f      	movs	r2, #127	; 0x7f
 8004d30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d34:	e016      	b.n	8004d64 <UART_Start_Receive_IT+0xa4>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d3e:	d10d      	bne.n	8004d5c <UART_Start_Receive_IT+0x9c>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d104      	bne.n	8004d52 <UART_Start_Receive_IT+0x92>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	227f      	movs	r2, #127	; 0x7f
 8004d4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d50:	e008      	b.n	8004d64 <UART_Start_Receive_IT+0xa4>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	223f      	movs	r2, #63	; 0x3f
 8004d56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004d5a:	e003      	b.n	8004d64 <UART_Start_Receive_IT+0xa4>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2222      	movs	r2, #34	; 0x22
 8004d70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3308      	adds	r3, #8
 8004d78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d84:	f043 0301 	orr.w	r3, r3, #1
 8004d88:	657b      	str	r3, [r7, #84]	; 0x54
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3308      	adds	r3, #8
 8004d90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d92:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e5      	bne.n	8004d72 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dae:	d107      	bne.n	8004dc0 <UART_Start_Receive_IT+0x100>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d103      	bne.n	8004dc0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4a24      	ldr	r2, [pc, #144]	; (8004e4c <UART_Start_Receive_IT+0x18c>)
 8004dbc:	665a      	str	r2, [r3, #100]	; 0x64
 8004dbe:	e002      	b.n	8004dc6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4a23      	ldr	r2, [pc, #140]	; (8004e50 <UART_Start_Receive_IT+0x190>)
 8004dc4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d019      	beq.n	8004e0a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	e853 3f00 	ldrex	r3, [r3]
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	461a      	mov	r2, r3
 8004df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df4:	637b      	str	r3, [r7, #52]	; 0x34
 8004df6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dfc:	e841 2300 	strex	r3, r2, [r1]
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e6      	bne.n	8004dd6 <UART_Start_Receive_IT+0x116>
 8004e08:	e018      	b.n	8004e3c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	e853 3f00 	ldrex	r3, [r3]
 8004e16:	613b      	str	r3, [r7, #16]
   return(result);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f043 0320 	orr.w	r3, r3, #32
 8004e1e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e28:	623b      	str	r3, [r7, #32]
 8004e2a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2c:	69f9      	ldr	r1, [r7, #28]
 8004e2e:	6a3a      	ldr	r2, [r7, #32]
 8004e30:	e841 2300 	strex	r3, r2, [r1]
 8004e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e6      	bne.n	8004e0a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	375c      	adds	r7, #92	; 0x5c
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	080052b5 	.word	0x080052b5
 8004e50:	08005159 	.word	0x08005159

08004e54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b095      	sub	sp, #84	; 0x54
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e64:	e853 3f00 	ldrex	r3, [r3]
 8004e68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8004e7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e82:	e841 2300 	strex	r3, r2, [r1]
 8004e86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1e6      	bne.n	8004e5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3308      	adds	r3, #8
 8004e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	e853 3f00 	ldrex	r3, [r3]
 8004e9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004eb0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004eb6:	e841 2300 	strex	r3, r2, [r1]
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e5      	bne.n	8004e8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d118      	bne.n	8004efc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f023 0310 	bic.w	r3, r3, #16
 8004ede:	647b      	str	r3, [r7, #68]	; 0x44
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee8:	61bb      	str	r3, [r7, #24]
 8004eea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6979      	ldr	r1, [r7, #20]
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e6      	bne.n	8004eca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004f0e:	bf00      	nop
 8004f10:	3754      	adds	r7, #84	; 0x54
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b084      	sub	sp, #16
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f7ff f9ed 	bl	8004318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f3e:	bf00      	nop
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f52:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	220f      	movs	r2, #15
 8004f62:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0208 	orr.w	r2, r2, #8
 8004f72:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f7ff f9d3 	bl	800432c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b08f      	sub	sp, #60	; 0x3c
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f9a:	2b21      	cmp	r3, #33	; 0x21
 8004f9c:	d14c      	bne.n	8005038 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d132      	bne.n	8005010 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	e853 3f00 	ldrex	r3, [r3]
 8004fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fd0:	e841 2300 	strex	r3, r2, [r1]
 8004fd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1e6      	bne.n	8004faa <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ff0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	61bb      	str	r3, [r7, #24]
 8004ffc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	6979      	ldr	r1, [r7, #20]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	613b      	str	r3, [r7, #16]
   return(result);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e6      	bne.n	8004fdc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800500e:	e013      	b.n	8005038 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005014:	781a      	ldrb	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005038:	bf00      	nop
 800503a:	373c      	adds	r7, #60	; 0x3c
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr

08005044 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005044:	b480      	push	{r7}
 8005046:	b091      	sub	sp, #68	; 0x44
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005050:	2b21      	cmp	r3, #33	; 0x21
 8005052:	d151      	bne.n	80050f8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d132      	bne.n	80050c6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	623b      	str	r3, [r7, #32]
   return(result);
 800506e:	6a3b      	ldr	r3, [r7, #32]
 8005070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005074:	63bb      	str	r3, [r7, #56]	; 0x38
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507e:	633b      	str	r3, [r7, #48]	; 0x30
 8005080:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e6      	bne.n	8005060 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	e853 3f00 	ldrex	r3, [r3]
 800509e:	60fb      	str	r3, [r7, #12]
   return(result);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050a6:	637b      	str	r3, [r7, #52]	; 0x34
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	461a      	mov	r2, r3
 80050ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b0:	61fb      	str	r3, [r7, #28]
 80050b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b4:	69b9      	ldr	r1, [r7, #24]
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	e841 2300 	strex	r3, r2, [r1]
 80050bc:	617b      	str	r3, [r7, #20]
   return(result);
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e6      	bne.n	8005092 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80050c4:	e018      	b.n	80050f8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80050cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	461a      	mov	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050da:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e0:	1c9a      	adds	r2, r3, #2
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	3b01      	subs	r3, #1
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80050f8:	bf00      	nop
 80050fa:	3744      	adds	r7, #68	; 0x44
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	60bb      	str	r3, [r7, #8]
   return(result);
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6979      	ldr	r1, [r7, #20]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	613b      	str	r3, [r7, #16]
   return(result);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e6      	bne.n	800510c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2220      	movs	r2, #32
 8005142:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f003 f818 	bl	8008180 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005150:	bf00      	nop
 8005152:	3720      	adds	r7, #32
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b096      	sub	sp, #88	; 0x58
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005166:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800516e:	2b22      	cmp	r3, #34	; 0x22
 8005170:	f040 8094 	bne.w	800529c <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800517e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005182:	b2d9      	uxtb	r1, r3
 8005184:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005188:	b2da      	uxtb	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518e:	400a      	ands	r2, r1
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d177      	bne.n	80052ac <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c4:	e853 3f00 	ldrex	r3, [r3]
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051d0:	653b      	str	r3, [r7, #80]	; 0x50
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	461a      	mov	r2, r3
 80051d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051da:	647b      	str	r3, [r7, #68]	; 0x44
 80051dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051e2:	e841 2300 	strex	r3, r2, [r1]
 80051e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1e6      	bne.n	80051bc <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3308      	adds	r3, #8
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	623b      	str	r3, [r7, #32]
   return(result);
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	f023 0301 	bic.w	r3, r3, #1
 8005204:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3308      	adds	r3, #8
 800520c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800520e:	633a      	str	r2, [r7, #48]	; 0x30
 8005210:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e5      	bne.n	80051ee <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005232:	2b01      	cmp	r3, #1
 8005234:	d12e      	bne.n	8005294 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	60fb      	str	r3, [r7, #12]
   return(result);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f023 0310 	bic.w	r3, r3, #16
 8005250:	64bb      	str	r3, [r7, #72]	; 0x48
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800525a:	61fb      	str	r3, [r7, #28]
 800525c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525e:	69b9      	ldr	r1, [r7, #24]
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	e841 2300 	strex	r3, r2, [r1]
 8005266:	617b      	str	r3, [r7, #20]
   return(result);
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1e6      	bne.n	800523c <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f003 0310 	and.w	r3, r3, #16
 8005278:	2b10      	cmp	r3, #16
 800527a:	d103      	bne.n	8005284 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2210      	movs	r2, #16
 8005282:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800528a:	4619      	mov	r1, r3
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff f857 	bl	8004340 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005292:	e00b      	b.n	80052ac <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f002 ffb1 	bl	80081fc <HAL_UART_RxCpltCallback>
}
 800529a:	e007      	b.n	80052ac <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0208 	orr.w	r2, r2, #8
 80052aa:	619a      	str	r2, [r3, #24]
}
 80052ac:	bf00      	nop
 80052ae:	3758      	adds	r7, #88	; 0x58
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b096      	sub	sp, #88	; 0x58
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052c2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052ca:	2b22      	cmp	r3, #34	; 0x22
 80052cc:	f040 8094 	bne.w	80053f8 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052de:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80052e0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80052e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80052e8:	4013      	ands	r3, r2
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f4:	1c9a      	adds	r2, r3, #2
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005312:	b29b      	uxth	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d177      	bne.n	8005408 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800532c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	461a      	mov	r2, r3
 8005334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005336:	643b      	str	r3, [r7, #64]	; 0x40
 8005338:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800533c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e6      	bne.n	8005318 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	3308      	adds	r3, #8
 8005350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	61fb      	str	r3, [r7, #28]
   return(result);
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	f023 0301 	bic.w	r3, r3, #1
 8005360:	64bb      	str	r3, [r7, #72]	; 0x48
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3308      	adds	r3, #8
 8005368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800536a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e5      	bne.n	800534a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800538e:	2b01      	cmp	r3, #1
 8005390:	d12e      	bne.n	80053f0 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	f023 0310 	bic.w	r3, r3, #16
 80053ac:	647b      	str	r3, [r7, #68]	; 0x44
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b6:	61bb      	str	r3, [r7, #24]
 80053b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6979      	ldr	r1, [r7, #20]
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	613b      	str	r3, [r7, #16]
   return(result);
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e6      	bne.n	8005398 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	f003 0310 	and.w	r3, r3, #16
 80053d4:	2b10      	cmp	r3, #16
 80053d6:	d103      	bne.n	80053e0 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2210      	movs	r2, #16
 80053de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80053e6:	4619      	mov	r1, r3
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f7fe ffa9 	bl	8004340 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053ee:	e00b      	b.n	8005408 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f002 ff03 	bl	80081fc <HAL_UART_RxCpltCallback>
}
 80053f6:	e007      	b.n	8005408 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0208 	orr.w	r2, r2, #8
 8005406:	619a      	str	r2, [r3, #24]
}
 8005408:	bf00      	nop
 800540a:	3758      	adds	r7, #88	; 0x58
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 100;
 8005416:	4ba0      	ldr	r3, [pc, #640]	; (8005698 <MX_LWIP_Init+0x288>)
 8005418:	2264      	movs	r2, #100	; 0x64
 800541a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 100;
 800541c:	4b9e      	ldr	r3, [pc, #632]	; (8005698 <MX_LWIP_Init+0x288>)
 800541e:	2264      	movs	r2, #100	; 0x64
 8005420:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 8005422:	4b9d      	ldr	r3, [pc, #628]	; (8005698 <MX_LWIP_Init+0x288>)
 8005424:	2264      	movs	r2, #100	; 0x64
 8005426:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8005428:	4b9b      	ldr	r3, [pc, #620]	; (8005698 <MX_LWIP_Init+0x288>)
 800542a:	226f      	movs	r2, #111	; 0x6f
 800542c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800542e:	4b9b      	ldr	r3, [pc, #620]	; (800569c <MX_LWIP_Init+0x28c>)
 8005430:	22ff      	movs	r2, #255	; 0xff
 8005432:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005434:	4b99      	ldr	r3, [pc, #612]	; (800569c <MX_LWIP_Init+0x28c>)
 8005436:	22ff      	movs	r2, #255	; 0xff
 8005438:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800543a:	4b98      	ldr	r3, [pc, #608]	; (800569c <MX_LWIP_Init+0x28c>)
 800543c:	22ff      	movs	r2, #255	; 0xff
 800543e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005440:	4b96      	ldr	r3, [pc, #600]	; (800569c <MX_LWIP_Init+0x28c>)
 8005442:	2200      	movs	r2, #0
 8005444:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8005446:	4b96      	ldr	r3, [pc, #600]	; (80056a0 <MX_LWIP_Init+0x290>)
 8005448:	2200      	movs	r2, #0
 800544a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800544c:	4b94      	ldr	r3, [pc, #592]	; (80056a0 <MX_LWIP_Init+0x290>)
 800544e:	2200      	movs	r2, #0
 8005450:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005452:	4b93      	ldr	r3, [pc, #588]	; (80056a0 <MX_LWIP_Init+0x290>)
 8005454:	2200      	movs	r2, #0
 8005456:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8005458:	4b91      	ldr	r3, [pc, #580]	; (80056a0 <MX_LWIP_Init+0x290>)
 800545a:	2200      	movs	r2, #0
 800545c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800545e:	2100      	movs	r1, #0
 8005460:	2000      	movs	r0, #0
 8005462:	f009 fcf1 	bl	800ee48 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005466:	4b8c      	ldr	r3, [pc, #560]	; (8005698 <MX_LWIP_Init+0x288>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	061a      	lsls	r2, r3, #24
 800546c:	4b8a      	ldr	r3, [pc, #552]	; (8005698 <MX_LWIP_Init+0x288>)
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	041b      	lsls	r3, r3, #16
 8005472:	431a      	orrs	r2, r3
 8005474:	4b88      	ldr	r3, [pc, #544]	; (8005698 <MX_LWIP_Init+0x288>)
 8005476:	789b      	ldrb	r3, [r3, #2]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	4313      	orrs	r3, r2
 800547c:	4a86      	ldr	r2, [pc, #536]	; (8005698 <MX_LWIP_Init+0x288>)
 800547e:	78d2      	ldrb	r2, [r2, #3]
 8005480:	4313      	orrs	r3, r2
 8005482:	061a      	lsls	r2, r3, #24
 8005484:	4b84      	ldr	r3, [pc, #528]	; (8005698 <MX_LWIP_Init+0x288>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	0619      	lsls	r1, r3, #24
 800548a:	4b83      	ldr	r3, [pc, #524]	; (8005698 <MX_LWIP_Init+0x288>)
 800548c:	785b      	ldrb	r3, [r3, #1]
 800548e:	041b      	lsls	r3, r3, #16
 8005490:	4319      	orrs	r1, r3
 8005492:	4b81      	ldr	r3, [pc, #516]	; (8005698 <MX_LWIP_Init+0x288>)
 8005494:	789b      	ldrb	r3, [r3, #2]
 8005496:	021b      	lsls	r3, r3, #8
 8005498:	430b      	orrs	r3, r1
 800549a:	497f      	ldr	r1, [pc, #508]	; (8005698 <MX_LWIP_Init+0x288>)
 800549c:	78c9      	ldrb	r1, [r1, #3]
 800549e:	430b      	orrs	r3, r1
 80054a0:	021b      	lsls	r3, r3, #8
 80054a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054a6:	431a      	orrs	r2, r3
 80054a8:	4b7b      	ldr	r3, [pc, #492]	; (8005698 <MX_LWIP_Init+0x288>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	0619      	lsls	r1, r3, #24
 80054ae:	4b7a      	ldr	r3, [pc, #488]	; (8005698 <MX_LWIP_Init+0x288>)
 80054b0:	785b      	ldrb	r3, [r3, #1]
 80054b2:	041b      	lsls	r3, r3, #16
 80054b4:	4319      	orrs	r1, r3
 80054b6:	4b78      	ldr	r3, [pc, #480]	; (8005698 <MX_LWIP_Init+0x288>)
 80054b8:	789b      	ldrb	r3, [r3, #2]
 80054ba:	021b      	lsls	r3, r3, #8
 80054bc:	430b      	orrs	r3, r1
 80054be:	4976      	ldr	r1, [pc, #472]	; (8005698 <MX_LWIP_Init+0x288>)
 80054c0:	78c9      	ldrb	r1, [r1, #3]
 80054c2:	430b      	orrs	r3, r1
 80054c4:	0a1b      	lsrs	r3, r3, #8
 80054c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80054ca:	431a      	orrs	r2, r3
 80054cc:	4b72      	ldr	r3, [pc, #456]	; (8005698 <MX_LWIP_Init+0x288>)
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	0619      	lsls	r1, r3, #24
 80054d2:	4b71      	ldr	r3, [pc, #452]	; (8005698 <MX_LWIP_Init+0x288>)
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	041b      	lsls	r3, r3, #16
 80054d8:	4319      	orrs	r1, r3
 80054da:	4b6f      	ldr	r3, [pc, #444]	; (8005698 <MX_LWIP_Init+0x288>)
 80054dc:	789b      	ldrb	r3, [r3, #2]
 80054de:	021b      	lsls	r3, r3, #8
 80054e0:	430b      	orrs	r3, r1
 80054e2:	496d      	ldr	r1, [pc, #436]	; (8005698 <MX_LWIP_Init+0x288>)
 80054e4:	78c9      	ldrb	r1, [r1, #3]
 80054e6:	430b      	orrs	r3, r1
 80054e8:	0e1b      	lsrs	r3, r3, #24
 80054ea:	4313      	orrs	r3, r2
 80054ec:	4a6d      	ldr	r2, [pc, #436]	; (80056a4 <MX_LWIP_Init+0x294>)
 80054ee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80054f0:	4b6a      	ldr	r3, [pc, #424]	; (800569c <MX_LWIP_Init+0x28c>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	061a      	lsls	r2, r3, #24
 80054f6:	4b69      	ldr	r3, [pc, #420]	; (800569c <MX_LWIP_Init+0x28c>)
 80054f8:	785b      	ldrb	r3, [r3, #1]
 80054fa:	041b      	lsls	r3, r3, #16
 80054fc:	431a      	orrs	r2, r3
 80054fe:	4b67      	ldr	r3, [pc, #412]	; (800569c <MX_LWIP_Init+0x28c>)
 8005500:	789b      	ldrb	r3, [r3, #2]
 8005502:	021b      	lsls	r3, r3, #8
 8005504:	4313      	orrs	r3, r2
 8005506:	4a65      	ldr	r2, [pc, #404]	; (800569c <MX_LWIP_Init+0x28c>)
 8005508:	78d2      	ldrb	r2, [r2, #3]
 800550a:	4313      	orrs	r3, r2
 800550c:	061a      	lsls	r2, r3, #24
 800550e:	4b63      	ldr	r3, [pc, #396]	; (800569c <MX_LWIP_Init+0x28c>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	0619      	lsls	r1, r3, #24
 8005514:	4b61      	ldr	r3, [pc, #388]	; (800569c <MX_LWIP_Init+0x28c>)
 8005516:	785b      	ldrb	r3, [r3, #1]
 8005518:	041b      	lsls	r3, r3, #16
 800551a:	4319      	orrs	r1, r3
 800551c:	4b5f      	ldr	r3, [pc, #380]	; (800569c <MX_LWIP_Init+0x28c>)
 800551e:	789b      	ldrb	r3, [r3, #2]
 8005520:	021b      	lsls	r3, r3, #8
 8005522:	430b      	orrs	r3, r1
 8005524:	495d      	ldr	r1, [pc, #372]	; (800569c <MX_LWIP_Init+0x28c>)
 8005526:	78c9      	ldrb	r1, [r1, #3]
 8005528:	430b      	orrs	r3, r1
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005530:	431a      	orrs	r2, r3
 8005532:	4b5a      	ldr	r3, [pc, #360]	; (800569c <MX_LWIP_Init+0x28c>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	0619      	lsls	r1, r3, #24
 8005538:	4b58      	ldr	r3, [pc, #352]	; (800569c <MX_LWIP_Init+0x28c>)
 800553a:	785b      	ldrb	r3, [r3, #1]
 800553c:	041b      	lsls	r3, r3, #16
 800553e:	4319      	orrs	r1, r3
 8005540:	4b56      	ldr	r3, [pc, #344]	; (800569c <MX_LWIP_Init+0x28c>)
 8005542:	789b      	ldrb	r3, [r3, #2]
 8005544:	021b      	lsls	r3, r3, #8
 8005546:	430b      	orrs	r3, r1
 8005548:	4954      	ldr	r1, [pc, #336]	; (800569c <MX_LWIP_Init+0x28c>)
 800554a:	78c9      	ldrb	r1, [r1, #3]
 800554c:	430b      	orrs	r3, r1
 800554e:	0a1b      	lsrs	r3, r3, #8
 8005550:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005554:	431a      	orrs	r2, r3
 8005556:	4b51      	ldr	r3, [pc, #324]	; (800569c <MX_LWIP_Init+0x28c>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	0619      	lsls	r1, r3, #24
 800555c:	4b4f      	ldr	r3, [pc, #316]	; (800569c <MX_LWIP_Init+0x28c>)
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	041b      	lsls	r3, r3, #16
 8005562:	4319      	orrs	r1, r3
 8005564:	4b4d      	ldr	r3, [pc, #308]	; (800569c <MX_LWIP_Init+0x28c>)
 8005566:	789b      	ldrb	r3, [r3, #2]
 8005568:	021b      	lsls	r3, r3, #8
 800556a:	430b      	orrs	r3, r1
 800556c:	494b      	ldr	r1, [pc, #300]	; (800569c <MX_LWIP_Init+0x28c>)
 800556e:	78c9      	ldrb	r1, [r1, #3]
 8005570:	430b      	orrs	r3, r1
 8005572:	0e1b      	lsrs	r3, r3, #24
 8005574:	4313      	orrs	r3, r2
 8005576:	4a4c      	ldr	r2, [pc, #304]	; (80056a8 <MX_LWIP_Init+0x298>)
 8005578:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800557a:	4b49      	ldr	r3, [pc, #292]	; (80056a0 <MX_LWIP_Init+0x290>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	061a      	lsls	r2, r3, #24
 8005580:	4b47      	ldr	r3, [pc, #284]	; (80056a0 <MX_LWIP_Init+0x290>)
 8005582:	785b      	ldrb	r3, [r3, #1]
 8005584:	041b      	lsls	r3, r3, #16
 8005586:	431a      	orrs	r2, r3
 8005588:	4b45      	ldr	r3, [pc, #276]	; (80056a0 <MX_LWIP_Init+0x290>)
 800558a:	789b      	ldrb	r3, [r3, #2]
 800558c:	021b      	lsls	r3, r3, #8
 800558e:	4313      	orrs	r3, r2
 8005590:	4a43      	ldr	r2, [pc, #268]	; (80056a0 <MX_LWIP_Init+0x290>)
 8005592:	78d2      	ldrb	r2, [r2, #3]
 8005594:	4313      	orrs	r3, r2
 8005596:	061a      	lsls	r2, r3, #24
 8005598:	4b41      	ldr	r3, [pc, #260]	; (80056a0 <MX_LWIP_Init+0x290>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	0619      	lsls	r1, r3, #24
 800559e:	4b40      	ldr	r3, [pc, #256]	; (80056a0 <MX_LWIP_Init+0x290>)
 80055a0:	785b      	ldrb	r3, [r3, #1]
 80055a2:	041b      	lsls	r3, r3, #16
 80055a4:	4319      	orrs	r1, r3
 80055a6:	4b3e      	ldr	r3, [pc, #248]	; (80056a0 <MX_LWIP_Init+0x290>)
 80055a8:	789b      	ldrb	r3, [r3, #2]
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	430b      	orrs	r3, r1
 80055ae:	493c      	ldr	r1, [pc, #240]	; (80056a0 <MX_LWIP_Init+0x290>)
 80055b0:	78c9      	ldrb	r1, [r1, #3]
 80055b2:	430b      	orrs	r3, r1
 80055b4:	021b      	lsls	r3, r3, #8
 80055b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055ba:	431a      	orrs	r2, r3
 80055bc:	4b38      	ldr	r3, [pc, #224]	; (80056a0 <MX_LWIP_Init+0x290>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	0619      	lsls	r1, r3, #24
 80055c2:	4b37      	ldr	r3, [pc, #220]	; (80056a0 <MX_LWIP_Init+0x290>)
 80055c4:	785b      	ldrb	r3, [r3, #1]
 80055c6:	041b      	lsls	r3, r3, #16
 80055c8:	4319      	orrs	r1, r3
 80055ca:	4b35      	ldr	r3, [pc, #212]	; (80056a0 <MX_LWIP_Init+0x290>)
 80055cc:	789b      	ldrb	r3, [r3, #2]
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	430b      	orrs	r3, r1
 80055d2:	4933      	ldr	r1, [pc, #204]	; (80056a0 <MX_LWIP_Init+0x290>)
 80055d4:	78c9      	ldrb	r1, [r1, #3]
 80055d6:	430b      	orrs	r3, r1
 80055d8:	0a1b      	lsrs	r3, r3, #8
 80055da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80055de:	431a      	orrs	r2, r3
 80055e0:	4b2f      	ldr	r3, [pc, #188]	; (80056a0 <MX_LWIP_Init+0x290>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	0619      	lsls	r1, r3, #24
 80055e6:	4b2e      	ldr	r3, [pc, #184]	; (80056a0 <MX_LWIP_Init+0x290>)
 80055e8:	785b      	ldrb	r3, [r3, #1]
 80055ea:	041b      	lsls	r3, r3, #16
 80055ec:	4319      	orrs	r1, r3
 80055ee:	4b2c      	ldr	r3, [pc, #176]	; (80056a0 <MX_LWIP_Init+0x290>)
 80055f0:	789b      	ldrb	r3, [r3, #2]
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	430b      	orrs	r3, r1
 80055f6:	492a      	ldr	r1, [pc, #168]	; (80056a0 <MX_LWIP_Init+0x290>)
 80055f8:	78c9      	ldrb	r1, [r1, #3]
 80055fa:	430b      	orrs	r3, r1
 80055fc:	0e1b      	lsrs	r3, r3, #24
 80055fe:	4313      	orrs	r3, r2
 8005600:	4a2a      	ldr	r2, [pc, #168]	; (80056ac <MX_LWIP_Init+0x29c>)
 8005602:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005604:	4b2a      	ldr	r3, [pc, #168]	; (80056b0 <MX_LWIP_Init+0x2a0>)
 8005606:	9302      	str	r3, [sp, #8]
 8005608:	4b2a      	ldr	r3, [pc, #168]	; (80056b4 <MX_LWIP_Init+0x2a4>)
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	2300      	movs	r3, #0
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	4b26      	ldr	r3, [pc, #152]	; (80056ac <MX_LWIP_Init+0x29c>)
 8005612:	4a25      	ldr	r2, [pc, #148]	; (80056a8 <MX_LWIP_Init+0x298>)
 8005614:	4923      	ldr	r1, [pc, #140]	; (80056a4 <MX_LWIP_Init+0x294>)
 8005616:	4828      	ldr	r0, [pc, #160]	; (80056b8 <MX_LWIP_Init+0x2a8>)
 8005618:	f00a f99a 	bl	800f950 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800561c:	4826      	ldr	r0, [pc, #152]	; (80056b8 <MX_LWIP_Init+0x2a8>)
 800561e:	f00a fb49 	bl	800fcb4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005622:	4b25      	ldr	r3, [pc, #148]	; (80056b8 <MX_LWIP_Init+0x2a8>)
 8005624:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005628:	089b      	lsrs	r3, r3, #2
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005634:	4820      	ldr	r0, [pc, #128]	; (80056b8 <MX_LWIP_Init+0x2a8>)
 8005636:	f00a fb4d 	bl	800fcd4 <netif_set_up>
 800563a:	e002      	b.n	8005642 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800563c:	481e      	ldr	r0, [pc, #120]	; (80056b8 <MX_LWIP_Init+0x2a8>)
 800563e:	f00a fbb5 	bl	800fdac <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005642:	491e      	ldr	r1, [pc, #120]	; (80056bc <MX_LWIP_Init+0x2ac>)
 8005644:	481c      	ldr	r0, [pc, #112]	; (80056b8 <MX_LWIP_Init+0x2a8>)
 8005646:	f00a fc47 	bl	800fed8 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800564a:	2200      	movs	r2, #0
 800564c:	2101      	movs	r1, #1
 800564e:	2001      	movs	r0, #1
 8005650:	f003 f900 	bl	8008854 <osSemaphoreNew>
 8005654:	4603      	mov	r3, r0
 8005656:	4a1a      	ldr	r2, [pc, #104]	; (80056c0 <MX_LWIP_Init+0x2b0>)
 8005658:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800565a:	4b1a      	ldr	r3, [pc, #104]	; (80056c4 <MX_LWIP_Init+0x2b4>)
 800565c:	4a16      	ldr	r2, [pc, #88]	; (80056b8 <MX_LWIP_Init+0x2a8>)
 800565e:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8005660:	4b17      	ldr	r3, [pc, #92]	; (80056c0 <MX_LWIP_Init+0x2b0>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a17      	ldr	r2, [pc, #92]	; (80056c4 <MX_LWIP_Init+0x2b4>)
 8005666:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005668:	2224      	movs	r2, #36	; 0x24
 800566a:	2100      	movs	r1, #0
 800566c:	4816      	ldr	r0, [pc, #88]	; (80056c8 <MX_LWIP_Init+0x2b8>)
 800566e:	f014 fd26 	bl	801a0be <memset>
  attributes.name = "LinkThr";
 8005672:	4b15      	ldr	r3, [pc, #84]	; (80056c8 <MX_LWIP_Init+0x2b8>)
 8005674:	4a15      	ldr	r2, [pc, #84]	; (80056cc <MX_LWIP_Init+0x2bc>)
 8005676:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005678:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <MX_LWIP_Init+0x2b8>)
 800567a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800567e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005680:	4b11      	ldr	r3, [pc, #68]	; (80056c8 <MX_LWIP_Init+0x2b8>)
 8005682:	2210      	movs	r2, #16
 8005684:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8005686:	4a10      	ldr	r2, [pc, #64]	; (80056c8 <MX_LWIP_Init+0x2b8>)
 8005688:	490e      	ldr	r1, [pc, #56]	; (80056c4 <MX_LWIP_Init+0x2b4>)
 800568a:	4811      	ldr	r0, [pc, #68]	; (80056d0 <MX_LWIP_Init+0x2c0>)
 800568c:	f002 feba 	bl	8008404 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005690:	bf00      	nop
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20005150 	.word	0x20005150
 800569c:	2000514c 	.word	0x2000514c
 80056a0:	200050ec 	.word	0x200050ec
 80056a4:	20005148 	.word	0x20005148
 80056a8:	20005154 	.word	0x20005154
 80056ac:	20005158 	.word	0x20005158
 80056b0:	0800ed59 	.word	0x0800ed59
 80056b4:	08005ce5 	.word	0x08005ce5
 80056b8:	20005114 	.word	0x20005114
 80056bc:	08005dc9 	.word	0x08005dc9
 80056c0:	200000a0 	.word	0x200000a0
 80056c4:	200050e4 	.word	0x200050e4
 80056c8:	200050f0 	.word	0x200050f0
 80056cc:	0801b00c 	.word	0x0801b00c
 80056d0:	08005d51 	.word	0x08005d51

080056d4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08e      	sub	sp, #56	; 0x38
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	605a      	str	r2, [r3, #4]
 80056e6:	609a      	str	r2, [r3, #8]
 80056e8:	60da      	str	r2, [r3, #12]
 80056ea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a44      	ldr	r2, [pc, #272]	; (8005804 <HAL_ETH_MspInit+0x130>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	f040 8081 	bne.w	80057fa <HAL_ETH_MspInit+0x126>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80056f8:	4b43      	ldr	r3, [pc, #268]	; (8005808 <HAL_ETH_MspInit+0x134>)
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	4a42      	ldr	r2, [pc, #264]	; (8005808 <HAL_ETH_MspInit+0x134>)
 80056fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005702:	6313      	str	r3, [r2, #48]	; 0x30
 8005704:	4b40      	ldr	r3, [pc, #256]	; (8005808 <HAL_ETH_MspInit+0x134>)
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570c:	623b      	str	r3, [r7, #32]
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	4b3d      	ldr	r3, [pc, #244]	; (8005808 <HAL_ETH_MspInit+0x134>)
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	4a3c      	ldr	r2, [pc, #240]	; (8005808 <HAL_ETH_MspInit+0x134>)
 8005716:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800571a:	6313      	str	r3, [r2, #48]	; 0x30
 800571c:	4b3a      	ldr	r3, [pc, #232]	; (8005808 <HAL_ETH_MspInit+0x134>)
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005724:	61fb      	str	r3, [r7, #28]
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	4b37      	ldr	r3, [pc, #220]	; (8005808 <HAL_ETH_MspInit+0x134>)
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	4a36      	ldr	r2, [pc, #216]	; (8005808 <HAL_ETH_MspInit+0x134>)
 800572e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005732:	6313      	str	r3, [r2, #48]	; 0x30
 8005734:	4b34      	ldr	r3, [pc, #208]	; (8005808 <HAL_ETH_MspInit+0x134>)
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005740:	4b31      	ldr	r3, [pc, #196]	; (8005808 <HAL_ETH_MspInit+0x134>)
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	4a30      	ldr	r2, [pc, #192]	; (8005808 <HAL_ETH_MspInit+0x134>)
 8005746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800574a:	6313      	str	r3, [r2, #48]	; 0x30
 800574c:	4b2e      	ldr	r3, [pc, #184]	; (8005808 <HAL_ETH_MspInit+0x134>)
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005758:	4b2b      	ldr	r3, [pc, #172]	; (8005808 <HAL_ETH_MspInit+0x134>)
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	4a2a      	ldr	r2, [pc, #168]	; (8005808 <HAL_ETH_MspInit+0x134>)
 800575e:	f043 0304 	orr.w	r3, r3, #4
 8005762:	6313      	str	r3, [r2, #48]	; 0x30
 8005764:	4b28      	ldr	r3, [pc, #160]	; (8005808 <HAL_ETH_MspInit+0x134>)
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005770:	4b25      	ldr	r3, [pc, #148]	; (8005808 <HAL_ETH_MspInit+0x134>)
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	4a24      	ldr	r2, [pc, #144]	; (8005808 <HAL_ETH_MspInit+0x134>)
 8005776:	f043 0301 	orr.w	r3, r3, #1
 800577a:	6313      	str	r3, [r2, #48]	; 0x30
 800577c:	4b22      	ldr	r3, [pc, #136]	; (8005808 <HAL_ETH_MspInit+0x134>)
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_11;
 8005788:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578e:	2302      	movs	r3, #2
 8005790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005792:	2300      	movs	r3, #0
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005796:	2303      	movs	r3, #3
 8005798:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800579a:	230b      	movs	r3, #11
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800579e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057a2:	4619      	mov	r1, r3
 80057a4:	4819      	ldr	r0, [pc, #100]	; (800580c <HAL_ETH_MspInit+0x138>)
 80057a6:	f7fc fe8d 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80057aa:	2332      	movs	r3, #50	; 0x32
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ae:	2302      	movs	r3, #2
 80057b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b2:	2300      	movs	r3, #0
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057b6:	2303      	movs	r3, #3
 80057b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057ba:	230b      	movs	r3, #11
 80057bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057c2:	4619      	mov	r1, r3
 80057c4:	4812      	ldr	r0, [pc, #72]	; (8005810 <HAL_ETH_MspInit+0x13c>)
 80057c6:	f7fc fe7d 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80057ca:	2386      	movs	r3, #134	; 0x86
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ce:	2302      	movs	r3, #2
 80057d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057d6:	2303      	movs	r3, #3
 80057d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057da:	230b      	movs	r3, #11
 80057dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057e2:	4619      	mov	r1, r3
 80057e4:	480b      	ldr	r0, [pc, #44]	; (8005814 <HAL_ETH_MspInit+0x140>)
 80057e6:	f7fc fe6d 	bl	80024c4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80057ea:	2200      	movs	r2, #0
 80057ec:	2105      	movs	r1, #5
 80057ee:	203d      	movs	r0, #61	; 0x3d
 80057f0:	f7fb fc1b 	bl	800102a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80057f4:	203d      	movs	r0, #61	; 0x3d
 80057f6:	f7fb fc34 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80057fa:	bf00      	nop
 80057fc:	3738      	adds	r7, #56	; 0x38
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40028000 	.word	0x40028000
 8005808:	40023800 	.word	0x40023800
 800580c:	40021800 	.word	0x40021800
 8005810:	40020800 	.word	0x40020800
 8005814:	40020000 	.word	0x40020000

08005818 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005820:	4b04      	ldr	r3, [pc, #16]	; (8005834 <HAL_ETH_RxCpltCallback+0x1c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f003 f917 	bl	8008a58 <osSemaphoreRelease>
}
 800582a:	bf00      	nop
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	200000a4 	.word	0x200000a4

08005838 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b090      	sub	sp, #64	; 0x40
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005840:	2300      	movs	r3, #0
 8005842:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005844:	4b5d      	ldr	r3, [pc, #372]	; (80059bc <low_level_init+0x184>)
 8005846:	4a5e      	ldr	r2, [pc, #376]	; (80059c0 <low_level_init+0x188>)
 8005848:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800584a:	4b5c      	ldr	r3, [pc, #368]	; (80059bc <low_level_init+0x184>)
 800584c:	2201      	movs	r2, #1
 800584e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8005850:	4b5a      	ldr	r3, [pc, #360]	; (80059bc <low_level_init+0x184>)
 8005852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005856:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005858:	4b58      	ldr	r3, [pc, #352]	; (80059bc <low_level_init+0x184>)
 800585a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800585e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005860:	4b56      	ldr	r3, [pc, #344]	; (80059bc <low_level_init+0x184>)
 8005862:	2200      	movs	r2, #0
 8005864:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005866:	2300      	movs	r3, #0
 8005868:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800586a:	2380      	movs	r3, #128	; 0x80
 800586c:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800586e:	23e1      	movs	r3, #225	; 0xe1
 8005870:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8005872:	2300      	movs	r3, #0
 8005874:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8005876:	2300      	movs	r3, #0
 8005878:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800587a:	2300      	movs	r3, #0
 800587c:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800587e:	4a4f      	ldr	r2, [pc, #316]	; (80059bc <low_level_init+0x184>)
 8005880:	f107 030c 	add.w	r3, r7, #12
 8005884:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8005886:	4b4d      	ldr	r3, [pc, #308]	; (80059bc <low_level_init+0x184>)
 8005888:	2201      	movs	r2, #1
 800588a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800588c:	4b4b      	ldr	r3, [pc, #300]	; (80059bc <low_level_init+0x184>)
 800588e:	2200      	movs	r2, #0
 8005890:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005892:	4b4a      	ldr	r3, [pc, #296]	; (80059bc <low_level_init+0x184>)
 8005894:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005898:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800589a:	4848      	ldr	r0, [pc, #288]	; (80059bc <low_level_init+0x184>)
 800589c:	f7fb fc8e 	bl	80011bc <HAL_ETH_Init>
 80058a0:	4603      	mov	r3, r0
 80058a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80058a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d108      	bne.n	80058c0 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058b4:	f043 0304 	orr.w	r3, r3, #4
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80058c0:	2304      	movs	r3, #4
 80058c2:	4a40      	ldr	r2, [pc, #256]	; (80059c4 <low_level_init+0x18c>)
 80058c4:	4940      	ldr	r1, [pc, #256]	; (80059c8 <low_level_init+0x190>)
 80058c6:	483d      	ldr	r0, [pc, #244]	; (80059bc <low_level_init+0x184>)
 80058c8:	f7fb fe12 	bl	80014f0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80058cc:	2304      	movs	r3, #4
 80058ce:	4a3f      	ldr	r2, [pc, #252]	; (80059cc <low_level_init+0x194>)
 80058d0:	493f      	ldr	r1, [pc, #252]	; (80059d0 <low_level_init+0x198>)
 80058d2:	483a      	ldr	r0, [pc, #232]	; (80059bc <low_level_init+0x184>)
 80058d4:	f7fb fe75 	bl	80015c2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2206      	movs	r2, #6
 80058dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80058e0:	4b36      	ldr	r3, [pc, #216]	; (80059bc <low_level_init+0x184>)
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	781a      	ldrb	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80058ec:	4b33      	ldr	r3, [pc, #204]	; (80059bc <low_level_init+0x184>)
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	785a      	ldrb	r2, [r3, #1]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80058f8:	4b30      	ldr	r3, [pc, #192]	; (80059bc <low_level_init+0x184>)
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	789a      	ldrb	r2, [r3, #2]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005904:	4b2d      	ldr	r3, [pc, #180]	; (80059bc <low_level_init+0x184>)
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	78da      	ldrb	r2, [r3, #3]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005910:	4b2a      	ldr	r3, [pc, #168]	; (80059bc <low_level_init+0x184>)
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	791a      	ldrb	r2, [r3, #4]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800591c:	4b27      	ldr	r3, [pc, #156]	; (80059bc <low_level_init+0x184>)
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	795a      	ldrb	r2, [r3, #5]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800592e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005936:	f043 030a 	orr.w	r3, r3, #10
 800593a:	b2da      	uxtb	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8005942:	2200      	movs	r2, #0
 8005944:	2101      	movs	r1, #1
 8005946:	2001      	movs	r0, #1
 8005948:	f002 ff84 	bl	8008854 <osSemaphoreNew>
 800594c:	4603      	mov	r3, r0
 800594e:	4a21      	ldr	r2, [pc, #132]	; (80059d4 <low_level_init+0x19c>)
 8005950:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005952:	f107 0314 	add.w	r3, r7, #20
 8005956:	2224      	movs	r2, #36	; 0x24
 8005958:	2100      	movs	r1, #0
 800595a:	4618      	mov	r0, r3
 800595c:	f014 fbaf 	bl	801a0be <memset>
  attributes.name = "EthIf";
 8005960:	4b1d      	ldr	r3, [pc, #116]	; (80059d8 <low_level_init+0x1a0>)
 8005962:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005964:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005968:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 800596a:	2330      	movs	r3, #48	; 0x30
 800596c:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800596e:	f107 0314 	add.w	r3, r7, #20
 8005972:	461a      	mov	r2, r3
 8005974:	6879      	ldr	r1, [r7, #4]
 8005976:	4819      	ldr	r0, [pc, #100]	; (80059dc <low_level_init+0x1a4>)
 8005978:	f002 fd44 	bl	8008404 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800597c:	480f      	ldr	r0, [pc, #60]	; (80059bc <low_level_init+0x184>)
 800597e:	f7fc f948 	bl	8001c12 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8005982:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005986:	461a      	mov	r2, r3
 8005988:	211d      	movs	r1, #29
 800598a:	480c      	ldr	r0, [pc, #48]	; (80059bc <low_level_init+0x184>)
 800598c:	f7fc f873 	bl	8001a76 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8005990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005992:	f043 030b 	orr.w	r3, r3, #11
 8005996:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8005998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599a:	461a      	mov	r2, r3
 800599c:	211d      	movs	r1, #29
 800599e:	4807      	ldr	r0, [pc, #28]	; (80059bc <low_level_init+0x184>)
 80059a0:	f7fc f8d1 	bl	8001b46 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80059a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80059a8:	461a      	mov	r2, r3
 80059aa:	211d      	movs	r1, #29
 80059ac:	4803      	ldr	r0, [pc, #12]	; (80059bc <low_level_init+0x184>)
 80059ae:	f7fc f862 	bl	8001a76 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80059b2:	bf00      	nop
 80059b4:	3740      	adds	r7, #64	; 0x40
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20006a2c 	.word	0x20006a2c
 80059c0:	40028000 	.word	0x40028000
 80059c4:	20006a74 	.word	0x20006a74
 80059c8:	2000515c 	.word	0x2000515c
 80059cc:	200051dc 	.word	0x200051dc
 80059d0:	200069ac 	.word	0x200069ac
 80059d4:	200000a4 	.word	0x200000a4
 80059d8:	0801b014 	.word	0x0801b014
 80059dc:	08005c85 	.word	0x08005c85

080059e0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08a      	sub	sp, #40	; 0x28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80059ea:	4b4b      	ldr	r3, [pc, #300]	; (8005b18 <low_level_output+0x138>)
 80059ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8005a02:	4b45      	ldr	r3, [pc, #276]	; (8005b18 <low_level_output+0x138>)
 8005a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a06:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	623b      	str	r3, [r7, #32]
 8005a10:	e05a      	b.n	8005ac8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	da03      	bge.n	8005a22 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005a1a:	23f8      	movs	r3, #248	; 0xf8
 8005a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8005a20:	e05c      	b.n	8005adc <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8005a22:	6a3b      	ldr	r3, [r7, #32]
 8005a24:	895b      	ldrh	r3, [r3, #10]
 8005a26:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005a2c:	e02f      	b.n	8005a8e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8005a2e:	69fa      	ldr	r2, [r7, #28]
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	18d0      	adds	r0, r2, r3
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	18d1      	adds	r1, r2, r3
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005a42:	1a9b      	subs	r3, r3, r2
 8005a44:	461a      	mov	r2, r3
 8005a46:	f014 fb2c 	bl	801a0a2 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	da03      	bge.n	8005a60 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8005a58:	23f8      	movs	r3, #248	; 0xf8
 8005a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8005a5e:	e03d      	b.n	8005adc <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005a70:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005a7c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005a88:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	4413      	add	r3, r2
 8005a94:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d8c8      	bhi.n	8005a2e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8005a9c:	69fa      	ldr	r2, [r7, #28]
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	18d0      	adds	r0, r2, r3
 8005aa2:	6a3b      	ldr	r3, [r7, #32]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4619      	mov	r1, r3
 8005aae:	f014 faf8 	bl	801a0a2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	623b      	str	r3, [r7, #32]
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1a1      	bne.n	8005a12 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8005ace:	6979      	ldr	r1, [r7, #20]
 8005ad0:	4811      	ldr	r0, [pc, #68]	; (8005b18 <low_level_output+0x138>)
 8005ad2:	f7fb fde3 	bl	800169c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005adc:	4b0e      	ldr	r3, [pc, #56]	; (8005b18 <low_level_output+0x138>)
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	f241 0314 	movw	r3, #4116	; 0x1014
 8005ae4:	4413      	add	r3, r2
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0320 	and.w	r3, r3, #32
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00d      	beq.n	8005b0c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8005af0:	4b09      	ldr	r3, [pc, #36]	; (8005b18 <low_level_output+0x138>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	f241 0314 	movw	r3, #4116	; 0x1014
 8005af8:	4413      	add	r3, r2
 8005afa:	2220      	movs	r2, #32
 8005afc:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8005afe:	4b06      	ldr	r3, [pc, #24]	; (8005b18 <low_level_output+0x138>)
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	f241 0304 	movw	r3, #4100	; 0x1004
 8005b06:	4413      	add	r3, r2
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005b0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3728      	adds	r7, #40	; 0x28
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20006a2c 	.word	0x20006a2c

08005b1c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08c      	sub	sp, #48	; 0x30
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005b24:	2300      	movs	r3, #0
 8005b26:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8005b40:	484f      	ldr	r0, [pc, #316]	; (8005c80 <low_level_input+0x164>)
 8005b42:	f7fb fe95 	bl	8001870 <HAL_ETH_GetReceivedFrame_IT>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <low_level_input+0x34>

    return NULL;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e092      	b.n	8005c76 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8005b50:	4b4b      	ldr	r3, [pc, #300]	; (8005c80 <low_level_input+0x164>)
 8005b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b54:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8005b56:	4b4a      	ldr	r3, [pc, #296]	; (8005c80 <low_level_input+0x164>)
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8005b5c:	89fb      	ldrh	r3, [r7, #14]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d007      	beq.n	8005b72 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005b62:	89fb      	ldrh	r3, [r7, #14]
 8005b64:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8005b68:	4619      	mov	r1, r3
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	f00a fa7e 	bl	801006c <pbuf_alloc>
 8005b70:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8005b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d04b      	beq.n	8005c10 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005b78:	4b41      	ldr	r3, [pc, #260]	; (8005c80 <low_level_input+0x164>)
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b86:	e040      	b.n	8005c0a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8005b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8a:	895b      	ldrh	r3, [r3, #10]
 8005b8c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005b92:	e021      	b.n	8005bd8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8005b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	18d0      	adds	r0, r2, r3
 8005b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	18d1      	adds	r1, r2, r3
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8005ba8:	1a9b      	subs	r3, r3, r2
 8005baa:	461a      	mov	r2, r3
 8005bac:	f014 fa79 	bl	801a0a2 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005bc6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8005bd2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d8d6      	bhi.n	8005b94 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	18d0      	adds	r0, r2, r3
 8005bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	f014 fa53 	bl	801a0a2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4413      	add	r3, r2
 8005c02:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1bb      	bne.n	8005b88 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8005c10:	4b1b      	ldr	r3, [pc, #108]	; (8005c80 <low_level_input+0x164>)
 8005c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c14:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005c16:	2300      	movs	r3, #0
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	e00b      	b.n	8005c34 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005c28:	6a3b      	ldr	r3, [r7, #32]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	3301      	adds	r3, #1
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	4b12      	ldr	r3, [pc, #72]	; (8005c80 <low_level_input+0x164>)
 8005c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d3ee      	bcc.n	8005c1c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8005c3e:	4b10      	ldr	r3, [pc, #64]	; (8005c80 <low_level_input+0x164>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8005c44:	4b0e      	ldr	r3, [pc, #56]	; (8005c80 <low_level_input+0x164>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	f241 0314 	movw	r3, #4116	; 0x1014
 8005c4c:	4413      	add	r3, r2
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00d      	beq.n	8005c74 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8005c58:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <low_level_input+0x164>)
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	f241 0314 	movw	r3, #4116	; 0x1014
 8005c60:	4413      	add	r3, r2
 8005c62:	2280      	movs	r2, #128	; 0x80
 8005c64:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8005c66:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <low_level_input+0x164>)
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	f241 0308 	movw	r3, #4104	; 0x1008
 8005c6e:	4413      	add	r3, r2
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]
  }
  return p;
 8005c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3730      	adds	r7, #48	; 0x30
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	20006a2c 	.word	0x20006a2c

08005c84 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005c90:	4b12      	ldr	r3, [pc, #72]	; (8005cdc <ethernetif_input+0x58>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f04f 31ff 	mov.w	r1, #4294967295
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f002 fe77 	bl	800898c <osSemaphoreAcquire>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1f5      	bne.n	8005c90 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005ca4:	480e      	ldr	r0, [pc, #56]	; (8005ce0 <ethernetif_input+0x5c>)
 8005ca6:	f014 f877 	bl	8019d98 <sys_mutex_lock>
        p = low_level_input( netif );
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f7ff ff36 	bl	8005b1c <low_level_input>
 8005cb0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00a      	beq.n	8005cce <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	68f9      	ldr	r1, [r7, #12]
 8005cbe:	68b8      	ldr	r0, [r7, #8]
 8005cc0:	4798      	blx	r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005cc8:	68b8      	ldr	r0, [r7, #8]
 8005cca:	f00a fcb3 	bl	8010634 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8005cce:	4804      	ldr	r0, [pc, #16]	; (8005ce0 <ethernetif_input+0x5c>)
 8005cd0:	f014 f871 	bl	8019db6 <sys_mutex_unlock>
      } while(p!=NULL);
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e4      	bne.n	8005ca4 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005cda:	e7d9      	b.n	8005c90 <ethernetif_input+0xc>
 8005cdc:	200000a4 	.word	0x200000a4
 8005ce0:	2000828c 	.word	0x2000828c

08005ce4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d106      	bne.n	8005d00 <ethernetif_init+0x1c>
 8005cf2:	4b0e      	ldr	r3, [pc, #56]	; (8005d2c <ethernetif_init+0x48>)
 8005cf4:	f240 2231 	movw	r2, #561	; 0x231
 8005cf8:	490d      	ldr	r1, [pc, #52]	; (8005d30 <ethernetif_init+0x4c>)
 8005cfa:	480e      	ldr	r0, [pc, #56]	; (8005d34 <ethernetif_init+0x50>)
 8005cfc:	f014 fa42 	bl	801a184 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2273      	movs	r2, #115	; 0x73
 8005d04:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2274      	movs	r2, #116	; 0x74
 8005d0c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a09      	ldr	r2, [pc, #36]	; (8005d38 <ethernetif_init+0x54>)
 8005d14:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a08      	ldr	r2, [pc, #32]	; (8005d3c <ethernetif_init+0x58>)
 8005d1a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff fd8b 	bl	8005838 <low_level_init>

  return ERR_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	0801b01c 	.word	0x0801b01c
 8005d30:	0801b038 	.word	0x0801b038
 8005d34:	0801b048 	.word	0x0801b048
 8005d38:	08017df9 	.word	0x08017df9
 8005d3c:	080059e1 	.word	0x080059e1

08005d40 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005d44:	f7fb f866 	bl	8000e14 <HAL_GetTick>
 8005d48:	4603      	mov	r3, r0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005d60:	f107 0308 	add.w	r3, r7, #8
 8005d64:	461a      	mov	r2, r3
 8005d66:	2101      	movs	r1, #1
 8005d68:	4816      	ldr	r0, [pc, #88]	; (8005dc4 <ethernetif_set_link+0x74>)
 8005d6a:	f7fb fe84 	bl	8001a76 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005d7e:	f003 0304 	and.w	r3, r3, #4
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d108      	bne.n	8005d98 <ethernetif_set_link+0x48>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f00a f83d 	bl	800fe10 <netif_set_link_up>
 8005d96:	e011      	b.n	8005dbc <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005da0:	089b      	lsrs	r3, r3, #2
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d007      	beq.n	8005dbc <ethernetif_set_link+0x6c>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d104      	bne.n	8005dbc <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f00a f85e 	bl	800fe78 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005dbc:	20c8      	movs	r0, #200	; 0xc8
 8005dbe:	f002 fbd3 	bl	8008568 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005dc2:	e7cd      	b.n	8005d60 <ethernetif_set_link+0x10>
 8005dc4:	20006a2c 	.word	0x20006a2c

08005dc8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005dde:	089b      	lsrs	r3, r3, #2
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d05d      	beq.n	8005ea6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005dea:	4b34      	ldr	r3, [pc, #208]	; (8005ebc <ethernetif_update_config+0xf4>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d03f      	beq.n	8005e72 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8005df2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005df6:	2100      	movs	r1, #0
 8005df8:	4830      	ldr	r0, [pc, #192]	; (8005ebc <ethernetif_update_config+0xf4>)
 8005dfa:	f7fb fea4 	bl	8001b46 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8005dfe:	f7fb f809 	bl	8000e14 <HAL_GetTick>
 8005e02:	4603      	mov	r3, r0
 8005e04:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005e06:	f107 0308 	add.w	r3, r7, #8
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	482b      	ldr	r0, [pc, #172]	; (8005ebc <ethernetif_update_config+0xf4>)
 8005e10:	f7fb fe31 	bl	8001a76 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005e14:	f7fa fffe 	bl	8000e14 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e22:	d828      	bhi.n	8005e76 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f003 0320 	and.w	r3, r3, #32
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0eb      	beq.n	8005e06 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005e2e:	f107 0308 	add.w	r3, r7, #8
 8005e32:	461a      	mov	r2, r3
 8005e34:	2110      	movs	r1, #16
 8005e36:	4821      	ldr	r0, [pc, #132]	; (8005ebc <ethernetif_update_config+0xf4>)
 8005e38:	f7fb fe1d 	bl	8001a76 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d004      	beq.n	8005e50 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8005e46:	4b1d      	ldr	r3, [pc, #116]	; (8005ebc <ethernetif_update_config+0xf4>)
 8005e48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e4c:	60da      	str	r2, [r3, #12]
 8005e4e:	e002      	b.n	8005e56 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005e50:	4b1a      	ldr	r3, [pc, #104]	; (8005ebc <ethernetif_update_config+0xf4>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8005e60:	4b16      	ldr	r3, [pc, #88]	; (8005ebc <ethernetif_update_config+0xf4>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	609a      	str	r2, [r3, #8]
 8005e66:	e016      	b.n	8005e96 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8005e68:	4b14      	ldr	r3, [pc, #80]	; (8005ebc <ethernetif_update_config+0xf4>)
 8005e6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e6e:	609a      	str	r2, [r3, #8]
 8005e70:	e011      	b.n	8005e96 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8005e72:	bf00      	nop
 8005e74:	e000      	b.n	8005e78 <ethernetif_update_config+0xb0>
          goto error;
 8005e76:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005e78:	4b10      	ldr	r3, [pc, #64]	; (8005ebc <ethernetif_update_config+0xf4>)
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	08db      	lsrs	r3, r3, #3
 8005e7e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8005e80:	4b0e      	ldr	r3, [pc, #56]	; (8005ebc <ethernetif_update_config+0xf4>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	085b      	lsrs	r3, r3, #1
 8005e86:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	2100      	movs	r1, #0
 8005e90:	480a      	ldr	r0, [pc, #40]	; (8005ebc <ethernetif_update_config+0xf4>)
 8005e92:	f7fb fe58 	bl	8001b46 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8005e96:	2100      	movs	r1, #0
 8005e98:	4808      	ldr	r0, [pc, #32]	; (8005ebc <ethernetif_update_config+0xf4>)
 8005e9a:	f7fb ff19 	bl	8001cd0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8005e9e:	4807      	ldr	r0, [pc, #28]	; (8005ebc <ethernetif_update_config+0xf4>)
 8005ea0:	f7fb feb7 	bl	8001c12 <HAL_ETH_Start>
 8005ea4:	e002      	b.n	8005eac <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005ea6:	4805      	ldr	r0, [pc, #20]	; (8005ebc <ethernetif_update_config+0xf4>)
 8005ea8:	f7fb fee2 	bl	8001c70 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f807 	bl	8005ec0 <ethernetif_notify_conn_changed>
}
 8005eb2:	bf00      	nop
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	20006a2c 	.word	0x20006a2c

08005ec0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <Read_Coil>:
#include "Modbus_DeviceTrace.h"
#include "Modbus.h"


bool Read_Coil(uint16_t Addr, modbusHandler_t *modH)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b085      	sub	sp, #20
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	6039      	str	r1, [r7, #0]
 8005ede:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < MODBUS_SLAVE_COIL_NUM ; i++)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	e015      	b.n	8005f12 <Read_Coil+0x3e>
    {
        if(Addr == modH->Device->Coil[i].Addr)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	320a      	adds	r2, #10
 8005ef0:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8005ef4:	88fa      	ldrh	r2, [r7, #6]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d108      	bne.n	8005f0c <Read_Coil+0x38>
        {
            return modH->Device->Coil[i].Value;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	330a      	adds	r3, #10
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	789b      	ldrb	r3, [r3, #2]
 8005f0a:	e005      	b.n	8005f18 <Read_Coil+0x44>
    for(int i = 0; i < MODBUS_SLAVE_COIL_NUM ; i++)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	3301      	adds	r3, #1
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b09      	cmp	r3, #9
 8005f16:	dde6      	ble.n	8005ee6 <Read_Coil+0x12>
        }
    }
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <Read_Reg>:

uint16_t Read_Reg(uint16_t Addr, modbusHandler_t *modH)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	6039      	str	r1, [r7, #0]
 8005f2e:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < MODBUS_SLAVE_REG_NUM ; i++)
 8005f30:	2300      	movs	r3, #0
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	e013      	b.n	8005f5e <Read_Reg+0x3a>
    {
        if(Addr == modH->Device->Reg[i].Addr)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8005f42:	88fa      	ldrh	r2, [r7, #6]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d107      	bne.n	8005f58 <Read_Reg+0x34>
        {
            return modH->Device->Reg[i].Value;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	885b      	ldrh	r3, [r3, #2]
 8005f56:	e005      	b.n	8005f64 <Read_Reg+0x40>
    for(int i = 0; i < MODBUS_SLAVE_REG_NUM ; i++)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b09      	cmp	r3, #9
 8005f62:	dde8      	ble.n	8005f36 <Read_Reg+0x12>
        }
    } 
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <Write_Coil>:

void Write_Coil(uint16_t Addr, uint16_t Value, modbusHandler_t *modH)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	603a      	str	r2, [r7, #0]
 8005f7a:	80fb      	strh	r3, [r7, #6]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	80bb      	strh	r3, [r7, #4]
    for(int i = 0; i < MODBUS_SLAVE_COIL_NUM ; i++)
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	e01b      	b.n	8005fbe <Write_Coil+0x4e>
    {
        if(Addr == modH->Device->Coil[i].Addr)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	320a      	adds	r2, #10
 8005f90:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8005f94:	88fa      	ldrh	r2, [r7, #6]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d10e      	bne.n	8005fb8 <Write_Coil+0x48>
        {
            modH->Device->Coil[i].Value = Value;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8005fa0:	88bb      	ldrh	r3, [r7, #4]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bf14      	ite	ne
 8005fa6:	2301      	movne	r3, #1
 8005fa8:	2300      	moveq	r3, #0
 8005faa:	b2d9      	uxtb	r1, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	330a      	adds	r3, #10
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	460a      	mov	r2, r1
 8005fb6:	709a      	strb	r2, [r3, #2]
    for(int i = 0; i < MODBUS_SLAVE_COIL_NUM ; i++)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b09      	cmp	r3, #9
 8005fc2:	dde0      	ble.n	8005f86 <Write_Coil+0x16>
        }
    }
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <Write_Reg>:
void Write_Reg(uint16_t Addr, uint16_t Value, modbusHandler_t *modH)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	4603      	mov	r3, r0
 8005fda:	603a      	str	r2, [r7, #0]
 8005fdc:	80fb      	strh	r3, [r7, #6]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	80bb      	strh	r3, [r7, #4]
    for(int i = 0; i < MODBUS_SLAVE_REG_NUM ; i++)
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60fb      	str	r3, [r7, #12]
 8005fe6:	e013      	b.n	8006010 <Write_Reg+0x3e>
    {
        if(Addr == modH->Device->Reg[i].Addr)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8005ff4:	88fa      	ldrh	r2, [r7, #6]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d107      	bne.n	800600a <Write_Reg+0x38>
        {
            modH->Device->Reg[i].Value = Value;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	88ba      	ldrh	r2, [r7, #4]
 8006008:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < MODBUS_SLAVE_REG_NUM ; i++)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3301      	adds	r3, #1
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b09      	cmp	r3, #9
 8006014:	dde8      	ble.n	8005fe8 <Write_Reg+0x16>
        }
    } 
}
 8006016:	bf00      	nop
 8006018:	bf00      	nop
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8006030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006034:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8006036:	2300      	movs	r3, #0
 8006038:	74fb      	strb	r3, [r7, #19]
 800603a:	e022      	b.n	8006082 <calcCRC+0x5e>
    {
        temp = temp ^ Buffer[i];
 800603c:	7cfb      	ldrb	r3, [r7, #19]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	4413      	add	r3, r2
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	461a      	mov	r2, r3
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	4053      	eors	r3, r2
 800604a:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800604c:	2301      	movs	r3, #1
 800604e:	74bb      	strb	r3, [r7, #18]
 8006050:	e011      	b.n	8006076 <calcCRC+0x52>
        {
            flag = temp & 0x0001;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	085b      	lsrs	r3, r3, #1
 800605e:	617b      	str	r3, [r7, #20]
            if (flag)
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d004      	beq.n	8006070 <calcCRC+0x4c>
                temp ^= 0xA001;
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	f24a 0301 	movw	r3, #40961	; 0xa001
 800606c:	4053      	eors	r3, r2
 800606e:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8006070:	7cbb      	ldrb	r3, [r7, #18]
 8006072:	3301      	adds	r3, #1
 8006074:	74bb      	strb	r3, [r7, #18]
 8006076:	7cbb      	ldrb	r3, [r7, #18]
 8006078:	2b08      	cmp	r3, #8
 800607a:	d9ea      	bls.n	8006052 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 800607c:	7cfb      	ldrb	r3, [r7, #19]
 800607e:	3301      	adds	r3, #1
 8006080:	74fb      	strb	r3, [r7, #19]
 8006082:	7cfa      	ldrb	r2, [r7, #19]
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	429a      	cmp	r2, r3
 8006088:	d3d8      	bcc.n	800603c <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	0a1b      	lsrs	r3, r3, #8
 800608e:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	021b      	lsls	r3, r3, #8
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	b29b      	uxth	r3, r3
 800609e:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	b29b      	uxth	r3, r3

}
 80060a4:	4618      	mov	r0, r3
 80060a6:	371c      	adds	r7, #28
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <RingAdd>:
/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80060c2:	4619      	mov	r1, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	78fa      	ldrb	r2, [r7, #3]
 80060c8:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80060d0:	3301      	adds	r3, #1
 80060d2:	425a      	negs	r2, r3
 80060d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80060dc:	bf58      	it	pl
 80060de:	4253      	negpl	r3, r2
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80060ee:	2b80      	cmp	r3, #128	; 0x80
 80060f0:	d113      	bne.n	800611a <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006100:	3301      	adds	r3, #1
 8006102:	425a      	negs	r2, r3
 8006104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006108:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800610c:	bf58      	it	pl
 800610e:	4253      	negpl	r3, r2
 8006110:	b2da      	uxtb	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 8006118:	e00b      	b.n	8006132 <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006128:	3301      	adds	r3, #1
 800612a:	b2da      	uxtb	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <RingGetAllBytes>:


// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b082      	sub	sp, #8
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800614e:	461a      	mov	r2, r3
 8006150:	6839      	ldr	r1, [r7, #0]
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f805 	bl	8006162 <RingGetNBytes>
 8006158:	4603      	mov	r3, r0
}
 800615a:	4618      	mov	r0, r3
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b086      	sub	sp, #24
 8006166:	af00      	add	r7, sp, #0
 8006168:	60f8      	str	r0, [r7, #12]
 800616a:	60b9      	str	r1, [r7, #8]
 800616c:	4613      	mov	r3, r2
 800616e:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8006176:	2b00      	cmp	r3, #0
 8006178:	d002      	beq.n	8006180 <RingGetNBytes+0x1e>
 800617a:	79fb      	ldrb	r3, [r7, #7]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <RingGetNBytes+0x22>
 8006180:	2300      	movs	r3, #0
 8006182:	e03e      	b.n	8006202 <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 8006184:	79fb      	ldrb	r3, [r7, #7]
 8006186:	2b80      	cmp	r3, #128	; 0x80
 8006188:	d901      	bls.n	800618e <RingGetNBytes+0x2c>
 800618a:	2300      	movs	r3, #0
 800618c:	e039      	b.n	8006202 <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800618e:	2300      	movs	r3, #0
 8006190:	75fb      	strb	r3, [r7, #23]
 8006192:	e01b      	b.n	80061cc <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800619a:	4619      	mov	r1, r3
 800619c:	7dfb      	ldrb	r3, [r7, #23]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	4413      	add	r3, r2
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	5c52      	ldrb	r2, [r2, r1]
 80061a6:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061ae:	3301      	adds	r3, #1
 80061b0:	425a      	negs	r2, r3
 80061b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061ba:	bf58      	it	pl
 80061bc:	4253      	negpl	r3, r2
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 80061c6:	7dfb      	ldrb	r3, [r7, #23]
 80061c8:	3301      	adds	r3, #1
 80061ca:	75fb      	strb	r3, [r7, #23]
 80061cc:	7dfa      	ldrb	r2, [r7, #23]
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d205      	bcs.n	80061e0 <RingGetNBytes+0x7e>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80061da:	7dfa      	ldrb	r2, [r7, #23]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d3d9      	bcc.n	8006194 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 f805 	bl	800620a <RingClear>

	return uCounter;
 8006200:	7dfb      	ldrb	r3, [r7, #23]
}
 8006202:	4618      	mov	r0, r3
 8006204:	3718      	adds	r7, #24
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <ModbusQuery>:


void ModbusQuery(modbusHandler_t * modH, modbus_t telegram )
{
 800623e:	b084      	sub	sp, #16
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	f107 0014 	add.w	r0, r7, #20
 800624c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX tail Queue of Modbus
	if (modH->uModbusType == MB_MASTER)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b04      	cmp	r3, #4
 8006256:	d10d      	bne.n	8006274 <ModbusQuery+0x36>
	{
	telegram.u32CurrentTask = (uint32_t *) osThreadGetId();
 8006258:	f002 f97a 	bl	8008550 <osThreadGetId>
 800625c:	4603      	mov	r3, r0
 800625e:	623b      	str	r3, [r7, #32]
	xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8006266:	f107 0114 	add.w	r1, r7, #20
 800626a:	2300      	movs	r3, #0
 800626c:	2200      	movs	r2, #0
 800626e:	f003 f9bb 	bl	80095e8 <xQueueGenericSend>
	}
	else{
		while(1);// error a slave cannot send queries as a master
	}
}
 8006272:	e000      	b.n	8006276 <ModbusQuery+0x38>
		while(1);// error a slave cannot send queries as a master
 8006274:	e7fe      	b.n	8006274 <ModbusQuery+0x36>
}
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800627e:	b004      	add	sp, #16
 8006280:	4770      	bx	lr
	...

08006284 <MMaster_Init>:
};



void MMaster_Init(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
	Master_Modbus.uModbusType = MB_MASTER;
 8006288:	4b14      	ldr	r3, [pc, #80]	; (80062dc <MMaster_Init+0x58>)
 800628a:	2204      	movs	r2, #4
 800628c:	701a      	strb	r2, [r3, #0]
	Master_Modbus.port =  &MASTER_MODBUS_PORT; 
 800628e:	4b13      	ldr	r3, [pc, #76]	; (80062dc <MMaster_Init+0x58>)
 8006290:	4a13      	ldr	r2, [pc, #76]	; (80062e0 <MMaster_Init+0x5c>)
 8006292:	605a      	str	r2, [r3, #4]
	Master_Modbus.u8id = 0; 
 8006294:	4b11      	ldr	r3, [pc, #68]	; (80062dc <MMaster_Init+0x58>)
 8006296:	2200      	movs	r2, #0
 8006298:	721a      	strb	r2, [r3, #8]
	Master_Modbus.u16timeOut = 1000;
 800629a:	4b10      	ldr	r3, [pc, #64]	; (80062dc <MMaster_Init+0x58>)
 800629c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062a0:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	Master_Modbus.EN_Port = NULL; 
 80062a4:	4b0d      	ldr	r3, [pc, #52]	; (80062dc <MMaster_Init+0x58>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	60da      	str	r2, [r3, #12]
	Master_Modbus.u16regs = Master_ModbusData;
 80062aa:	4b0c      	ldr	r3, [pc, #48]	; (80062dc <MMaster_Init+0x58>)
 80062ac:	4a0d      	ldr	r2, [pc, #52]	; (80062e4 <MMaster_Init+0x60>)
 80062ae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	Master_Modbus.u16regsize= sizeof(Master_ModbusData)/sizeof(Master_ModbusData[0]);
 80062b2:	4b0a      	ldr	r3, [pc, #40]	; (80062dc <MMaster_Init+0x58>)
 80062b4:	220a      	movs	r2, #10
 80062b6:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	Master_Modbus.xTypeHW = USART_HW;
 80062ba:	4b08      	ldr	r3, [pc, #32]	; (80062dc <MMaster_Init+0x58>)
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	Master_Modbus.MasterDevice = &MasterDevice;
 80062c2:	4b06      	ldr	r3, [pc, #24]	; (80062dc <MMaster_Init+0x58>)
 80062c4:	4a08      	ldr	r2, [pc, #32]	; (80062e8 <MMaster_Init+0x64>)
 80062c6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac




	Master_ModbusInit(&Master_Modbus);
 80062ca:	4804      	ldr	r0, [pc, #16]	; (80062dc <MMaster_Init+0x58>)
 80062cc:	f000 f80e 	bl	80062ec <Master_ModbusInit>
	Master_ModbusStart(&Master_Modbus);
 80062d0:	4802      	ldr	r0, [pc, #8]	; (80062dc <MMaster_Init+0x58>)
 80062d2:	f000 f89b 	bl	800640c <Master_ModbusStart>
}
 80062d6:	bf00      	nop
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20004c68 	.word	0x20004c68
 80062e0:	20004f74 	.word	0x20004f74
 80062e4:	200050cc 	.word	0x200050cc
 80062e8:	2000507c 	.word	0x2000507c

080062ec <Master_ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void Master_ModbusInit(modbusHandler_t * modH)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	6078      	str	r0, [r7, #4]

  if (Master_numberHandlers < MAX_M_HANDLERS)
 80062f4:	4b3b      	ldr	r3, [pc, #236]	; (80063e4 <Master_ModbusInit+0xf8>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d86f      	bhi.n	80063dc <Master_ModbusInit+0xf0>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	33c4      	adds	r3, #196	; 0xc4
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff ff82 	bl	800620a <RingClear>

	  if (modH->uModbusType == MB_MASTER)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b04      	cmp	r3, #4
 800630c:	d12e      	bne.n	800636c <Master_ModbusInit+0x80>
		  else
		  {
		     modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &Master_myTaskModbusB_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &Master_myTaskModbusB_attributes);
 800630e:	4a36      	ldr	r2, [pc, #216]	; (80063e8 <Master_ModbusInit+0xfc>)
 8006310:	6879      	ldr	r1, [r7, #4]
 8006312:	4836      	ldr	r0, [pc, #216]	; (80063ec <Master_ModbusInit+0x100>)
 8006314:	f002 f876 	bl	8008404 <osThreadNew>
 8006318:	4602      	mov	r2, r0
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8006326:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 800632e:	4a30      	ldr	r2, [pc, #192]	; (80063f0 <Master_ModbusInit+0x104>)
 8006330:	9200      	str	r2, [sp, #0]
 8006332:	2200      	movs	r2, #0
 8006334:	482f      	ldr	r0, [pc, #188]	; (80063f4 <Master_ModbusInit+0x108>)
 8006336:	f005 fadf 	bl	800b8f8 <xTimerCreate>
 800633a:	4602      	mov	r2, r0
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
						(TimerCallbackFunction_t) Master_vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006348:	2b00      	cmp	r3, #0
 800634a:	d100      	bne.n	800634e <Master_ModbusInit+0x62>
		  {
			  while(1); //error creating timer, check heap and stack size
 800634c:	e7fe      	b.n	800634c <Master_ModbusInit+0x60>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &Master_QueueTelegram_attributes);
 800634e:	4a2a      	ldr	r2, [pc, #168]	; (80063f8 <Master_ModbusInit+0x10c>)
 8006350:	2118      	movs	r1, #24
 8006352:	2002      	movs	r0, #2
 8006354:	f002 fc0e 	bl	8008b74 <osMessageQueueNew>
 8006358:	4602      	mov	r2, r0
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		  if(modH->QueueTelegramHandle == NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <Master_ModbusInit+0x82>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800636a:	e7fe      	b.n	800636a <Master_ModbusInit+0x7e>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 800636c:	e7fe      	b.n	800636c <Master_ModbusInit+0x80>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006374:	2b00      	cmp	r3, #0
 8006376:	d100      	bne.n	800637a <Master_ModbusInit+0x8e>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 8006378:	e7fe      	b.n	8006378 <Master_ModbusInit+0x8c>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8006380:	4a1e      	ldr	r2, [pc, #120]	; (80063fc <Master_ModbusInit+0x110>)
 8006382:	9200      	str	r2, [sp, #0]
 8006384:	2200      	movs	r2, #0
 8006386:	2105      	movs	r1, #5
 8006388:	481d      	ldr	r0, [pc, #116]	; (8006400 <Master_ModbusInit+0x114>)
 800638a:	f005 fab5 	bl	800b8f8 <xTimerCreate>
 800638e:	4602      	mov	r2, r0
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
                                    (TimerCallbackFunction_t) Master_vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800639c:	2b00      	cmp	r3, #0
 800639e:	d100      	bne.n	80063a2 <Master_ModbusInit+0xb6>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 80063a0:	e7fe      	b.n	80063a0 <Master_ModbusInit+0xb4>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &Master_ModBusSphr_attributes);
 80063a2:	4a18      	ldr	r2, [pc, #96]	; (8006404 <Master_ModbusInit+0x118>)
 80063a4:	2101      	movs	r1, #1
 80063a6:	2001      	movs	r0, #1
 80063a8:	f002 fa54 	bl	8008854 <osSemaphoreNew>
 80063ac:	4602      	mov	r2, r0
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	  if(modH->ModBusSphrHandle == NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d100      	bne.n	80063c0 <Master_ModbusInit+0xd4>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 80063be:	e7fe      	b.n	80063be <Master_ModbusInit+0xd2>
	  }

	  MastermHandler[Master_numberHandlers] = modH;
 80063c0:	4b08      	ldr	r3, [pc, #32]	; (80063e4 <Master_ModbusInit+0xf8>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	4619      	mov	r1, r3
 80063c6:	4a10      	ldr	r2, [pc, #64]	; (8006408 <Master_ModbusInit+0x11c>)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  Master_numberHandlers++;
 80063ce:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <Master_ModbusInit+0xf8>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	3301      	adds	r3, #1
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	4b03      	ldr	r3, [pc, #12]	; (80063e4 <Master_ModbusInit+0xf8>)
 80063d8:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 80063da:	e000      	b.n	80063de <Master_ModbusInit+0xf2>
	  while(1); //error no more Modbus handlers supported
 80063dc:	e7fe      	b.n	80063dc <Master_ModbusInit+0xf0>
}
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	200000a8 	.word	0x200000a8
 80063e8:	0801e65c 	.word	0x0801e65c
 80063ec:	08006c8d 	.word	0x08006c8d
 80063f0:	08006599 	.word	0x08006599
 80063f4:	0801b0a4 	.word	0x0801b0a4
 80063f8:	0801e644 	.word	0x0801e644
 80063fc:	08006515 	.word	0x08006515
 8006400:	0801b0b4 	.word	0x0801b0b4
 8006404:	0801e680 	.word	0x0801e680
 8006408:	20004c60 	.word	0x20004c60

0800640c <Master_ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void Master_ModbusStart(modbusHandler_t * modH)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800641a:	2b01      	cmp	r3, #1
 800641c:	d00f      	beq.n	800643e <Master_ModbusStart+0x32>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8006424:	2b03      	cmp	r3, #3
 8006426:	d00a      	beq.n	800643e <Master_ModbusStart+0x32>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800642e:	2b02      	cmp	r3, #2
 8006430:	d005      	beq.n	800643e <Master_ModbusStart+0x32>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8006438:	2b04      	cmp	r3, #4
 800643a:	d000      	beq.n	800643e <Master_ModbusStart+0x32>
	{

		while(1); //ERROR select the type of hardware
 800643c:	e7fe      	b.n	800643c <Master_ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8006444:	2b04      	cmp	r3, #4
 8006446:	d100      	bne.n	800644a <Master_ModbusStart+0x3e>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 8006448:	e7fe      	b.n	8006448 <Master_ModbusStart+0x3c>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8006450:	2b01      	cmp	r3, #1
 8006452:	d004      	beq.n	800645e <Master_ModbusStart+0x52>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800645a:	2b04      	cmp	r3, #4
 800645c:	d13c      	bne.n	80064d8 <Master_ModbusStart+0xcc>
	{

	      if (modH->EN_Port != NULL )
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d007      	beq.n	8006476 <Master_ModbusStart+0x6a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68d8      	ldr	r0, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	8a1b      	ldrh	r3, [r3, #16]
 800646e:	2200      	movs	r2, #0
 8006470:	4619      	mov	r1, r3
 8006472:	f7fc f9d3 	bl	800281c <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	2b03      	cmp	r3, #3
 800647c:	d105      	bne.n	800648a <Master_ModbusStart+0x7e>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006484:	2b00      	cmp	r3, #0
 8006486:	d100      	bne.n	800648a <Master_ModbusStart+0x7e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8006488:	e7fe      	b.n	8006488 <Master_ModbusStart+0x7c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 800648a:	bf00      	nop
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	4618      	mov	r0, r3
 8006492:	f7fe f805 	bl	80044a0 <HAL_UART_GetState>
 8006496:	4603      	mov	r3, r0
 8006498:	2b20      	cmp	r3, #32
 800649a:	d1f7      	bne.n	800648c <Master_ModbusStart+0x80>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6858      	ldr	r0, [r3, #4]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	33a6      	adds	r3, #166	; 0xa6
 80064a4:	2201      	movs	r2, #1
 80064a6:	4619      	mov	r1, r3
 80064a8:	f7fd fb58 	bl	8003b5c <HAL_UART_Receive_IT>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d000      	beq.n	80064b4 <Master_ModbusStart+0xa8>
          {
                while(1)
 80064b2:	e7fe      	b.n	80064b2 <Master_ModbusStart+0xa6>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	7a1b      	ldrb	r3, [r3, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d004      	beq.n	80064c6 <Master_ModbusStart+0xba>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b04      	cmp	r3, #4
 80064c2:	d100      	bne.n	80064c6 <Master_ModbusStart+0xba>
          {
        	  while(1)
 80064c4:	e7fe      	b.n	80064c4 <Master_ModbusStart+0xb8>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	7a1b      	ldrb	r3, [r3, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d104      	bne.n	80064d8 <Master_ModbusStart+0xcc>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d100      	bne.n	80064d8 <Master_ModbusStart+0xcc>
          {
             	  while(1)
 80064d6:	e7fe      	b.n	80064d6 <Master_ModbusStart+0xca>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 800650c:	bf00      	nop
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <Master_vTimerCallbackT35>:



void Master_vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af02      	add	r7, sp, #8
 800651a:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < Master_numberHandlers; i++)
 800651c:	2300      	movs	r3, #0
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	e02a      	b.n	8006578 <Master_vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)MastermHandler[i]->xTimerT35 ==  pxTimer ){
 8006522:	4a1b      	ldr	r2, [pc, #108]	; (8006590 <Master_vTimerCallbackT35+0x7c>)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800652a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	d11e      	bne.n	8006572 <Master_vTimerCallbackT35+0x5e>
			if(MastermHandler[i]->uModbusType == MB_MASTER)
 8006534:	4a16      	ldr	r2, [pc, #88]	; (8006590 <Master_vTimerCallbackT35+0x7c>)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	2b04      	cmp	r3, #4
 8006540:	d10c      	bne.n	800655c <Master_vTimerCallbackT35+0x48>
			{
				xTimerStop(MastermHandler[i]->xTimerTimeout,0);
 8006542:	4a13      	ldr	r2, [pc, #76]	; (8006590 <Master_vTimerCallbackT35+0x7c>)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800654a:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 800654e:	2300      	movs	r3, #0
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	2300      	movs	r3, #0
 8006554:	2200      	movs	r2, #0
 8006556:	2103      	movs	r1, #3
 8006558:	f005 fa2c 	bl	800b9b4 <xTimerGenericCommand>
			}
			xTaskNotify(MastermHandler[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 800655c:	4a0c      	ldr	r2, [pc, #48]	; (8006590 <Master_vTimerCallbackT35+0x7c>)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006564:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8006568:	2300      	movs	r3, #0
 800656a:	2203      	movs	r2, #3
 800656c:	2100      	movs	r1, #0
 800656e:	f004 ff75 	bl	800b45c <xTaskGenericNotify>
	for(i = 0; i < Master_numberHandlers; i++)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3301      	adds	r3, #1
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	4b06      	ldr	r3, [pc, #24]	; (8006594 <Master_vTimerCallbackT35+0x80>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	461a      	mov	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	4293      	cmp	r3, r2
 8006582:	dbce      	blt.n	8006522 <Master_vTimerCallbackT35+0xe>
		}

	}
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20004c60 	.word	0x20004c60
 8006594:	200000a8 	.word	0x200000a8

08006598 <Master_vTimerCallbackTimeout>:

void Master_vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < Master_numberHandlers; i++)
 80065a0:	2300      	movs	r3, #0
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	e017      	b.n	80065d6 <Master_vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)MastermHandler[i]->xTimerTimeout ==  pxTimer ){
 80065a6:	4a11      	ldr	r2, [pc, #68]	; (80065ec <Master_vTimerCallbackTimeout+0x54>)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d10b      	bne.n	80065d0 <Master_vTimerCallbackTimeout+0x38>
				xTaskNotify(MastermHandler[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 80065b8:	4a0c      	ldr	r2, [pc, #48]	; (80065ec <Master_vTimerCallbackTimeout+0x54>)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065c0:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 80065c4:	2300      	movs	r3, #0
 80065c6:	2203      	movs	r2, #3
 80065c8:	f06f 0107 	mvn.w	r1, #7
 80065cc:	f004 ff46 	bl	800b45c <xTaskGenericNotify>
	for(i = 0; i < Master_numberHandlers; i++)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3301      	adds	r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	4b06      	ldr	r3, [pc, #24]	; (80065f0 <Master_vTimerCallbackTimeout+0x58>)
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4293      	cmp	r3, r2
 80065e0:	dbe1      	blt.n	80065a6 <Master_vTimerCallbackTimeout+0xe>
		}

	}

}
 80065e2:	bf00      	nop
 80065e4:	bf00      	nop
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	20004c60 	.word	0x20004c60
 80065f0:	200000a8 	.word	0x200000a8

080065f4 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 80065f4:	b084      	sub	sp, #16
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
 80065fe:	f107 001c 	add.w	r0, r7, #28
 8006602:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	73bb      	strb	r3, [r7, #14]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006610:	f04f 31ff 	mov.w	r1, #4294967295
 8006614:	4618      	mov	r0, r3
 8006616:	f003 fb09 	bl	8009c2c <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	7a1b      	ldrb	r3, [r3, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <SendQuery+0x32>
 8006622:	23ff      	movs	r3, #255	; 0xff
 8006624:	73bb      	strb	r3, [r7, #14]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f993 30a7 	ldrsb.w	r3, [r3, #167]	; 0xa7
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <SendQuery+0x40>
 8006630:	23fe      	movs	r3, #254	; 0xfe
 8006632:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8006634:	7f3b      	ldrb	r3, [r7, #28]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d002      	beq.n	8006640 <SendQuery+0x4c>
 800663a:	7f3b      	ldrb	r3, [r7, #28]
 800663c:	2bf7      	cmp	r3, #247	; 0xf7
 800663e:	d901      	bls.n	8006644 <SendQuery+0x50>
 8006640:	23f7      	movs	r3, #247	; 0xf7
 8006642:	73bb      	strb	r3, [r7, #14]


	if(error)
 8006644:	7bbb      	ldrb	r3, [r7, #14]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00e      	beq.n	8006668 <SendQuery+0x74>
	{
		 modH->i8lastError = error;
 800664a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8006658:	2300      	movs	r3, #0
 800665a:	2200      	movs	r2, #0
 800665c:	2100      	movs	r1, #0
 800665e:	f002 ffc3 	bl	80095e8 <xQueueGenericSend>
		 return error;
 8006662:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006666:	e129      	b.n	80068bc <SendQuery+0x2c8>
	}


	modH->u16regs = telegram.u16reg;
 8006668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	// telegram header
	modH->u8Buffer[ ID ]         = telegram.u8id;
 8006670:	7f3a      	ldrb	r2, [r7, #28]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	74da      	strb	r2, [r3, #19]
	modH->u8Buffer[ FUNC ]       = telegram.u8fct;
 8006676:	7f7a      	ldrb	r2, [r7, #29]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	751a      	strb	r2, [r3, #20]
	modH->u8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 800667c:	8bfb      	ldrh	r3, [r7, #30]
 800667e:	0a1b      	lsrs	r3, r3, #8
 8006680:	b29b      	uxth	r3, r3
 8006682:	b2da      	uxtb	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	755a      	strb	r2, [r3, #21]
	modH->u8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8006688:	8bfb      	ldrh	r3, [r7, #30]
 800668a:	b2da      	uxtb	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8006690:	7f7b      	ldrb	r3, [r7, #29]
 8006692:	3b01      	subs	r3, #1
 8006694:	2b0f      	cmp	r3, #15
 8006696:	f200 80fe 	bhi.w	8006896 <SendQuery+0x2a2>
 800669a:	a201      	add	r2, pc, #4	; (adr r2, 80066a0 <SendQuery+0xac>)
 800669c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a0:	080066e1 	.word	0x080066e1
 80066a4:	080066e1 	.word	0x080066e1
 80066a8:	080066e1 	.word	0x080066e1
 80066ac:	080066e1 	.word	0x080066e1
 80066b0:	080066ff 	.word	0x080066ff
 80066b4:	08006721 	.word	0x08006721
 80066b8:	08006897 	.word	0x08006897
 80066bc:	08006897 	.word	0x08006897
 80066c0:	08006897 	.word	0x08006897
 80066c4:	08006897 	.word	0x08006897
 80066c8:	08006897 	.word	0x08006897
 80066cc:	08006897 	.word	0x08006897
 80066d0:	08006897 	.word	0x08006897
 80066d4:	08006897 	.word	0x08006897
 80066d8:	08006743 	.word	0x08006743
 80066dc:	08006801 	.word	0x08006801
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80066e0:	8c3b      	ldrh	r3, [r7, #32]
 80066e2:	0a1b      	lsrs	r3, r3, #8
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80066ec:	8c3b      	ldrh	r3, [r7, #32]
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2206      	movs	r2, #6
 80066f8:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 80066fc:	e0cb      	b.n	8006896 <SendQuery+0x2a2>
	case MB_FC_WRITE_COIL:
	    modH->u8Buffer[ NB_HI ]      = (( telegram.u16reg[0]> 0) ? 0xff : 0);
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <SendQuery+0x116>
 8006706:	22ff      	movs	r2, #255	; 0xff
 8006708:	e000      	b.n	800670c <SendQuery+0x118>
 800670a:	2200      	movs	r2, #0
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = 0;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2206      	movs	r2, #6
 800671a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 800671e:	e0ba      	b.n	8006896 <SendQuery+0x2a2>
	case MB_FC_WRITE_REGISTER:
	    modH->u8Buffer[ NB_HI ]      = highByte( telegram.u16reg[0]);
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	0a1b      	lsrs	r3, r3, #8
 8006726:	b29b      	uxth	r3, r3
 8006728:	b2da      	uxtb	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16reg[0]);
 800672e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b2da      	uxtb	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2206      	movs	r2, #6
 800673c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    break;
 8006740:	e0a9      	b.n	8006896 <SendQuery+0x2a2>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8006742:	8c3b      	ldrh	r3, [r7, #32]
 8006744:	091b      	lsrs	r3, r3, #4
 8006746:	b29b      	uxth	r3, r3
 8006748:	727b      	strb	r3, [r7, #9]
	    u8bytesno = u8regsno * 2;
 800674a:	7a7b      	ldrb	r3, [r7, #9]
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	73fb      	strb	r3, [r7, #15]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8006750:	8c3b      	ldrh	r3, [r7, #32]
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	b29b      	uxth	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <SendQuery+0x174>
	    {
	        u8bytesno++;
 800675c:	7bfb      	ldrb	r3, [r7, #15]
 800675e:	3301      	adds	r3, #1
 8006760:	73fb      	strb	r3, [r7, #15]
	        u8regsno++;
 8006762:	7a7b      	ldrb	r3, [r7, #9]
 8006764:	3301      	adds	r3, #1
 8006766:	727b      	strb	r3, [r7, #9]
	    }

	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8006768:	8c3b      	ldrh	r3, [r7, #32]
 800676a:	0a1b      	lsrs	r3, r3, #8
 800676c:	b29b      	uxth	r3, r3
 800676e:	b2da      	uxtb	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8006774:	8c3b      	ldrh	r3, [r7, #32]
 8006776:	b2da      	uxtb	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = u8bytesno;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	7bfa      	ldrb	r2, [r7, #15]
 8006780:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2207      	movs	r2, #7
 8006786:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i = 0; i < u8bytesno; i++)
 800678a:	2300      	movs	r3, #0
 800678c:	81bb      	strh	r3, [r7, #12]
 800678e:	e031      	b.n	80067f4 <SendQuery+0x200>
	    {
	        if(i%2)
 8006790:	89bb      	ldrh	r3, [r7, #12]
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	b29b      	uxth	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00f      	beq.n	80067bc <SendQuery+0x1c8>
	        {
	        	modH->u8Buffer[ modH->u8BufferSize ] = lowByte( telegram.u16reg[ i/2 ] );
 800679c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679e:	89bb      	ldrh	r3, [r7, #12]
 80067a0:	085b      	lsrs	r3, r3, #1
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	4413      	add	r3, r2
 80067a8:	881a      	ldrh	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80067b0:	4619      	mov	r1, r3
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	440b      	add	r3, r1
 80067b8:	74da      	strb	r2, [r3, #19]
 80067ba:	e010      	b.n	80067de <SendQuery+0x1ea>
	        }
	        else
	        {
	        	modH->u8Buffer[  modH->u8BufferSize ] = highByte( telegram.u16reg[ i/2 ] );
 80067bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067be:	89bb      	ldrh	r3, [r7, #12]
 80067c0:	085b      	lsrs	r3, r3, #1
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	4413      	add	r3, r2
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	0a1b      	lsrs	r3, r3, #8
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80067d4:	4619      	mov	r1, r3
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	440b      	add	r3, r1
 80067dc:	74da      	strb	r2, [r3, #19]

	        }
	        modH->u8BufferSize++;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80067e4:	3301      	adds	r3, #1
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i = 0; i < u8bytesno; i++)
 80067ee:	89bb      	ldrh	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	81bb      	strh	r3, [r7, #12]
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	89ba      	ldrh	r2, [r7, #12]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d3c8      	bcc.n	8006790 <SendQuery+0x19c>
	    }
	    break;
 80067fe:	e04a      	b.n	8006896 <SendQuery+0x2a2>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->u8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8006800:	8c3b      	ldrh	r3, [r7, #32]
 8006802:	0a1b      	lsrs	r3, r3, #8
 8006804:	b29b      	uxth	r3, r3
 8006806:	b2da      	uxtb	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	75da      	strb	r2, [r3, #23]
	    modH->u8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800680c:	8c3b      	ldrh	r3, [r7, #32]
 800680e:	b2da      	uxtb	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	761a      	strb	r2, [r3, #24]
	    modH->u8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8006814:	8c3b      	ldrh	r3, [r7, #32]
 8006816:	b2db      	uxtb	r3, r3
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	b2da      	uxtb	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2207      	movs	r2, #7
 8006824:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8006828:	2300      	movs	r3, #0
 800682a:	817b      	strh	r3, [r7, #10]
 800682c:	e02e      	b.n	800688c <SendQuery+0x298>
	    {

	        modH->u8Buffer[  modH->u8BufferSize ] = highByte(  telegram.u16reg[ i ] );
 800682e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006830:	897b      	ldrh	r3, [r7, #10]
 8006832:	005b      	lsls	r3, r3, #1
 8006834:	4413      	add	r3, r2
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	0a1b      	lsrs	r3, r3, #8
 800683a:	b29a      	uxth	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006842:	4619      	mov	r1, r3
 8006844:	b2d2      	uxtb	r2, r2
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	440b      	add	r3, r1
 800684a:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006852:	3301      	adds	r3, #1
 8006854:	b2da      	uxtb	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	        modH->u8Buffer[  modH->u8BufferSize ] = lowByte( telegram.u16reg[ i ] );
 800685c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685e:	897b      	ldrh	r3, [r7, #10]
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	4413      	add	r3, r2
 8006864:	881a      	ldrh	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800686c:	4619      	mov	r1, r3
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	440b      	add	r3, r1
 8006874:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800687c:	3301      	adds	r3, #1
 800687e:	b2da      	uxtb	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8006886:	897b      	ldrh	r3, [r7, #10]
 8006888:	3301      	adds	r3, #1
 800688a:	817b      	strh	r3, [r7, #10]
 800688c:	8c3b      	ldrh	r3, [r7, #32]
 800688e:	897a      	ldrh	r2, [r7, #10]
 8006890:	429a      	cmp	r2, r3
 8006892:	d3cc      	bcc.n	800682e <SendQuery+0x23a>
	    }
	    break;
 8006894:	bf00      	nop
	}


	sendTxBuffer(modH);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f968 	bl	8006b6c <sendTxBuffer>

	xSemaphoreGive(modH->ModBusSphrHandle);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80068a2:	2300      	movs	r3, #0
 80068a4:	2200      	movs	r2, #0
 80068a6:	2100      	movs	r1, #0
 80068a8:	f002 fe9e 	bl	80095e8 <xQueueGenericSend>

	modH->i8state = COM_WAITING;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
	modH->i8lastError = 0;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	749a      	strb	r2, [r3, #18]
	return 0;
 80068ba:	2300      	movs	r3, #0


}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068c6:	b004      	add	sp, #16
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop

080068cc <get_FC1>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC1(modbusHandler_t *modH)
{
 80068cc:	b590      	push	{r4, r7, lr}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80068d4:	2303      	movs	r3, #3
 80068d6:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 80068d8:	2300      	movs	r3, #0
 80068da:	73fb      	strb	r3, [r7, #15]
 80068dc:	e043      	b.n	8006966 <get_FC1+0x9a>

        if(i%2)
 80068de:	7bfb      	ldrb	r3, [r7, #15]
 80068e0:	f003 0301 	and.w	r3, r3, #1
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d01c      	beq.n	8006924 <get_FC1+0x58>
        {
        	modH->u16regs[i/2]= word(modH->u8Buffer[i+u8byte], lowByte(modH->u16regs[i/2]));
 80068ea:	7bfa      	ldrb	r2, [r7, #15]
 80068ec:	7bbb      	ldrb	r3, [r7, #14]
 80068ee:	4413      	add	r3, r2
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	4413      	add	r3, r2
 80068f4:	7cd8      	ldrb	r0, [r3, #19]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
 80068fe:	085b      	lsrs	r3, r3, #1
 8006900:	b2db      	uxtb	r3, r3
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	4413      	add	r3, r2
 8006906:	881b      	ldrh	r3, [r3, #0]
 8006908:	b2d9      	uxtb	r1, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	085b      	lsrs	r3, r3, #1
 8006914:	b2db      	uxtb	r3, r3
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	18d4      	adds	r4, r2, r3
 800691a:	f000 f914 	bl	8006b46 <word>
 800691e:	4603      	mov	r3, r0
 8006920:	8023      	strh	r3, [r4, #0]
 8006922:	e01d      	b.n	8006960 <get_FC1+0x94>
        }
        else
        {

        	modH->u16regs[i/2]= word(highByte(modH->u16regs[i/2]), modH->u8Buffer[i+u8byte]);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800692a:	7bfb      	ldrb	r3, [r7, #15]
 800692c:	085b      	lsrs	r3, r3, #1
 800692e:	b2db      	uxtb	r3, r3
 8006930:	005b      	lsls	r3, r3, #1
 8006932:	4413      	add	r3, r2
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	0a1b      	lsrs	r3, r3, #8
 8006938:	b29b      	uxth	r3, r3
 800693a:	b2d8      	uxtb	r0, r3
 800693c:	7bfa      	ldrb	r2, [r7, #15]
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	4413      	add	r3, r2
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	4413      	add	r3, r2
 8006946:	7cd9      	ldrb	r1, [r3, #19]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	085b      	lsrs	r3, r3, #1
 8006952:	b2db      	uxtb	r3, r3
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	18d4      	adds	r4, r2, r3
 8006958:	f000 f8f5 	bl	8006b46 <word>
 800695c:	4603      	mov	r3, r0
 800695e:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->u8Buffer[2]; i++) {
 8006960:	7bfb      	ldrb	r3, [r7, #15]
 8006962:	3301      	adds	r3, #1
 8006964:	73fb      	strb	r3, [r7, #15]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	7d5b      	ldrb	r3, [r3, #21]
 800696a:	7bfa      	ldrb	r2, [r7, #15]
 800696c:	429a      	cmp	r2, r3
 800696e:	d3b6      	bcc.n	80068de <get_FC1+0x12>
        }

     }
}
 8006970:	bf00      	nop
 8006972:	bf00      	nop
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	bd90      	pop	{r4, r7, pc}

0800697a <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 800697a:	b590      	push	{r4, r7, lr}
 800697c:	b085      	sub	sp, #20
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8006982:	2303      	movs	r3, #3
 8006984:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 8006986:	2300      	movs	r3, #0
 8006988:	73bb      	strb	r3, [r7, #14]
 800698a:	e018      	b.n	80069be <get_FC3+0x44>
    {
    	modH->u16regs[ i ] = word(modH->u8Buffer[ u8byte ], modH->u8Buffer[ u8byte +1 ]);
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	4413      	add	r3, r2
 8006992:	7cd8      	ldrb	r0, [r3, #19]
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	3301      	adds	r3, #1
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	4413      	add	r3, r2
 800699c:	7cd9      	ldrb	r1, [r3, #19]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80069a4:	7bbb      	ldrb	r3, [r7, #14]
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	18d4      	adds	r4, r2, r3
 80069aa:	f000 f8cc 	bl	8006b46 <word>
 80069ae:	4603      	mov	r3, r0
 80069b0:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	3302      	adds	r3, #2
 80069b6:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->u8Buffer[ 2 ] /2; i++)
 80069b8:	7bbb      	ldrb	r3, [r7, #14]
 80069ba:	3301      	adds	r3, #1
 80069bc:	73bb      	strb	r3, [r7, #14]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	7d5b      	ldrb	r3, [r3, #21]
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	7bba      	ldrb	r2, [r7, #14]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d3df      	bcc.n	800698c <get_FC3+0x12>
    }
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd90      	pop	{r4, r7, pc}
	...

080069d8 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
#if ENABLE_TCP_MASTER ==1
	if(modH->xTypeHW != TCP_HW)
	{
#endif
	uint16_t u16MsgCRC =
        ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80069e6:	3b02      	subs	r3, #2
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	4413      	add	r3, r2
 80069ec:	7cdb      	ldrb	r3, [r3, #19]
 80069ee:	021b      	lsls	r3, r3, #8
         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80069f0:	b21a      	sxth	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80069f8:	3b01      	subs	r3, #1
 80069fa:	6879      	ldr	r1, [r7, #4]
 80069fc:	440b      	add	r3, r1
 80069fe:	7cdb      	ldrb	r3, [r3, #19]
 8006a00:	b21b      	sxth	r3, r3
 8006a02:	4313      	orrs	r3, r2
 8006a04:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC =
 8006a06:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->u8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f103 0213 	add.w	r2, r3, #19
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006a14:	3b02      	subs	r3, #2
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	f7ff fb02 	bl	8006024 <calcCRC>
 8006a20:	4603      	mov	r3, r0
 8006a22:	461a      	mov	r2, r3
 8006a24:	89bb      	ldrh	r3, [r7, #12]
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d009      	beq.n	8006a3e <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8006a30:	3301      	adds	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_BAD_CRC;
 8006a3a:	23fc      	movs	r3, #252	; 0xfc
 8006a3c:	e034      	b.n	8006aa8 <validateAnswer+0xd0>
	}
#endif


    // check exception
    if ((modH->u8Buffer[ FUNC ] & 0x80) != 0)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	7d1b      	ldrb	r3, [r3, #20]
 8006a42:	b25b      	sxtb	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	da09      	bge.n	8006a5c <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8006a4e:	3301      	adds	r3, #1
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return ERR_EXCEPTION;
 8006a58:	23fb      	movs	r3, #251	; 0xfb
 8006a5a:	e025      	b.n	8006aa8 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( Master_fctsupported ); i++)
 8006a60:	2300      	movs	r3, #0
 8006a62:	73bb      	strb	r3, [r7, #14]
 8006a64:	e00c      	b.n	8006a80 <validateAnswer+0xa8>
    {
        if (Master_fctsupported[i] == modH->u8Buffer[FUNC])
 8006a66:	7bbb      	ldrb	r3, [r7, #14]
 8006a68:	4a11      	ldr	r2, [pc, #68]	; (8006ab0 <validateAnswer+0xd8>)
 8006a6a:	5cd2      	ldrb	r2, [r2, r3]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	7d1b      	ldrb	r3, [r3, #20]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d102      	bne.n	8006a7a <validateAnswer+0xa2>
        {
            isSupported = 1;
 8006a74:	2301      	movs	r3, #1
 8006a76:	73fb      	strb	r3, [r7, #15]
            break;
 8006a78:	e005      	b.n	8006a86 <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( Master_fctsupported ); i++)
 8006a7a:	7bbb      	ldrb	r3, [r7, #14]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	73bb      	strb	r3, [r7, #14]
 8006a80:	7bbb      	ldrb	r3, [r7, #14]
 8006a82:	2b07      	cmp	r3, #7
 8006a84:	d9ef      	bls.n	8006a66 <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	f083 0301 	eor.w	r3, r3, #1
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d009      	beq.n	8006aa6 <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8006a98:	3301      	adds	r3, #1
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
        return EXC_FUNC_CODE;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	0801e690 	.word	0x0801e690

08006ab4 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d104      	bne.n	8006ad0 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fd f894 	bl	8003bf8 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d008      	beq.n	8006aec <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	33c4      	adds	r3, #196	; 0xc4
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7ff fb93 	bl	800620a <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8006ae4:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8006ae8:	81fb      	strh	r3, [r7, #14]
 8006aea:	e019      	b.n	8006b20 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3313      	adds	r3, #19
 8006af6:	4619      	mov	r1, r3
 8006af8:	4610      	mov	r0, r2
 8006afa:	f7ff fb20 	bl	800613e <RingGetAllBytes>
 8006afe:	4603      	mov	r3, r0
 8006b00:	461a      	mov	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8006b0e:	3301      	adds	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006b1e:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d107      	bne.n	8006b3a <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6858      	ldr	r0, [r3, #4]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	33a6      	adds	r3, #166	; 0xa6
 8006b32:	2201      	movs	r2, #1
 8006b34:	4619      	mov	r1, r3
 8006b36:	f7fd f811 	bl	8003b5c <HAL_UART_Receive_IT>
	}

    return i16result;
 8006b3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b085      	sub	sp, #20
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	460a      	mov	r2, r1
 8006b50:	71fb      	strb	r3, [r7, #7]
 8006b52:	4613      	mov	r3, r2
 8006b54:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8006b56:	79bb      	ldrb	r3, [r7, #6]
 8006b58:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8006b5e:	89bb      	ldrh	r3, [r7, #12]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8006b6c:	b590      	push	{r4, r7, lr}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	6078      	str	r0, [r7, #4]
#if  ENABLE_TCP_MASTER == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f103 0213 	add.w	r2, r3, #19
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f7ff fa4e 	bl	8006024 <calcCRC>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8006b8c:	89fb      	ldrh	r3, [r7, #14]
 8006b8e:	0a1b      	lsrs	r3, r3, #8
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006b98:	4619      	mov	r1, r3
 8006b9a:	b2d2      	uxtb	r2, r2
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	440b      	add	r3, r1
 8006ba0:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006ba8:	3301      	adds	r3, #1
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006bb8:	4619      	mov	r1, r3
 8006bba:	89fb      	ldrh	r3, [r7, #14]
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	440b      	add	r3, r1
 8006bc2:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006bca:	3301      	adds	r3, #1
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP_MASTER == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00c      	beq.n	8006bf6 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fd fbb9 	bl	8004358 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68d8      	ldr	r0, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	8a1b      	ldrh	r3, [r3, #16]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	f7fb fe13 	bl	800281c <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6858      	ldr	r0, [r3, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f103 0113 	add.w	r1, r3, #19
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	461a      	mov	r2, r3
 8006c0a:	f7fc ff39 	bl	8003a80 <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8006c0e:	21fa      	movs	r1, #250	; 0xfa
 8006c10:	2001      	movs	r0, #1
 8006c12:	f004 fbd7 	bl	800b3c4 <ulTaskNotifyTake>
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          // F429, F103, L152 ...
	  while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8006c16:	bf00      	nop
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0f7      	beq.n	8006c18 <sendTxBuffer+0xac>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00c      	beq.n	8006c4a <sendTxBuffer+0xde>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68d8      	ldr	r0, [r3, #12]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	8a1b      	ldrh	r3, [r3, #16]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	f7fb fdee 	bl	800281c <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fd fbd9 	bl	80043fc <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d10c      	bne.n	8006c6c <sendTxBuffer+0x100>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 8006c58:	f003 feb0 	bl	800a9bc <xTaskGetTickCount>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	2300      	movs	r3, #0
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	2300      	movs	r3, #0
 8006c64:	2102      	movs	r1, #2
 8006c66:	4620      	mov	r0, r4
 8006c68:	f004 fea4 	bl	800b9b4 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 8006c84:	bf00      	nop
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd90      	pop	{r4, r7, pc}

08006c8c <StartTaskModbusMaster>:

// }


void StartTaskModbusMaster(void *argument)
{
 8006c8c:	b590      	push	{r4, r7, lr}
 8006c8e:	b091      	sub	sp, #68	; 0x44
 8006c90:	af04      	add	r7, sp, #16
 8006c92:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	62fb      	str	r3, [r7, #44]	; 0x2c


  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8006c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c9e:	f107 010c 	add.w	r1, r7, #12
 8006ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f002 feda 	bl	8009a60 <xQueueReceive>
       /* Block until a Modbus Frame arrives or query timeouts*/
   	   ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
     }
#else
     // This is the case for implementations with only USART support
     SendQuery(modH, telegram);
 8006cac:	466c      	mov	r4, sp
 8006cae:	f107 0318 	add.w	r3, r7, #24
 8006cb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006cb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006cba:	f107 030c 	add.w	r3, r7, #12
 8006cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cc2:	f7ff fc97 	bl	80065f4 <SendQuery>
     /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
     ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8006cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8006cca:	2001      	movs	r0, #1
 8006ccc:	f004 fb7a 	bl	800b3c4 <ulTaskNotifyTake>
 8006cd0:	62b8      	str	r0, [r7, #40]	; 0x28

#endif

	  // notify the task the request timeout
      modH->i8lastError = 0;
 8006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue)
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d018      	beq.n	8006d10 <StartTaskModbusMaster+0x84>
      {
    	  modH->i8state = COM_IDLE;
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
    	  modH->i8lastError = ERR_TIME_OUT;
 8006ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce8:	22f8      	movs	r2, #248	; 0xf8
 8006cea:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8006cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cee:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
    	  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8006cfc:	69b8      	ldr	r0, [r7, #24]
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8006d04:	4619      	mov	r1, r3
 8006d06:	2300      	movs	r3, #0
 8006d08:	2203      	movs	r2, #3
 8006d0a:	f004 fba7 	bl	800b45c <xTaskGenericNotify>
    	  continue;
 8006d0e:	e09d      	b.n	8006e4c <StartTaskModbusMaster+0x1c0>
      {
    	  getRxBuffer(modH);
      }

#else
      getRxBuffer(modH);
 8006d10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d12:	f7ff fecf 	bl	8006ab4 <getRxBuffer>
#endif



	  if ( modH->u8BufferSize < 6){
 8006d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d18:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8006d1c:	2b05      	cmp	r3, #5
 8006d1e:	d818      	bhi.n	8006d52 <StartTaskModbusMaster+0xc6>

		  modH->i8state = COM_IDLE;
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
		  modH->i8lastError = ERR_BAD_SIZE;
 8006d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d2a:	22fa      	movs	r2, #250	; 0xfa
 8006d2c:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8006d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d30:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8006d34:	3301      	adds	r3, #1
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3a:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8006d3e:	69b8      	ldr	r0, [r7, #24]
 8006d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d42:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8006d46:	4619      	mov	r1, r3
 8006d48:	2300      	movs	r3, #0
 8006d4a:	2203      	movs	r2, #3
 8006d4c:	f004 fb86 	bl	800b45c <xTaskGenericNotify>
		  continue;
 8006d50:	e07c      	b.n	8006e4c <StartTaskModbusMaster+0x1c0>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8006d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d54:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8006d58:	2300      	movs	r3, #0
 8006d5a:	9300      	str	r3, [sp, #0]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2103      	movs	r1, #3
 8006d62:	f004 fe27 	bl	800b9b4 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  int8_t u8exception = validateAnswer(modH);
 8006d66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d68:	f7ff fe36 	bl	80069d8 <validateAnswer>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  if (u8exception != 0)
 8006d72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d011      	beq.n	8006d9e <StartTaskModbusMaster+0x112>
	  {
		 modH->i8state = COM_IDLE;
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
         modH->i8lastError = u8exception;
 8006d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d84:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d88:	749a      	strb	r2, [r3, #18]
		 xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, modH->i8lastError, eSetValueWithOverwrite);
 8006d8a:	69b8      	ldr	r0, [r7, #24]
 8006d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8e:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8006d92:	4619      	mov	r1, r3
 8006d94:	2300      	movs	r3, #0
 8006d96:	2203      	movs	r2, #3
 8006d98:	f004 fb60 	bl	800b45c <xTaskGenericNotify>
	     continue;
 8006d9c:	e056      	b.n	8006e4c <StartTaskModbusMaster+0x1c0>
	  }

	  modH->i8lastError = u8exception;
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006da4:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8006da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006dac:	f04f 31ff 	mov.w	r1, #4294967295
 8006db0:	4618      	mov	r0, r3
 8006db2:	f002 ff3b 	bl	8009c2c <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->u8Buffer[ FUNC ] )
 8006db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db8:	7d1b      	ldrb	r3, [r3, #20]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	2b0f      	cmp	r3, #15
 8006dbe:	d82b      	bhi.n	8006e18 <StartTaskModbusMaster+0x18c>
 8006dc0:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <StartTaskModbusMaster+0x13c>)
 8006dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc6:	bf00      	nop
 8006dc8:	08006e09 	.word	0x08006e09
 8006dcc:	08006e09 	.word	0x08006e09
 8006dd0:	08006e11 	.word	0x08006e11
 8006dd4:	08006e11 	.word	0x08006e11
 8006dd8:	08006e19 	.word	0x08006e19
 8006ddc:	08006e19 	.word	0x08006e19
 8006de0:	08006e19 	.word	0x08006e19
 8006de4:	08006e19 	.word	0x08006e19
 8006de8:	08006e19 	.word	0x08006e19
 8006dec:	08006e19 	.word	0x08006e19
 8006df0:	08006e19 	.word	0x08006e19
 8006df4:	08006e19 	.word	0x08006e19
 8006df8:	08006e19 	.word	0x08006e19
 8006dfc:	08006e19 	.word	0x08006e19
 8006e00:	08006e19 	.word	0x08006e19
 8006e04:	08006e19 	.word	0x08006e19
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to u16regs buffer
	      get_FC1(modH);
 8006e08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e0a:	f7ff fd5f 	bl	80068cc <get_FC1>
	      break;
 8006e0e:	e004      	b.n	8006e1a <StartTaskModbusMaster+0x18e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to u16regs buffer
	      get_FC3(modH);
 8006e10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e12:	f7ff fdb2 	bl	800697a <get_FC3>
	      break;
 8006e16:	e000      	b.n	8006e1a <StartTaskModbusMaster+0x18e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8006e18:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8006e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7

	  if (modH->i8lastError ==0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 8006e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e24:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10e      	bne.n	8006e4a <StartTaskModbusMaster+0x1be>
	  {
		  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8006e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8006e32:	2300      	movs	r3, #0
 8006e34:	2200      	movs	r2, #0
 8006e36:	2100      	movs	r1, #0
 8006e38:	f002 fbd6 	bl	80095e8 <xQueueGenericSend>
		  xTaskNotify((TaskHandle_t)telegram.u32CurrentTask, ERR_OK_QUERY, eSetValueWithOverwrite);
 8006e3c:	69b8      	ldr	r0, [r7, #24]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	2203      	movs	r2, #3
 8006e42:	f06f 010a 	mvn.w	r1, #10
 8006e46:	f004 fb09 	bl	800b45c <xTaskGenericNotify>
	  }


	  continue;
 8006e4a:	bf00      	nop
  {
 8006e4c:	e724      	b.n	8006c98 <StartTaskModbusMaster+0xc>
 8006e4e:	bf00      	nop

08006e50 <SModbus_Init>:
    MB_FC_WRITE_MULTIPLE_COILS,
    MB_FC_WRITE_MULTIPLE_REGISTERS
};

void SModbus_Init(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
	Slave_Modbus.uModbusType = MB_SLAVE;
 8006e54:	4b48      	ldr	r3, [pc, #288]	; (8006f78 <SModbus_Init+0x128>)
 8006e56:	2203      	movs	r2, #3
 8006e58:	701a      	strb	r2, [r3, #0]
	Slave_Modbus.u16timeOut = 2000;
 8006e5a:	4b47      	ldr	r3, [pc, #284]	; (8006f78 <SModbus_Init+0x128>)
 8006e5c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006e60:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	Slave_Modbus.EN_Port = NULL; 
 8006e64:	4b44      	ldr	r3, [pc, #272]	; (8006f78 <SModbus_Init+0x128>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	60da      	str	r2, [r3, #12]
	Slave_Modbus.u16regs = &ModbusDATA;
 8006e6a:	4b43      	ldr	r3, [pc, #268]	; (8006f78 <SModbus_Init+0x128>)
 8006e6c:	4a43      	ldr	r2, [pc, #268]	; (8006f7c <SModbus_Init+0x12c>)
 8006e6e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	Slave_Modbus.u16regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8006e72:	4b41      	ldr	r3, [pc, #260]	; (8006f78 <SModbus_Init+0x128>)
 8006e74:	220a      	movs	r2, #10
 8006e76:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	Slave_Modbus.xTypeHW = TCP_HW;
 8006e7a:	4b3f      	ldr	r3, [pc, #252]	; (8006f78 <SModbus_Init+0x128>)
 8006e7c:	2203      	movs	r2, #3
 8006e7e:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	Slave_Modbus.Device = &SlaveDevice;
 8006e82:	4b3d      	ldr	r3, [pc, #244]	; (8006f78 <SModbus_Init+0x128>)
 8006e84:	4a3e      	ldr	r2, [pc, #248]	; (8006f80 <SModbus_Init+0x130>)
 8006e86:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

	Slave_Modbus.Device->Coil[0].Addr = 0x0000;
 8006e8a:	4b3b      	ldr	r3, [pc, #236]	; (8006f78 <SModbus_Init+0x128>)
 8006e8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e90:	2200      	movs	r2, #0
 8006e92:	851a      	strh	r2, [r3, #40]	; 0x28
	Slave_Modbus.Device->Coil[0].Value = true;
 8006e94:	4b38      	ldr	r3, [pc, #224]	; (8006f78 <SModbus_Init+0x128>)
 8006e96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	Slave_Modbus.Device->Coil[1].Addr = 0x0001;
 8006ea0:	4b35      	ldr	r3, [pc, #212]	; (8006f78 <SModbus_Init+0x128>)
 8006ea2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	859a      	strh	r2, [r3, #44]	; 0x2c
	Slave_Modbus.Device->Coil[1].Value = true;
 8006eaa:	4b33      	ldr	r3, [pc, #204]	; (8006f78 <SModbus_Init+0x128>)
 8006eac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	Slave_Modbus.Device->Coil[2].Addr = 0x0002;
 8006eb6:	4b30      	ldr	r3, [pc, #192]	; (8006f78 <SModbus_Init+0x128>)
 8006eb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	861a      	strh	r2, [r3, #48]	; 0x30
	Slave_Modbus.Device->Coil[2].Value = true;
 8006ec0:	4b2d      	ldr	r3, [pc, #180]	; (8006f78 <SModbus_Init+0x128>)
 8006ec2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	Slave_Modbus.Device->Coil[3].Addr = 0x0003;
 8006ecc:	4b2a      	ldr	r3, [pc, #168]	; (8006f78 <SModbus_Init+0x128>)
 8006ece:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ed2:	2203      	movs	r2, #3
 8006ed4:	869a      	strh	r2, [r3, #52]	; 0x34
	Slave_Modbus.Device->Coil[3].Value = true;
 8006ed6:	4b28      	ldr	r3, [pc, #160]	; (8006f78 <SModbus_Init+0x128>)
 8006ed8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	Slave_Modbus.Device->Coil[4].Addr = 0x0004;
 8006ee2:	4b25      	ldr	r3, [pc, #148]	; (8006f78 <SModbus_Init+0x128>)
 8006ee4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ee8:	2204      	movs	r2, #4
 8006eea:	871a      	strh	r2, [r3, #56]	; 0x38
	Slave_Modbus.Device->Coil[4].Value = true;
 8006eec:	4b22      	ldr	r3, [pc, #136]	; (8006f78 <SModbus_Init+0x128>)
 8006eee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	Slave_Modbus.Device->Reg[0].Addr = 30000;
 8006ef8:	4b1f      	ldr	r3, [pc, #124]	; (8006f78 <SModbus_Init+0x128>)
 8006efa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006efe:	f247 5230 	movw	r2, #30000	; 0x7530
 8006f02:	801a      	strh	r2, [r3, #0]
	Slave_Modbus.Device->Reg[1].Addr = 30002;
 8006f04:	4b1c      	ldr	r3, [pc, #112]	; (8006f78 <SModbus_Init+0x128>)
 8006f06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f0a:	f247 5232 	movw	r2, #30002	; 0x7532
 8006f0e:	809a      	strh	r2, [r3, #4]
	Slave_Modbus.Device->Reg[2].Addr = 30004;
 8006f10:	4b19      	ldr	r3, [pc, #100]	; (8006f78 <SModbus_Init+0x128>)
 8006f12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f16:	f247 5234 	movw	r2, #30004	; 0x7534
 8006f1a:	811a      	strh	r2, [r3, #8]
	Slave_Modbus.Device->Reg[3].Addr = 30006;
 8006f1c:	4b16      	ldr	r3, [pc, #88]	; (8006f78 <SModbus_Init+0x128>)
 8006f1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f22:	f247 5236 	movw	r2, #30006	; 0x7536
 8006f26:	819a      	strh	r2, [r3, #12]
	Slave_Modbus.Device->Reg[4].Addr = 30008;
 8006f28:	4b13      	ldr	r3, [pc, #76]	; (8006f78 <SModbus_Init+0x128>)
 8006f2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f2e:	f247 5238 	movw	r2, #30008	; 0x7538
 8006f32:	821a      	strh	r2, [r3, #16]

	Slave_Modbus.Device->Reg[0].Value = 20;
 8006f34:	4b10      	ldr	r3, [pc, #64]	; (8006f78 <SModbus_Init+0x128>)
 8006f36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f3a:	2214      	movs	r2, #20
 8006f3c:	805a      	strh	r2, [r3, #2]
	Slave_Modbus.Device->Reg[1].Value = 20;
 8006f3e:	4b0e      	ldr	r3, [pc, #56]	; (8006f78 <SModbus_Init+0x128>)
 8006f40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f44:	2214      	movs	r2, #20
 8006f46:	80da      	strh	r2, [r3, #6]
	Slave_Modbus.Device->Reg[2].Value = 20;
 8006f48:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <SModbus_Init+0x128>)
 8006f4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f4e:	2214      	movs	r2, #20
 8006f50:	815a      	strh	r2, [r3, #10]
	Slave_Modbus.Device->Reg[3].Value = 20;
 8006f52:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <SModbus_Init+0x128>)
 8006f54:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f58:	2214      	movs	r2, #20
 8006f5a:	81da      	strh	r2, [r3, #14]
	Slave_Modbus.Device->Reg[4].Value = 20;
 8006f5c:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <SModbus_Init+0x128>)
 8006f5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f62:	2214      	movs	r2, #20
 8006f64:	825a      	strh	r2, [r3, #18]


	ModbusInit(&Slave_Modbus);
 8006f66:	4804      	ldr	r0, [pc, #16]	; (8006f78 <SModbus_Init+0x128>)
 8006f68:	f000 f80c 	bl	8006f84 <ModbusInit>
	ModbusStart(&Slave_Modbus);
 8006f6c:	4802      	ldr	r0, [pc, #8]	; (8006f78 <SModbus_Init+0x128>)
 8006f6e:	f000 f8b1 	bl	80070d4 <ModbusStart>
}
 8006f72:	bf00      	nop
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20004df8 	.word	0x20004df8
 8006f7c:	20004de4 	.word	0x20004de4
 8006f80:	20004c0c 	.word	0x20004c0c

08006f84 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8006f8c:	4b46      	ldr	r3, [pc, #280]	; (80070a8 <ModbusInit+0x124>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	f200 8084 	bhi.w	800709e <ModbusInit+0x11a>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	33c4      	adds	r3, #196	; 0xc4
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff f935 	bl	800620a <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d118      	bne.n	8006fda <ModbusInit+0x56>
	  {
		  //Create Modbus task slave
#if ENABLE_TCP == 1
		  if( modH->xTypeHW == TCP_HW)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d109      	bne.n	8006fc6 <ModbusInit+0x42>
		  {
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributesTCP);
 8006fb2:	4a3e      	ldr	r2, [pc, #248]	; (80070ac <ModbusInit+0x128>)
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	483e      	ldr	r0, [pc, #248]	; (80070b0 <ModbusInit+0x12c>)
 8006fb8:	f001 fa24 	bl	8008404 <osThreadNew>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8006fc4:	e034      	b.n	8007030 <ModbusInit+0xac>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8006fc6:	4a3b      	ldr	r2, [pc, #236]	; (80070b4 <ModbusInit+0x130>)
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	4839      	ldr	r0, [pc, #228]	; (80070b0 <ModbusInit+0x12c>)
 8006fcc:	f001 fa1a 	bl	8008404 <osThreadNew>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8006fd8:	e02a      	b.n	8007030 <ModbusInit+0xac>
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d125      	bne.n	800702e <ModbusInit+0xaa>
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8006fe8:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8006ff0:	4a31      	ldr	r2, [pc, #196]	; (80070b8 <ModbusInit+0x134>)
 8006ff2:	9200      	str	r2, [sp, #0]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	4831      	ldr	r0, [pc, #196]	; (80070bc <ModbusInit+0x138>)
 8006ff8:	f004 fc7e 	bl	800b8f8 <xTimerCreate>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800700a:	2b00      	cmp	r3, #0
 800700c:	d100      	bne.n	8007010 <ModbusInit+0x8c>
		  {
			  while(1); //error creating timer, check heap and stack size
 800700e:	e7fe      	b.n	800700e <ModbusInit+0x8a>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8007010:	4a2b      	ldr	r2, [pc, #172]	; (80070c0 <ModbusInit+0x13c>)
 8007012:	2118      	movs	r1, #24
 8007014:	2002      	movs	r0, #2
 8007016:	f001 fdad 	bl	8008b74 <osMessageQueueNew>
 800701a:	4602      	mov	r2, r0
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		  if(modH->QueueTelegramHandle == NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <ModbusInit+0xac>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 800702c:	e7fe      	b.n	800702c <ModbusInit+0xa8>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 800702e:	e7fe      	b.n	800702e <ModbusInit+0xaa>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007036:	2b00      	cmp	r3, #0
 8007038:	d100      	bne.n	800703c <ModbusInit+0xb8>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 800703a:	e7fe      	b.n	800703a <ModbusInit+0xb6>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8007042:	4a20      	ldr	r2, [pc, #128]	; (80070c4 <ModbusInit+0x140>)
 8007044:	9200      	str	r2, [sp, #0]
 8007046:	2200      	movs	r2, #0
 8007048:	2105      	movs	r1, #5
 800704a:	481f      	ldr	r0, [pc, #124]	; (80070c8 <ModbusInit+0x144>)
 800704c:	f004 fc54 	bl	800b8f8 <xTimerCreate>
 8007050:	4602      	mov	r2, r0
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800705e:	2b00      	cmp	r3, #0
 8007060:	d100      	bne.n	8007064 <ModbusInit+0xe0>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8007062:	e7fe      	b.n	8007062 <ModbusInit+0xde>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8007064:	4a19      	ldr	r2, [pc, #100]	; (80070cc <ModbusInit+0x148>)
 8007066:	2101      	movs	r1, #1
 8007068:	2001      	movs	r0, #1
 800706a:	f001 fbf3 	bl	8008854 <osSemaphoreNew>
 800706e:	4602      	mov	r2, r0
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	  if(modH->ModBusSphrHandle == NULL)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d100      	bne.n	8007082 <ModbusInit+0xfe>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8007080:	e7fe      	b.n	8007080 <ModbusInit+0xfc>
	  }

	  mHandlers[numberHandlers] = modH;
 8007082:	4b09      	ldr	r3, [pc, #36]	; (80070a8 <ModbusInit+0x124>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	4619      	mov	r1, r3
 8007088:	4a11      	ldr	r2, [pc, #68]	; (80070d0 <ModbusInit+0x14c>)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8007090:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <ModbusInit+0x124>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	3301      	adds	r3, #1
 8007096:	b2da      	uxtb	r2, r3
 8007098:	4b03      	ldr	r3, [pc, #12]	; (80070a8 <ModbusInit+0x124>)
 800709a:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 800709c:	e000      	b.n	80070a0 <ModbusInit+0x11c>
	  while(1); //error no more Modbus handlers supported
 800709e:	e7fe      	b.n	800709e <ModbusInit+0x11a>
}
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	200000a9 	.word	0x200000a9
 80070ac:	0801e6d4 	.word	0x0801e6d4
 80070b0:	0800752d 	.word	0x0800752d
 80070b4:	0801e6b0 	.word	0x0801e6b0
 80070b8:	08007261 	.word	0x08007261
 80070bc:	0801b104 	.word	0x0801b104
 80070c0:	0801e698 	.word	0x0801e698
 80070c4:	080071dd 	.word	0x080071dd
 80070c8:	0801b114 	.word	0x0801b114
 80070cc:	0801e6f8 	.word	0x0801e6f8
 80070d0:	20008244 	.word	0x20008244

080070d4 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d00f      	beq.n	8007106 <ModbusStart+0x32>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d00a      	beq.n	8007106 <ModbusStart+0x32>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d005      	beq.n	8007106 <ModbusStart+0x32>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8007100:	2b04      	cmp	r3, #4
 8007102:	d000      	beq.n	8007106 <ModbusStart+0x32>
	{

		while(1); //ERROR select the type of hardware
 8007104:	e7fe      	b.n	8007104 <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800710c:	2b04      	cmp	r3, #4
 800710e:	d100      	bne.n	8007112 <ModbusStart+0x3e>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 8007110:	e7fe      	b.n	8007110 <ModbusStart+0x3c>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8007118:	2b01      	cmp	r3, #1
 800711a:	d004      	beq.n	8007126 <ModbusStart+0x52>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8007122:	2b04      	cmp	r3, #4
 8007124:	d13c      	bne.n	80071a0 <ModbusStart+0xcc>
	{

	      if (modH->EN_Port != NULL )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d007      	beq.n	800713e <ModbusStart+0x6a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68d8      	ldr	r0, [r3, #12]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	8a1b      	ldrh	r3, [r3, #16]
 8007136:	2200      	movs	r2, #0
 8007138:	4619      	mov	r1, r3
 800713a:	f7fb fb6f 	bl	800281c <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b03      	cmp	r3, #3
 8007144:	d105      	bne.n	8007152 <ModbusStart+0x7e>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800714c:	2b00      	cmp	r3, #0
 800714e:	d100      	bne.n	8007152 <ModbusStart+0x7e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8007150:	e7fe      	b.n	8007150 <ModbusStart+0x7c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8007152:	bf00      	nop
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	4618      	mov	r0, r3
 800715a:	f7fd f9a1 	bl	80044a0 <HAL_UART_GetState>
 800715e:	4603      	mov	r3, r0
 8007160:	2b20      	cmp	r3, #32
 8007162:	d1f7      	bne.n	8007154 <ModbusStart+0x80>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6858      	ldr	r0, [r3, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	33a6      	adds	r3, #166	; 0xa6
 800716c:	2201      	movs	r2, #1
 800716e:	4619      	mov	r1, r3
 8007170:	f7fc fcf4 	bl	8003b5c <HAL_UART_Receive_IT>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d000      	beq.n	800717c <ModbusStart+0xa8>
          {
                while(1)
 800717a:	e7fe      	b.n	800717a <ModbusStart+0xa6>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	7a1b      	ldrb	r3, [r3, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d004      	beq.n	800718e <ModbusStart+0xba>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	2b04      	cmp	r3, #4
 800718a:	d100      	bne.n	800718e <ModbusStart+0xba>
          {
        	  while(1)
 800718c:	e7fe      	b.n	800718c <ModbusStart+0xb8>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	7a1b      	ldrb	r3, [r3, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d104      	bne.n	80071a0 <ModbusStart+0xcc>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b03      	cmp	r3, #3
 800719c:	d100      	bne.n	80071a0 <ModbusStart+0xcc>
          {
             	  while(1)
 800719e:	e7fe      	b.n	800719e <ModbusStart+0xca>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 80071d4:	bf00      	nop
 80071d6:	3708      	adds	r7, #8
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af02      	add	r7, sp, #8
 80071e2:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	e02a      	b.n	8007240 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 80071ea:	4a1b      	ldr	r2, [pc, #108]	; (8007258 <vTimerCallbackT35+0x7c>)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d11e      	bne.n	800723a <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 80071fc:	4a16      	ldr	r2, [pc, #88]	; (8007258 <vTimerCallbackT35+0x7c>)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b04      	cmp	r3, #4
 8007208:	d10c      	bne.n	8007224 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800720a:	4a13      	ldr	r2, [pc, #76]	; (8007258 <vTimerCallbackT35+0x7c>)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007212:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8007216:	2300      	movs	r3, #0
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	2300      	movs	r3, #0
 800721c:	2200      	movs	r2, #0
 800721e:	2103      	movs	r1, #3
 8007220:	f004 fbc8 	bl	800b9b4 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8007224:	4a0c      	ldr	r2, [pc, #48]	; (8007258 <vTimerCallbackT35+0x7c>)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800722c:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8007230:	2300      	movs	r3, #0
 8007232:	2203      	movs	r2, #3
 8007234:	2100      	movs	r1, #0
 8007236:	f004 f911 	bl	800b45c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	3301      	adds	r3, #1
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	4b06      	ldr	r3, [pc, #24]	; (800725c <vTimerCallbackT35+0x80>)
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	4293      	cmp	r3, r2
 800724a:	dbce      	blt.n	80071ea <vTimerCallbackT35+0xe>
		}

	}
}
 800724c:	bf00      	nop
 800724e:	bf00      	nop
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20008244 	.word	0x20008244
 800725c:	200000a9 	.word	0x200000a9

08007260 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8007268:	2300      	movs	r3, #0
 800726a:	60fb      	str	r3, [r7, #12]
 800726c:	e017      	b.n	800729e <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800726e:	4a11      	ldr	r2, [pc, #68]	; (80072b4 <vTimerCallbackTimeout+0x54>)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007276:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	429a      	cmp	r2, r3
 800727e:	d10b      	bne.n	8007298 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8007280:	4a0c      	ldr	r2, [pc, #48]	; (80072b4 <vTimerCallbackTimeout+0x54>)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007288:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800728c:	2300      	movs	r3, #0
 800728e:	2203      	movs	r2, #3
 8007290:	f06f 0107 	mvn.w	r1, #7
 8007294:	f004 f8e2 	bl	800b45c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	3301      	adds	r3, #1
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	4b06      	ldr	r3, [pc, #24]	; (80072b8 <vTimerCallbackTimeout+0x58>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4293      	cmp	r3, r2
 80072a8:	dbe1      	blt.n	800726e <vTimerCallbackTimeout+0xe>
		}

	}

}
 80072aa:	bf00      	nop
 80072ac:	bf00      	nop
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	20008244 	.word	0x20008244
 80072b8:	200000a9 	.word	0x200000a9

080072bc <TCPwaitConnData>:


#if ENABLE_TCP ==1

bool TCPwaitConnData(modbusHandler_t *modH)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b08a      	sub	sp, #40	; 0x28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  err_t recv_err, accept_err;
  char* buf;
  uint16_t buflen;
  uint16_t uLength;
  bool xTCPvalid;
  xTCPvalid = false;
 80072c4:	2300      	movs	r3, #0
 80072c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  tcpclients_t *clientconn;

  //select the next connection slot to work with using round-robin
  modH->newconnIndex++;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80072d0:	3301      	adds	r3, #1
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
  if (modH->newconnIndex>NUMBERTCPCONN)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80072e0:	2b04      	cmp	r3, #4
 80072e2:	d903      	bls.n	80072ec <TCPwaitConnData+0x30>
  {
	  modH->newconnIndex = 0;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
  }
  clientconn = &modH->newconns[modH->newconnIndex];
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80072f2:	3329      	adds	r3, #41	; 0x29
 80072f4:	00db      	lsls	r3, r3, #3
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	4413      	add	r3, r2
 80072fa:	3304      	adds	r3, #4
 80072fc:	61fb      	str	r3, [r7, #28]


  //NULL means there is a free connection slot, so we can accept an incoming client connection
  if (clientconn->conn == NULL){
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d116      	bne.n	8007334 <TCPwaitConnData+0x78>
      /* accept any incoming connection */
	  accept_err = netconn_accept(modH->conn, &clientconn->conn);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800730c:	69fa      	ldr	r2, [r7, #28]
 800730e:	4611      	mov	r1, r2
 8007310:	4618      	mov	r0, r3
 8007312:	f005 fbb9 	bl	800ca88 <netconn_accept>
 8007316:	4603      	mov	r3, r0
 8007318:	76fb      	strb	r3, [r7, #27]
	  if(accept_err != ERR_OK)
 800731a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d005      	beq.n	800732e <TCPwaitConnData+0x72>
	  {
		  // not valid incoming connection at this time
		  //ModbusCloseConn(clientconn->conn);
		  ModbusCloseConnNull(modH);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa00 	bl	8007728 <ModbusCloseConnNull>
		  return xTCPvalid;
 8007328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800732c:	e0b5      	b.n	800749a <TCPwaitConnData+0x1de>
      }
	  else
	  {
		  clientconn->aging=0;
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	2200      	movs	r2, #0
 8007332:	605a      	str	r2, [r3, #4]
	  }

  }

  netconn_set_recvtimeout(clientconn->conn ,  modH->u16timeOut);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8b3 20a2 	ldrh.w	r2, [r3, #162]	; 0xa2
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	621a      	str	r2, [r3, #32]
  recv_err = netconn_recv(clientconn->conn, &inbuf);
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f107 0214 	add.w	r2, r7, #20
 8007348:	4611      	mov	r1, r2
 800734a:	4618      	mov	r0, r3
 800734c:	f005 fdcc 	bl	800cee8 <netconn_recv>
 8007350:	4603      	mov	r3, r0
 8007352:	76bb      	strb	r3, [r7, #26]

  if (recv_err == ERR_CLSD) //the connection was closed
 8007354:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007358:	f113 0f0f 	cmn.w	r3, #15
 800735c:	d108      	bne.n	8007370 <TCPwaitConnData+0xb4>
  {
	  //Close and clean the connection
	  //ModbusCloseConn(clientconn->conn);
	  ModbusCloseConnNull(modH);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f9e2 	bl	8007728 <ModbusCloseConnNull>

	  clientconn->aging = 0;
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	2200      	movs	r2, #0
 8007368:	605a      	str	r2, [r3, #4]
	  return xTCPvalid;
 800736a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800736e:	e094      	b.n	800749a <TCPwaitConnData+0x1de>

  }

  if (recv_err == ERR_TIMEOUT) //No new data
 8007370:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007374:	f113 0f03 	cmn.w	r3, #3
 8007378:	d124      	bne.n	80073c4 <TCPwaitConnData+0x108>
   {
 	  //continue the aging process
	  modH->newconns[modH->newconnIndex].aging++;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8007380:	461a      	mov	r2, r3
 8007382:	6879      	ldr	r1, [r7, #4]
 8007384:	f102 0329 	add.w	r3, r2, #41	; 0x29
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	440b      	add	r3, r1
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	1c59      	adds	r1, r3, #1
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f102 0329 	add.w	r3, r2, #41	; 0x29
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	4403      	add	r3, r0
 800739a:	6099      	str	r1, [r3, #8]

	  // if the connection is old enough and inactive close and clean it up
	  if (modH->newconns[modH->newconnIndex].aging >= TCPAGINGCYCLES)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	3329      	adds	r3, #41	; 0x29
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	4413      	add	r3, r2
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073b0:	d305      	bcc.n	80073be <TCPwaitConnData+0x102>
	  {
		  //ModbusCloseConn(clientconn->conn);
		  ModbusCloseConnNull(modH);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f9b8 	bl	8007728 <ModbusCloseConnNull>
		  clientconn->aging = 0;
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	2200      	movs	r2, #0
 80073bc:	605a      	str	r2, [r3, #4]
	  }

 	  return xTCPvalid;
 80073be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073c2:	e06a      	b.n	800749a <TCPwaitConnData+0x1de>

   }

  if (recv_err == ERR_OK)
 80073c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d164      	bne.n	8007496 <TCPwaitConnData+0x1da>
  {
      if (netconn_err(clientconn->conn) == ERR_OK)
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f005 ff0c 	bl	800d1ee <netconn_err>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d15c      	bne.n	8007496 <TCPwaitConnData+0x1da>
      {
    	  /* Read the data from the port, blocking if nothing yet there.
    	  We assume the request (the part we care about) is in one netbuf */
   	      netbuf_data(inbuf, (void**)&buf, &buflen);
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f107 020e 	add.w	r2, r7, #14
 80073e2:	f107 0110 	add.w	r1, r7, #16
 80073e6:	4618      	mov	r0, r3
 80073e8:	f007 fb76 	bl	800ead8 <netbuf_data>
		  if (buflen>11) // minimum frame size for modbus TCP
 80073ec:	89fb      	ldrh	r3, [r7, #14]
 80073ee:	2b0b      	cmp	r3, #11
 80073f0:	d94a      	bls.n	8007488 <TCPwaitConnData+0x1cc>
		  {
			  if(buf[2] == 0 || buf[3] == 0 ) //validate protocol ID
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	3302      	adds	r3, #2
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d004      	beq.n	8007406 <TCPwaitConnData+0x14a>
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	3303      	adds	r3, #3
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d140      	bne.n	8007488 <TCPwaitConnData+0x1cc>
			  {
			  	  uLength = (buf[4]<<8 & 0xff00) | buf[5];
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	3304      	adds	r3, #4
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	021b      	lsls	r3, r3, #8
 800740e:	b21a      	sxth	r2, r3
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	3305      	adds	r3, #5
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	b21b      	sxth	r3, r3
 8007418:	4313      	orrs	r3, r2
 800741a:	b21b      	sxth	r3, r3
 800741c:	833b      	strh	r3, [r7, #24]
			  	  if(uLength< (MAX_BUFFER-2)  && (uLength + 6) <= buflen)
 800741e:	8b3b      	ldrh	r3, [r7, #24]
 8007420:	2b7d      	cmp	r3, #125	; 0x7d
 8007422:	d831      	bhi.n	8007488 <TCPwaitConnData+0x1cc>
 8007424:	8b3b      	ldrh	r3, [r7, #24]
 8007426:	3305      	adds	r3, #5
 8007428:	89fa      	ldrh	r2, [r7, #14]
 800742a:	4293      	cmp	r3, r2
 800742c:	da2c      	bge.n	8007488 <TCPwaitConnData+0x1cc>
			   	  {
			          for(int i = 0; i < uLength; i++)
 800742e:	2300      	movs	r3, #0
 8007430:	623b      	str	r3, [r7, #32]
 8007432:	e00d      	b.n	8007450 <TCPwaitConnData+0x194>
			          {
			        	  modH->u8Buffer[i] = buf[i+6];
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	3306      	adds	r3, #6
 800743a:	4413      	add	r3, r2
 800743c:	7819      	ldrb	r1, [r3, #0]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	4413      	add	r3, r2
 8007444:	3313      	adds	r3, #19
 8007446:	460a      	mov	r2, r1
 8007448:	701a      	strb	r2, [r3, #0]
			          for(int i = 0; i < uLength; i++)
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	3301      	adds	r3, #1
 800744e:	623b      	str	r3, [r7, #32]
 8007450:	8b3b      	ldrh	r3, [r7, #24]
 8007452:	6a3a      	ldr	r2, [r7, #32]
 8007454:	429a      	cmp	r2, r3
 8007456:	dbed      	blt.n	8007434 <TCPwaitConnData+0x178>
			          }
			          modH->u16TransactionID = (buf[0]<<8 & 0xff00) | buf[1];
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	021b      	lsls	r3, r3, #8
 800745e:	b21a      	sxth	r2, r3
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	3301      	adds	r3, #1
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	b21b      	sxth	r3, r3
 8007468:	4313      	orrs	r3, r2
 800746a:	b21b      	sxth	r3, r3
 800746c:	b29a      	uxth	r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
			          modH->u8BufferSize = uLength + 2; //add 2 dummy bytes for CRC
 8007474:	8b3b      	ldrh	r3, [r7, #24]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	3302      	adds	r3, #2
 800747a:	b2da      	uxtb	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
			          xTCPvalid = true; // we have data for the modbus slave
 8007482:	2301      	movs	r3, #1
 8007484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			      }
			  }

		  }
		  netbuf_delete(inbuf); // delete the buffer always
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	4618      	mov	r0, r3
 800748c:	f007 fb04 	bl	800ea98 <netbuf_delete>
		  clientconn->aging = 0; //reset the aging counter
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	2200      	movs	r2, #0
 8007494:	605a      	str	r2, [r3, #4]
	   }
   }

  return xTCPvalid;
 8007496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27

}
 800749a:	4618      	mov	r0, r3
 800749c:	3728      	adds	r7, #40	; 0x28
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <TCPinitserver>:


void  TCPinitserver(modbusHandler_t *modH)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
      err_t err;

	  /* Create a new TCP connection handle */
	  if(modH-> xTypeHW == TCP_HW)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d136      	bne.n	8007522 <TCPinitserver+0x80>
	  {
		modH->conn = netconn_new(NETCONN_TCP);
 80074b4:	2200      	movs	r2, #0
 80074b6:	2100      	movs	r1, #0
 80074b8:	2010      	movs	r0, #16
 80074ba:	f005 f9c5 	bl	800c848 <netconn_new_with_proto_and_callback>
 80074be:	4602      	mov	r2, r0
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
		if (modH->conn!= NULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d027      	beq.n	8007520 <TCPinitserver+0x7e>
		{
			/* Bind to port (502) Modbus with default IP address */
			if(modH->uTcpPort == 0) modH->uTcpPort = 502; //if port not defined
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8b3 3176 	ldrh.w	r3, [r3, #374]	; 0x176
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d104      	bne.n	80074e4 <TCPinitserver+0x42>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 80074e0:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
			err = netconn_bind(modH->conn, NULL, modH->uTcpPort);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 016c 	ldr.w	r0, [r3, #364]	; 0x16c
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8b3 3176 	ldrh.w	r3, [r3, #374]	; 0x176
 80074f0:	461a      	mov	r2, r3
 80074f2:	2100      	movs	r1, #0
 80074f4:	f005 fa64 	bl	800c9c0 <netconn_bind>
 80074f8:	4603      	mov	r3, r0
 80074fa:	73fb      	strb	r3, [r7, #15]
			if (err == ERR_OK)
 80074fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10c      	bne.n	800751e <TCPinitserver+0x7c>
			{
				/* Put the connection into LISTEN state */
				netconn_listen(modH->conn);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800750a:	21ff      	movs	r1, #255	; 0xff
 800750c:	4618      	mov	r0, r3
 800750e:	f005 fa8f 	bl	800ca30 <netconn_listen_with_backlog>
				netconn_set_recvtimeout(modH->conn, 1); // this is necessary to make it non blocking
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8007518:	2201      	movs	r2, #1
 800751a:	621a      	str	r2, [r3, #32]
			// error creating new connection check your configuration,
			// this function must be called after the scheduler is started
			}
		}
	  }
}
 800751c:	e001      	b.n	8007522 <TCPinitserver+0x80>
				while(1)
 800751e:	e7fe      	b.n	800751e <TCPinitserver+0x7c>
			while(1)
 8007520:	e7fe      	b.n	8007520 <TCPinitserver+0x7e>
}
 8007522:	bf00      	nop
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
	...

0800752c <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	60fb      	str	r3, [r7, #12]
  //uint32_t notification;

#if ENABLE_TCP ==1
  if( modH->xTypeHW == TCP_HW )
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800753e:	2b03      	cmp	r3, #3
 8007540:	d102      	bne.n	8007548 <StartTaskModbusSlave+0x1c>
  {
	  TCPinitserver(modH); // start the Modbus server slave
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f7ff ffad 	bl	80074a2 <TCPinitserver>
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	749a      	strb	r2, [r3, #18]
			  }
	  }
#endif

#if ENABLE_TCP ==1
	  if(modH-> xTypeHW == TCP_HW)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8007554:	2b03      	cmp	r3, #3
 8007556:	d109      	bne.n	800756c <StartTaskModbusSlave+0x40>
	  {

		  if(TCPwaitConnData(modH) == false) // wait for connection and receive data
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f7ff feaf 	bl	80072bc <TCPwaitConnData>
 800755e:	4603      	mov	r3, r0
 8007560:	f083 0301 	eor.w	r3, r3, #1
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	f040 80da 	bne.w	8007720 <StartTaskModbusSlave+0x1f4>

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8007572:	2b01      	cmp	r3, #1
 8007574:	d004      	beq.n	8007580 <StartTaskModbusSlave+0x54>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800757c:	2b04      	cmp	r3, #4
 800757e:	d117      	bne.n	80075b0 <StartTaskModbusSlave+0x84>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 8007580:	f04f 31ff 	mov.w	r1, #4294967295
 8007584:	2001      	movs	r0, #1
 8007586:	f003 ff1d 	bl	800b3c4 <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 f8fd 	bl	800778a <getRxBuffer>
 8007590:	4603      	mov	r3, r0
 8007592:	f113 0f03 	cmn.w	r3, #3
 8007596:	d10b      	bne.n	80075b0 <StartTaskModbusSlave+0x84>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	22fd      	movs	r2, #253	; 0xfd
 800759c:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80075a4:	3301      	adds	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 80075ae:	e0ba      	b.n	8007726 <StartTaskModbusSlave+0x1fa>
	  }

   }

   if (modH->u8BufferSize < 7)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80075b6:	2b06      	cmp	r3, #6
 80075b8:	d80b      	bhi.n	80075d2 <StartTaskModbusSlave+0xa6>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	22fa      	movs	r2, #250	; 0xfa
 80075be:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80075c6:	3301      	adds	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	  continue;
 80075d0:	e0a9      	b.n	8007726 <StartTaskModbusSlave+0x1fa>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	7cda      	ldrb	r2, [r3, #19]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	7a1b      	ldrb	r3, [r3, #8]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d005      	beq.n	80075ea <StartTaskModbusSlave+0xbe>
	{

#if ENABLE_TCP == 0
    	continue; // continue this is not for us
#else
    	if(modH->xTypeHW != TCP_HW)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	f040 809d 	bne.w	8007724 <StartTaskModbusSlave+0x1f8>
    	}
#endif
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 f916 	bl	800781c <validateRequest>
 80075f0:	4603      	mov	r3, r0
 80075f2:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 80075f4:	7afb      	ldrb	r3, [r7, #11]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00c      	beq.n	8007614 <StartTaskModbusSlave+0xe8>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 80075fa:	7afb      	ldrb	r3, [r7, #11]
 80075fc:	68f9      	ldr	r1, [r7, #12]
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 fa6d 	bl	8007ade <buildException>
			sendTxBuffer(modH);
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 fa89 	bl	8007b1c <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 800760a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 8007612:	e088      	b.n	8007726 <StartTaskModbusSlave+0x1fa>
	 }

	 modH->i8lastError = 0;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2200      	movs	r2, #0
 8007618:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007620:	f04f 31ff 	mov.w	r1, #4294967295
 8007624:	4618      	mov	r0, r3
 8007626:	f002 fb01 	bl	8009c2c <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	7d1b      	ldrb	r3, [r3, #20]
 800762e:	3b01      	subs	r3, #1
 8007630:	2b0f      	cmp	r3, #15
 8007632:	d86b      	bhi.n	800770c <StartTaskModbusSlave+0x1e0>
 8007634:	a201      	add	r2, pc, #4	; (adr r2, 800763c <StartTaskModbusSlave+0x110>)
 8007636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763a:	bf00      	nop
 800763c:	0800767d 	.word	0x0800767d
 8007640:	0800767d 	.word	0x0800767d
 8007644:	08007695 	.word	0x08007695
 8007648:	08007695 	.word	0x08007695
 800764c:	080076ad 	.word	0x080076ad
 8007650:	080076c5 	.word	0x080076c5
 8007654:	0800770d 	.word	0x0800770d
 8007658:	0800770d 	.word	0x0800770d
 800765c:	0800770d 	.word	0x0800770d
 8007660:	0800770d 	.word	0x0800770d
 8007664:	0800770d 	.word	0x0800770d
 8007668:	0800770d 	.word	0x0800770d
 800766c:	0800770d 	.word	0x0800770d
 8007670:	0800770d 	.word	0x0800770d
 8007674:	080076dd 	.word	0x080076dd
 8007678:	080076f5 	.word	0x080076f5
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				// modH->i8state = process_FC1(modH);
				modH->i8state = Slave_Fc1(modH);
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 fb60 	bl	8007d42 <Slave_Fc1>
 8007682:	4603      	mov	r3, r0
 8007684:	461a      	mov	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				sendTxBuffer(modH);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fa45 	bl	8007b1c <sendTxBuffer>
				break;
 8007692:	e03c      	b.n	800770e <StartTaskModbusSlave+0x1e2>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				// modH->i8state = process_FC3(modH);
				modH->i8state = Slave_Fc3(modH);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 fbff 	bl	8007e98 <Slave_Fc3>
 800769a:	4603      	mov	r3, r0
 800769c:	461a      	mov	r2, r3
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				sendTxBuffer(modH);
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f000 fa39 	bl	8007b1c <sendTxBuffer>
				break;
 80076aa:	e030      	b.n	800770e <StartTaskModbusSlave+0x1e2>
			case MB_FC_WRITE_COIL:
				modH->i8state = Slave_Fc5(modH);
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 fc56 	bl	8007f5e <Slave_Fc5>
 80076b2:	4603      	mov	r3, r0
 80076b4:	461a      	mov	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				sendTxBuffer(modH);
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 fa2d 	bl	8007b1c <sendTxBuffer>
				break;
 80076c2:	e024      	b.n	800770e <StartTaskModbusSlave+0x1e2>
			case MB_FC_WRITE_REGISTER :
				// modH->i8state = process_FC6(modH);
				modH->i8state = Slave_Fc6(modH);
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 fc76 	bl	8007fb6 <Slave_Fc6>
 80076ca:	4603      	mov	r3, r0
 80076cc:	461a      	mov	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				sendTxBuffer(modH);
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 fa21 	bl	8007b1c <sendTxBuffer>
				break;
 80076da:	e018      	b.n	800770e <StartTaskModbusSlave+0x1e2>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = Slave_Fc15(modH);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 fce8 	bl	80080b2 <Slave_Fc15>
 80076e2:	4603      	mov	r3, r0
 80076e4:	461a      	mov	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				sendTxBuffer(modH);
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 fa15 	bl	8007b1c <sendTxBuffer>
				break;
 80076f2:	e00c      	b.n	800770e <StartTaskModbusSlave+0x1e2>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				// modH->i8state = process_FC16(modH);
				modH->i8state = Slave_Fc16(modH);
 80076f4:	68f8      	ldr	r0, [r7, #12]
 80076f6:	f000 fc8b 	bl	8008010 <Slave_Fc16>
 80076fa:	4603      	mov	r3, r0
 80076fc:	461a      	mov	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				sendTxBuffer(modH);
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 fa09 	bl	8007b1c <sendTxBuffer>
				break;
 800770a:	e000      	b.n	800770e <StartTaskModbusSlave+0x1e2>
			default:
				break;
 800770c:	bf00      	nop
	 }


	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8007714:	2300      	movs	r3, #0
 8007716:	2200      	movs	r2, #0
 8007718:	2100      	movs	r1, #0
 800771a:	f001 ff65 	bl	80095e8 <xQueueGenericSend>

	 continue;
 800771e:	e002      	b.n	8007726 <StartTaskModbusSlave+0x1fa>
			continue; // TCP package was not validated
 8007720:	bf00      	nop
 8007722:	e711      	b.n	8007548 <StartTaskModbusSlave+0x1c>
    		continue; //for Modbus TCP this is not validated, user should modify accordingly if needed
 8007724:	bf00      	nop
  {
 8007726:	e70f      	b.n	8007548 <StartTaskModbusSlave+0x1c>

08007728 <ModbusCloseConnNull>:
	}

}

void ModbusCloseConnNull(modbusHandler_t * modH)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b082      	sub	sp, #8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]

	if(modH->newconns[modH->newconnIndex].conn  != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	3329      	adds	r3, #41	; 0x29
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	4413      	add	r3, r2
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d01e      	beq.n	8007782 <ModbusCloseConnNull+0x5a>
	{

		netconn_close(modH->newconns[modH->newconnIndex].conn);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	3329      	adds	r3, #41	; 0x29
 800774e:	00db      	lsls	r3, r3, #3
 8007750:	4413      	add	r3, r2
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	4618      	mov	r0, r3
 8007756:	f005 fd3d 	bl	800d1d4 <netconn_close>
		netconn_delete(modH->newconns[modH->newconnIndex].conn);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	3329      	adds	r3, #41	; 0x29
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	4413      	add	r3, r2
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	4618      	mov	r0, r3
 800776c:	f005 f90c 	bl	800c988 <netconn_delete>
		modH->newconns[modH->newconnIndex].conn = NULL;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	3329      	adds	r3, #41	; 0x29
 800777a:	00db      	lsls	r3, r3, #3
 800777c:	4413      	add	r3, r2
 800777e:	2200      	movs	r2, #0
 8007780:	605a      	str	r2, [r3, #4]
	}

}
 8007782:	bf00      	nop
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8007798:	2b01      	cmp	r3, #1
 800779a:	d104      	bne.n	80077a6 <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fc fa29 	bl	8003bf8 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d008      	beq.n	80077c2 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	33c4      	adds	r3, #196	; 0xc4
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fe fd28 	bl	800620a <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 80077ba:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80077be:	81fb      	strh	r3, [r7, #14]
 80077c0:	e019      	b.n	80077f6 <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3313      	adds	r3, #19
 80077cc:	4619      	mov	r1, r3
 80077ce:	4610      	mov	r0, r2
 80077d0:	f7fe fcb5 	bl	800613e <RingGetAllBytes>
 80077d4:	4603      	mov	r3, r0
 80077d6:	461a      	mov	r2, r3
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 80077e4:	3301      	adds	r3, #1
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80077f4:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d107      	bne.n	8007810 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6858      	ldr	r0, [r3, #4]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	33a6      	adds	r3, #166	; 0xa6
 8007808:	2201      	movs	r2, #1
 800780a:	4619      	mov	r1, r3
 800780c:	f7fc f9a6 	bl	8003b5c <HAL_UART_Receive_IT>
	}

    return i16result;
 8007810:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc

#if ENABLE_TCP ==1
	    uint16_t u16MsgCRC;
		    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800782a:	3b02      	subs	r3, #2
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	4413      	add	r3, r2
 8007830:	7cdb      	ldrb	r3, [r3, #19]
 8007832:	021b      	lsls	r3, r3, #8
		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8007834:	b21a      	sxth	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800783c:	3b01      	subs	r3, #1
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	440b      	add	r3, r1
 8007842:	7cdb      	ldrb	r3, [r3, #19]
 8007844:	b21b      	sxth	r3, r3
 8007846:	4313      	orrs	r3, r2
 8007848:	b21b      	sxth	r3, r3
		    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 800784a:	813b      	strh	r3, [r7, #8]

	    if (modH->xTypeHW != TCP_HW)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8007852:	2b03      	cmp	r3, #3
 8007854:	d01a      	beq.n	800788c <validateRequest+0x70>
	    {
	    	if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f103 0213 	add.w	r2, r3, #19
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007862:	3b02      	subs	r3, #2
 8007864:	b2db      	uxtb	r3, r3
 8007866:	4619      	mov	r1, r3
 8007868:	4610      	mov	r0, r2
 800786a:	f7fe fbdb 	bl	8006024 <calcCRC>
 800786e:	4603      	mov	r3, r0
 8007870:	461a      	mov	r2, r3
 8007872:	893b      	ldrh	r3, [r7, #8]
 8007874:	4293      	cmp	r3, r2
 8007876:	d009      	beq.n	800788c <validateRequest+0x70>
	    	{
	    		modH->u16errCnt ++;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 800787e:	3301      	adds	r3, #1
 8007880:	b29a      	uxth	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	    		return ERR_BAD_CRC;
 8007888:	23fc      	movs	r3, #252	; 0xfc
 800788a:	e10e      	b.n	8007aaa <validateRequest+0x28e>


#endif

	    // check fct code
	    bool isSupported = false;
 800788c:	2300      	movs	r3, #0
 800788e:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8007890:	2300      	movs	r3, #0
 8007892:	73bb      	strb	r3, [r7, #14]
 8007894:	e00c      	b.n	80078b0 <validateRequest+0x94>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	4a86      	ldr	r2, [pc, #536]	; (8007ab4 <validateRequest+0x298>)
 800789a:	5cd2      	ldrb	r2, [r2, r3]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7d1b      	ldrb	r3, [r3, #20]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d102      	bne.n	80078aa <validateRequest+0x8e>
	        {
	            isSupported = 1;
 80078a4:	2301      	movs	r3, #1
 80078a6:	73fb      	strb	r3, [r7, #15]
	            break;
 80078a8:	e005      	b.n	80078b6 <validateRequest+0x9a>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80078aa:	7bbb      	ldrb	r3, [r7, #14]
 80078ac:	3301      	adds	r3, #1
 80078ae:	73bb      	strb	r3, [r7, #14]
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	2b07      	cmp	r3, #7
 80078b4:	d9ef      	bls.n	8007896 <validateRequest+0x7a>
	        }
	    }
	    if (!isSupported)
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
 80078b8:	f083 0301 	eor.w	r3, r3, #1
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d009      	beq.n	80078d6 <validateRequest+0xba>
	    {
	    	modH->u16errCnt ++;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 80078c8:	3301      	adds	r3, #1
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e0e9      	b.n	8007aaa <validateRequest+0x28e>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 80078da:	2300      	movs	r3, #0
 80078dc:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	7d1b      	ldrb	r3, [r3, #20]
 80078e2:	3b01      	subs	r3, #1
 80078e4:	2b0f      	cmp	r3, #15
 80078e6:	f200 80df 	bhi.w	8007aa8 <validateRequest+0x28c>
 80078ea:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <validateRequest+0xd4>)
 80078ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f0:	08007931 	.word	0x08007931
 80078f4:	08007931 	.word	0x08007931
 80078f8:	08007a49 	.word	0x08007a49
 80078fc:	08007a49 	.word	0x08007a49
 8007900:	080079dd 	.word	0x080079dd
 8007904:	08007a25 	.word	0x08007a25
 8007908:	08007aa9 	.word	0x08007aa9
 800790c:	08007aa9 	.word	0x08007aa9
 8007910:	08007aa9 	.word	0x08007aa9
 8007914:	08007aa9 	.word	0x08007aa9
 8007918:	08007aa9 	.word	0x08007aa9
 800791c:	08007aa9 	.word	0x08007aa9
 8007920:	08007aa9 	.word	0x08007aa9
 8007924:	08007aa9 	.word	0x08007aa9
 8007928:	08007931 	.word	0x08007931
 800792c:	08007a49 	.word	0x08007a49
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	7d5a      	ldrb	r2, [r3, #21]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	7d9b      	ldrb	r3, [r3, #22]
 8007938:	4619      	mov	r1, r3
 800793a:	4610      	mov	r0, r2
 800793c:	f000 f8bc 	bl	8007ab8 <word>
 8007940:	4603      	mov	r3, r0
 8007942:	091b      	lsrs	r3, r3, #4
 8007944:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	7dda      	ldrb	r2, [r3, #23]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	7e1b      	ldrb	r3, [r3, #24]
 800794e:	4619      	mov	r1, r3
 8007950:	4610      	mov	r0, r2
 8007952:	f000 f8b1 	bl	8007ab8 <word>
 8007956:	4603      	mov	r3, r0
 8007958:	091b      	lsrs	r3, r3, #4
 800795a:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	7dda      	ldrb	r2, [r3, #23]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	7e1b      	ldrb	r3, [r3, #24]
 8007964:	4619      	mov	r1, r3
 8007966:	4610      	mov	r0, r2
 8007968:	f000 f8a6 	bl	8007ab8 <word>
 800796c:	4603      	mov	r3, r0
 800796e:	f003 030f 	and.w	r3, r3, #15
 8007972:	b29b      	uxth	r3, r3
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <validateRequest+0x162>
 8007978:	897b      	ldrh	r3, [r7, #10]
 800797a:	3301      	adds	r3, #1
 800797c:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 800797e:	89ba      	ldrh	r2, [r7, #12]
 8007980:	897b      	ldrh	r3, [r7, #10]
 8007982:	4413      	add	r3, r2
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 800798a:	4293      	cmp	r3, r2
 800798c:	dd01      	ble.n	8007992 <validateRequest+0x176>
 800798e:	2302      	movs	r3, #2
 8007990:	e08b      	b.n	8007aaa <validateRequest+0x28e>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	7dda      	ldrb	r2, [r3, #23]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	7e1b      	ldrb	r3, [r3, #24]
 800799a:	4619      	mov	r1, r3
 800799c:	4610      	mov	r0, r2
 800799e:	f000 f88b 	bl	8007ab8 <word>
 80079a2:	4603      	mov	r3, r0
 80079a4:	08db      	lsrs	r3, r3, #3
 80079a6:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	7dda      	ldrb	r2, [r3, #23]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	7e1b      	ldrb	r3, [r3, #24]
 80079b0:	4619      	mov	r1, r3
 80079b2:	4610      	mov	r0, r2
 80079b4:	f000 f880 	bl	8007ab8 <word>
 80079b8:	4603      	mov	r3, r0
 80079ba:	f003 0307 	and.w	r3, r3, #7
 80079be:	b29b      	uxth	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d002      	beq.n	80079ca <validateRequest+0x1ae>
 80079c4:	897b      	ldrh	r3, [r7, #10]
 80079c6:	3301      	adds	r3, #1
 80079c8:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 80079ca:	897b      	ldrh	r3, [r7, #10]
 80079cc:	3305      	adds	r3, #5
 80079ce:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 80079d0:	897b      	ldrh	r3, [r7, #10]
 80079d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079d6:	d960      	bls.n	8007a9a <validateRequest+0x27e>
 80079d8:	2303      	movs	r3, #3
 80079da:	e066      	b.n	8007aaa <validateRequest+0x28e>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	7d5a      	ldrb	r2, [r3, #21]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	7d9b      	ldrb	r3, [r3, #22]
 80079e4:	4619      	mov	r1, r3
 80079e6:	4610      	mov	r0, r2
 80079e8:	f000 f866 	bl	8007ab8 <word>
 80079ec:	4603      	mov	r3, r0
 80079ee:	091b      	lsrs	r3, r3, #4
 80079f0:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7d5a      	ldrb	r2, [r3, #21]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	7d9b      	ldrb	r3, [r3, #22]
 80079fa:	4619      	mov	r1, r3
 80079fc:	4610      	mov	r0, r2
 80079fe:	f000 f85b 	bl	8007ab8 <word>
 8007a02:	4603      	mov	r3, r0
 8007a04:	f003 030f 	and.w	r3, r3, #15
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d002      	beq.n	8007a14 <validateRequest+0x1f8>
 8007a0e:	89bb      	ldrh	r3, [r7, #12]
 8007a10:	3301      	adds	r3, #1
 8007a12:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8007a1a:	89ba      	ldrh	r2, [r7, #12]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d93e      	bls.n	8007a9e <validateRequest+0x282>
 8007a20:	2302      	movs	r3, #2
 8007a22:	e042      	b.n	8007aaa <validateRequest+0x28e>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	7d5a      	ldrb	r2, [r3, #21]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	7d9b      	ldrb	r3, [r3, #22]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4610      	mov	r0, r2
 8007a30:	f000 f842 	bl	8007ab8 <word>
 8007a34:	4603      	mov	r3, r0
 8007a36:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8007a3e:	89ba      	ldrh	r2, [r7, #12]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d92e      	bls.n	8007aa2 <validateRequest+0x286>
 8007a44:	2302      	movs	r3, #2
 8007a46:	e030      	b.n	8007aaa <validateRequest+0x28e>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	7d5a      	ldrb	r2, [r3, #21]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	7d9b      	ldrb	r3, [r3, #22]
 8007a50:	4619      	mov	r1, r3
 8007a52:	4610      	mov	r0, r2
 8007a54:	f000 f830 	bl	8007ab8 <word>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	7dda      	ldrb	r2, [r3, #23]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	7e1b      	ldrb	r3, [r3, #24]
 8007a64:	4619      	mov	r1, r3
 8007a66:	4610      	mov	r0, r2
 8007a68:	f000 f826 	bl	8007ab8 <word>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8007a70:	89ba      	ldrh	r2, [r7, #12]
 8007a72:	897b      	ldrh	r3, [r7, #10]
 8007a74:	4413      	add	r3, r2
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	dd01      	ble.n	8007a84 <validateRequest+0x268>
 8007a80:	2302      	movs	r3, #2
 8007a82:	e012      	b.n	8007aaa <validateRequest+0x28e>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8007a84:	897b      	ldrh	r3, [r7, #10]
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	3305      	adds	r3, #5
 8007a8c:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8007a8e:	897b      	ldrh	r3, [r7, #10]
 8007a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a94:	d907      	bls.n	8007aa6 <validateRequest+0x28a>
 8007a96:	2303      	movs	r3, #3
 8007a98:	e007      	b.n	8007aaa <validateRequest+0x28e>
	        break;
 8007a9a:	bf00      	nop
 8007a9c:	e004      	b.n	8007aa8 <validateRequest+0x28c>
	        break;
 8007a9e:	bf00      	nop
 8007aa0:	e002      	b.n	8007aa8 <validateRequest+0x28c>
	        break;
 8007aa2:	bf00      	nop
 8007aa4:	e000      	b.n	8007aa8 <validateRequest+0x28c>
	        break;
 8007aa6:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8007aa8:	2300      	movs	r3, #0

}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	0801e708 	.word	0x0801e708

08007ab8 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	460a      	mov	r2, r1
 8007ac2:	71fb      	strb	r3, [r7, #7]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8007ac8:	79bb      	ldrb	r3, [r7, #6]
 8007aca:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8007ad0:	89bb      	ldrh	r3, [r7, #12]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b085      	sub	sp, #20
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	6039      	str	r1, [r7, #0]
 8007ae8:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	7d1b      	ldrb	r3, [r3, #20]
 8007aee:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	7a1a      	ldrb	r2, [r3, #8]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
 8007afa:	3b80      	subs	r3, #128	; 0x80
 8007afc:	b2da      	uxtb	r2, r3
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	79fa      	ldrb	r2, [r7, #7]
 8007b06:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2203      	movs	r2, #3
 8007b0c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 8007b10:	bf00      	nop
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8007b1c:	b590      	push	{r4, r7, lr}
 8007b1e:	b08d      	sub	sp, #52	; 0x34
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	6078      	str	r0, [r7, #4]
    // append CRC to message

#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d02f      	beq.n	8007b8e <sendTxBuffer+0x72>
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f103 0213 	add.w	r2, r3, #19
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	f7fe fa71 	bl	8006024 <calcCRC>
 8007b42:	4603      	mov	r3, r0
 8007b44:	84fb      	strh	r3, [r7, #38]	; 0x26
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8007b46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b48:	0a1b      	lsrs	r3, r3, #8
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007b52:	4619      	mov	r1, r3
 8007b54:	b2d2      	uxtb	r2, r2
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	440b      	add	r3, r1
 8007b5a:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007b62:	3301      	adds	r3, #1
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007b72:	4619      	mov	r1, r3
 8007b74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	440b      	add	r3, r1
 8007b7c:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007b84:	3301      	adds	r3, #1
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	 }
#endif


#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d004      	beq.n	8007ba2 <sendTxBuffer+0x86>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8007b9e:	2b04      	cmp	r3, #4
 8007ba0:	d14c      	bne.n	8007c3c <sendTxBuffer+0x120>
    {
#endif

    	if (modH->EN_Port != NULL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00c      	beq.n	8007bc4 <sendTxBuffer+0xa8>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fc fbd2 	bl	8004358 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68d8      	ldr	r0, [r3, #12]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	8a1b      	ldrh	r3, [r3, #16]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	f7fa fe2c 	bl	800281c <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6858      	ldr	r0, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f103 0113 	add.w	r1, r3, #19
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	f7fb ff52 	bl	8003a80 <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8007bdc:	21fa      	movs	r1, #250	; 0xfa
 8007bde:	2001      	movs	r0, #1
 8007be0:	f003 fbf0 	bl	800b3c4 <ulTaskNotifyTake>
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          // F429, F103, L152 ...
	  while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8007be4:	bf00      	nop
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d0f7      	beq.n	8007be6 <sendTxBuffer+0xca>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00c      	beq.n	8007c18 <sendTxBuffer+0xfc>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68d8      	ldr	r0, [r3, #12]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	8a1b      	ldrh	r3, [r3, #16]
 8007c06:	2200      	movs	r2, #0
 8007c08:	4619      	mov	r1, r3
 8007c0a:	f7fa fe07 	bl	800281c <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fc fbf2 	bl	80043fc <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	d16d      	bne.n	8007cfc <sendTxBuffer+0x1e0>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 8007c26:	f002 fec9 	bl	800a9bc <xTaskGetTickCount>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	2300      	movs	r3, #0
 8007c32:	2102      	movs	r1, #2
 8007c34:	4620      	mov	r0, r4
 8007c36:	f003 febd 	bl	800b9b4 <xTimerGenericCommand>
         if(modH->uModbusType == MB_MASTER )
 8007c3a:	e05f      	b.n	8007cfc <sendTxBuffer+0x1e0>
	}
#endif

#if ENABLE_TCP == 1

    else if(modH->xTypeHW == TCP_HW)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d15a      	bne.n	8007cfc <sendTxBuffer+0x1e0>
    	  struct netvector  xNetVectors[2];
    	  uint8_t u8MBAPheader[6];
    	  size_t uBytesWritten;


    	  u8MBAPheader[0] = highByte(modH->u16TransactionID); // this might need improvement the transaction ID could be validated
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8007c4c:	0a1b      	lsrs	r3, r3, #8
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	733b      	strb	r3, [r7, #12]
    	  u8MBAPheader[1] = lowByte(modH->u16TransactionID);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	737b      	strb	r3, [r7, #13]
    	  u8MBAPheader[2] = 0; //protocol ID
 8007c5e:	2300      	movs	r3, #0
 8007c60:	73bb      	strb	r3, [r7, #14]
    	  u8MBAPheader[3] = 0; //protocol ID
 8007c62:	2300      	movs	r3, #0
 8007c64:	73fb      	strb	r3, [r7, #15]
    	  u8MBAPheader[4] = 0; //highbyte data length always 0
 8007c66:	2300      	movs	r3, #0
 8007c68:	743b      	strb	r3, [r7, #16]
    	  u8MBAPheader[5] = modH->u8BufferSize; //highbyte data length
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007c70:	747b      	strb	r3, [r7, #17]

    	  xNetVectors[0].len = 6;
 8007c72:	2306      	movs	r3, #6
 8007c74:	61bb      	str	r3, [r7, #24]
    	  xNetVectors[0].ptr = (void *) u8MBAPheader;
 8007c76:	f107 030c 	add.w	r3, r7, #12
 8007c7a:	617b      	str	r3, [r7, #20]

    	  xNetVectors[1].len = modH->u8BufferSize;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007c82:	623b      	str	r3, [r7, #32]
    	  xNetVectors[1].ptr = (void *) modH->u8Buffer;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3313      	adds	r3, #19
 8007c88:	61fb      	str	r3, [r7, #28]


    	  netconn_set_sendtimeout(modH->newconns[modH->newconnIndex].conn, modH->u16timeOut);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8b3 10a2 	ldrh.w	r1, [r3, #162]	; 0xa2
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	3329      	adds	r3, #41	; 0x29
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	4413      	add	r3, r2
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	460a      	mov	r2, r1
 8007ca2:	61da      	str	r2, [r3, #28]
    	  err_enum_t err;

    	  err = netconn_write_vectors_partly(modH->newconns[modH->newconnIndex].conn, xNetVectors, 2, NETCONN_COPY, &uBytesWritten);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	3329      	adds	r3, #41	; 0x29
 8007cae:	00db      	lsls	r3, r3, #3
 8007cb0:	4413      	add	r3, r2
 8007cb2:	6858      	ldr	r0, [r3, #4]
 8007cb4:	f107 0114 	add.w	r1, r7, #20
 8007cb8:	f107 0308 	add.w	r3, r7, #8
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	f005 f98b 	bl	800cfdc <netconn_write_vectors_partly>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    	  if (err != ERR_OK )
 8007ccc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <sendTxBuffer+0x1be>
    	  {

    		 // ModbusCloseConn(modH->newconns[modH->newconnIndex].conn);
    		 ModbusCloseConnNull(modH);
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff fd27 	bl	8007728 <ModbusCloseConnNull>

    	  }


    	  if(modH->uModbusType == MB_MASTER )
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d10c      	bne.n	8007cfc <sendTxBuffer+0x1e0>
    	  {
    	    xTimerReset(modH->xTimerTimeout,0);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 8007ce8:	f002 fe68 	bl	800a9bc <xTaskGetTickCount>
 8007cec:	4602      	mov	r2, r0
 8007cee:	2300      	movs	r3, #0
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	2102      	movs	r1, #2
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	f003 fe5c 	bl	800b9b4 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 8007d14:	bf00      	nop
 8007d16:	372c      	adds	r7, #44	; 0x2c
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd90      	pop	{r4, r7, pc}

08007d1c <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	460a      	mov	r2, r1
 8007d26:	71fb      	strb	r3, [r7, #7]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8007d2c:	79bb      	ldrb	r3, [r7, #6]
 8007d2e:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8007d34:	89bb      	ldrh	r3, [r7, #12]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <Slave_Fc1>:

int8_t Slave_Fc1(modbusHandler_t *modH)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b086      	sub	sp, #24
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	7d5a      	ldrb	r2, [r3, #21]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	7d9b      	ldrb	r3, [r3, #22]
 8007d52:	4619      	mov	r1, r3
 8007d54:	4610      	mov	r0, r2
 8007d56:	f7ff ffe1 	bl	8007d1c <word>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	7dda      	ldrb	r2, [r3, #23]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	7e1b      	ldrb	r3, [r3, #24]
 8007d66:	4619      	mov	r1, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	f7ff ffd7 	bl	8007d1c <word>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8007d72:	8a3b      	ldrh	r3, [r7, #16]
 8007d74:	08db      	lsrs	r3, r3, #3
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8007d7a:	8a3b      	ldrh	r3, [r7, #16]
 8007d7c:	f003 0307 	and.w	r3, r3, #7
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d002      	beq.n	8007d8c <Slave_Fc1+0x4a>
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	7dfa      	ldrb	r2, [r7, #23]
 8007d90:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2203      	movs	r2, #3
 8007d96:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007da0:	461a      	mov	r2, r3
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	4413      	add	r3, r2
 8007da6:	3b01      	subs	r3, #1
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	4413      	add	r3, r2
 8007dac:	2200      	movs	r2, #0
 8007dae:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8007db0:	2300      	movs	r3, #0
 8007db2:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8007db4:	2300      	movs	r3, #0
 8007db6:	82bb      	strh	r3, [r7, #20]
 8007db8:	e051      	b.n	8007e5e <Slave_Fc1+0x11c>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8007dba:	8a7a      	ldrh	r2, [r7, #18]
 8007dbc:	8abb      	ldrh	r3, [r7, #20]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8007dc2:	89bb      	ldrh	r3, [r7, #12]
 8007dc4:	091b      	lsrs	r3, r3, #4
 8007dc6:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8007dc8:	89bb      	ldrh	r3, [r7, #12]
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	f003 030f 	and.w	r3, r3, #15
 8007dd0:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8007dd2:	8abb      	ldrh	r3, [r7, #20]
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fe f87c 	bl	8005ed4 <Read_Coil>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d014      	beq.n	8007e0c <Slave_Fc1+0xca>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007de8:	461a      	mov	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4413      	add	r3, r2
 8007dee:	7cda      	ldrb	r2, [r3, #19]
 8007df0:	7dbb      	ldrb	r3, [r7, #22]
 8007df2:	2101      	movs	r1, #1
 8007df4:	fa01 f303 	lsl.w	r3, r1, r3
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8007e00:	4313      	orrs	r3, r2
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	440b      	add	r3, r1
 8007e08:	74da      	strb	r2, [r3, #19]
 8007e0a:	e015      	b.n	8007e38 <Slave_Fc1+0xf6>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007e12:	461a      	mov	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4413      	add	r3, r2
 8007e18:	7cda      	ldrb	r2, [r3, #19]
 8007e1a:	7dbb      	ldrb	r3, [r7, #22]
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	43db      	mvns	r3, r3
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	6879      	ldr	r1, [r7, #4]
 8007e2a:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8007e2e:	4013      	ands	r3, r2
 8007e30:	b2da      	uxtb	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	440b      	add	r3, r1
 8007e36:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    Read_Coil(u16currentCoil,modH) );
        u8bitsno ++;
 8007e38:	7dbb      	ldrb	r3, [r7, #22]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8007e3e:	7dbb      	ldrb	r3, [r7, #22]
 8007e40:	2b07      	cmp	r3, #7
 8007e42:	d909      	bls.n	8007e58 <Slave_Fc1+0x116>
        {
            u8bitsno = 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007e4e:	3301      	adds	r3, #1
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8007e58:	8abb      	ldrh	r3, [r7, #20]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	82bb      	strh	r3, [r7, #20]
 8007e5e:	8aba      	ldrh	r2, [r7, #20]
 8007e60:	8a3b      	ldrh	r3, [r7, #16]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d3a9      	bcc.n	8007dba <Slave_Fc1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8007e66:	8a3b      	ldrh	r3, [r7, #16]
 8007e68:	f003 0307 	and.w	r3, r3, #7
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d007      	beq.n	8007e82 <Slave_Fc1+0x140>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007e78:	3301      	adds	r3, #1
 8007e7a:	b2da      	uxtb	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007e88:	3302      	adds	r3, #2
 8007e8a:	73fb      	strb	r3, [r7, #15]
    // 
    return u8CopyBufferSize;
 8007e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <Slave_Fc3>:
int8_t Slave_Fc3(modbusHandler_t *modH)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	7d5a      	ldrb	r2, [r3, #21]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	7d9b      	ldrb	r3, [r3, #22]
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	4610      	mov	r0, r2
 8007eac:	f7ff ff36 	bl	8007d1c <word>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	7dda      	ldrb	r2, [r3, #23]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	7e1b      	ldrb	r3, [r3, #24]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	4610      	mov	r0, r2
 8007ec0:	f7ff ff2c 	bl	8007d1c <word>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 8007ec8:	7afb      	ldrb	r3, [r7, #11]
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2203      	movs	r2, #3
 8007ed6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	uint16_t Val;
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8007eda:	89bb      	ldrh	r3, [r7, #12]
 8007edc:	81fb      	strh	r3, [r7, #14]
 8007ede:	e02d      	b.n	8007f3c <Slave_Fc3+0xa4>

		// modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->Device[1].Value);
    	// modH->u8BufferSize++;
    	// modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->Device[1].Value);
    	// modH->u8BufferSize++;
		Val = Read_Reg(u16StartAdd, modH);
 8007ee0:	89bb      	ldrh	r3, [r7, #12]
 8007ee2:	6879      	ldr	r1, [r7, #4]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7fe f81d 	bl	8005f24 <Read_Reg>
 8007eea:	4603      	mov	r3, r0
 8007eec:	813b      	strh	r3, [r7, #8]
		modH->u8Buffer[ modH->u8BufferSize ] = highByte(Val);
 8007eee:	893b      	ldrh	r3, [r7, #8]
 8007ef0:	0a1b      	lsrs	r3, r3, #8
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007efa:	4619      	mov	r1, r3
 8007efc:	b2d2      	uxtb	r2, r2
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	440b      	add	r3, r1
 8007f02:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(Val);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	893b      	ldrh	r3, [r7, #8]
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	440b      	add	r3, r1
 8007f24:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd; i < u16StartAdd + u8regsno; i++)
 8007f36:	89fb      	ldrh	r3, [r7, #14]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	81fb      	strh	r3, [r7, #14]
 8007f3c:	89fa      	ldrh	r2, [r7, #14]
 8007f3e:	89b9      	ldrh	r1, [r7, #12]
 8007f40:	7afb      	ldrb	r3, [r7, #11]
 8007f42:	440b      	add	r3, r1
 8007f44:	429a      	cmp	r2, r3
 8007f46:	dbcb      	blt.n	8007ee0 <Slave_Fc3+0x48>

    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007f4e:	3302      	adds	r3, #2
 8007f50:	72bb      	strb	r3, [r7, #10]
    

    return u8CopyBufferSize;
 8007f52:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <Slave_Fc5>:

int8_t Slave_Fc5( modbusHandler_t *modH )
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b084      	sub	sp, #16
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	7d5a      	ldrb	r2, [r3, #21]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	7d9b      	ldrb	r3, [r3, #22]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	4610      	mov	r0, r2
 8007f72:	f7ff fed3 	bl	8007d1c <word>
 8007f76:	4603      	mov	r3, r0
 8007f78:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 8007f7a:	89fb      	ldrh	r3, [r7, #14]
 8007f7c:	091b      	lsrs	r3, r3, #4
 8007f7e:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 8007f80:	89fb      	ldrh	r3, [r7, #14]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f003 030f 	and.w	r3, r3, #15
 8007f88:	72fb      	strb	r3, [r7, #11]

	// Device_WriteCoil(u16coil,modH->u8Buffer[ NB_HI ]);
	// ModbusGpio_WritebyAddr(u16coil,modH->u8Buffer[ NB_HI ]);
	// Light_QueueUpdate(u16coil);

    Write_Coil(u16coil,modH->u8Buffer[ NB_HI ], modH);
 8007f8a:	89f8      	ldrh	r0, [r7, #14]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	7ddb      	ldrb	r3, [r3, #23]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	4619      	mov	r1, r3
 8007f94:	f7fd ffec 	bl	8005f70 <Write_Coil>
	

    // send answer to master
    modH->u8BufferSize = 6;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2206      	movs	r2, #6
 8007f9c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8007fa6:	3302      	adds	r3, #2
 8007fa8:	72bb      	strb	r3, [r7, #10]
    

    return u8CopyBufferSize;
 8007faa:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <Slave_Fc6>:

int8_t Slave_Fc6(modbusHandler_t *modH )
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b084      	sub	sp, #16
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	7d5a      	ldrb	r2, [r3, #21]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	7d9b      	ldrb	r3, [r3, #22]
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	4610      	mov	r0, r2
 8007fca:	f7ff fea7 	bl	8007d1c <word>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	7dda      	ldrb	r2, [r3, #23]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	7e1b      	ldrb	r3, [r3, #24]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	4610      	mov	r0, r2
 8007fde:	f7ff fe9d 	bl	8007d1c <word>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	81bb      	strh	r3, [r7, #12]
//     //modH->u16regs[ u16add ] = u16val;
// 	Device_WriteRegister(u16add,u16val);
// /**	USR Call Modbus Create Queue	**/
// 	Ac_TempQueueUpdate(u16val);

    Write_Reg(u16add,u16val,modH);
 8007fe6:	89fb      	ldrh	r3, [r7, #14]
 8007fe8:	89b9      	ldrh	r1, [r7, #12]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fd fff0 	bl	8005fd2 <Write_Reg>


    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2206      	movs	r2, #6
 8007ff6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8008000:	3302      	adds	r3, #2
 8008002:	72fb      	strb	r3, [r7, #11]
    

    return u8CopyBufferSize;
 8008004:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <Slave_Fc16>:

int8_t Slave_Fc16(modbusHandler_t *modH)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	7d5b      	ldrb	r3, [r3, #21]
 800801c:	021b      	lsls	r3, r3, #8
 800801e:	b21a      	sxth	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	7d9b      	ldrb	r3, [r3, #22]
 8008024:	b21b      	sxth	r3, r3
 8008026:	4313      	orrs	r3, r2
 8008028:	b21b      	sxth	r3, r3
 800802a:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	7ddb      	ldrb	r3, [r3, #23]
 8008030:	021b      	lsls	r3, r3, #8
 8008032:	b21a      	sxth	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	7e1b      	ldrb	r3, [r3, #24]
 8008038:	b21b      	sxth	r3, r3
 800803a:	4313      	orrs	r3, r2
 800803c:	b21b      	sxth	r3, r3
 800803e:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 8008046:	8a7b      	ldrh	r3, [r7, #18]
 8008048:	b2da      	uxtb	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2206      	movs	r2, #6
 8008052:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 8008056:	2300      	movs	r3, #0
 8008058:	82fb      	strh	r3, [r7, #22]
 800805a:	e01b      	b.n	8008094 <Slave_Fc16+0x84>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800805c:	8afb      	ldrh	r3, [r7, #22]
 800805e:	005b      	lsls	r3, r3, #1
 8008060:	3307      	adds	r3, #7
        temp = word(
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	4413      	add	r3, r2
 8008066:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8008068:	8afb      	ldrh	r3, [r7, #22]
 800806a:	3304      	adds	r3, #4
 800806c:	005b      	lsls	r3, r3, #1
        temp = word(
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	4413      	add	r3, r2
 8008072:	7cdb      	ldrb	r3, [r3, #19]
 8008074:	4619      	mov	r1, r3
 8008076:	f7ff fe51 	bl	8007d1c <word>
 800807a:	4603      	mov	r3, r0
 800807c:	81fb      	strh	r3, [r7, #14]

        Write_Reg(u16StartAdd + i,temp, modH );
 800807e:	8aba      	ldrh	r2, [r7, #20]
 8008080:	8afb      	ldrh	r3, [r7, #22]
 8008082:	4413      	add	r3, r2
 8008084:	89f9      	ldrh	r1, [r7, #14]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	4618      	mov	r0, r3
 800808a:	f7fd ffa2 	bl	8005fd2 <Write_Reg>
    for (i = 0; i < u16regsno; i++)
 800808e:	8afb      	ldrh	r3, [r7, #22]
 8008090:	3301      	adds	r3, #1
 8008092:	82fb      	strh	r3, [r7, #22]
 8008094:	8afa      	ldrh	r2, [r7, #22]
 8008096:	8a7b      	ldrh	r3, [r7, #18]
 8008098:	429a      	cmp	r2, r3
 800809a:	d3df      	bcc.n	800805c <Slave_Fc16+0x4c>

        //modH->u16regs[ u16StartAdd + i ] = temp;
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80080a2:	3302      	adds	r3, #2
 80080a4:	747b      	strb	r3, [r7, #17]
    //sendTxBuffer(modH);

    return u8CopyBufferSize;
 80080a6:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <Slave_Fc15>:


int8_t Slave_Fc15( modbusHandler_t *modH )
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b086      	sub	sp, #24
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	7d5a      	ldrb	r2, [r3, #21]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	7d9b      	ldrb	r3, [r3, #22]
 80080c2:	4619      	mov	r1, r3
 80080c4:	4610      	mov	r0, r2
 80080c6:	f7ff fe29 	bl	8007d1c <word>
 80080ca:	4603      	mov	r3, r0
 80080cc:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	7dda      	ldrb	r2, [r3, #23]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	7e1b      	ldrb	r3, [r3, #24]
 80080d6:	4619      	mov	r1, r3
 80080d8:	4610      	mov	r0, r2
 80080da:	f7ff fe1f 	bl	8007d1c <word>
 80080de:	4603      	mov	r3, r0
 80080e0:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 80080e6:	2307      	movs	r3, #7
 80080e8:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80080ea:	2300      	movs	r3, #0
 80080ec:	82bb      	strh	r3, [r7, #20]
 80080ee:	e034      	b.n	800815a <Slave_Fc15+0xa8>
    {

        u16coil = u16StartCoil + u16currentCoil;
 80080f0:	8a7a      	ldrh	r2, [r7, #18]
 80080f2:	8abb      	ldrh	r3, [r7, #20]
 80080f4:	4413      	add	r3, r2
 80080f6:	81bb      	strh	r3, [r7, #12]
		        bTemp = bitRead(
 80080f8:	7dfb      	ldrb	r3, [r7, #23]
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	4413      	add	r3, r2
 80080fe:	7cdb      	ldrb	r3, [r3, #19]
 8008100:	461a      	mov	r2, r3
 8008102:	7dbb      	ldrb	r3, [r7, #22]
 8008104:	fa42 f303 	asr.w	r3, r2, r3
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b00      	cmp	r3, #0
 800810e:	bf14      	ite	ne
 8008110:	2301      	movne	r3, #1
 8008112:	2300      	moveq	r3, #0
 8008114:	72fb      	strb	r3, [r7, #11]
                    u8bitsno );
		// Device_WriteCoil(u16coil,(bool)(((modH->u8Buffer[ u8frameByte ])>>(u8bitsno)) & 0x01));
		// ModbusGpio_WritebyAddr(u16coil,(bool)(((modH->u8Buffer[ u8frameByte ])>>(u8bitsno)) & 0x01));
	    // Light_QueueUpdate(u16coil);

        Write_Coil(u16coil, (bool)(((modH->u8Buffer[ u8frameByte ])>>(u8bitsno)) & 0x01), modH);
 8008116:	89b8      	ldrh	r0, [r7, #12]
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	4413      	add	r3, r2
 800811e:	7cdb      	ldrb	r3, [r3, #19]
 8008120:	461a      	mov	r2, r3
 8008122:	7dbb      	ldrb	r3, [r7, #22]
 8008124:	fa42 f303 	asr.w	r3, r2, r3
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	2b00      	cmp	r3, #0
 800812e:	bf14      	ite	ne
 8008130:	2301      	movne	r3, #1
 8008132:	2300      	moveq	r3, #0
 8008134:	b2db      	uxtb	r3, r3
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	4619      	mov	r1, r3
 800813a:	f7fd ff19 	bl	8005f70 <Write_Coil>
        u8bitsno ++;
 800813e:	7dbb      	ldrb	r3, [r7, #22]
 8008140:	3301      	adds	r3, #1
 8008142:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8008144:	7dbb      	ldrb	r3, [r7, #22]
 8008146:	2b07      	cmp	r3, #7
 8008148:	d904      	bls.n	8008154 <Slave_Fc15+0xa2>
        {
            u8bitsno = 0;
 800814a:	2300      	movs	r3, #0
 800814c:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800814e:	7dfb      	ldrb	r3, [r7, #23]
 8008150:	3301      	adds	r3, #1
 8008152:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8008154:	8abb      	ldrh	r3, [r7, #20]
 8008156:	3301      	adds	r3, #1
 8008158:	82bb      	strh	r3, [r7, #20]
 800815a:	8aba      	ldrh	r2, [r7, #20]
 800815c:	8a3b      	ldrh	r3, [r7, #16]
 800815e:	429a      	cmp	r2, r3
 8008160:	d3c6      	bcc.n	80080f0 <Slave_Fc15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2206      	movs	r2, #6
 8008166:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8008170:	3302      	adds	r3, #2
 8008172:	73fb      	strb	r3, [r7, #15]

    return u8CopyBufferSize;
 8008174:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3718      	adds	r7, #24
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af02      	add	r7, sp, #8
 8008186:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008188:	2300      	movs	r3, #0
 800818a:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800818c:	2300      	movs	r3, #0
 800818e:	60fb      	str	r3, [r7, #12]
 8008190:	e019      	b.n	80081c6 <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8008192:	4a17      	ldr	r2, [pc, #92]	; (80081f0 <HAL_UART_TxCpltCallback+0x70>)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d10e      	bne.n	80081c0 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 80081a2:	4a13      	ldr	r2, [pc, #76]	; (80081f0 <HAL_UART_TxCpltCallback+0x70>)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081aa:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 80081ae:	f107 0308 	add.w	r3, r7, #8
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	2300      	movs	r3, #0
 80081b6:	2200      	movs	r2, #0
 80081b8:	2100      	movs	r1, #0
 80081ba:	f003 fa13 	bl	800b5e4 <xTaskGenericNotifyFromISR>
	   		break;
 80081be:	e008      	b.n	80081d2 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	3301      	adds	r3, #1
 80081c4:	60fb      	str	r3, [r7, #12]
 80081c6:	4b0b      	ldr	r3, [pc, #44]	; (80081f4 <HAL_UART_TxCpltCallback+0x74>)
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	4293      	cmp	r3, r2
 80081d0:	dbdf      	blt.n	8008192 <HAL_UART_TxCpltCallback+0x12>
	   	}

	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d007      	beq.n	80081e8 <HAL_UART_TxCpltCallback+0x68>
 80081d8:	4b07      	ldr	r3, [pc, #28]	; (80081f8 <HAL_UART_TxCpltCallback+0x78>)
 80081da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 80081e8:	bf00      	nop
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	20008244 	.word	0x20008244
 80081f4:	200000a9 	.word	0x200000a9
 80081f8:	e000ed04 	.word	0xe000ed04

080081fc <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80081fc:	b590      	push	{r4, r7, lr}
 80081fe:	b087      	sub	sp, #28
 8008200:	af02      	add	r7, sp, #8
 8008202:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008204:	2300      	movs	r3, #0
 8008206:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8008208:	2300      	movs	r3, #0
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	e042      	b.n	8008294 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800820e:	4a2d      	ldr	r2, [pc, #180]	; (80082c4 <HAL_UART_RxCpltCallback+0xc8>)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	429a      	cmp	r2, r3
 800821c:	d137      	bne.n	800828e <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800821e:	4a29      	ldr	r2, [pc, #164]	; (80082c4 <HAL_UART_RxCpltCallback+0xc8>)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008226:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800822a:	2b01      	cmp	r3, #1
 800822c:	d139      	bne.n	80082a2 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800822e:	4a25      	ldr	r2, [pc, #148]	; (80082c4 <HAL_UART_RxCpltCallback+0xc8>)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008236:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 800823a:	4922      	ldr	r1, [pc, #136]	; (80082c4 <HAL_UART_RxCpltCallback+0xc8>)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008242:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8008246:	4619      	mov	r1, r3
 8008248:	4610      	mov	r0, r2
 800824a:	f7fd ff31 	bl	80060b0 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800824e:	4a1d      	ldr	r2, [pc, #116]	; (80082c4 <HAL_UART_RxCpltCallback+0xc8>)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008256:	6858      	ldr	r0, [r3, #4]
 8008258:	4a1a      	ldr	r2, [pc, #104]	; (80082c4 <HAL_UART_RxCpltCallback+0xc8>)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008260:	33a6      	adds	r3, #166	; 0xa6
 8008262:	2201      	movs	r2, #1
 8008264:	4619      	mov	r1, r3
 8008266:	f7fb fc79 	bl	8003b5c <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800826a:	4a16      	ldr	r2, [pc, #88]	; (80082c4 <HAL_UART_RxCpltCallback+0xc8>)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008272:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8008276:	f002 fbb1 	bl	800a9dc <xTaskGetTickCountFromISR>
 800827a:	4602      	mov	r2, r0
 800827c:	f107 0308 	add.w	r3, r7, #8
 8008280:	2100      	movs	r1, #0
 8008282:	9100      	str	r1, [sp, #0]
 8008284:	2107      	movs	r1, #7
 8008286:	4620      	mov	r0, r4
 8008288:	f003 fb94 	bl	800b9b4 <xTimerGenericCommand>
    		}
    		break;
 800828c:	e009      	b.n	80082a2 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3301      	adds	r3, #1
 8008292:	60fb      	str	r3, [r7, #12]
 8008294:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <HAL_UART_RxCpltCallback+0xcc>)
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	461a      	mov	r2, r3
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4293      	cmp	r3, r2
 800829e:	dbb6      	blt.n	800820e <HAL_UART_RxCpltCallback+0x12>
 80082a0:	e000      	b.n	80082a4 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 80082a2:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d007      	beq.n	80082ba <HAL_UART_RxCpltCallback+0xbe>
 80082aa:	4b08      	ldr	r3, [pc, #32]	; (80082cc <HAL_UART_RxCpltCallback+0xd0>)
 80082ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 80082ba:	bf00      	nop
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd90      	pop	{r4, r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20008244 	.word	0x20008244
 80082c8:	200000a9 	.word	0x200000a9
 80082cc:	e000ed04 	.word	0xe000ed04

080082d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80082d0:	b480      	push	{r7}
 80082d2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80082d4:	bf00      	nop
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
	...

080082e0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082e6:	f3ef 8305 	mrs	r3, IPSR
 80082ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80082ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10f      	bne.n	8008312 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082f2:	f3ef 8310 	mrs	r3, PRIMASK
 80082f6:	607b      	str	r3, [r7, #4]
  return(result);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d105      	bne.n	800830a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80082fe:	f3ef 8311 	mrs	r3, BASEPRI
 8008302:	603b      	str	r3, [r7, #0]
  return(result);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d007      	beq.n	800831a <osKernelInitialize+0x3a>
 800830a:	4b0e      	ldr	r3, [pc, #56]	; (8008344 <osKernelInitialize+0x64>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b02      	cmp	r3, #2
 8008310:	d103      	bne.n	800831a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008312:	f06f 0305 	mvn.w	r3, #5
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	e00c      	b.n	8008334 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800831a:	4b0a      	ldr	r3, [pc, #40]	; (8008344 <osKernelInitialize+0x64>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d105      	bne.n	800832e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008322:	4b08      	ldr	r3, [pc, #32]	; (8008344 <osKernelInitialize+0x64>)
 8008324:	2201      	movs	r2, #1
 8008326:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008328:	2300      	movs	r3, #0
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	e002      	b.n	8008334 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800832e:	f04f 33ff 	mov.w	r3, #4294967295
 8008332:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008334:	68fb      	ldr	r3, [r7, #12]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	200000ac 	.word	0x200000ac

08008348 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800834e:	f3ef 8305 	mrs	r3, IPSR
 8008352:	60bb      	str	r3, [r7, #8]
  return(result);
 8008354:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10f      	bne.n	800837a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800835a:	f3ef 8310 	mrs	r3, PRIMASK
 800835e:	607b      	str	r3, [r7, #4]
  return(result);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d105      	bne.n	8008372 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008366:	f3ef 8311 	mrs	r3, BASEPRI
 800836a:	603b      	str	r3, [r7, #0]
  return(result);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d007      	beq.n	8008382 <osKernelStart+0x3a>
 8008372:	4b0f      	ldr	r3, [pc, #60]	; (80083b0 <osKernelStart+0x68>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b02      	cmp	r3, #2
 8008378:	d103      	bne.n	8008382 <osKernelStart+0x3a>
    stat = osErrorISR;
 800837a:	f06f 0305 	mvn.w	r3, #5
 800837e:	60fb      	str	r3, [r7, #12]
 8008380:	e010      	b.n	80083a4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008382:	4b0b      	ldr	r3, [pc, #44]	; (80083b0 <osKernelStart+0x68>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d109      	bne.n	800839e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800838a:	f7ff ffa1 	bl	80082d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800838e:	4b08      	ldr	r3, [pc, #32]	; (80083b0 <osKernelStart+0x68>)
 8008390:	2202      	movs	r2, #2
 8008392:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008394:	f002 f9f0 	bl	800a778 <vTaskStartScheduler>
      stat = osOK;
 8008398:	2300      	movs	r3, #0
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	e002      	b.n	80083a4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800839e:	f04f 33ff 	mov.w	r3, #4294967295
 80083a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80083a4:	68fb      	ldr	r3, [r7, #12]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	200000ac 	.word	0x200000ac

080083b4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083ba:	f3ef 8305 	mrs	r3, IPSR
 80083be:	60bb      	str	r3, [r7, #8]
  return(result);
 80083c0:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10f      	bne.n	80083e6 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083c6:	f3ef 8310 	mrs	r3, PRIMASK
 80083ca:	607b      	str	r3, [r7, #4]
  return(result);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d105      	bne.n	80083de <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80083d2:	f3ef 8311 	mrs	r3, BASEPRI
 80083d6:	603b      	str	r3, [r7, #0]
  return(result);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d007      	beq.n	80083ee <osKernelGetTickCount+0x3a>
 80083de:	4b08      	ldr	r3, [pc, #32]	; (8008400 <osKernelGetTickCount+0x4c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d103      	bne.n	80083ee <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80083e6:	f002 faf9 	bl	800a9dc <xTaskGetTickCountFromISR>
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	e002      	b.n	80083f4 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80083ee:	f002 fae5 	bl	800a9bc <xTaskGetTickCount>
 80083f2:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80083f4:	68fb      	ldr	r3, [r7, #12]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	200000ac 	.word	0x200000ac

08008404 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008404:	b580      	push	{r7, lr}
 8008406:	b090      	sub	sp, #64	; 0x40
 8008408:	af04      	add	r7, sp, #16
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008410:	2300      	movs	r3, #0
 8008412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008414:	f3ef 8305 	mrs	r3, IPSR
 8008418:	61fb      	str	r3, [r7, #28]
  return(result);
 800841a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800841c:	2b00      	cmp	r3, #0
 800841e:	f040 808f 	bne.w	8008540 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008422:	f3ef 8310 	mrs	r3, PRIMASK
 8008426:	61bb      	str	r3, [r7, #24]
  return(result);
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d105      	bne.n	800843a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800842e:	f3ef 8311 	mrs	r3, BASEPRI
 8008432:	617b      	str	r3, [r7, #20]
  return(result);
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <osThreadNew+0x3e>
 800843a:	4b44      	ldr	r3, [pc, #272]	; (800854c <osThreadNew+0x148>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b02      	cmp	r3, #2
 8008440:	d07e      	beq.n	8008540 <osThreadNew+0x13c>
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d07b      	beq.n	8008540 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008448:	2380      	movs	r3, #128	; 0x80
 800844a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800844c:	2318      	movs	r3, #24
 800844e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008450:	2300      	movs	r3, #0
 8008452:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008454:	f04f 33ff 	mov.w	r3, #4294967295
 8008458:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d045      	beq.n	80084ec <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d002      	beq.n	800846e <osThreadNew+0x6a>
        name = attr->name;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d002      	beq.n	800847c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	2b00      	cmp	r3, #0
 8008480:	d008      	beq.n	8008494 <osThreadNew+0x90>
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	2b38      	cmp	r3, #56	; 0x38
 8008486:	d805      	bhi.n	8008494 <osThreadNew+0x90>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	2b00      	cmp	r3, #0
 8008492:	d001      	beq.n	8008498 <osThreadNew+0x94>
        return (NULL);
 8008494:	2300      	movs	r3, #0
 8008496:	e054      	b.n	8008542 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	695b      	ldr	r3, [r3, #20]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d003      	beq.n	80084a8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	695b      	ldr	r3, [r3, #20]
 80084a4:	089b      	lsrs	r3, r3, #2
 80084a6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00e      	beq.n	80084ce <osThreadNew+0xca>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	2bbb      	cmp	r3, #187	; 0xbb
 80084b6:	d90a      	bls.n	80084ce <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d006      	beq.n	80084ce <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <osThreadNew+0xca>
        mem = 1;
 80084c8:	2301      	movs	r3, #1
 80084ca:	623b      	str	r3, [r7, #32]
 80084cc:	e010      	b.n	80084f0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10c      	bne.n	80084f0 <osThreadNew+0xec>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	68db      	ldr	r3, [r3, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d108      	bne.n	80084f0 <osThreadNew+0xec>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d104      	bne.n	80084f0 <osThreadNew+0xec>
          mem = 0;
 80084e6:	2300      	movs	r3, #0
 80084e8:	623b      	str	r3, [r7, #32]
 80084ea:	e001      	b.n	80084f0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d110      	bne.n	8008518 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084fe:	9202      	str	r2, [sp, #8]
 8008500:	9301      	str	r3, [sp, #4]
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800850a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f001 ff3d 	bl	800a38c <xTaskCreateStatic>
 8008512:	4603      	mov	r3, r0
 8008514:	613b      	str	r3, [r7, #16]
 8008516:	e013      	b.n	8008540 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d110      	bne.n	8008540 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800851e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008520:	b29a      	uxth	r2, r3
 8008522:	f107 0310 	add.w	r3, r7, #16
 8008526:	9301      	str	r3, [sp, #4]
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f001 ff8e 	bl	800a452 <xTaskCreate>
 8008536:	4603      	mov	r3, r0
 8008538:	2b01      	cmp	r3, #1
 800853a:	d001      	beq.n	8008540 <osThreadNew+0x13c>
          hTask = NULL;
 800853c:	2300      	movs	r3, #0
 800853e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008540:	693b      	ldr	r3, [r7, #16]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3730      	adds	r7, #48	; 0x30
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	200000ac 	.word	0x200000ac

08008550 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8008556:	f002 fd93 	bl	800b080 <xTaskGetCurrentTaskHandle>
 800855a:	6078      	str	r0, [r7, #4]

  return (id);
 800855c:	687b      	ldr	r3, [r7, #4]
}
 800855e:	4618      	mov	r0, r3
 8008560:	3708      	adds	r7, #8
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
	...

08008568 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008570:	f3ef 8305 	mrs	r3, IPSR
 8008574:	613b      	str	r3, [r7, #16]
  return(result);
 8008576:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10f      	bne.n	800859c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800857c:	f3ef 8310 	mrs	r3, PRIMASK
 8008580:	60fb      	str	r3, [r7, #12]
  return(result);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d105      	bne.n	8008594 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008588:	f3ef 8311 	mrs	r3, BASEPRI
 800858c:	60bb      	str	r3, [r7, #8]
  return(result);
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d007      	beq.n	80085a4 <osDelay+0x3c>
 8008594:	4b0a      	ldr	r3, [pc, #40]	; (80085c0 <osDelay+0x58>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b02      	cmp	r3, #2
 800859a:	d103      	bne.n	80085a4 <osDelay+0x3c>
    stat = osErrorISR;
 800859c:	f06f 0305 	mvn.w	r3, #5
 80085a0:	617b      	str	r3, [r7, #20]
 80085a2:	e007      	b.n	80085b4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d002      	beq.n	80085b4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f002 f8ac 	bl	800a70c <vTaskDelay>
    }
  }

  return (stat);
 80085b4:	697b      	ldr	r3, [r7, #20]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3718      	adds	r7, #24
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	200000ac 	.word	0x200000ac

080085c4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b08a      	sub	sp, #40	; 0x28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80085cc:	2300      	movs	r3, #0
 80085ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085d0:	f3ef 8305 	mrs	r3, IPSR
 80085d4:	613b      	str	r3, [r7, #16]
  return(result);
 80085d6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f040 8085 	bne.w	80086e8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085de:	f3ef 8310 	mrs	r3, PRIMASK
 80085e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d105      	bne.n	80085f6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085ea:	f3ef 8311 	mrs	r3, BASEPRI
 80085ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d003      	beq.n	80085fe <osMutexNew+0x3a>
 80085f6:	4b3f      	ldr	r3, [pc, #252]	; (80086f4 <osMutexNew+0x130>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d074      	beq.n	80086e8 <osMutexNew+0x124>
    if (attr != NULL) {
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <osMutexNew+0x48>
      type = attr->attr_bits;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	623b      	str	r3, [r7, #32]
 800860a:	e001      	b.n	8008610 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <osMutexNew+0x5c>
      rmtx = 1U;
 800861a:	2301      	movs	r3, #1
 800861c:	61fb      	str	r3, [r7, #28]
 800861e:	e001      	b.n	8008624 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008620:	2300      	movs	r3, #0
 8008622:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008624:	6a3b      	ldr	r3, [r7, #32]
 8008626:	f003 0308 	and.w	r3, r3, #8
 800862a:	2b00      	cmp	r3, #0
 800862c:	d15c      	bne.n	80086e8 <osMutexNew+0x124>
      mem = -1;
 800862e:	f04f 33ff 	mov.w	r3, #4294967295
 8008632:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d015      	beq.n	8008666 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d006      	beq.n	8008650 <osMutexNew+0x8c>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	2b4f      	cmp	r3, #79	; 0x4f
 8008648:	d902      	bls.n	8008650 <osMutexNew+0x8c>
          mem = 1;
 800864a:	2301      	movs	r3, #1
 800864c:	61bb      	str	r3, [r7, #24]
 800864e:	e00c      	b.n	800866a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d108      	bne.n	800866a <osMutexNew+0xa6>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d104      	bne.n	800866a <osMutexNew+0xa6>
            mem = 0;
 8008660:	2300      	movs	r3, #0
 8008662:	61bb      	str	r3, [r7, #24]
 8008664:	e001      	b.n	800866a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d112      	bne.n	8008696 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d007      	beq.n	8008686 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	4619      	mov	r1, r3
 800867c:	2004      	movs	r0, #4
 800867e:	f000 feb8 	bl	80093f2 <xQueueCreateMutexStatic>
 8008682:	6278      	str	r0, [r7, #36]	; 0x24
 8008684:	e016      	b.n	80086b4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	4619      	mov	r1, r3
 800868c:	2001      	movs	r0, #1
 800868e:	f000 feb0 	bl	80093f2 <xQueueCreateMutexStatic>
 8008692:	6278      	str	r0, [r7, #36]	; 0x24
 8008694:	e00e      	b.n	80086b4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10b      	bne.n	80086b4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d004      	beq.n	80086ac <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80086a2:	2004      	movs	r0, #4
 80086a4:	f000 fe8d 	bl	80093c2 <xQueueCreateMutex>
 80086a8:	6278      	str	r0, [r7, #36]	; 0x24
 80086aa:	e003      	b.n	80086b4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80086ac:	2001      	movs	r0, #1
 80086ae:	f000 fe88 	bl	80093c2 <xQueueCreateMutex>
 80086b2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00c      	beq.n	80086d4 <osMutexNew+0x110>
        if (attr != NULL) {
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d003      	beq.n	80086c8 <osMutexNew+0x104>
          name = attr->name;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	617b      	str	r3, [r7, #20]
 80086c6:	e001      	b.n	80086cc <osMutexNew+0x108>
        } else {
          name = NULL;
 80086c8:	2300      	movs	r3, #0
 80086ca:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80086cc:	6979      	ldr	r1, [r7, #20]
 80086ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80086d0:	f001 fdd4 	bl	800a27c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d006      	beq.n	80086e8 <osMutexNew+0x124>
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d003      	beq.n	80086e8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	f043 0301 	orr.w	r3, r3, #1
 80086e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80086e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3728      	adds	r7, #40	; 0x28
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	200000ac 	.word	0x200000ac

080086f8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f023 0301 	bic.w	r3, r3, #1
 8008708:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008712:	2300      	movs	r3, #0
 8008714:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008716:	f3ef 8305 	mrs	r3, IPSR
 800871a:	613b      	str	r3, [r7, #16]
  return(result);
 800871c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10f      	bne.n	8008742 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008722:	f3ef 8310 	mrs	r3, PRIMASK
 8008726:	60fb      	str	r3, [r7, #12]
  return(result);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d105      	bne.n	800873a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800872e:	f3ef 8311 	mrs	r3, BASEPRI
 8008732:	60bb      	str	r3, [r7, #8]
  return(result);
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d007      	beq.n	800874a <osMutexAcquire+0x52>
 800873a:	4b1d      	ldr	r3, [pc, #116]	; (80087b0 <osMutexAcquire+0xb8>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b02      	cmp	r3, #2
 8008740:	d103      	bne.n	800874a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008742:	f06f 0305 	mvn.w	r3, #5
 8008746:	61fb      	str	r3, [r7, #28]
 8008748:	e02c      	b.n	80087a4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d103      	bne.n	8008758 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008750:	f06f 0303 	mvn.w	r3, #3
 8008754:	61fb      	str	r3, [r7, #28]
 8008756:	e025      	b.n	80087a4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d011      	beq.n	8008782 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800875e:	6839      	ldr	r1, [r7, #0]
 8008760:	69b8      	ldr	r0, [r7, #24]
 8008762:	f000 fe97 	bl	8009494 <xQueueTakeMutexRecursive>
 8008766:	4603      	mov	r3, r0
 8008768:	2b01      	cmp	r3, #1
 800876a:	d01b      	beq.n	80087a4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d003      	beq.n	800877a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8008772:	f06f 0301 	mvn.w	r3, #1
 8008776:	61fb      	str	r3, [r7, #28]
 8008778:	e014      	b.n	80087a4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800877a:	f06f 0302 	mvn.w	r3, #2
 800877e:	61fb      	str	r3, [r7, #28]
 8008780:	e010      	b.n	80087a4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	69b8      	ldr	r0, [r7, #24]
 8008786:	f001 fa51 	bl	8009c2c <xQueueSemaphoreTake>
 800878a:	4603      	mov	r3, r0
 800878c:	2b01      	cmp	r3, #1
 800878e:	d009      	beq.n	80087a4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d003      	beq.n	800879e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8008796:	f06f 0301 	mvn.w	r3, #1
 800879a:	61fb      	str	r3, [r7, #28]
 800879c:	e002      	b.n	80087a4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800879e:	f06f 0302 	mvn.w	r3, #2
 80087a2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80087a4:	69fb      	ldr	r3, [r7, #28]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3720      	adds	r7, #32
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	200000ac 	.word	0x200000ac

080087b4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b088      	sub	sp, #32
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f023 0301 	bic.w	r3, r3, #1
 80087c2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f003 0301 	and.w	r3, r3, #1
 80087ca:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087d0:	f3ef 8305 	mrs	r3, IPSR
 80087d4:	613b      	str	r3, [r7, #16]
  return(result);
 80087d6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10f      	bne.n	80087fc <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087dc:	f3ef 8310 	mrs	r3, PRIMASK
 80087e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d105      	bne.n	80087f4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087e8:	f3ef 8311 	mrs	r3, BASEPRI
 80087ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d007      	beq.n	8008804 <osMutexRelease+0x50>
 80087f4:	4b16      	ldr	r3, [pc, #88]	; (8008850 <osMutexRelease+0x9c>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d103      	bne.n	8008804 <osMutexRelease+0x50>
    stat = osErrorISR;
 80087fc:	f06f 0305 	mvn.w	r3, #5
 8008800:	61fb      	str	r3, [r7, #28]
 8008802:	e01f      	b.n	8008844 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d103      	bne.n	8008812 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800880a:	f06f 0303 	mvn.w	r3, #3
 800880e:	61fb      	str	r3, [r7, #28]
 8008810:	e018      	b.n	8008844 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d009      	beq.n	800882c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008818:	69b8      	ldr	r0, [r7, #24]
 800881a:	f000 fe05 	bl	8009428 <xQueueGiveMutexRecursive>
 800881e:	4603      	mov	r3, r0
 8008820:	2b01      	cmp	r3, #1
 8008822:	d00f      	beq.n	8008844 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008824:	f06f 0302 	mvn.w	r3, #2
 8008828:	61fb      	str	r3, [r7, #28]
 800882a:	e00b      	b.n	8008844 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800882c:	2300      	movs	r3, #0
 800882e:	2200      	movs	r2, #0
 8008830:	2100      	movs	r1, #0
 8008832:	69b8      	ldr	r0, [r7, #24]
 8008834:	f000 fed8 	bl	80095e8 <xQueueGenericSend>
 8008838:	4603      	mov	r3, r0
 800883a:	2b01      	cmp	r3, #1
 800883c:	d002      	beq.n	8008844 <osMutexRelease+0x90>
        stat = osErrorResource;
 800883e:	f06f 0302 	mvn.w	r3, #2
 8008842:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008844:	69fb      	ldr	r3, [r7, #28]
}
 8008846:	4618      	mov	r0, r3
 8008848:	3720      	adds	r7, #32
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
 800884e:	bf00      	nop
 8008850:	200000ac 	.word	0x200000ac

08008854 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008854:	b580      	push	{r7, lr}
 8008856:	b08c      	sub	sp, #48	; 0x30
 8008858:	af02      	add	r7, sp, #8
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008860:	2300      	movs	r3, #0
 8008862:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008864:	f3ef 8305 	mrs	r3, IPSR
 8008868:	61bb      	str	r3, [r7, #24]
  return(result);
 800886a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800886c:	2b00      	cmp	r3, #0
 800886e:	f040 8086 	bne.w	800897e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008872:	f3ef 8310 	mrs	r3, PRIMASK
 8008876:	617b      	str	r3, [r7, #20]
  return(result);
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d105      	bne.n	800888a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800887e:	f3ef 8311 	mrs	r3, BASEPRI
 8008882:	613b      	str	r3, [r7, #16]
  return(result);
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <osSemaphoreNew+0x3e>
 800888a:	4b3f      	ldr	r3, [pc, #252]	; (8008988 <osSemaphoreNew+0x134>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b02      	cmp	r3, #2
 8008890:	d075      	beq.n	800897e <osSemaphoreNew+0x12a>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d072      	beq.n	800897e <osSemaphoreNew+0x12a>
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	429a      	cmp	r2, r3
 800889e:	d86e      	bhi.n	800897e <osSemaphoreNew+0x12a>
    mem = -1;
 80088a0:	f04f 33ff 	mov.w	r3, #4294967295
 80088a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d015      	beq.n	80088d8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d006      	beq.n	80088c2 <osSemaphoreNew+0x6e>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	2b4f      	cmp	r3, #79	; 0x4f
 80088ba:	d902      	bls.n	80088c2 <osSemaphoreNew+0x6e>
        mem = 1;
 80088bc:	2301      	movs	r3, #1
 80088be:	623b      	str	r3, [r7, #32]
 80088c0:	e00c      	b.n	80088dc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d108      	bne.n	80088dc <osSemaphoreNew+0x88>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d104      	bne.n	80088dc <osSemaphoreNew+0x88>
          mem = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	623b      	str	r3, [r7, #32]
 80088d6:	e001      	b.n	80088dc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e2:	d04c      	beq.n	800897e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d128      	bne.n	800893c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d10a      	bne.n	8008906 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	2203      	movs	r2, #3
 80088f6:	9200      	str	r2, [sp, #0]
 80088f8:	2200      	movs	r2, #0
 80088fa:	2100      	movs	r1, #0
 80088fc:	2001      	movs	r0, #1
 80088fe:	f000 fc5f 	bl	80091c0 <xQueueGenericCreateStatic>
 8008902:	6278      	str	r0, [r7, #36]	; 0x24
 8008904:	e005      	b.n	8008912 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008906:	2203      	movs	r2, #3
 8008908:	2100      	movs	r1, #0
 800890a:	2001      	movs	r0, #1
 800890c:	f000 fcda 	bl	80092c4 <xQueueGenericCreate>
 8008910:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	2b00      	cmp	r3, #0
 8008916:	d022      	beq.n	800895e <osSemaphoreNew+0x10a>
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d01f      	beq.n	800895e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800891e:	2300      	movs	r3, #0
 8008920:	2200      	movs	r2, #0
 8008922:	2100      	movs	r1, #0
 8008924:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008926:	f000 fe5f 	bl	80095e8 <xQueueGenericSend>
 800892a:	4603      	mov	r3, r0
 800892c:	2b01      	cmp	r3, #1
 800892e:	d016      	beq.n	800895e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8008930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008932:	f001 fb55 	bl	8009fe0 <vQueueDelete>
            hSemaphore = NULL;
 8008936:	2300      	movs	r3, #0
 8008938:	627b      	str	r3, [r7, #36]	; 0x24
 800893a:	e010      	b.n	800895e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d108      	bne.n	8008954 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	461a      	mov	r2, r3
 8008948:	68b9      	ldr	r1, [r7, #8]
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f000 fdda 	bl	8009504 <xQueueCreateCountingSemaphoreStatic>
 8008950:	6278      	str	r0, [r7, #36]	; 0x24
 8008952:	e004      	b.n	800895e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008954:	68b9      	ldr	r1, [r7, #8]
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 fe0f 	bl	800957a <xQueueCreateCountingSemaphore>
 800895c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00c      	beq.n	800897e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <osSemaphoreNew+0x11e>
          name = attr->name;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	61fb      	str	r3, [r7, #28]
 8008970:	e001      	b.n	8008976 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8008972:	2300      	movs	r3, #0
 8008974:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008976:	69f9      	ldr	r1, [r7, #28]
 8008978:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800897a:	f001 fc7f 	bl	800a27c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008980:	4618      	mov	r0, r3
 8008982:	3728      	adds	r7, #40	; 0x28
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	200000ac 	.word	0x200000ac

0800898c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800898c:	b580      	push	{r7, lr}
 800898e:	b088      	sub	sp, #32
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800899a:	2300      	movs	r3, #0
 800899c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d103      	bne.n	80089ac <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80089a4:	f06f 0303 	mvn.w	r3, #3
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	e04b      	b.n	8008a44 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089ac:	f3ef 8305 	mrs	r3, IPSR
 80089b0:	617b      	str	r3, [r7, #20]
  return(result);
 80089b2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10f      	bne.n	80089d8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089b8:	f3ef 8310 	mrs	r3, PRIMASK
 80089bc:	613b      	str	r3, [r7, #16]
  return(result);
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d105      	bne.n	80089d0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80089c4:	f3ef 8311 	mrs	r3, BASEPRI
 80089c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d026      	beq.n	8008a1e <osSemaphoreAcquire+0x92>
 80089d0:	4b1f      	ldr	r3, [pc, #124]	; (8008a50 <osSemaphoreAcquire+0xc4>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d122      	bne.n	8008a1e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d003      	beq.n	80089e6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80089de:	f06f 0303 	mvn.w	r3, #3
 80089e2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80089e4:	e02d      	b.n	8008a42 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80089e6:	2300      	movs	r3, #0
 80089e8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80089ea:	f107 0308 	add.w	r3, r7, #8
 80089ee:	461a      	mov	r2, r3
 80089f0:	2100      	movs	r1, #0
 80089f2:	69b8      	ldr	r0, [r7, #24]
 80089f4:	f001 fa2e 	bl	8009e54 <xQueueReceiveFromISR>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d003      	beq.n	8008a06 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80089fe:	f06f 0302 	mvn.w	r3, #2
 8008a02:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008a04:	e01d      	b.n	8008a42 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d01a      	beq.n	8008a42 <osSemaphoreAcquire+0xb6>
 8008a0c:	4b11      	ldr	r3, [pc, #68]	; (8008a54 <osSemaphoreAcquire+0xc8>)
 8008a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008a1c:	e011      	b.n	8008a42 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	69b8      	ldr	r0, [r7, #24]
 8008a22:	f001 f903 	bl	8009c2c <xQueueSemaphoreTake>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d00b      	beq.n	8008a44 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008a32:	f06f 0301 	mvn.w	r3, #1
 8008a36:	61fb      	str	r3, [r7, #28]
 8008a38:	e004      	b.n	8008a44 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008a3a:	f06f 0302 	mvn.w	r3, #2
 8008a3e:	61fb      	str	r3, [r7, #28]
 8008a40:	e000      	b.n	8008a44 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008a42:	bf00      	nop
      }
    }
  }

  return (stat);
 8008a44:	69fb      	ldr	r3, [r7, #28]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3720      	adds	r7, #32
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	200000ac 	.word	0x200000ac
 8008a54:	e000ed04 	.word	0xe000ed04

08008a58 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b088      	sub	sp, #32
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008a64:	2300      	movs	r3, #0
 8008a66:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d103      	bne.n	8008a76 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008a6e:	f06f 0303 	mvn.w	r3, #3
 8008a72:	61fb      	str	r3, [r7, #28]
 8008a74:	e03e      	b.n	8008af4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a76:	f3ef 8305 	mrs	r3, IPSR
 8008a7a:	617b      	str	r3, [r7, #20]
  return(result);
 8008a7c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10f      	bne.n	8008aa2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a82:	f3ef 8310 	mrs	r3, PRIMASK
 8008a86:	613b      	str	r3, [r7, #16]
  return(result);
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d105      	bne.n	8008a9a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a8e:	f3ef 8311 	mrs	r3, BASEPRI
 8008a92:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d01e      	beq.n	8008ad8 <osSemaphoreRelease+0x80>
 8008a9a:	4b19      	ldr	r3, [pc, #100]	; (8008b00 <osSemaphoreRelease+0xa8>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d11a      	bne.n	8008ad8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008aa6:	f107 0308 	add.w	r3, r7, #8
 8008aaa:	4619      	mov	r1, r3
 8008aac:	69b8      	ldr	r0, [r7, #24]
 8008aae:	f000 ff41 	bl	8009934 <xQueueGiveFromISR>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d003      	beq.n	8008ac0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008ab8:	f06f 0302 	mvn.w	r3, #2
 8008abc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008abe:	e018      	b.n	8008af2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d015      	beq.n	8008af2 <osSemaphoreRelease+0x9a>
 8008ac6:	4b0f      	ldr	r3, [pc, #60]	; (8008b04 <osSemaphoreRelease+0xac>)
 8008ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008acc:	601a      	str	r2, [r3, #0]
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008ad6:	e00c      	b.n	8008af2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008ad8:	2300      	movs	r3, #0
 8008ada:	2200      	movs	r2, #0
 8008adc:	2100      	movs	r1, #0
 8008ade:	69b8      	ldr	r0, [r7, #24]
 8008ae0:	f000 fd82 	bl	80095e8 <xQueueGenericSend>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d004      	beq.n	8008af4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8008aea:	f06f 0302 	mvn.w	r3, #2
 8008aee:	61fb      	str	r3, [r7, #28]
 8008af0:	e000      	b.n	8008af4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008af2:	bf00      	nop
    }
  }

  return (stat);
 8008af4:	69fb      	ldr	r3, [r7, #28]
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3720      	adds	r7, #32
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	200000ac 	.word	0x200000ac
 8008b04:	e000ed04 	.word	0xe000ed04

08008b08 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b088      	sub	sp, #32
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b14:	f3ef 8305 	mrs	r3, IPSR
 8008b18:	617b      	str	r3, [r7, #20]
  return(result);
 8008b1a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10f      	bne.n	8008b40 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b20:	f3ef 8310 	mrs	r3, PRIMASK
 8008b24:	613b      	str	r3, [r7, #16]
  return(result);
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d105      	bne.n	8008b38 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b2c:	f3ef 8311 	mrs	r3, BASEPRI
 8008b30:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d007      	beq.n	8008b48 <osSemaphoreDelete+0x40>
 8008b38:	4b0d      	ldr	r3, [pc, #52]	; (8008b70 <osSemaphoreDelete+0x68>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d103      	bne.n	8008b48 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8008b40:	f06f 0305 	mvn.w	r3, #5
 8008b44:	61fb      	str	r3, [r7, #28]
 8008b46:	e00e      	b.n	8008b66 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d103      	bne.n	8008b56 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8008b4e:	f06f 0303 	mvn.w	r3, #3
 8008b52:	61fb      	str	r3, [r7, #28]
 8008b54:	e007      	b.n	8008b66 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8008b56:	69b8      	ldr	r0, [r7, #24]
 8008b58:	f001 fbba 	bl	800a2d0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8008b60:	69b8      	ldr	r0, [r7, #24]
 8008b62:	f001 fa3d 	bl	8009fe0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008b66:	69fb      	ldr	r3, [r7, #28]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3720      	adds	r7, #32
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	200000ac 	.word	0x200000ac

08008b74 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08c      	sub	sp, #48	; 0x30
 8008b78:	af02      	add	r7, sp, #8
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008b80:	2300      	movs	r3, #0
 8008b82:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b84:	f3ef 8305 	mrs	r3, IPSR
 8008b88:	61bb      	str	r3, [r7, #24]
  return(result);
 8008b8a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d16f      	bne.n	8008c70 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b90:	f3ef 8310 	mrs	r3, PRIMASK
 8008b94:	617b      	str	r3, [r7, #20]
  return(result);
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d105      	bne.n	8008ba8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008b9c:	f3ef 8311 	mrs	r3, BASEPRI
 8008ba0:	613b      	str	r3, [r7, #16]
  return(result);
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d003      	beq.n	8008bb0 <osMessageQueueNew+0x3c>
 8008ba8:	4b34      	ldr	r3, [pc, #208]	; (8008c7c <osMessageQueueNew+0x108>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d05f      	beq.n	8008c70 <osMessageQueueNew+0xfc>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d05c      	beq.n	8008c70 <osMessageQueueNew+0xfc>
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d059      	beq.n	8008c70 <osMessageQueueNew+0xfc>
    mem = -1;
 8008bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d029      	beq.n	8008c1c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d012      	beq.n	8008bf6 <osMessageQueueNew+0x82>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	2b4f      	cmp	r3, #79	; 0x4f
 8008bd6:	d90e      	bls.n	8008bf6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00a      	beq.n	8008bf6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	695a      	ldr	r2, [r3, #20]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	68b9      	ldr	r1, [r7, #8]
 8008be8:	fb01 f303 	mul.w	r3, r1, r3
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d302      	bcc.n	8008bf6 <osMessageQueueNew+0x82>
        mem = 1;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	623b      	str	r3, [r7, #32]
 8008bf4:	e014      	b.n	8008c20 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d110      	bne.n	8008c20 <osMessageQueueNew+0xac>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10c      	bne.n	8008c20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d108      	bne.n	8008c20 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d104      	bne.n	8008c20 <osMessageQueueNew+0xac>
          mem = 0;
 8008c16:	2300      	movs	r3, #0
 8008c18:	623b      	str	r3, [r7, #32]
 8008c1a:	e001      	b.n	8008c20 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d10b      	bne.n	8008c3e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	691a      	ldr	r2, [r3, #16]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	2100      	movs	r1, #0
 8008c30:	9100      	str	r1, [sp, #0]
 8008c32:	68b9      	ldr	r1, [r7, #8]
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 fac3 	bl	80091c0 <xQueueGenericCreateStatic>
 8008c3a:	6278      	str	r0, [r7, #36]	; 0x24
 8008c3c:	e008      	b.n	8008c50 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8008c3e:	6a3b      	ldr	r3, [r7, #32]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d105      	bne.n	8008c50 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008c44:	2200      	movs	r2, #0
 8008c46:	68b9      	ldr	r1, [r7, #8]
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 fb3b 	bl	80092c4 <xQueueGenericCreate>
 8008c4e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00c      	beq.n	8008c70 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d003      	beq.n	8008c64 <osMessageQueueNew+0xf0>
        name = attr->name;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	61fb      	str	r3, [r7, #28]
 8008c62:	e001      	b.n	8008c68 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8008c64:	2300      	movs	r3, #0
 8008c66:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008c68:	69f9      	ldr	r1, [r7, #28]
 8008c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c6c:	f001 fb06 	bl	800a27c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3728      	adds	r7, #40	; 0x28
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	200000ac 	.word	0x200000ac

08008c80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08a      	sub	sp, #40	; 0x28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	603b      	str	r3, [r7, #0]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c98:	f3ef 8305 	mrs	r3, IPSR
 8008c9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8008c9e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10f      	bne.n	8008cc4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8008ca8:	61bb      	str	r3, [r7, #24]
  return(result);
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d105      	bne.n	8008cbc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8008cb4:	617b      	str	r3, [r7, #20]
  return(result);
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d02c      	beq.n	8008d16 <osMessageQueuePut+0x96>
 8008cbc:	4b28      	ldr	r3, [pc, #160]	; (8008d60 <osMessageQueuePut+0xe0>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d128      	bne.n	8008d16 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d005      	beq.n	8008cd6 <osMessageQueuePut+0x56>
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d002      	beq.n	8008cd6 <osMessageQueuePut+0x56>
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008cd6:	f06f 0303 	mvn.w	r3, #3
 8008cda:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008cdc:	e039      	b.n	8008d52 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008ce2:	f107 0210 	add.w	r2, r7, #16
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	68b9      	ldr	r1, [r7, #8]
 8008cea:	6a38      	ldr	r0, [r7, #32]
 8008cec:	f000 fd82 	bl	80097f4 <xQueueGenericSendFromISR>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d003      	beq.n	8008cfe <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008cf6:	f06f 0302 	mvn.w	r3, #2
 8008cfa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008cfc:	e029      	b.n	8008d52 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d026      	beq.n	8008d52 <osMessageQueuePut+0xd2>
 8008d04:	4b17      	ldr	r3, [pc, #92]	; (8008d64 <osMessageQueuePut+0xe4>)
 8008d06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d0a:	601a      	str	r2, [r3, #0]
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d14:	e01d      	b.n	8008d52 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008d16:	6a3b      	ldr	r3, [r7, #32]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <osMessageQueuePut+0xa2>
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d103      	bne.n	8008d2a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8008d22:	f06f 0303 	mvn.w	r3, #3
 8008d26:	627b      	str	r3, [r7, #36]	; 0x24
 8008d28:	e014      	b.n	8008d54 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	683a      	ldr	r2, [r7, #0]
 8008d2e:	68b9      	ldr	r1, [r7, #8]
 8008d30:	6a38      	ldr	r0, [r7, #32]
 8008d32:	f000 fc59 	bl	80095e8 <xQueueGenericSend>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d00b      	beq.n	8008d54 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8008d42:	f06f 0301 	mvn.w	r3, #1
 8008d46:	627b      	str	r3, [r7, #36]	; 0x24
 8008d48:	e004      	b.n	8008d54 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8008d4a:	f06f 0302 	mvn.w	r3, #2
 8008d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d50:	e000      	b.n	8008d54 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008d52:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3728      	adds	r7, #40	; 0x28
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	200000ac 	.word	0x200000ac
 8008d64:	e000ed04 	.word	0xe000ed04

08008d68 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08a      	sub	sp, #40	; 0x28
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
 8008d74:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d7e:	f3ef 8305 	mrs	r3, IPSR
 8008d82:	61fb      	str	r3, [r7, #28]
  return(result);
 8008d84:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10f      	bne.n	8008daa <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8008d8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d105      	bne.n	8008da2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d96:	f3ef 8311 	mrs	r3, BASEPRI
 8008d9a:	617b      	str	r3, [r7, #20]
  return(result);
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d02c      	beq.n	8008dfc <osMessageQueueGet+0x94>
 8008da2:	4b28      	ldr	r3, [pc, #160]	; (8008e44 <osMessageQueueGet+0xdc>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d128      	bne.n	8008dfc <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d005      	beq.n	8008dbc <osMessageQueueGet+0x54>
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d002      	beq.n	8008dbc <osMessageQueueGet+0x54>
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d003      	beq.n	8008dc4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8008dbc:	f06f 0303 	mvn.w	r3, #3
 8008dc0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008dc2:	e038      	b.n	8008e36 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008dc8:	f107 0310 	add.w	r3, r7, #16
 8008dcc:	461a      	mov	r2, r3
 8008dce:	68b9      	ldr	r1, [r7, #8]
 8008dd0:	6a38      	ldr	r0, [r7, #32]
 8008dd2:	f001 f83f 	bl	8009e54 <xQueueReceiveFromISR>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d003      	beq.n	8008de4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8008ddc:	f06f 0302 	mvn.w	r3, #2
 8008de0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008de2:	e028      	b.n	8008e36 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d025      	beq.n	8008e36 <osMessageQueueGet+0xce>
 8008dea:	4b17      	ldr	r3, [pc, #92]	; (8008e48 <osMessageQueueGet+0xe0>)
 8008dec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008df0:	601a      	str	r2, [r3, #0]
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008dfa:	e01c      	b.n	8008e36 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d002      	beq.n	8008e08 <osMessageQueueGet+0xa0>
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d103      	bne.n	8008e10 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8008e08:	f06f 0303 	mvn.w	r3, #3
 8008e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008e0e:	e013      	b.n	8008e38 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008e10:	683a      	ldr	r2, [r7, #0]
 8008e12:	68b9      	ldr	r1, [r7, #8]
 8008e14:	6a38      	ldr	r0, [r7, #32]
 8008e16:	f000 fe23 	bl	8009a60 <xQueueReceive>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d00b      	beq.n	8008e38 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d003      	beq.n	8008e2e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8008e26:	f06f 0301 	mvn.w	r3, #1
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e2c:	e004      	b.n	8008e38 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8008e2e:	f06f 0302 	mvn.w	r3, #2
 8008e32:	627b      	str	r3, [r7, #36]	; 0x24
 8008e34:	e000      	b.n	8008e38 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e36:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3728      	adds	r7, #40	; 0x28
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	200000ac 	.word	0x200000ac
 8008e48:	e000ed04 	.word	0xe000ed04

08008e4c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b088      	sub	sp, #32
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d102      	bne.n	8008e64 <osMessageQueueGetCount+0x18>
    count = 0U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	61fb      	str	r3, [r7, #28]
 8008e62:	e01e      	b.n	8008ea2 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e64:	f3ef 8305 	mrs	r3, IPSR
 8008e68:	617b      	str	r3, [r7, #20]
  return(result);
 8008e6a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10f      	bne.n	8008e90 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e70:	f3ef 8310 	mrs	r3, PRIMASK
 8008e74:	613b      	str	r3, [r7, #16]
  return(result);
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d105      	bne.n	8008e88 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e7c:	f3ef 8311 	mrs	r3, BASEPRI
 8008e80:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d008      	beq.n	8008e9a <osMessageQueueGetCount+0x4e>
 8008e88:	4b08      	ldr	r3, [pc, #32]	; (8008eac <osMessageQueueGetCount+0x60>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d104      	bne.n	8008e9a <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8008e90:	69b8      	ldr	r0, [r7, #24]
 8008e92:	f001 f885 	bl	8009fa0 <uxQueueMessagesWaitingFromISR>
 8008e96:	61f8      	str	r0, [r7, #28]
 8008e98:	e003      	b.n	8008ea2 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8008e9a:	69b8      	ldr	r0, [r7, #24]
 8008e9c:	f001 f860 	bl	8009f60 <uxQueueMessagesWaiting>
 8008ea0:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8008ea2:	69fb      	ldr	r3, [r7, #28]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3720      	adds	r7, #32
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	200000ac 	.word	0x200000ac

08008eb0 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b088      	sub	sp, #32
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ebc:	f3ef 8305 	mrs	r3, IPSR
 8008ec0:	617b      	str	r3, [r7, #20]
  return(result);
 8008ec2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10f      	bne.n	8008ee8 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8008ecc:	613b      	str	r3, [r7, #16]
  return(result);
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d105      	bne.n	8008ee0 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8008ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d007      	beq.n	8008ef0 <osMessageQueueDelete+0x40>
 8008ee0:	4b0d      	ldr	r3, [pc, #52]	; (8008f18 <osMessageQueueDelete+0x68>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d103      	bne.n	8008ef0 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8008ee8:	f06f 0305 	mvn.w	r3, #5
 8008eec:	61fb      	str	r3, [r7, #28]
 8008eee:	e00e      	b.n	8008f0e <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d103      	bne.n	8008efe <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 8008ef6:	f06f 0303 	mvn.w	r3, #3
 8008efa:	61fb      	str	r3, [r7, #28]
 8008efc:	e007      	b.n	8008f0e <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8008efe:	69b8      	ldr	r0, [r7, #24]
 8008f00:	f001 f9e6 	bl	800a2d0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008f04:	2300      	movs	r3, #0
 8008f06:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8008f08:	69b8      	ldr	r0, [r7, #24]
 8008f0a:	f001 f869 	bl	8009fe0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008f0e:	69fb      	ldr	r3, [r7, #28]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3720      	adds	r7, #32
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	200000ac 	.word	0x200000ac

08008f1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008f1c:	b480      	push	{r7}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	4a07      	ldr	r2, [pc, #28]	; (8008f48 <vApplicationGetIdleTaskMemory+0x2c>)
 8008f2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	4a06      	ldr	r2, [pc, #24]	; (8008f4c <vApplicationGetIdleTaskMemory+0x30>)
 8008f32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2280      	movs	r2, #128	; 0x80
 8008f38:	601a      	str	r2, [r3, #0]
}
 8008f3a:	bf00      	nop
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	200000b0 	.word	0x200000b0
 8008f4c:	2000016c 	.word	0x2000016c

08008f50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	4a07      	ldr	r2, [pc, #28]	; (8008f7c <vApplicationGetTimerTaskMemory+0x2c>)
 8008f60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	4a06      	ldr	r2, [pc, #24]	; (8008f80 <vApplicationGetTimerTaskMemory+0x30>)
 8008f66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f6e:	601a      	str	r2, [r3, #0]
}
 8008f70:	bf00      	nop
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	2000036c 	.word	0x2000036c
 8008f80:	20000428 	.word	0x20000428

08008f84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f103 0208 	add.w	r2, r3, #8
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f04f 32ff 	mov.w	r2, #4294967295
 8008f9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f103 0208 	add.w	r2, r3, #8
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f103 0208 	add.w	r2, r3, #8
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008fd2:	bf00      	nop
 8008fd4:	370c      	adds	r7, #12
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b085      	sub	sp, #20
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	68fa      	ldr	r2, [r7, #12]
 8008ff2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	689a      	ldr	r2, [r3, #8]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	683a      	ldr	r2, [r7, #0]
 8009002:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	1c5a      	adds	r2, r3, #1
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	601a      	str	r2, [r3, #0]
}
 800901a:	bf00      	nop
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009026:	b480      	push	{r7}
 8009028:	b085      	sub	sp, #20
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903c:	d103      	bne.n	8009046 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	60fb      	str	r3, [r7, #12]
 8009044:	e00c      	b.n	8009060 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	3308      	adds	r3, #8
 800904a:	60fb      	str	r3, [r7, #12]
 800904c:	e002      	b.n	8009054 <vListInsert+0x2e>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	429a      	cmp	r2, r3
 800905e:	d2f6      	bcs.n	800904e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	685a      	ldr	r2, [r3, #4]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	601a      	str	r2, [r3, #0]
}
 800908c:	bf00      	nop
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	6892      	ldr	r2, [r2, #8]
 80090ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	6852      	ldr	r2, [r2, #4]
 80090b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d103      	bne.n	80090cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689a      	ldr	r2, [r3, #8]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	1e5a      	subs	r2, r3, #1
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3714      	adds	r7, #20
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10c      	bne.n	800911a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009104:	b672      	cpsid	i
 8009106:	f383 8811 	msr	BASEPRI, r3
 800910a:	f3bf 8f6f 	isb	sy
 800910e:	f3bf 8f4f 	dsb	sy
 8009112:	b662      	cpsie	i
 8009114:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009116:	bf00      	nop
 8009118:	e7fe      	b.n	8009118 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800911a:	f003 f867 	bl	800c1ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009126:	68f9      	ldr	r1, [r7, #12]
 8009128:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800912a:	fb01 f303 	mul.w	r3, r1, r3
 800912e:	441a      	add	r2, r3
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914a:	3b01      	subs	r3, #1
 800914c:	68f9      	ldr	r1, [r7, #12]
 800914e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009150:	fb01 f303 	mul.w	r3, r1, r3
 8009154:	441a      	add	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	22ff      	movs	r2, #255	; 0xff
 800915e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	22ff      	movs	r2, #255	; 0xff
 8009166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d114      	bne.n	800919a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d01a      	beq.n	80091ae <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3310      	adds	r3, #16
 800917c:	4618      	mov	r0, r3
 800917e:	f001 fdb5 	bl	800acec <xTaskRemoveFromEventList>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d012      	beq.n	80091ae <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009188:	4b0c      	ldr	r3, [pc, #48]	; (80091bc <xQueueGenericReset+0xd0>)
 800918a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	e009      	b.n	80091ae <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3310      	adds	r3, #16
 800919e:	4618      	mov	r0, r3
 80091a0:	f7ff fef0 	bl	8008f84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3324      	adds	r3, #36	; 0x24
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7ff feeb 	bl	8008f84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80091ae:	f003 f851 	bl	800c254 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80091b2:	2301      	movs	r3, #1
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	e000ed04 	.word	0xe000ed04

080091c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08e      	sub	sp, #56	; 0x38
 80091c4:	af02      	add	r7, sp, #8
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
 80091cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10c      	bne.n	80091ee <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d8:	b672      	cpsid	i
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	b662      	cpsie	i
 80091e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80091ea:	bf00      	nop
 80091ec:	e7fe      	b.n	80091ec <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10c      	bne.n	800920e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80091f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f8:	b672      	cpsid	i
 80091fa:	f383 8811 	msr	BASEPRI, r3
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	f3bf 8f4f 	dsb	sy
 8009206:	b662      	cpsie	i
 8009208:	627b      	str	r3, [r7, #36]	; 0x24
}
 800920a:	bf00      	nop
 800920c:	e7fe      	b.n	800920c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <xQueueGenericCreateStatic+0x5a>
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d001      	beq.n	800921e <xQueueGenericCreateStatic+0x5e>
 800921a:	2301      	movs	r3, #1
 800921c:	e000      	b.n	8009220 <xQueueGenericCreateStatic+0x60>
 800921e:	2300      	movs	r3, #0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10c      	bne.n	800923e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8009224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009228:	b672      	cpsid	i
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	b662      	cpsie	i
 8009238:	623b      	str	r3, [r7, #32]
}
 800923a:	bf00      	nop
 800923c:	e7fe      	b.n	800923c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d102      	bne.n	800924a <xQueueGenericCreateStatic+0x8a>
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d101      	bne.n	800924e <xQueueGenericCreateStatic+0x8e>
 800924a:	2301      	movs	r3, #1
 800924c:	e000      	b.n	8009250 <xQueueGenericCreateStatic+0x90>
 800924e:	2300      	movs	r3, #0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10c      	bne.n	800926e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	b672      	cpsid	i
 800925a:	f383 8811 	msr	BASEPRI, r3
 800925e:	f3bf 8f6f 	isb	sy
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	b662      	cpsie	i
 8009268:	61fb      	str	r3, [r7, #28]
}
 800926a:	bf00      	nop
 800926c:	e7fe      	b.n	800926c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800926e:	2350      	movs	r3, #80	; 0x50
 8009270:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	2b50      	cmp	r3, #80	; 0x50
 8009276:	d00c      	beq.n	8009292 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927c:	b672      	cpsid	i
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	b662      	cpsie	i
 800928c:	61bb      	str	r3, [r7, #24]
}
 800928e:	bf00      	nop
 8009290:	e7fe      	b.n	8009290 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009292:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00d      	beq.n	80092ba <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800929e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80092aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	4613      	mov	r3, r2
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	68b9      	ldr	r1, [r7, #8]
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 f847 	bl	8009348 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80092bc:	4618      	mov	r0, r3
 80092be:	3730      	adds	r7, #48	; 0x30
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08a      	sub	sp, #40	; 0x28
 80092c8:	af02      	add	r7, sp, #8
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	4613      	mov	r3, r2
 80092d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10c      	bne.n	80092f2 <xQueueGenericCreate+0x2e>
	__asm volatile
 80092d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092dc:	b672      	cpsid	i
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	b662      	cpsie	i
 80092ec:	613b      	str	r3, [r7, #16]
}
 80092ee:	bf00      	nop
 80092f0:	e7fe      	b.n	80092f0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d102      	bne.n	80092fe <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	61fb      	str	r3, [r7, #28]
 80092fc:	e004      	b.n	8009308 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	fb02 f303 	mul.w	r3, r2, r3
 8009306:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	3350      	adds	r3, #80	; 0x50
 800930c:	4618      	mov	r0, r3
 800930e:	f003 f899 	bl	800c444 <pvPortMalloc>
 8009312:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d011      	beq.n	800933e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	3350      	adds	r3, #80	; 0x50
 8009322:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	2200      	movs	r2, #0
 8009328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800932c:	79fa      	ldrb	r2, [r7, #7]
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	4613      	mov	r3, r2
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	68b9      	ldr	r1, [r7, #8]
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f000 f805 	bl	8009348 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800933e:	69bb      	ldr	r3, [r7, #24]
	}
 8009340:	4618      	mov	r0, r3
 8009342:	3720      	adds	r7, #32
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d103      	bne.n	8009364 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	69ba      	ldr	r2, [r7, #24]
 8009360:	601a      	str	r2, [r3, #0]
 8009362:	e002      	b.n	800936a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009376:	2101      	movs	r1, #1
 8009378:	69b8      	ldr	r0, [r7, #24]
 800937a:	f7ff feb7 	bl	80090ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800937e:	69bb      	ldr	r3, [r7, #24]
 8009380:	78fa      	ldrb	r2, [r7, #3]
 8009382:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009386:	bf00      	nop
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800938e:	b580      	push	{r7, lr}
 8009390:	b082      	sub	sp, #8
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00e      	beq.n	80093ba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2200      	movs	r2, #0
 80093ac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80093ae:	2300      	movs	r3, #0
 80093b0:	2200      	movs	r2, #0
 80093b2:	2100      	movs	r1, #0
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f917 	bl	80095e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80093ba:	bf00      	nop
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b086      	sub	sp, #24
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	4603      	mov	r3, r0
 80093ca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80093cc:	2301      	movs	r3, #1
 80093ce:	617b      	str	r3, [r7, #20]
 80093d0:	2300      	movs	r3, #0
 80093d2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80093d4:	79fb      	ldrb	r3, [r7, #7]
 80093d6:	461a      	mov	r2, r3
 80093d8:	6939      	ldr	r1, [r7, #16]
 80093da:	6978      	ldr	r0, [r7, #20]
 80093dc:	f7ff ff72 	bl	80092c4 <xQueueGenericCreate>
 80093e0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f7ff ffd3 	bl	800938e <prvInitialiseMutex>

		return xNewQueue;
 80093e8:	68fb      	ldr	r3, [r7, #12]
	}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3718      	adds	r7, #24
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b088      	sub	sp, #32
 80093f6:	af02      	add	r7, sp, #8
 80093f8:	4603      	mov	r3, r0
 80093fa:	6039      	str	r1, [r7, #0]
 80093fc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80093fe:	2301      	movs	r3, #1
 8009400:	617b      	str	r3, [r7, #20]
 8009402:	2300      	movs	r3, #0
 8009404:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009406:	79fb      	ldrb	r3, [r7, #7]
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	2200      	movs	r2, #0
 800940e:	6939      	ldr	r1, [r7, #16]
 8009410:	6978      	ldr	r0, [r7, #20]
 8009412:	f7ff fed5 	bl	80091c0 <xQueueGenericCreateStatic>
 8009416:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f7ff ffb8 	bl	800938e <prvInitialiseMutex>

		return xNewQueue;
 800941e:	68fb      	ldr	r3, [r7, #12]
	}
 8009420:	4618      	mov	r0, r3
 8009422:	3718      	adds	r7, #24
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009428:	b590      	push	{r4, r7, lr}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10c      	bne.n	8009454 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800943a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943e:	b672      	cpsid	i
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	b662      	cpsie	i
 800944e:	60fb      	str	r3, [r7, #12]
}
 8009450:	bf00      	nop
 8009452:	e7fe      	b.n	8009452 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	689c      	ldr	r4, [r3, #8]
 8009458:	f001 fe12 	bl	800b080 <xTaskGetCurrentTaskHandle>
 800945c:	4603      	mov	r3, r0
 800945e:	429c      	cmp	r4, r3
 8009460:	d111      	bne.n	8009486 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	1e5a      	subs	r2, r3, #1
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d105      	bne.n	8009480 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009474:	2300      	movs	r3, #0
 8009476:	2200      	movs	r2, #0
 8009478:	2100      	movs	r1, #0
 800947a:	6938      	ldr	r0, [r7, #16]
 800947c:	f000 f8b4 	bl	80095e8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009480:	2301      	movs	r3, #1
 8009482:	617b      	str	r3, [r7, #20]
 8009484:	e001      	b.n	800948a <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009486:	2300      	movs	r3, #0
 8009488:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800948a:	697b      	ldr	r3, [r7, #20]
	}
 800948c:	4618      	mov	r0, r3
 800948e:	371c      	adds	r7, #28
 8009490:	46bd      	mov	sp, r7
 8009492:	bd90      	pop	{r4, r7, pc}

08009494 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009494:	b590      	push	{r4, r7, lr}
 8009496:	b087      	sub	sp, #28
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10c      	bne.n	80094c2 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 80094a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ac:	b672      	cpsid	i
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	b662      	cpsie	i
 80094bc:	60fb      	str	r3, [r7, #12]
}
 80094be:	bf00      	nop
 80094c0:	e7fe      	b.n	80094c0 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	689c      	ldr	r4, [r3, #8]
 80094c6:	f001 fddb 	bl	800b080 <xTaskGetCurrentTaskHandle>
 80094ca:	4603      	mov	r3, r0
 80094cc:	429c      	cmp	r4, r3
 80094ce:	d107      	bne.n	80094e0 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	68db      	ldr	r3, [r3, #12]
 80094d4:	1c5a      	adds	r2, r3, #1
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80094da:	2301      	movs	r3, #1
 80094dc:	617b      	str	r3, [r7, #20]
 80094de:	e00c      	b.n	80094fa <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6938      	ldr	r0, [r7, #16]
 80094e4:	f000 fba2 	bl	8009c2c <xQueueSemaphoreTake>
 80094e8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d004      	beq.n	80094fa <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	1c5a      	adds	r2, r3, #1
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80094fa:	697b      	ldr	r3, [r7, #20]
	}
 80094fc:	4618      	mov	r0, r3
 80094fe:	371c      	adds	r7, #28
 8009500:	46bd      	mov	sp, r7
 8009502:	bd90      	pop	{r4, r7, pc}

08009504 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009504:	b580      	push	{r7, lr}
 8009506:	b08a      	sub	sp, #40	; 0x28
 8009508:	af02      	add	r7, sp, #8
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10c      	bne.n	8009530 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8009516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951a:	b672      	cpsid	i
 800951c:	f383 8811 	msr	BASEPRI, r3
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	b662      	cpsie	i
 800952a:	61bb      	str	r3, [r7, #24]
}
 800952c:	bf00      	nop
 800952e:	e7fe      	b.n	800952e <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	429a      	cmp	r2, r3
 8009536:	d90c      	bls.n	8009552 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8009538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953c:	b672      	cpsid	i
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	b662      	cpsie	i
 800954c:	617b      	str	r3, [r7, #20]
}
 800954e:	bf00      	nop
 8009550:	e7fe      	b.n	8009550 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009552:	2302      	movs	r3, #2
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	2100      	movs	r1, #0
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f7ff fe2f 	bl	80091c0 <xQueueGenericCreateStatic>
 8009562:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d002      	beq.n	8009570 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	68ba      	ldr	r2, [r7, #8]
 800956e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009570:	69fb      	ldr	r3, [r7, #28]
	}
 8009572:	4618      	mov	r0, r3
 8009574:	3720      	adds	r7, #32
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800957a:	b580      	push	{r7, lr}
 800957c:	b086      	sub	sp, #24
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10c      	bne.n	80095a4 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	b672      	cpsid	i
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	b662      	cpsie	i
 800959e:	613b      	str	r3, [r7, #16]
}
 80095a0:	bf00      	nop
 80095a2:	e7fe      	b.n	80095a2 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80095a4:	683a      	ldr	r2, [r7, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d90c      	bls.n	80095c6 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b0:	b672      	cpsid	i
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	b662      	cpsie	i
 80095c0:	60fb      	str	r3, [r7, #12]
}
 80095c2:	bf00      	nop
 80095c4:	e7fe      	b.n	80095c4 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80095c6:	2202      	movs	r2, #2
 80095c8:	2100      	movs	r1, #0
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7ff fe7a 	bl	80092c4 <xQueueGenericCreate>
 80095d0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80095de:	697b      	ldr	r3, [r7, #20]
	}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b08e      	sub	sp, #56	; 0x38
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	607a      	str	r2, [r7, #4]
 80095f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80095f6:	2300      	movs	r3, #0
 80095f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80095fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10c      	bne.n	800961e <xQueueGenericSend+0x36>
	__asm volatile
 8009604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009608:	b672      	cpsid	i
 800960a:	f383 8811 	msr	BASEPRI, r3
 800960e:	f3bf 8f6f 	isb	sy
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	b662      	cpsie	i
 8009618:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800961a:	bf00      	nop
 800961c:	e7fe      	b.n	800961c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d103      	bne.n	800962c <xQueueGenericSend+0x44>
 8009624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <xQueueGenericSend+0x48>
 800962c:	2301      	movs	r3, #1
 800962e:	e000      	b.n	8009632 <xQueueGenericSend+0x4a>
 8009630:	2300      	movs	r3, #0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d10c      	bne.n	8009650 <xQueueGenericSend+0x68>
	__asm volatile
 8009636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963a:	b672      	cpsid	i
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	b662      	cpsie	i
 800964a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800964c:	bf00      	nop
 800964e:	e7fe      	b.n	800964e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	2b02      	cmp	r3, #2
 8009654:	d103      	bne.n	800965e <xQueueGenericSend+0x76>
 8009656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800965a:	2b01      	cmp	r3, #1
 800965c:	d101      	bne.n	8009662 <xQueueGenericSend+0x7a>
 800965e:	2301      	movs	r3, #1
 8009660:	e000      	b.n	8009664 <xQueueGenericSend+0x7c>
 8009662:	2300      	movs	r3, #0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10c      	bne.n	8009682 <xQueueGenericSend+0x9a>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	b672      	cpsid	i
 800966e:	f383 8811 	msr	BASEPRI, r3
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	f3bf 8f4f 	dsb	sy
 800967a:	b662      	cpsie	i
 800967c:	623b      	str	r3, [r7, #32]
}
 800967e:	bf00      	nop
 8009680:	e7fe      	b.n	8009680 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009682:	f001 fd0d 	bl	800b0a0 <xTaskGetSchedulerState>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d102      	bne.n	8009692 <xQueueGenericSend+0xaa>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <xQueueGenericSend+0xae>
 8009692:	2301      	movs	r3, #1
 8009694:	e000      	b.n	8009698 <xQueueGenericSend+0xb0>
 8009696:	2300      	movs	r3, #0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10c      	bne.n	80096b6 <xQueueGenericSend+0xce>
	__asm volatile
 800969c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a0:	b672      	cpsid	i
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	b662      	cpsie	i
 80096b0:	61fb      	str	r3, [r7, #28]
}
 80096b2:	bf00      	nop
 80096b4:	e7fe      	b.n	80096b4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096b6:	f002 fd99 	bl	800c1ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d302      	bcc.n	80096cc <xQueueGenericSend+0xe4>
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d129      	bne.n	8009720 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096cc:	683a      	ldr	r2, [r7, #0]
 80096ce:	68b9      	ldr	r1, [r7, #8]
 80096d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096d2:	f000 fcc2 	bl	800a05a <prvCopyDataToQueue>
 80096d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d010      	beq.n	8009702 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e2:	3324      	adds	r3, #36	; 0x24
 80096e4:	4618      	mov	r0, r3
 80096e6:	f001 fb01 	bl	800acec <xTaskRemoveFromEventList>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d013      	beq.n	8009718 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80096f0:	4b3f      	ldr	r3, [pc, #252]	; (80097f0 <xQueueGenericSend+0x208>)
 80096f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096f6:	601a      	str	r2, [r3, #0]
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	e00a      	b.n	8009718 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009704:	2b00      	cmp	r3, #0
 8009706:	d007      	beq.n	8009718 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009708:	4b39      	ldr	r3, [pc, #228]	; (80097f0 <xQueueGenericSend+0x208>)
 800970a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800970e:	601a      	str	r2, [r3, #0]
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009718:	f002 fd9c 	bl	800c254 <vPortExitCritical>
				return pdPASS;
 800971c:	2301      	movs	r3, #1
 800971e:	e063      	b.n	80097e8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d103      	bne.n	800972e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009726:	f002 fd95 	bl	800c254 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800972a:	2300      	movs	r3, #0
 800972c:	e05c      	b.n	80097e8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800972e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009730:	2b00      	cmp	r3, #0
 8009732:	d106      	bne.n	8009742 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009734:	f107 0314 	add.w	r3, r7, #20
 8009738:	4618      	mov	r0, r3
 800973a:	f001 fb3d 	bl	800adb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800973e:	2301      	movs	r3, #1
 8009740:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009742:	f002 fd87 	bl	800c254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009746:	f001 f88b 	bl	800a860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800974a:	f002 fd4f 	bl	800c1ec <vPortEnterCritical>
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009754:	b25b      	sxtb	r3, r3
 8009756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975a:	d103      	bne.n	8009764 <xQueueGenericSend+0x17c>
 800975c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800976a:	b25b      	sxtb	r3, r3
 800976c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009770:	d103      	bne.n	800977a <xQueueGenericSend+0x192>
 8009772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009774:	2200      	movs	r2, #0
 8009776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800977a:	f002 fd6b 	bl	800c254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800977e:	1d3a      	adds	r2, r7, #4
 8009780:	f107 0314 	add.w	r3, r7, #20
 8009784:	4611      	mov	r1, r2
 8009786:	4618      	mov	r0, r3
 8009788:	f001 fb2c 	bl	800ade4 <xTaskCheckForTimeOut>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d124      	bne.n	80097dc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009792:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009794:	f000 fd59 	bl	800a24a <prvIsQueueFull>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d018      	beq.n	80097d0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	3310      	adds	r3, #16
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	4611      	mov	r1, r2
 80097a6:	4618      	mov	r0, r3
 80097a8:	f001 fa4c 	bl	800ac44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80097ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097ae:	f000 fce4 	bl	800a17a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80097b2:	f001 f863 	bl	800a87c <xTaskResumeAll>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	f47f af7c 	bne.w	80096b6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80097be:	4b0c      	ldr	r3, [pc, #48]	; (80097f0 <xQueueGenericSend+0x208>)
 80097c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	e772      	b.n	80096b6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80097d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097d2:	f000 fcd2 	bl	800a17a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097d6:	f001 f851 	bl	800a87c <xTaskResumeAll>
 80097da:	e76c      	b.n	80096b6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80097dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097de:	f000 fccc 	bl	800a17a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097e2:	f001 f84b 	bl	800a87c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80097e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3738      	adds	r7, #56	; 0x38
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	e000ed04 	.word	0xe000ed04

080097f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b08e      	sub	sp, #56	; 0x38
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
 8009800:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10c      	bne.n	8009826 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009810:	b672      	cpsid	i
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	b662      	cpsie	i
 8009820:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009822:	bf00      	nop
 8009824:	e7fe      	b.n	8009824 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d103      	bne.n	8009834 <xQueueGenericSendFromISR+0x40>
 800982c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800982e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009830:	2b00      	cmp	r3, #0
 8009832:	d101      	bne.n	8009838 <xQueueGenericSendFromISR+0x44>
 8009834:	2301      	movs	r3, #1
 8009836:	e000      	b.n	800983a <xQueueGenericSendFromISR+0x46>
 8009838:	2300      	movs	r3, #0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10c      	bne.n	8009858 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009842:	b672      	cpsid	i
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	b662      	cpsie	i
 8009852:	623b      	str	r3, [r7, #32]
}
 8009854:	bf00      	nop
 8009856:	e7fe      	b.n	8009856 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	2b02      	cmp	r3, #2
 800985c:	d103      	bne.n	8009866 <xQueueGenericSendFromISR+0x72>
 800985e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009862:	2b01      	cmp	r3, #1
 8009864:	d101      	bne.n	800986a <xQueueGenericSendFromISR+0x76>
 8009866:	2301      	movs	r3, #1
 8009868:	e000      	b.n	800986c <xQueueGenericSendFromISR+0x78>
 800986a:	2300      	movs	r3, #0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10c      	bne.n	800988a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	b672      	cpsid	i
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	b662      	cpsie	i
 8009884:	61fb      	str	r3, [r7, #28]
}
 8009886:	bf00      	nop
 8009888:	e7fe      	b.n	8009888 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800988a:	f002 fd97 	bl	800c3bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800988e:	f3ef 8211 	mrs	r2, BASEPRI
 8009892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009896:	b672      	cpsid	i
 8009898:	f383 8811 	msr	BASEPRI, r3
 800989c:	f3bf 8f6f 	isb	sy
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	b662      	cpsie	i
 80098a6:	61ba      	str	r2, [r7, #24]
 80098a8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80098aa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80098ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80098ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d302      	bcc.n	80098c0 <xQueueGenericSendFromISR+0xcc>
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d12c      	bne.n	800991a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80098c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	68b9      	ldr	r1, [r7, #8]
 80098ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098d0:	f000 fbc3 	bl	800a05a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80098d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80098d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098dc:	d112      	bne.n	8009904 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d016      	beq.n	8009914 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e8:	3324      	adds	r3, #36	; 0x24
 80098ea:	4618      	mov	r0, r3
 80098ec:	f001 f9fe 	bl	800acec <xTaskRemoveFromEventList>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00e      	beq.n	8009914 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00b      	beq.n	8009914 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	e007      	b.n	8009914 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009904:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009908:	3301      	adds	r3, #1
 800990a:	b2db      	uxtb	r3, r3
 800990c:	b25a      	sxtb	r2, r3
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009914:	2301      	movs	r3, #1
 8009916:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009918:	e001      	b.n	800991e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800991a:	2300      	movs	r3, #0
 800991c:	637b      	str	r3, [r7, #52]	; 0x34
 800991e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009920:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009928:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800992a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800992c:	4618      	mov	r0, r3
 800992e:	3738      	adds	r7, #56	; 0x38
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b08e      	sub	sp, #56	; 0x38
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10c      	bne.n	8009962 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8009948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994c:	b672      	cpsid	i
 800994e:	f383 8811 	msr	BASEPRI, r3
 8009952:	f3bf 8f6f 	isb	sy
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	b662      	cpsie	i
 800995c:	623b      	str	r3, [r7, #32]
}
 800995e:	bf00      	nop
 8009960:	e7fe      	b.n	8009960 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00c      	beq.n	8009984 <xQueueGiveFromISR+0x50>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	b672      	cpsid	i
 8009970:	f383 8811 	msr	BASEPRI, r3
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	f3bf 8f4f 	dsb	sy
 800997c:	b662      	cpsie	i
 800997e:	61fb      	str	r3, [r7, #28]
}
 8009980:	bf00      	nop
 8009982:	e7fe      	b.n	8009982 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d103      	bne.n	8009994 <xQueueGiveFromISR+0x60>
 800998c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d101      	bne.n	8009998 <xQueueGiveFromISR+0x64>
 8009994:	2301      	movs	r3, #1
 8009996:	e000      	b.n	800999a <xQueueGiveFromISR+0x66>
 8009998:	2300      	movs	r3, #0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10c      	bne.n	80099b8 <xQueueGiveFromISR+0x84>
	__asm volatile
 800999e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a2:	b672      	cpsid	i
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	b662      	cpsie	i
 80099b2:	61bb      	str	r3, [r7, #24]
}
 80099b4:	bf00      	nop
 80099b6:	e7fe      	b.n	80099b6 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099b8:	f002 fd00 	bl	800c3bc <vPortValidateInterruptPriority>
	__asm volatile
 80099bc:	f3ef 8211 	mrs	r2, BASEPRI
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	b672      	cpsid	i
 80099c6:	f383 8811 	msr	BASEPRI, r3
 80099ca:	f3bf 8f6f 	isb	sy
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	b662      	cpsie	i
 80099d4:	617a      	str	r2, [r7, #20]
 80099d6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80099d8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d22b      	bcs.n	8009a44 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f8:	1c5a      	adds	r2, r3, #1
 80099fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80099fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a06:	d112      	bne.n	8009a2e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d016      	beq.n	8009a3e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a12:	3324      	adds	r3, #36	; 0x24
 8009a14:	4618      	mov	r0, r3
 8009a16:	f001 f969 	bl	800acec <xTaskRemoveFromEventList>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00e      	beq.n	8009a3e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00b      	beq.n	8009a3e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2201      	movs	r2, #1
 8009a2a:	601a      	str	r2, [r3, #0]
 8009a2c:	e007      	b.n	8009a3e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a32:	3301      	adds	r3, #1
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	b25a      	sxtb	r2, r3
 8009a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	637b      	str	r3, [r7, #52]	; 0x34
 8009a42:	e001      	b.n	8009a48 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a44:	2300      	movs	r3, #0
 8009a46:	637b      	str	r3, [r7, #52]	; 0x34
 8009a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f383 8811 	msr	BASEPRI, r3
}
 8009a52:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3738      	adds	r7, #56	; 0x38
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
	...

08009a60 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b08c      	sub	sp, #48	; 0x30
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10c      	bne.n	8009a94 <xQueueReceive+0x34>
	__asm volatile
 8009a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7e:	b672      	cpsid	i
 8009a80:	f383 8811 	msr	BASEPRI, r3
 8009a84:	f3bf 8f6f 	isb	sy
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	b662      	cpsie	i
 8009a8e:	623b      	str	r3, [r7, #32]
}
 8009a90:	bf00      	nop
 8009a92:	e7fe      	b.n	8009a92 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d103      	bne.n	8009aa2 <xQueueReceive+0x42>
 8009a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d101      	bne.n	8009aa6 <xQueueReceive+0x46>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e000      	b.n	8009aa8 <xQueueReceive+0x48>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10c      	bne.n	8009ac6 <xQueueReceive+0x66>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab0:	b672      	cpsid	i
 8009ab2:	f383 8811 	msr	BASEPRI, r3
 8009ab6:	f3bf 8f6f 	isb	sy
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	b662      	cpsie	i
 8009ac0:	61fb      	str	r3, [r7, #28]
}
 8009ac2:	bf00      	nop
 8009ac4:	e7fe      	b.n	8009ac4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ac6:	f001 faeb 	bl	800b0a0 <xTaskGetSchedulerState>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d102      	bne.n	8009ad6 <xQueueReceive+0x76>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d101      	bne.n	8009ada <xQueueReceive+0x7a>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e000      	b.n	8009adc <xQueueReceive+0x7c>
 8009ada:	2300      	movs	r3, #0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10c      	bne.n	8009afa <xQueueReceive+0x9a>
	__asm volatile
 8009ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae4:	b672      	cpsid	i
 8009ae6:	f383 8811 	msr	BASEPRI, r3
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	b662      	cpsie	i
 8009af4:	61bb      	str	r3, [r7, #24]
}
 8009af6:	bf00      	nop
 8009af8:	e7fe      	b.n	8009af8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009afa:	f002 fb77 	bl	800c1ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d01f      	beq.n	8009b4a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b0a:	68b9      	ldr	r1, [r7, #8]
 8009b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b0e:	f000 fb0e 	bl	800a12e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	1e5a      	subs	r2, r3, #1
 8009b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00f      	beq.n	8009b42 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b24:	3310      	adds	r3, #16
 8009b26:	4618      	mov	r0, r3
 8009b28:	f001 f8e0 	bl	800acec <xTaskRemoveFromEventList>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d007      	beq.n	8009b42 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b32:	4b3d      	ldr	r3, [pc, #244]	; (8009c28 <xQueueReceive+0x1c8>)
 8009b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b38:	601a      	str	r2, [r3, #0]
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b42:	f002 fb87 	bl	800c254 <vPortExitCritical>
				return pdPASS;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e069      	b.n	8009c1e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d103      	bne.n	8009b58 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b50:	f002 fb80 	bl	800c254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b54:	2300      	movs	r3, #0
 8009b56:	e062      	b.n	8009c1e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d106      	bne.n	8009b6c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b5e:	f107 0310 	add.w	r3, r7, #16
 8009b62:	4618      	mov	r0, r3
 8009b64:	f001 f928 	bl	800adb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b6c:	f002 fb72 	bl	800c254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b70:	f000 fe76 	bl	800a860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009b74:	f002 fb3a 	bl	800c1ec <vPortEnterCritical>
 8009b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b7e:	b25b      	sxtb	r3, r3
 8009b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b84:	d103      	bne.n	8009b8e <xQueueReceive+0x12e>
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b94:	b25b      	sxtb	r3, r3
 8009b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9a:	d103      	bne.n	8009ba4 <xQueueReceive+0x144>
 8009b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ba4:	f002 fb56 	bl	800c254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ba8:	1d3a      	adds	r2, r7, #4
 8009baa:	f107 0310 	add.w	r3, r7, #16
 8009bae:	4611      	mov	r1, r2
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	f001 f917 	bl	800ade4 <xTaskCheckForTimeOut>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d123      	bne.n	8009c04 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bbe:	f000 fb2e 	bl	800a21e <prvIsQueueEmpty>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d017      	beq.n	8009bf8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bca:	3324      	adds	r3, #36	; 0x24
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	4611      	mov	r1, r2
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f001 f837 	bl	800ac44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bd8:	f000 facf 	bl	800a17a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009bdc:	f000 fe4e 	bl	800a87c <xTaskResumeAll>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d189      	bne.n	8009afa <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009be6:	4b10      	ldr	r3, [pc, #64]	; (8009c28 <xQueueReceive+0x1c8>)
 8009be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bec:	601a      	str	r2, [r3, #0]
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	f3bf 8f6f 	isb	sy
 8009bf6:	e780      	b.n	8009afa <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bfa:	f000 fabe 	bl	800a17a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009bfe:	f000 fe3d 	bl	800a87c <xTaskResumeAll>
 8009c02:	e77a      	b.n	8009afa <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c06:	f000 fab8 	bl	800a17a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c0a:	f000 fe37 	bl	800a87c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c10:	f000 fb05 	bl	800a21e <prvIsQueueEmpty>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f43f af6f 	beq.w	8009afa <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3730      	adds	r7, #48	; 0x30
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	e000ed04 	.word	0xe000ed04

08009c2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b08e      	sub	sp, #56	; 0x38
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009c36:	2300      	movs	r3, #0
 8009c38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10c      	bne.n	8009c62 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8009c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4c:	b672      	cpsid	i
 8009c4e:	f383 8811 	msr	BASEPRI, r3
 8009c52:	f3bf 8f6f 	isb	sy
 8009c56:	f3bf 8f4f 	dsb	sy
 8009c5a:	b662      	cpsie	i
 8009c5c:	623b      	str	r3, [r7, #32]
}
 8009c5e:	bf00      	nop
 8009c60:	e7fe      	b.n	8009c60 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00c      	beq.n	8009c84 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8009c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6e:	b672      	cpsid	i
 8009c70:	f383 8811 	msr	BASEPRI, r3
 8009c74:	f3bf 8f6f 	isb	sy
 8009c78:	f3bf 8f4f 	dsb	sy
 8009c7c:	b662      	cpsie	i
 8009c7e:	61fb      	str	r3, [r7, #28]
}
 8009c80:	bf00      	nop
 8009c82:	e7fe      	b.n	8009c82 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c84:	f001 fa0c 	bl	800b0a0 <xTaskGetSchedulerState>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d102      	bne.n	8009c94 <xQueueSemaphoreTake+0x68>
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d101      	bne.n	8009c98 <xQueueSemaphoreTake+0x6c>
 8009c94:	2301      	movs	r3, #1
 8009c96:	e000      	b.n	8009c9a <xQueueSemaphoreTake+0x6e>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10c      	bne.n	8009cb8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	b672      	cpsid	i
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	b662      	cpsie	i
 8009cb2:	61bb      	str	r3, [r7, #24]
}
 8009cb4:	bf00      	nop
 8009cb6:	e7fe      	b.n	8009cb6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009cb8:	f002 fa98 	bl	800c1ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d024      	beq.n	8009d12 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cca:	1e5a      	subs	r2, r3, #1
 8009ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d104      	bne.n	8009ce2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009cd8:	f001 fb60 	bl	800b39c <pvTaskIncrementMutexHeldCount>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00f      	beq.n	8009d0a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cec:	3310      	adds	r3, #16
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 fffc 	bl	800acec <xTaskRemoveFromEventList>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d007      	beq.n	8009d0a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009cfa:	4b55      	ldr	r3, [pc, #340]	; (8009e50 <xQueueSemaphoreTake+0x224>)
 8009cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d00:	601a      	str	r2, [r3, #0]
 8009d02:	f3bf 8f4f 	dsb	sy
 8009d06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d0a:	f002 faa3 	bl	800c254 <vPortExitCritical>
				return pdPASS;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e099      	b.n	8009e46 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d113      	bne.n	8009d40 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00c      	beq.n	8009d38 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d22:	b672      	cpsid	i
 8009d24:	f383 8811 	msr	BASEPRI, r3
 8009d28:	f3bf 8f6f 	isb	sy
 8009d2c:	f3bf 8f4f 	dsb	sy
 8009d30:	b662      	cpsie	i
 8009d32:	617b      	str	r3, [r7, #20]
}
 8009d34:	bf00      	nop
 8009d36:	e7fe      	b.n	8009d36 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009d38:	f002 fa8c 	bl	800c254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	e082      	b.n	8009e46 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d106      	bne.n	8009d54 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d46:	f107 030c 	add.w	r3, r7, #12
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f001 f834 	bl	800adb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d50:	2301      	movs	r3, #1
 8009d52:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d54:	f002 fa7e 	bl	800c254 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d58:	f000 fd82 	bl	800a860 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d5c:	f002 fa46 	bl	800c1ec <vPortEnterCritical>
 8009d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d66:	b25b      	sxtb	r3, r3
 8009d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6c:	d103      	bne.n	8009d76 <xQueueSemaphoreTake+0x14a>
 8009d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d7c:	b25b      	sxtb	r3, r3
 8009d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d82:	d103      	bne.n	8009d8c <xQueueSemaphoreTake+0x160>
 8009d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d8c:	f002 fa62 	bl	800c254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d90:	463a      	mov	r2, r7
 8009d92:	f107 030c 	add.w	r3, r7, #12
 8009d96:	4611      	mov	r1, r2
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f001 f823 	bl	800ade4 <xTaskCheckForTimeOut>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d132      	bne.n	8009e0a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009da4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009da6:	f000 fa3a 	bl	800a21e <prvIsQueueEmpty>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d026      	beq.n	8009dfe <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d109      	bne.n	8009dcc <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8009db8:	f002 fa18 	bl	800c1ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f001 f98b 	bl	800b0dc <xTaskPriorityInherit>
 8009dc6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009dc8:	f002 fa44 	bl	800c254 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dce:	3324      	adds	r3, #36	; 0x24
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f000 ff35 	bl	800ac44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009dda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ddc:	f000 f9cd 	bl	800a17a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009de0:	f000 fd4c 	bl	800a87c <xTaskResumeAll>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f47f af66 	bne.w	8009cb8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8009dec:	4b18      	ldr	r3, [pc, #96]	; (8009e50 <xQueueSemaphoreTake+0x224>)
 8009dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	f3bf 8f4f 	dsb	sy
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	e75c      	b.n	8009cb8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009dfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e00:	f000 f9bb 	bl	800a17a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e04:	f000 fd3a 	bl	800a87c <xTaskResumeAll>
 8009e08:	e756      	b.n	8009cb8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009e0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e0c:	f000 f9b5 	bl	800a17a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e10:	f000 fd34 	bl	800a87c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e16:	f000 fa02 	bl	800a21e <prvIsQueueEmpty>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f43f af4b 	beq.w	8009cb8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00d      	beq.n	8009e44 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8009e28:	f002 f9e0 	bl	800c1ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009e2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e2e:	f000 f8fc 	bl	800a02a <prvGetDisinheritPriorityAfterTimeout>
 8009e32:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f001 fa28 	bl	800b290 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009e40:	f002 fa08 	bl	800c254 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3738      	adds	r7, #56	; 0x38
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	e000ed04 	.word	0xe000ed04

08009e54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b08e      	sub	sp, #56	; 0x38
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10c      	bne.n	8009e84 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6e:	b672      	cpsid	i
 8009e70:	f383 8811 	msr	BASEPRI, r3
 8009e74:	f3bf 8f6f 	isb	sy
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	b662      	cpsie	i
 8009e7e:	623b      	str	r3, [r7, #32]
}
 8009e80:	bf00      	nop
 8009e82:	e7fe      	b.n	8009e82 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d103      	bne.n	8009e92 <xQueueReceiveFromISR+0x3e>
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d101      	bne.n	8009e96 <xQueueReceiveFromISR+0x42>
 8009e92:	2301      	movs	r3, #1
 8009e94:	e000      	b.n	8009e98 <xQueueReceiveFromISR+0x44>
 8009e96:	2300      	movs	r3, #0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10c      	bne.n	8009eb6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8009e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea0:	b672      	cpsid	i
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	b662      	cpsie	i
 8009eb0:	61fb      	str	r3, [r7, #28]
}
 8009eb2:	bf00      	nop
 8009eb4:	e7fe      	b.n	8009eb4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009eb6:	f002 fa81 	bl	800c3bc <vPortValidateInterruptPriority>
	__asm volatile
 8009eba:	f3ef 8211 	mrs	r2, BASEPRI
 8009ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec2:	b672      	cpsid	i
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	b662      	cpsie	i
 8009ed2:	61ba      	str	r2, [r7, #24]
 8009ed4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009ed6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ede:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d02f      	beq.n	8009f46 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ef0:	68b9      	ldr	r1, [r7, #8]
 8009ef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ef4:	f000 f91b 	bl	800a12e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efa:	1e5a      	subs	r2, r3, #1
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009f00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f08:	d112      	bne.n	8009f30 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d016      	beq.n	8009f40 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f14:	3310      	adds	r3, #16
 8009f16:	4618      	mov	r0, r3
 8009f18:	f000 fee8 	bl	800acec <xTaskRemoveFromEventList>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00e      	beq.n	8009f40 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00b      	beq.n	8009f40 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	601a      	str	r2, [r3, #0]
 8009f2e:	e007      	b.n	8009f40 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f34:	3301      	adds	r3, #1
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	b25a      	sxtb	r2, r3
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009f40:	2301      	movs	r3, #1
 8009f42:	637b      	str	r3, [r7, #52]	; 0x34
 8009f44:	e001      	b.n	8009f4a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8009f46:	2300      	movs	r3, #0
 8009f48:	637b      	str	r3, [r7, #52]	; 0x34
 8009f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	f383 8811 	msr	BASEPRI, r3
}
 8009f54:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3738      	adds	r7, #56	; 0x38
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d10c      	bne.n	8009f88 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f72:	b672      	cpsid	i
 8009f74:	f383 8811 	msr	BASEPRI, r3
 8009f78:	f3bf 8f6f 	isb	sy
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	b662      	cpsie	i
 8009f82:	60bb      	str	r3, [r7, #8]
}
 8009f84:	bf00      	nop
 8009f86:	e7fe      	b.n	8009f86 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8009f88:	f002 f930 	bl	800c1ec <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f90:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009f92:	f002 f95f 	bl	800c254 <vPortExitCritical>

	return uxReturn;
 8009f96:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b087      	sub	sp, #28
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10c      	bne.n	8009fcc <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8009fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb6:	b672      	cpsid	i
 8009fb8:	f383 8811 	msr	BASEPRI, r3
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f3bf 8f4f 	dsb	sy
 8009fc4:	b662      	cpsie	i
 8009fc6:	60fb      	str	r3, [r7, #12]
}
 8009fc8:	bf00      	nop
 8009fca:	e7fe      	b.n	8009fca <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8009fd2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	371c      	adds	r7, #28
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10c      	bne.n	800a00c <vQueueDelete+0x2c>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff6:	b672      	cpsid	i
 8009ff8:	f383 8811 	msr	BASEPRI, r3
 8009ffc:	f3bf 8f6f 	isb	sy
 800a000:	f3bf 8f4f 	dsb	sy
 800a004:	b662      	cpsie	i
 800a006:	60bb      	str	r3, [r7, #8]
}
 800a008:	bf00      	nop
 800a00a:	e7fe      	b.n	800a00a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a00c:	68f8      	ldr	r0, [r7, #12]
 800a00e:	f000 f95f 	bl	800a2d0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d102      	bne.n	800a022 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f002 fadb 	bl	800c5d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a022:	bf00      	nop
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a02a:	b480      	push	{r7}
 800a02c:	b085      	sub	sp, #20
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a036:	2b00      	cmp	r3, #0
 800a038:	d006      	beq.n	800a048 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a044:	60fb      	str	r3, [r7, #12]
 800a046:	e001      	b.n	800a04c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a048:	2300      	movs	r3, #0
 800a04a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a04c:	68fb      	ldr	r3, [r7, #12]
	}
 800a04e:	4618      	mov	r0, r3
 800a050:	3714      	adds	r7, #20
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b086      	sub	sp, #24
 800a05e:	af00      	add	r7, sp, #0
 800a060:	60f8      	str	r0, [r7, #12]
 800a062:	60b9      	str	r1, [r7, #8]
 800a064:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a066:	2300      	movs	r3, #0
 800a068:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10d      	bne.n	800a094 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d14d      	bne.n	800a11c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	4618      	mov	r0, r3
 800a086:	f001 f891 	bl	800b1ac <xTaskPriorityDisinherit>
 800a08a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	609a      	str	r2, [r3, #8]
 800a092:	e043      	b.n	800a11c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d119      	bne.n	800a0ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6858      	ldr	r0, [r3, #4]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	68b9      	ldr	r1, [r7, #8]
 800a0a6:	f00f fffc 	bl	801a0a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	685a      	ldr	r2, [r3, #4]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b2:	441a      	add	r2, r3
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d32b      	bcc.n	800a11c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	605a      	str	r2, [r3, #4]
 800a0cc:	e026      	b.n	800a11c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	68d8      	ldr	r0, [r3, #12]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	68b9      	ldr	r1, [r7, #8]
 800a0da:	f00f ffe2 	bl	801a0a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	68da      	ldr	r2, [r3, #12]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e6:	425b      	negs	r3, r3
 800a0e8:	441a      	add	r2, r3
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	68da      	ldr	r2, [r3, #12]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d207      	bcs.n	800a10a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	689a      	ldr	r2, [r3, #8]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a102:	425b      	negs	r3, r3
 800a104:	441a      	add	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2b02      	cmp	r3, #2
 800a10e:	d105      	bne.n	800a11c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	3b01      	subs	r3, #1
 800a11a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	1c5a      	adds	r2, r3, #1
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a124:	697b      	ldr	r3, [r7, #20]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b082      	sub	sp, #8
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
 800a136:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d018      	beq.n	800a172 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	68da      	ldr	r2, [r3, #12]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a148:	441a      	add	r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	68da      	ldr	r2, [r3, #12]
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	429a      	cmp	r2, r3
 800a158:	d303      	bcc.n	800a162 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	68d9      	ldr	r1, [r3, #12]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16a:	461a      	mov	r2, r3
 800a16c:	6838      	ldr	r0, [r7, #0]
 800a16e:	f00f ff98 	bl	801a0a2 <memcpy>
	}
}
 800a172:	bf00      	nop
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b084      	sub	sp, #16
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a182:	f002 f833 	bl	800c1ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a18c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a18e:	e011      	b.n	800a1b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a194:	2b00      	cmp	r3, #0
 800a196:	d012      	beq.n	800a1be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	3324      	adds	r3, #36	; 0x24
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 fda5 	bl	800acec <xTaskRemoveFromEventList>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d001      	beq.n	800a1ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a1a8:	f000 fe82 	bl	800aeb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a1ac:	7bfb      	ldrb	r3, [r7, #15]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a1b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	dce9      	bgt.n	800a190 <prvUnlockQueue+0x16>
 800a1bc:	e000      	b.n	800a1c0 <prvUnlockQueue+0x46>
					break;
 800a1be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	22ff      	movs	r2, #255	; 0xff
 800a1c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a1c8:	f002 f844 	bl	800c254 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a1cc:	f002 f80e 	bl	800c1ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1d8:	e011      	b.n	800a1fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	691b      	ldr	r3, [r3, #16]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d012      	beq.n	800a208 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	3310      	adds	r3, #16
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f000 fd80 	bl	800acec <xTaskRemoveFromEventList>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a1f2:	f000 fe5d 	bl	800aeb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a1f6:	7bbb      	ldrb	r3, [r7, #14]
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a202:	2b00      	cmp	r3, #0
 800a204:	dce9      	bgt.n	800a1da <prvUnlockQueue+0x60>
 800a206:	e000      	b.n	800a20a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a208:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	22ff      	movs	r2, #255	; 0xff
 800a20e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a212:	f002 f81f 	bl	800c254 <vPortExitCritical>
}
 800a216:	bf00      	nop
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b084      	sub	sp, #16
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a226:	f001 ffe1 	bl	800c1ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d102      	bne.n	800a238 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a232:	2301      	movs	r3, #1
 800a234:	60fb      	str	r3, [r7, #12]
 800a236:	e001      	b.n	800a23c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a238:	2300      	movs	r3, #0
 800a23a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a23c:	f002 f80a 	bl	800c254 <vPortExitCritical>

	return xReturn;
 800a240:	68fb      	ldr	r3, [r7, #12]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b084      	sub	sp, #16
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a252:	f001 ffcb 	bl	800c1ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a25e:	429a      	cmp	r2, r3
 800a260:	d102      	bne.n	800a268 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a262:	2301      	movs	r3, #1
 800a264:	60fb      	str	r3, [r7, #12]
 800a266:	e001      	b.n	800a26c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a268:	2300      	movs	r3, #0
 800a26a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a26c:	f001 fff2 	bl	800c254 <vPortExitCritical>

	return xReturn;
 800a270:	68fb      	ldr	r3, [r7, #12]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
	...

0800a27c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
 800a284:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a286:	2300      	movs	r3, #0
 800a288:	60fb      	str	r3, [r7, #12]
 800a28a:	e014      	b.n	800a2b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a28c:	4a0f      	ldr	r2, [pc, #60]	; (800a2cc <vQueueAddToRegistry+0x50>)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10b      	bne.n	800a2b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a298:	490c      	ldr	r1, [pc, #48]	; (800a2cc <vQueueAddToRegistry+0x50>)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	683a      	ldr	r2, [r7, #0]
 800a29e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a2a2:	4a0a      	ldr	r2, [pc, #40]	; (800a2cc <vQueueAddToRegistry+0x50>)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	00db      	lsls	r3, r3, #3
 800a2a8:	4413      	add	r3, r2
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a2ae:	e006      	b.n	800a2be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	60fb      	str	r3, [r7, #12]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2b07      	cmp	r3, #7
 800a2ba:	d9e7      	bls.n	800a28c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a2bc:	bf00      	nop
 800a2be:	bf00      	nop
 800a2c0:	3714      	adds	r7, #20
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	2000824c 	.word	0x2000824c

0800a2d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2d8:	2300      	movs	r3, #0
 800a2da:	60fb      	str	r3, [r7, #12]
 800a2dc:	e016      	b.n	800a30c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a2de:	4a10      	ldr	r2, [pc, #64]	; (800a320 <vQueueUnregisterQueue+0x50>)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	00db      	lsls	r3, r3, #3
 800a2e4:	4413      	add	r3, r2
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d10b      	bne.n	800a306 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a2ee:	4a0c      	ldr	r2, [pc, #48]	; (800a320 <vQueueUnregisterQueue+0x50>)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2100      	movs	r1, #0
 800a2f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a2f8:	4a09      	ldr	r2, [pc, #36]	; (800a320 <vQueueUnregisterQueue+0x50>)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	00db      	lsls	r3, r3, #3
 800a2fe:	4413      	add	r3, r2
 800a300:	2200      	movs	r2, #0
 800a302:	605a      	str	r2, [r3, #4]
				break;
 800a304:	e006      	b.n	800a314 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	3301      	adds	r3, #1
 800a30a:	60fb      	str	r3, [r7, #12]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2b07      	cmp	r3, #7
 800a310:	d9e5      	bls.n	800a2de <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a312:	bf00      	nop
 800a314:	bf00      	nop
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	2000824c 	.word	0x2000824c

0800a324 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a324:	b580      	push	{r7, lr}
 800a326:	b086      	sub	sp, #24
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a334:	f001 ff5a 	bl	800c1ec <vPortEnterCritical>
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a33e:	b25b      	sxtb	r3, r3
 800a340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a344:	d103      	bne.n	800a34e <vQueueWaitForMessageRestricted+0x2a>
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	2200      	movs	r2, #0
 800a34a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a354:	b25b      	sxtb	r3, r3
 800a356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a35a:	d103      	bne.n	800a364 <vQueueWaitForMessageRestricted+0x40>
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a364:	f001 ff76 	bl	800c254 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d106      	bne.n	800a37e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	3324      	adds	r3, #36	; 0x24
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	68b9      	ldr	r1, [r7, #8]
 800a378:	4618      	mov	r0, r3
 800a37a:	f000 fc89 	bl	800ac90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a37e:	6978      	ldr	r0, [r7, #20]
 800a380:	f7ff fefb 	bl	800a17a <prvUnlockQueue>
	}
 800a384:	bf00      	nop
 800a386:	3718      	adds	r7, #24
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b08e      	sub	sp, #56	; 0x38
 800a390:	af04      	add	r7, sp, #16
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
 800a398:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d10c      	bne.n	800a3ba <xTaskCreateStatic+0x2e>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	b672      	cpsid	i
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	b662      	cpsie	i
 800a3b4:	623b      	str	r3, [r7, #32]
}
 800a3b6:	bf00      	nop
 800a3b8:	e7fe      	b.n	800a3b8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10c      	bne.n	800a3da <xTaskCreateStatic+0x4e>
	__asm volatile
 800a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c4:	b672      	cpsid	i
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	b662      	cpsie	i
 800a3d4:	61fb      	str	r3, [r7, #28]
}
 800a3d6:	bf00      	nop
 800a3d8:	e7fe      	b.n	800a3d8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a3da:	23bc      	movs	r3, #188	; 0xbc
 800a3dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	2bbc      	cmp	r3, #188	; 0xbc
 800a3e2:	d00c      	beq.n	800a3fe <xTaskCreateStatic+0x72>
	__asm volatile
 800a3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e8:	b672      	cpsid	i
 800a3ea:	f383 8811 	msr	BASEPRI, r3
 800a3ee:	f3bf 8f6f 	isb	sy
 800a3f2:	f3bf 8f4f 	dsb	sy
 800a3f6:	b662      	cpsie	i
 800a3f8:	61bb      	str	r3, [r7, #24]
}
 800a3fa:	bf00      	nop
 800a3fc:	e7fe      	b.n	800a3fc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a3fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a402:	2b00      	cmp	r3, #0
 800a404:	d01e      	beq.n	800a444 <xTaskCreateStatic+0xb8>
 800a406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d01b      	beq.n	800a444 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a414:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a418:	2202      	movs	r2, #2
 800a41a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a41e:	2300      	movs	r3, #0
 800a420:	9303      	str	r3, [sp, #12]
 800a422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a424:	9302      	str	r3, [sp, #8]
 800a426:	f107 0314 	add.w	r3, r7, #20
 800a42a:	9301      	str	r3, [sp, #4]
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	9300      	str	r3, [sp, #0]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	68b9      	ldr	r1, [r7, #8]
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f000 f850 	bl	800a4dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a43c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a43e:	f000 f8f5 	bl	800a62c <prvAddNewTaskToReadyList>
 800a442:	e001      	b.n	800a448 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800a444:	2300      	movs	r3, #0
 800a446:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a448:	697b      	ldr	r3, [r7, #20]
	}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3728      	adds	r7, #40	; 0x28
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a452:	b580      	push	{r7, lr}
 800a454:	b08c      	sub	sp, #48	; 0x30
 800a456:	af04      	add	r7, sp, #16
 800a458:	60f8      	str	r0, [r7, #12]
 800a45a:	60b9      	str	r1, [r7, #8]
 800a45c:	603b      	str	r3, [r7, #0]
 800a45e:	4613      	mov	r3, r2
 800a460:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a462:	88fb      	ldrh	r3, [r7, #6]
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4618      	mov	r0, r3
 800a468:	f001 ffec 	bl	800c444 <pvPortMalloc>
 800a46c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00e      	beq.n	800a492 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a474:	20bc      	movs	r0, #188	; 0xbc
 800a476:	f001 ffe5 	bl	800c444 <pvPortMalloc>
 800a47a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	631a      	str	r2, [r3, #48]	; 0x30
 800a488:	e005      	b.n	800a496 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a48a:	6978      	ldr	r0, [r7, #20]
 800a48c:	f002 f8a4 	bl	800c5d8 <vPortFree>
 800a490:	e001      	b.n	800a496 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a492:	2300      	movs	r3, #0
 800a494:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d017      	beq.n	800a4cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a4a4:	88fa      	ldrh	r2, [r7, #6]
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	9303      	str	r3, [sp, #12]
 800a4aa:	69fb      	ldr	r3, [r7, #28]
 800a4ac:	9302      	str	r3, [sp, #8]
 800a4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b0:	9301      	str	r3, [sp, #4]
 800a4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	68b9      	ldr	r1, [r7, #8]
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f000 f80e 	bl	800a4dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4c0:	69f8      	ldr	r0, [r7, #28]
 800a4c2:	f000 f8b3 	bl	800a62c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	61bb      	str	r3, [r7, #24]
 800a4ca:	e002      	b.n	800a4d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a4cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a4d2:	69bb      	ldr	r3, [r7, #24]
	}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3720      	adds	r7, #32
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b088      	sub	sp, #32
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
 800a4e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	21a5      	movs	r1, #165	; 0xa5
 800a4f6:	f00f fde2 	bl	801a0be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4fe:	6879      	ldr	r1, [r7, #4]
 800a500:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a504:	440b      	add	r3, r1
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4413      	add	r3, r2
 800a50a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	f023 0307 	bic.w	r3, r3, #7
 800a512:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	f003 0307 	and.w	r3, r3, #7
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d00c      	beq.n	800a538 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	b672      	cpsid	i
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	b662      	cpsie	i
 800a532:	617b      	str	r3, [r7, #20]
}
 800a534:	bf00      	nop
 800a536:	e7fe      	b.n	800a536 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d01f      	beq.n	800a57e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a53e:	2300      	movs	r3, #0
 800a540:	61fb      	str	r3, [r7, #28]
 800a542:	e012      	b.n	800a56a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a544:	68ba      	ldr	r2, [r7, #8]
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	4413      	add	r3, r2
 800a54a:	7819      	ldrb	r1, [r3, #0]
 800a54c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	4413      	add	r3, r2
 800a552:	3334      	adds	r3, #52	; 0x34
 800a554:	460a      	mov	r2, r1
 800a556:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	69fb      	ldr	r3, [r7, #28]
 800a55c:	4413      	add	r3, r2
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d006      	beq.n	800a572 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	3301      	adds	r3, #1
 800a568:	61fb      	str	r3, [r7, #28]
 800a56a:	69fb      	ldr	r3, [r7, #28]
 800a56c:	2b0f      	cmp	r3, #15
 800a56e:	d9e9      	bls.n	800a544 <prvInitialiseNewTask+0x68>
 800a570:	e000      	b.n	800a574 <prvInitialiseNewTask+0x98>
			{
				break;
 800a572:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a576:	2200      	movs	r2, #0
 800a578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a57c:	e003      	b.n	800a586 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a580:	2200      	movs	r2, #0
 800a582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a588:	2b37      	cmp	r3, #55	; 0x37
 800a58a:	d901      	bls.n	800a590 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a58c:	2337      	movs	r3, #55	; 0x37
 800a58e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a594:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a59a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59e:	2200      	movs	r2, #0
 800a5a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f7fe fd0c 	bl	8008fc4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ae:	3318      	adds	r3, #24
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fe fd07 	bl	8008fc4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5de:	3354      	adds	r3, #84	; 0x54
 800a5e0:	2260      	movs	r2, #96	; 0x60
 800a5e2:	2100      	movs	r1, #0
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f00f fd6a 	bl	801a0be <memset>
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ec:	4a0c      	ldr	r2, [pc, #48]	; (800a620 <prvInitialiseNewTask+0x144>)
 800a5ee:	659a      	str	r2, [r3, #88]	; 0x58
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f2:	4a0c      	ldr	r2, [pc, #48]	; (800a624 <prvInitialiseNewTask+0x148>)
 800a5f4:	65da      	str	r2, [r3, #92]	; 0x5c
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f8:	4a0b      	ldr	r2, [pc, #44]	; (800a628 <prvInitialiseNewTask+0x14c>)
 800a5fa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	68f9      	ldr	r1, [r7, #12]
 800a600:	69b8      	ldr	r0, [r7, #24]
 800a602:	f001 fce9 	bl	800bfd8 <pxPortInitialiseStack>
 800a606:	4602      	mov	r2, r0
 800a608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d002      	beq.n	800a618 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a616:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a618:	bf00      	nop
 800a61a:	3720      	adds	r7, #32
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	0801e858 	.word	0x0801e858
 800a624:	0801e878 	.word	0x0801e878
 800a628:	0801e838 	.word	0x0801e838

0800a62c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a634:	f001 fdda 	bl	800c1ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a638:	4b2d      	ldr	r3, [pc, #180]	; (800a6f0 <prvAddNewTaskToReadyList+0xc4>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	3301      	adds	r3, #1
 800a63e:	4a2c      	ldr	r2, [pc, #176]	; (800a6f0 <prvAddNewTaskToReadyList+0xc4>)
 800a640:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a642:	4b2c      	ldr	r3, [pc, #176]	; (800a6f4 <prvAddNewTaskToReadyList+0xc8>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d109      	bne.n	800a65e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a64a:	4a2a      	ldr	r2, [pc, #168]	; (800a6f4 <prvAddNewTaskToReadyList+0xc8>)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a650:	4b27      	ldr	r3, [pc, #156]	; (800a6f0 <prvAddNewTaskToReadyList+0xc4>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b01      	cmp	r3, #1
 800a656:	d110      	bne.n	800a67a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a658:	f000 fc4e 	bl	800aef8 <prvInitialiseTaskLists>
 800a65c:	e00d      	b.n	800a67a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a65e:	4b26      	ldr	r3, [pc, #152]	; (800a6f8 <prvAddNewTaskToReadyList+0xcc>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d109      	bne.n	800a67a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a666:	4b23      	ldr	r3, [pc, #140]	; (800a6f4 <prvAddNewTaskToReadyList+0xc8>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a670:	429a      	cmp	r2, r3
 800a672:	d802      	bhi.n	800a67a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a674:	4a1f      	ldr	r2, [pc, #124]	; (800a6f4 <prvAddNewTaskToReadyList+0xc8>)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a67a:	4b20      	ldr	r3, [pc, #128]	; (800a6fc <prvAddNewTaskToReadyList+0xd0>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	3301      	adds	r3, #1
 800a680:	4a1e      	ldr	r2, [pc, #120]	; (800a6fc <prvAddNewTaskToReadyList+0xd0>)
 800a682:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a684:	4b1d      	ldr	r3, [pc, #116]	; (800a6fc <prvAddNewTaskToReadyList+0xd0>)
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a690:	4b1b      	ldr	r3, [pc, #108]	; (800a700 <prvAddNewTaskToReadyList+0xd4>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	429a      	cmp	r2, r3
 800a696:	d903      	bls.n	800a6a0 <prvAddNewTaskToReadyList+0x74>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69c:	4a18      	ldr	r2, [pc, #96]	; (800a700 <prvAddNewTaskToReadyList+0xd4>)
 800a69e:	6013      	str	r3, [r2, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	4413      	add	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4a15      	ldr	r2, [pc, #84]	; (800a704 <prvAddNewTaskToReadyList+0xd8>)
 800a6ae:	441a      	add	r2, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	3304      	adds	r3, #4
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	4610      	mov	r0, r2
 800a6b8:	f7fe fc91 	bl	8008fde <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a6bc:	f001 fdca 	bl	800c254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a6c0:	4b0d      	ldr	r3, [pc, #52]	; (800a6f8 <prvAddNewTaskToReadyList+0xcc>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00e      	beq.n	800a6e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a6c8:	4b0a      	ldr	r3, [pc, #40]	; (800a6f4 <prvAddNewTaskToReadyList+0xc8>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d207      	bcs.n	800a6e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a6d6:	4b0c      	ldr	r3, [pc, #48]	; (800a708 <prvAddNewTaskToReadyList+0xdc>)
 800a6d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6dc:	601a      	str	r2, [r3, #0]
 800a6de:	f3bf 8f4f 	dsb	sy
 800a6e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6e6:	bf00      	nop
 800a6e8:	3708      	adds	r7, #8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20000cfc 	.word	0x20000cfc
 800a6f4:	20000828 	.word	0x20000828
 800a6f8:	20000d08 	.word	0x20000d08
 800a6fc:	20000d18 	.word	0x20000d18
 800a700:	20000d04 	.word	0x20000d04
 800a704:	2000082c 	.word	0x2000082c
 800a708:	e000ed04 	.word	0xe000ed04

0800a70c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a714:	2300      	movs	r3, #0
 800a716:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d019      	beq.n	800a752 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a71e:	4b14      	ldr	r3, [pc, #80]	; (800a770 <vTaskDelay+0x64>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00c      	beq.n	800a740 <vTaskDelay+0x34>
	__asm volatile
 800a726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72a:	b672      	cpsid	i
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	b662      	cpsie	i
 800a73a:	60bb      	str	r3, [r7, #8]
}
 800a73c:	bf00      	nop
 800a73e:	e7fe      	b.n	800a73e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a740:	f000 f88e 	bl	800a860 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a744:	2100      	movs	r1, #0
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f001 f838 	bl	800b7bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a74c:	f000 f896 	bl	800a87c <xTaskResumeAll>
 800a750:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d107      	bne.n	800a768 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800a758:	4b06      	ldr	r3, [pc, #24]	; (800a774 <vTaskDelay+0x68>)
 800a75a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a75e:	601a      	str	r2, [r3, #0]
 800a760:	f3bf 8f4f 	dsb	sy
 800a764:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a768:	bf00      	nop
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	20000d24 	.word	0x20000d24
 800a774:	e000ed04 	.word	0xe000ed04

0800a778 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b08a      	sub	sp, #40	; 0x28
 800a77c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a77e:	2300      	movs	r3, #0
 800a780:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a782:	2300      	movs	r3, #0
 800a784:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a786:	463a      	mov	r2, r7
 800a788:	1d39      	adds	r1, r7, #4
 800a78a:	f107 0308 	add.w	r3, r7, #8
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fe fbc4 	bl	8008f1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a794:	6839      	ldr	r1, [r7, #0]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68ba      	ldr	r2, [r7, #8]
 800a79a:	9202      	str	r2, [sp, #8]
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	2300      	movs	r3, #0
 800a7a0:	9300      	str	r3, [sp, #0]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	460a      	mov	r2, r1
 800a7a6:	4926      	ldr	r1, [pc, #152]	; (800a840 <vTaskStartScheduler+0xc8>)
 800a7a8:	4826      	ldr	r0, [pc, #152]	; (800a844 <vTaskStartScheduler+0xcc>)
 800a7aa:	f7ff fdef 	bl	800a38c <xTaskCreateStatic>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	4a25      	ldr	r2, [pc, #148]	; (800a848 <vTaskStartScheduler+0xd0>)
 800a7b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a7b4:	4b24      	ldr	r3, [pc, #144]	; (800a848 <vTaskStartScheduler+0xd0>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d002      	beq.n	800a7c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	617b      	str	r3, [r7, #20]
 800a7c0:	e001      	b.n	800a7c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d102      	bne.n	800a7d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a7cc:	f001 f84a 	bl	800b864 <xTimerCreateTimerTask>
 800a7d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d11d      	bne.n	800a814 <vTaskStartScheduler+0x9c>
	__asm volatile
 800a7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7dc:	b672      	cpsid	i
 800a7de:	f383 8811 	msr	BASEPRI, r3
 800a7e2:	f3bf 8f6f 	isb	sy
 800a7e6:	f3bf 8f4f 	dsb	sy
 800a7ea:	b662      	cpsie	i
 800a7ec:	613b      	str	r3, [r7, #16]
}
 800a7ee:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a7f0:	4b16      	ldr	r3, [pc, #88]	; (800a84c <vTaskStartScheduler+0xd4>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	3354      	adds	r3, #84	; 0x54
 800a7f6:	4a16      	ldr	r2, [pc, #88]	; (800a850 <vTaskStartScheduler+0xd8>)
 800a7f8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a7fa:	4b16      	ldr	r3, [pc, #88]	; (800a854 <vTaskStartScheduler+0xdc>)
 800a7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a800:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a802:	4b15      	ldr	r3, [pc, #84]	; (800a858 <vTaskStartScheduler+0xe0>)
 800a804:	2201      	movs	r2, #1
 800a806:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a808:	4b14      	ldr	r3, [pc, #80]	; (800a85c <vTaskStartScheduler+0xe4>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a80e:	f001 fc6f 	bl	800c0f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a812:	e010      	b.n	800a836 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a81a:	d10c      	bne.n	800a836 <vTaskStartScheduler+0xbe>
	__asm volatile
 800a81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a820:	b672      	cpsid	i
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	b662      	cpsie	i
 800a830:	60fb      	str	r3, [r7, #12]
}
 800a832:	bf00      	nop
 800a834:	e7fe      	b.n	800a834 <vTaskStartScheduler+0xbc>
}
 800a836:	bf00      	nop
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	0801b120 	.word	0x0801b120
 800a844:	0800aec9 	.word	0x0800aec9
 800a848:	20000d20 	.word	0x20000d20
 800a84c:	20000828 	.word	0x20000828
 800a850:	2000001c 	.word	0x2000001c
 800a854:	20000d1c 	.word	0x20000d1c
 800a858:	20000d08 	.word	0x20000d08
 800a85c:	20000d00 	.word	0x20000d00

0800a860 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a860:	b480      	push	{r7}
 800a862:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a864:	4b04      	ldr	r3, [pc, #16]	; (800a878 <vTaskSuspendAll+0x18>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	3301      	adds	r3, #1
 800a86a:	4a03      	ldr	r2, [pc, #12]	; (800a878 <vTaskSuspendAll+0x18>)
 800a86c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a86e:	bf00      	nop
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr
 800a878:	20000d24 	.word	0x20000d24

0800a87c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b084      	sub	sp, #16
 800a880:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a882:	2300      	movs	r3, #0
 800a884:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a886:	2300      	movs	r3, #0
 800a888:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a88a:	4b43      	ldr	r3, [pc, #268]	; (800a998 <xTaskResumeAll+0x11c>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10c      	bne.n	800a8ac <xTaskResumeAll+0x30>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	b672      	cpsid	i
 800a898:	f383 8811 	msr	BASEPRI, r3
 800a89c:	f3bf 8f6f 	isb	sy
 800a8a0:	f3bf 8f4f 	dsb	sy
 800a8a4:	b662      	cpsie	i
 800a8a6:	603b      	str	r3, [r7, #0]
}
 800a8a8:	bf00      	nop
 800a8aa:	e7fe      	b.n	800a8aa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a8ac:	f001 fc9e 	bl	800c1ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a8b0:	4b39      	ldr	r3, [pc, #228]	; (800a998 <xTaskResumeAll+0x11c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	4a38      	ldr	r2, [pc, #224]	; (800a998 <xTaskResumeAll+0x11c>)
 800a8b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8ba:	4b37      	ldr	r3, [pc, #220]	; (800a998 <xTaskResumeAll+0x11c>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d162      	bne.n	800a988 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a8c2:	4b36      	ldr	r3, [pc, #216]	; (800a99c <xTaskResumeAll+0x120>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d05e      	beq.n	800a988 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8ca:	e02f      	b.n	800a92c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8cc:	4b34      	ldr	r3, [pc, #208]	; (800a9a0 <xTaskResumeAll+0x124>)
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	3318      	adds	r3, #24
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f7fe fbdd 	bl	8009098 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	3304      	adds	r3, #4
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fe fbd8 	bl	8009098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ec:	4b2d      	ldr	r3, [pc, #180]	; (800a9a4 <xTaskResumeAll+0x128>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d903      	bls.n	800a8fc <xTaskResumeAll+0x80>
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f8:	4a2a      	ldr	r2, [pc, #168]	; (800a9a4 <xTaskResumeAll+0x128>)
 800a8fa:	6013      	str	r3, [r2, #0]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a900:	4613      	mov	r3, r2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	4413      	add	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4a27      	ldr	r2, [pc, #156]	; (800a9a8 <xTaskResumeAll+0x12c>)
 800a90a:	441a      	add	r2, r3
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	3304      	adds	r3, #4
 800a910:	4619      	mov	r1, r3
 800a912:	4610      	mov	r0, r2
 800a914:	f7fe fb63 	bl	8008fde <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a91c:	4b23      	ldr	r3, [pc, #140]	; (800a9ac <xTaskResumeAll+0x130>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a922:	429a      	cmp	r2, r3
 800a924:	d302      	bcc.n	800a92c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800a926:	4b22      	ldr	r3, [pc, #136]	; (800a9b0 <xTaskResumeAll+0x134>)
 800a928:	2201      	movs	r2, #1
 800a92a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a92c:	4b1c      	ldr	r3, [pc, #112]	; (800a9a0 <xTaskResumeAll+0x124>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1cb      	bne.n	800a8cc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d001      	beq.n	800a93e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a93a:	f000 fb81 	bl	800b040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a93e:	4b1d      	ldr	r3, [pc, #116]	; (800a9b4 <xTaskResumeAll+0x138>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d010      	beq.n	800a96c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a94a:	f000 f859 	bl	800aa00 <xTaskIncrementTick>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d002      	beq.n	800a95a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800a954:	4b16      	ldr	r3, [pc, #88]	; (800a9b0 <xTaskResumeAll+0x134>)
 800a956:	2201      	movs	r2, #1
 800a958:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	3b01      	subs	r3, #1
 800a95e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1f1      	bne.n	800a94a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800a966:	4b13      	ldr	r3, [pc, #76]	; (800a9b4 <xTaskResumeAll+0x138>)
 800a968:	2200      	movs	r2, #0
 800a96a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a96c:	4b10      	ldr	r3, [pc, #64]	; (800a9b0 <xTaskResumeAll+0x134>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d009      	beq.n	800a988 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a974:	2301      	movs	r3, #1
 800a976:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a978:	4b0f      	ldr	r3, [pc, #60]	; (800a9b8 <xTaskResumeAll+0x13c>)
 800a97a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a97e:	601a      	str	r2, [r3, #0]
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a988:	f001 fc64 	bl	800c254 <vPortExitCritical>

	return xAlreadyYielded;
 800a98c:	68bb      	ldr	r3, [r7, #8]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	20000d24 	.word	0x20000d24
 800a99c:	20000cfc 	.word	0x20000cfc
 800a9a0:	20000cbc 	.word	0x20000cbc
 800a9a4:	20000d04 	.word	0x20000d04
 800a9a8:	2000082c 	.word	0x2000082c
 800a9ac:	20000828 	.word	0x20000828
 800a9b0:	20000d10 	.word	0x20000d10
 800a9b4:	20000d0c 	.word	0x20000d0c
 800a9b8:	e000ed04 	.word	0xe000ed04

0800a9bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b083      	sub	sp, #12
 800a9c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a9c2:	4b05      	ldr	r3, [pc, #20]	; (800a9d8 <xTaskGetTickCount+0x1c>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a9c8:	687b      	ldr	r3, [r7, #4]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	370c      	adds	r7, #12
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	20000d00 	.word	0x20000d00

0800a9dc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9e2:	f001 fceb 	bl	800c3bc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a9ea:	4b04      	ldr	r3, [pc, #16]	; (800a9fc <xTaskGetTickCountFromISR+0x20>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9f0:	683b      	ldr	r3, [r7, #0]
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3708      	adds	r7, #8
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	20000d00 	.word	0x20000d00

0800aa00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa06:	2300      	movs	r3, #0
 800aa08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa0a:	4b50      	ldr	r3, [pc, #320]	; (800ab4c <xTaskIncrementTick+0x14c>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f040 808b 	bne.w	800ab2a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa14:	4b4e      	ldr	r3, [pc, #312]	; (800ab50 <xTaskIncrementTick+0x150>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa1c:	4a4c      	ldr	r2, [pc, #304]	; (800ab50 <xTaskIncrementTick+0x150>)
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d122      	bne.n	800aa6e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa28:	4b4a      	ldr	r3, [pc, #296]	; (800ab54 <xTaskIncrementTick+0x154>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d00c      	beq.n	800aa4c <xTaskIncrementTick+0x4c>
	__asm volatile
 800aa32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa36:	b672      	cpsid	i
 800aa38:	f383 8811 	msr	BASEPRI, r3
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	b662      	cpsie	i
 800aa46:	603b      	str	r3, [r7, #0]
}
 800aa48:	bf00      	nop
 800aa4a:	e7fe      	b.n	800aa4a <xTaskIncrementTick+0x4a>
 800aa4c:	4b41      	ldr	r3, [pc, #260]	; (800ab54 <xTaskIncrementTick+0x154>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	60fb      	str	r3, [r7, #12]
 800aa52:	4b41      	ldr	r3, [pc, #260]	; (800ab58 <xTaskIncrementTick+0x158>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a3f      	ldr	r2, [pc, #252]	; (800ab54 <xTaskIncrementTick+0x154>)
 800aa58:	6013      	str	r3, [r2, #0]
 800aa5a:	4a3f      	ldr	r2, [pc, #252]	; (800ab58 <xTaskIncrementTick+0x158>)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6013      	str	r3, [r2, #0]
 800aa60:	4b3e      	ldr	r3, [pc, #248]	; (800ab5c <xTaskIncrementTick+0x15c>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	3301      	adds	r3, #1
 800aa66:	4a3d      	ldr	r2, [pc, #244]	; (800ab5c <xTaskIncrementTick+0x15c>)
 800aa68:	6013      	str	r3, [r2, #0]
 800aa6a:	f000 fae9 	bl	800b040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa6e:	4b3c      	ldr	r3, [pc, #240]	; (800ab60 <xTaskIncrementTick+0x160>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d349      	bcc.n	800ab0c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa78:	4b36      	ldr	r3, [pc, #216]	; (800ab54 <xTaskIncrementTick+0x154>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d104      	bne.n	800aa8c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa82:	4b37      	ldr	r3, [pc, #220]	; (800ab60 <xTaskIncrementTick+0x160>)
 800aa84:	f04f 32ff 	mov.w	r2, #4294967295
 800aa88:	601a      	str	r2, [r3, #0]
					break;
 800aa8a:	e03f      	b.n	800ab0c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa8c:	4b31      	ldr	r3, [pc, #196]	; (800ab54 <xTaskIncrementTick+0x154>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aa9c:	693a      	ldr	r2, [r7, #16]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d203      	bcs.n	800aaac <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aaa4:	4a2e      	ldr	r2, [pc, #184]	; (800ab60 <xTaskIncrementTick+0x160>)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800aaaa:	e02f      	b.n	800ab0c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	3304      	adds	r3, #4
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7fe faf1 	bl	8009098 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d004      	beq.n	800aac8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	3318      	adds	r3, #24
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe fae8 	bl	8009098 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aacc:	4b25      	ldr	r3, [pc, #148]	; (800ab64 <xTaskIncrementTick+0x164>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d903      	bls.n	800aadc <xTaskIncrementTick+0xdc>
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad8:	4a22      	ldr	r2, [pc, #136]	; (800ab64 <xTaskIncrementTick+0x164>)
 800aada:	6013      	str	r3, [r2, #0]
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae0:	4613      	mov	r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4413      	add	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	4a1f      	ldr	r2, [pc, #124]	; (800ab68 <xTaskIncrementTick+0x168>)
 800aaea:	441a      	add	r2, r3
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	3304      	adds	r3, #4
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	f7fe fa73 	bl	8008fde <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aafc:	4b1b      	ldr	r3, [pc, #108]	; (800ab6c <xTaskIncrementTick+0x16c>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d3b8      	bcc.n	800aa78 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800ab06:	2301      	movs	r3, #1
 800ab08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab0a:	e7b5      	b.n	800aa78 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab0c:	4b17      	ldr	r3, [pc, #92]	; (800ab6c <xTaskIncrementTick+0x16c>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab12:	4915      	ldr	r1, [pc, #84]	; (800ab68 <xTaskIncrementTick+0x168>)
 800ab14:	4613      	mov	r3, r2
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	4413      	add	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	440b      	add	r3, r1
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d907      	bls.n	800ab34 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800ab24:	2301      	movs	r3, #1
 800ab26:	617b      	str	r3, [r7, #20]
 800ab28:	e004      	b.n	800ab34 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ab2a:	4b11      	ldr	r3, [pc, #68]	; (800ab70 <xTaskIncrementTick+0x170>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	4a0f      	ldr	r2, [pc, #60]	; (800ab70 <xTaskIncrementTick+0x170>)
 800ab32:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ab34:	4b0f      	ldr	r3, [pc, #60]	; (800ab74 <xTaskIncrementTick+0x174>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d001      	beq.n	800ab40 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ab40:	697b      	ldr	r3, [r7, #20]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3718      	adds	r7, #24
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	20000d24 	.word	0x20000d24
 800ab50:	20000d00 	.word	0x20000d00
 800ab54:	20000cb4 	.word	0x20000cb4
 800ab58:	20000cb8 	.word	0x20000cb8
 800ab5c:	20000d14 	.word	0x20000d14
 800ab60:	20000d1c 	.word	0x20000d1c
 800ab64:	20000d04 	.word	0x20000d04
 800ab68:	2000082c 	.word	0x2000082c
 800ab6c:	20000828 	.word	0x20000828
 800ab70:	20000d0c 	.word	0x20000d0c
 800ab74:	20000d10 	.word	0x20000d10

0800ab78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab7e:	4b2b      	ldr	r3, [pc, #172]	; (800ac2c <vTaskSwitchContext+0xb4>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d003      	beq.n	800ab8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ab86:	4b2a      	ldr	r3, [pc, #168]	; (800ac30 <vTaskSwitchContext+0xb8>)
 800ab88:	2201      	movs	r2, #1
 800ab8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ab8c:	e048      	b.n	800ac20 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800ab8e:	4b28      	ldr	r3, [pc, #160]	; (800ac30 <vTaskSwitchContext+0xb8>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab94:	4b27      	ldr	r3, [pc, #156]	; (800ac34 <vTaskSwitchContext+0xbc>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	60fb      	str	r3, [r7, #12]
 800ab9a:	e012      	b.n	800abc2 <vTaskSwitchContext+0x4a>
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10c      	bne.n	800abbc <vTaskSwitchContext+0x44>
	__asm volatile
 800aba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba6:	b672      	cpsid	i
 800aba8:	f383 8811 	msr	BASEPRI, r3
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	b662      	cpsie	i
 800abb6:	607b      	str	r3, [r7, #4]
}
 800abb8:	bf00      	nop
 800abba:	e7fe      	b.n	800abba <vTaskSwitchContext+0x42>
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	3b01      	subs	r3, #1
 800abc0:	60fb      	str	r3, [r7, #12]
 800abc2:	491d      	ldr	r1, [pc, #116]	; (800ac38 <vTaskSwitchContext+0xc0>)
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	4613      	mov	r3, r2
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4413      	add	r3, r2
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	440b      	add	r3, r1
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d0e2      	beq.n	800ab9c <vTaskSwitchContext+0x24>
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	4613      	mov	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4413      	add	r3, r2
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4a15      	ldr	r2, [pc, #84]	; (800ac38 <vTaskSwitchContext+0xc0>)
 800abe2:	4413      	add	r3, r2
 800abe4:	60bb      	str	r3, [r7, #8]
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	685a      	ldr	r2, [r3, #4]
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	605a      	str	r2, [r3, #4]
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	685a      	ldr	r2, [r3, #4]
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	3308      	adds	r3, #8
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d104      	bne.n	800ac06 <vTaskSwitchContext+0x8e>
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	605a      	str	r2, [r3, #4]
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	4a0b      	ldr	r2, [pc, #44]	; (800ac3c <vTaskSwitchContext+0xc4>)
 800ac0e:	6013      	str	r3, [r2, #0]
 800ac10:	4a08      	ldr	r2, [pc, #32]	; (800ac34 <vTaskSwitchContext+0xbc>)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ac16:	4b09      	ldr	r3, [pc, #36]	; (800ac3c <vTaskSwitchContext+0xc4>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	3354      	adds	r3, #84	; 0x54
 800ac1c:	4a08      	ldr	r2, [pc, #32]	; (800ac40 <vTaskSwitchContext+0xc8>)
 800ac1e:	6013      	str	r3, [r2, #0]
}
 800ac20:	bf00      	nop
 800ac22:	3714      	adds	r7, #20
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr
 800ac2c:	20000d24 	.word	0x20000d24
 800ac30:	20000d10 	.word	0x20000d10
 800ac34:	20000d04 	.word	0x20000d04
 800ac38:	2000082c 	.word	0x2000082c
 800ac3c:	20000828 	.word	0x20000828
 800ac40:	2000001c 	.word	0x2000001c

0800ac44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d10c      	bne.n	800ac6e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800ac54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac58:	b672      	cpsid	i
 800ac5a:	f383 8811 	msr	BASEPRI, r3
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	b662      	cpsie	i
 800ac68:	60fb      	str	r3, [r7, #12]
}
 800ac6a:	bf00      	nop
 800ac6c:	e7fe      	b.n	800ac6c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac6e:	4b07      	ldr	r3, [pc, #28]	; (800ac8c <vTaskPlaceOnEventList+0x48>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	3318      	adds	r3, #24
 800ac74:	4619      	mov	r1, r3
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f7fe f9d5 	bl	8009026 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac7c:	2101      	movs	r1, #1
 800ac7e:	6838      	ldr	r0, [r7, #0]
 800ac80:	f000 fd9c 	bl	800b7bc <prvAddCurrentTaskToDelayedList>
}
 800ac84:	bf00      	nop
 800ac86:	3710      	adds	r7, #16
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	20000828 	.word	0x20000828

0800ac90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b086      	sub	sp, #24
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10c      	bne.n	800acbc <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800aca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca6:	b672      	cpsid	i
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	b662      	cpsie	i
 800acb6:	617b      	str	r3, [r7, #20]
}
 800acb8:	bf00      	nop
 800acba:	e7fe      	b.n	800acba <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acbc:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <vTaskPlaceOnEventListRestricted+0x58>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	3318      	adds	r3, #24
 800acc2:	4619      	mov	r1, r3
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f7fe f98a 	bl	8008fde <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d002      	beq.n	800acd6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800acd0:	f04f 33ff 	mov.w	r3, #4294967295
 800acd4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800acd6:	6879      	ldr	r1, [r7, #4]
 800acd8:	68b8      	ldr	r0, [r7, #8]
 800acda:	f000 fd6f 	bl	800b7bc <prvAddCurrentTaskToDelayedList>
	}
 800acde:	bf00      	nop
 800ace0:	3718      	adds	r7, #24
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	20000828 	.word	0x20000828

0800acec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b086      	sub	sp, #24
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d10c      	bne.n	800ad1c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800ad02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad06:	b672      	cpsid	i
 800ad08:	f383 8811 	msr	BASEPRI, r3
 800ad0c:	f3bf 8f6f 	isb	sy
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	b662      	cpsie	i
 800ad16:	60fb      	str	r3, [r7, #12]
}
 800ad18:	bf00      	nop
 800ad1a:	e7fe      	b.n	800ad1a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	3318      	adds	r3, #24
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fe f9b9 	bl	8009098 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad26:	4b1e      	ldr	r3, [pc, #120]	; (800ada0 <xTaskRemoveFromEventList+0xb4>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d11d      	bne.n	800ad6a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	3304      	adds	r3, #4
 800ad32:	4618      	mov	r0, r3
 800ad34:	f7fe f9b0 	bl	8009098 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad3c:	4b19      	ldr	r3, [pc, #100]	; (800ada4 <xTaskRemoveFromEventList+0xb8>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d903      	bls.n	800ad4c <xTaskRemoveFromEventList+0x60>
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad48:	4a16      	ldr	r2, [pc, #88]	; (800ada4 <xTaskRemoveFromEventList+0xb8>)
 800ad4a:	6013      	str	r3, [r2, #0]
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad50:	4613      	mov	r3, r2
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	4413      	add	r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4a13      	ldr	r2, [pc, #76]	; (800ada8 <xTaskRemoveFromEventList+0xbc>)
 800ad5a:	441a      	add	r2, r3
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	3304      	adds	r3, #4
 800ad60:	4619      	mov	r1, r3
 800ad62:	4610      	mov	r0, r2
 800ad64:	f7fe f93b 	bl	8008fde <vListInsertEnd>
 800ad68:	e005      	b.n	800ad76 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	3318      	adds	r3, #24
 800ad6e:	4619      	mov	r1, r3
 800ad70:	480e      	ldr	r0, [pc, #56]	; (800adac <xTaskRemoveFromEventList+0xc0>)
 800ad72:	f7fe f934 	bl	8008fde <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad7a:	4b0d      	ldr	r3, [pc, #52]	; (800adb0 <xTaskRemoveFromEventList+0xc4>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d905      	bls.n	800ad90 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ad84:	2301      	movs	r3, #1
 800ad86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ad88:	4b0a      	ldr	r3, [pc, #40]	; (800adb4 <xTaskRemoveFromEventList+0xc8>)
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	601a      	str	r2, [r3, #0]
 800ad8e:	e001      	b.n	800ad94 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800ad90:	2300      	movs	r3, #0
 800ad92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ad94:	697b      	ldr	r3, [r7, #20]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3718      	adds	r7, #24
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	20000d24 	.word	0x20000d24
 800ada4:	20000d04 	.word	0x20000d04
 800ada8:	2000082c 	.word	0x2000082c
 800adac:	20000cbc 	.word	0x20000cbc
 800adb0:	20000828 	.word	0x20000828
 800adb4:	20000d10 	.word	0x20000d10

0800adb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800adc0:	4b06      	ldr	r3, [pc, #24]	; (800addc <vTaskInternalSetTimeOutState+0x24>)
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800adc8:	4b05      	ldr	r3, [pc, #20]	; (800ade0 <vTaskInternalSetTimeOutState+0x28>)
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	605a      	str	r2, [r3, #4]
}
 800add0:	bf00      	nop
 800add2:	370c      	adds	r7, #12
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr
 800addc:	20000d14 	.word	0x20000d14
 800ade0:	20000d00 	.word	0x20000d00

0800ade4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b088      	sub	sp, #32
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10c      	bne.n	800ae0e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf8:	b672      	cpsid	i
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	b662      	cpsie	i
 800ae08:	613b      	str	r3, [r7, #16]
}
 800ae0a:	bf00      	nop
 800ae0c:	e7fe      	b.n	800ae0c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10c      	bne.n	800ae2e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ae14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae18:	b672      	cpsid	i
 800ae1a:	f383 8811 	msr	BASEPRI, r3
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	f3bf 8f4f 	dsb	sy
 800ae26:	b662      	cpsie	i
 800ae28:	60fb      	str	r3, [r7, #12]
}
 800ae2a:	bf00      	nop
 800ae2c:	e7fe      	b.n	800ae2c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ae2e:	f001 f9dd 	bl	800c1ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae32:	4b1d      	ldr	r3, [pc, #116]	; (800aea8 <xTaskCheckForTimeOut+0xc4>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	69ba      	ldr	r2, [r7, #24]
 800ae3e:	1ad3      	subs	r3, r2, r3
 800ae40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae4a:	d102      	bne.n	800ae52 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	61fb      	str	r3, [r7, #28]
 800ae50:	e023      	b.n	800ae9a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	4b15      	ldr	r3, [pc, #84]	; (800aeac <xTaskCheckForTimeOut+0xc8>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d007      	beq.n	800ae6e <xTaskCheckForTimeOut+0x8a>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	685b      	ldr	r3, [r3, #4]
 800ae62:	69ba      	ldr	r2, [r7, #24]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d302      	bcc.n	800ae6e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae68:	2301      	movs	r3, #1
 800ae6a:	61fb      	str	r3, [r7, #28]
 800ae6c:	e015      	b.n	800ae9a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	697a      	ldr	r2, [r7, #20]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d20b      	bcs.n	800ae90 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	1ad2      	subs	r2, r2, r3
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7ff ff97 	bl	800adb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	61fb      	str	r3, [r7, #28]
 800ae8e:	e004      	b.n	800ae9a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ae96:	2301      	movs	r3, #1
 800ae98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ae9a:	f001 f9db 	bl	800c254 <vPortExitCritical>

	return xReturn;
 800ae9e:	69fb      	ldr	r3, [r7, #28]
}
 800aea0:	4618      	mov	r0, r3
 800aea2:	3720      	adds	r7, #32
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	20000d00 	.word	0x20000d00
 800aeac:	20000d14 	.word	0x20000d14

0800aeb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aeb4:	4b03      	ldr	r3, [pc, #12]	; (800aec4 <vTaskMissedYield+0x14>)
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	601a      	str	r2, [r3, #0]
}
 800aeba:	bf00      	nop
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr
 800aec4:	20000d10 	.word	0x20000d10

0800aec8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aed0:	f000 f852 	bl	800af78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aed4:	4b06      	ldr	r3, [pc, #24]	; (800aef0 <prvIdleTask+0x28>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d9f9      	bls.n	800aed0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aedc:	4b05      	ldr	r3, [pc, #20]	; (800aef4 <prvIdleTask+0x2c>)
 800aede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aeec:	e7f0      	b.n	800aed0 <prvIdleTask+0x8>
 800aeee:	bf00      	nop
 800aef0:	2000082c 	.word	0x2000082c
 800aef4:	e000ed04 	.word	0xe000ed04

0800aef8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aefe:	2300      	movs	r3, #0
 800af00:	607b      	str	r3, [r7, #4]
 800af02:	e00c      	b.n	800af1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af04:	687a      	ldr	r2, [r7, #4]
 800af06:	4613      	mov	r3, r2
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	4413      	add	r3, r2
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	4a12      	ldr	r2, [pc, #72]	; (800af58 <prvInitialiseTaskLists+0x60>)
 800af10:	4413      	add	r3, r2
 800af12:	4618      	mov	r0, r3
 800af14:	f7fe f836 	bl	8008f84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	3301      	adds	r3, #1
 800af1c:	607b      	str	r3, [r7, #4]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2b37      	cmp	r3, #55	; 0x37
 800af22:	d9ef      	bls.n	800af04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af24:	480d      	ldr	r0, [pc, #52]	; (800af5c <prvInitialiseTaskLists+0x64>)
 800af26:	f7fe f82d 	bl	8008f84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af2a:	480d      	ldr	r0, [pc, #52]	; (800af60 <prvInitialiseTaskLists+0x68>)
 800af2c:	f7fe f82a 	bl	8008f84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af30:	480c      	ldr	r0, [pc, #48]	; (800af64 <prvInitialiseTaskLists+0x6c>)
 800af32:	f7fe f827 	bl	8008f84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af36:	480c      	ldr	r0, [pc, #48]	; (800af68 <prvInitialiseTaskLists+0x70>)
 800af38:	f7fe f824 	bl	8008f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af3c:	480b      	ldr	r0, [pc, #44]	; (800af6c <prvInitialiseTaskLists+0x74>)
 800af3e:	f7fe f821 	bl	8008f84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af42:	4b0b      	ldr	r3, [pc, #44]	; (800af70 <prvInitialiseTaskLists+0x78>)
 800af44:	4a05      	ldr	r2, [pc, #20]	; (800af5c <prvInitialiseTaskLists+0x64>)
 800af46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af48:	4b0a      	ldr	r3, [pc, #40]	; (800af74 <prvInitialiseTaskLists+0x7c>)
 800af4a:	4a05      	ldr	r2, [pc, #20]	; (800af60 <prvInitialiseTaskLists+0x68>)
 800af4c:	601a      	str	r2, [r3, #0]
}
 800af4e:	bf00      	nop
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	2000082c 	.word	0x2000082c
 800af5c:	20000c8c 	.word	0x20000c8c
 800af60:	20000ca0 	.word	0x20000ca0
 800af64:	20000cbc 	.word	0x20000cbc
 800af68:	20000cd0 	.word	0x20000cd0
 800af6c:	20000ce8 	.word	0x20000ce8
 800af70:	20000cb4 	.word	0x20000cb4
 800af74:	20000cb8 	.word	0x20000cb8

0800af78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af7e:	e019      	b.n	800afb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800af80:	f001 f934 	bl	800c1ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af84:	4b10      	ldr	r3, [pc, #64]	; (800afc8 <prvCheckTasksWaitingTermination+0x50>)
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	3304      	adds	r3, #4
 800af90:	4618      	mov	r0, r3
 800af92:	f7fe f881 	bl	8009098 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800af96:	4b0d      	ldr	r3, [pc, #52]	; (800afcc <prvCheckTasksWaitingTermination+0x54>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	3b01      	subs	r3, #1
 800af9c:	4a0b      	ldr	r2, [pc, #44]	; (800afcc <prvCheckTasksWaitingTermination+0x54>)
 800af9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800afa0:	4b0b      	ldr	r3, [pc, #44]	; (800afd0 <prvCheckTasksWaitingTermination+0x58>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	4a0a      	ldr	r2, [pc, #40]	; (800afd0 <prvCheckTasksWaitingTermination+0x58>)
 800afa8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800afaa:	f001 f953 	bl	800c254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 f810 	bl	800afd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afb4:	4b06      	ldr	r3, [pc, #24]	; (800afd0 <prvCheckTasksWaitingTermination+0x58>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1e1      	bne.n	800af80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800afbc:	bf00      	nop
 800afbe:	bf00      	nop
 800afc0:	3708      	adds	r7, #8
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	20000cd0 	.word	0x20000cd0
 800afcc:	20000cfc 	.word	0x20000cfc
 800afd0:	20000ce4 	.word	0x20000ce4

0800afd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3354      	adds	r3, #84	; 0x54
 800afe0:	4618      	mov	r0, r3
 800afe2:	f00f f935 	bl	801a250 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800afec:	2b00      	cmp	r3, #0
 800afee:	d108      	bne.n	800b002 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff4:	4618      	mov	r0, r3
 800aff6:	f001 faef 	bl	800c5d8 <vPortFree>
				vPortFree( pxTCB );
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f001 faec 	bl	800c5d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b000:	e01a      	b.n	800b038 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d103      	bne.n	800b014 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f001 fae3 	bl	800c5d8 <vPortFree>
	}
 800b012:	e011      	b.n	800b038 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d00c      	beq.n	800b038 <prvDeleteTCB+0x64>
	__asm volatile
 800b01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b022:	b672      	cpsid	i
 800b024:	f383 8811 	msr	BASEPRI, r3
 800b028:	f3bf 8f6f 	isb	sy
 800b02c:	f3bf 8f4f 	dsb	sy
 800b030:	b662      	cpsie	i
 800b032:	60fb      	str	r3, [r7, #12]
}
 800b034:	bf00      	nop
 800b036:	e7fe      	b.n	800b036 <prvDeleteTCB+0x62>
	}
 800b038:	bf00      	nop
 800b03a:	3710      	adds	r7, #16
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b046:	4b0c      	ldr	r3, [pc, #48]	; (800b078 <prvResetNextTaskUnblockTime+0x38>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d104      	bne.n	800b05a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b050:	4b0a      	ldr	r3, [pc, #40]	; (800b07c <prvResetNextTaskUnblockTime+0x3c>)
 800b052:	f04f 32ff 	mov.w	r2, #4294967295
 800b056:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b058:	e008      	b.n	800b06c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b05a:	4b07      	ldr	r3, [pc, #28]	; (800b078 <prvResetNextTaskUnblockTime+0x38>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	68db      	ldr	r3, [r3, #12]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	4a04      	ldr	r2, [pc, #16]	; (800b07c <prvResetNextTaskUnblockTime+0x3c>)
 800b06a:	6013      	str	r3, [r2, #0]
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	20000cb4 	.word	0x20000cb4
 800b07c:	20000d1c 	.word	0x20000d1c

0800b080 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b086:	4b05      	ldr	r3, [pc, #20]	; (800b09c <xTaskGetCurrentTaskHandle+0x1c>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b08c:	687b      	ldr	r3, [r7, #4]
	}
 800b08e:	4618      	mov	r0, r3
 800b090:	370c      	adds	r7, #12
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop
 800b09c:	20000828 	.word	0x20000828

0800b0a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b0a6:	4b0b      	ldr	r3, [pc, #44]	; (800b0d4 <xTaskGetSchedulerState+0x34>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d102      	bne.n	800b0b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	607b      	str	r3, [r7, #4]
 800b0b2:	e008      	b.n	800b0c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0b4:	4b08      	ldr	r3, [pc, #32]	; (800b0d8 <xTaskGetSchedulerState+0x38>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d102      	bne.n	800b0c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b0bc:	2302      	movs	r3, #2
 800b0be:	607b      	str	r3, [r7, #4]
 800b0c0:	e001      	b.n	800b0c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b0c6:	687b      	ldr	r3, [r7, #4]
	}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	370c      	adds	r7, #12
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr
 800b0d4:	20000d08 	.word	0x20000d08
 800b0d8:	20000d24 	.word	0x20000d24

0800b0dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d051      	beq.n	800b196 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f6:	4b2a      	ldr	r3, [pc, #168]	; (800b1a0 <xTaskPriorityInherit+0xc4>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d241      	bcs.n	800b184 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	2b00      	cmp	r3, #0
 800b106:	db06      	blt.n	800b116 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b108:	4b25      	ldr	r3, [pc, #148]	; (800b1a0 <xTaskPriorityInherit+0xc4>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	6959      	ldr	r1, [r3, #20]
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b11e:	4613      	mov	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	4413      	add	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4a1f      	ldr	r2, [pc, #124]	; (800b1a4 <xTaskPriorityInherit+0xc8>)
 800b128:	4413      	add	r3, r2
 800b12a:	4299      	cmp	r1, r3
 800b12c:	d122      	bne.n	800b174 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	3304      	adds	r3, #4
 800b132:	4618      	mov	r0, r3
 800b134:	f7fd ffb0 	bl	8009098 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b138:	4b19      	ldr	r3, [pc, #100]	; (800b1a0 <xTaskPriorityInherit+0xc4>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b146:	4b18      	ldr	r3, [pc, #96]	; (800b1a8 <xTaskPriorityInherit+0xcc>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d903      	bls.n	800b156 <xTaskPriorityInherit+0x7a>
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b152:	4a15      	ldr	r2, [pc, #84]	; (800b1a8 <xTaskPriorityInherit+0xcc>)
 800b154:	6013      	str	r3, [r2, #0]
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b15a:	4613      	mov	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4a10      	ldr	r2, [pc, #64]	; (800b1a4 <xTaskPriorityInherit+0xc8>)
 800b164:	441a      	add	r2, r3
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	3304      	adds	r3, #4
 800b16a:	4619      	mov	r1, r3
 800b16c:	4610      	mov	r0, r2
 800b16e:	f7fd ff36 	bl	8008fde <vListInsertEnd>
 800b172:	e004      	b.n	800b17e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b174:	4b0a      	ldr	r3, [pc, #40]	; (800b1a0 <xTaskPriorityInherit+0xc4>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b17e:	2301      	movs	r3, #1
 800b180:	60fb      	str	r3, [r7, #12]
 800b182:	e008      	b.n	800b196 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b188:	4b05      	ldr	r3, [pc, #20]	; (800b1a0 <xTaskPriorityInherit+0xc4>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18e:	429a      	cmp	r2, r3
 800b190:	d201      	bcs.n	800b196 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b192:	2301      	movs	r3, #1
 800b194:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b196:	68fb      	ldr	r3, [r7, #12]
	}
 800b198:	4618      	mov	r0, r3
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	20000828 	.word	0x20000828
 800b1a4:	2000082c 	.word	0x2000082c
 800b1a8:	20000d04 	.word	0x20000d04

0800b1ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b086      	sub	sp, #24
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d05a      	beq.n	800b278 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b1c2:	4b30      	ldr	r3, [pc, #192]	; (800b284 <xTaskPriorityDisinherit+0xd8>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	693a      	ldr	r2, [r7, #16]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d00c      	beq.n	800b1e6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d0:	b672      	cpsid	i
 800b1d2:	f383 8811 	msr	BASEPRI, r3
 800b1d6:	f3bf 8f6f 	isb	sy
 800b1da:	f3bf 8f4f 	dsb	sy
 800b1de:	b662      	cpsie	i
 800b1e0:	60fb      	str	r3, [r7, #12]
}
 800b1e2:	bf00      	nop
 800b1e4:	e7fe      	b.n	800b1e4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10c      	bne.n	800b208 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f2:	b672      	cpsid	i
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	b662      	cpsie	i
 800b202:	60bb      	str	r3, [r7, #8]
}
 800b204:	bf00      	nop
 800b206:	e7fe      	b.n	800b206 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b20c:	1e5a      	subs	r2, r3, #1
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d02c      	beq.n	800b278 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b222:	2b00      	cmp	r3, #0
 800b224:	d128      	bne.n	800b278 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	3304      	adds	r3, #4
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7fd ff34 	bl	8009098 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b248:	4b0f      	ldr	r3, [pc, #60]	; (800b288 <xTaskPriorityDisinherit+0xdc>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d903      	bls.n	800b258 <xTaskPriorityDisinherit+0xac>
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b254:	4a0c      	ldr	r2, [pc, #48]	; (800b288 <xTaskPriorityDisinherit+0xdc>)
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b25c:	4613      	mov	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4413      	add	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4a09      	ldr	r2, [pc, #36]	; (800b28c <xTaskPriorityDisinherit+0xe0>)
 800b266:	441a      	add	r2, r3
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	3304      	adds	r3, #4
 800b26c:	4619      	mov	r1, r3
 800b26e:	4610      	mov	r0, r2
 800b270:	f7fd feb5 	bl	8008fde <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b274:	2301      	movs	r3, #1
 800b276:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b278:	697b      	ldr	r3, [r7, #20]
	}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3718      	adds	r7, #24
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	20000828 	.word	0x20000828
 800b288:	20000d04 	.word	0x20000d04
 800b28c:	2000082c 	.word	0x2000082c

0800b290 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b290:	b580      	push	{r7, lr}
 800b292:	b088      	sub	sp, #32
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d06e      	beq.n	800b386 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d10c      	bne.n	800b2ca <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800b2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b4:	b672      	cpsid	i
 800b2b6:	f383 8811 	msr	BASEPRI, r3
 800b2ba:	f3bf 8f6f 	isb	sy
 800b2be:	f3bf 8f4f 	dsb	sy
 800b2c2:	b662      	cpsie	i
 800b2c4:	60fb      	str	r3, [r7, #12]
}
 800b2c6:	bf00      	nop
 800b2c8:	e7fe      	b.n	800b2c8 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2ce:	683a      	ldr	r2, [r7, #0]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d902      	bls.n	800b2da <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	61fb      	str	r3, [r7, #28]
 800b2d8:	e002      	b.n	800b2e0 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2de:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e4:	69fa      	ldr	r2, [r7, #28]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d04d      	beq.n	800b386 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ee:	697a      	ldr	r2, [r7, #20]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d148      	bne.n	800b386 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b2f4:	4b26      	ldr	r3, [pc, #152]	; (800b390 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	69ba      	ldr	r2, [r7, #24]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d10c      	bne.n	800b318 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800b2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b302:	b672      	cpsid	i
 800b304:	f383 8811 	msr	BASEPRI, r3
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	b662      	cpsie	i
 800b312:	60bb      	str	r3, [r7, #8]
}
 800b314:	bf00      	nop
 800b316:	e7fe      	b.n	800b316 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	69fa      	ldr	r2, [r7, #28]
 800b322:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	699b      	ldr	r3, [r3, #24]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	db04      	blt.n	800b336 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	6959      	ldr	r1, [r3, #20]
 800b33a:	693a      	ldr	r2, [r7, #16]
 800b33c:	4613      	mov	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4413      	add	r3, r2
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	4a13      	ldr	r2, [pc, #76]	; (800b394 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b346:	4413      	add	r3, r2
 800b348:	4299      	cmp	r1, r3
 800b34a:	d11c      	bne.n	800b386 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	3304      	adds	r3, #4
 800b350:	4618      	mov	r0, r3
 800b352:	f7fd fea1 	bl	8009098 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b35a:	4b0f      	ldr	r3, [pc, #60]	; (800b398 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d903      	bls.n	800b36a <vTaskPriorityDisinheritAfterTimeout+0xda>
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b366:	4a0c      	ldr	r2, [pc, #48]	; (800b398 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800b368:	6013      	str	r3, [r2, #0]
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b36e:	4613      	mov	r3, r2
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	4413      	add	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4a07      	ldr	r2, [pc, #28]	; (800b394 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b378:	441a      	add	r2, r3
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	3304      	adds	r3, #4
 800b37e:	4619      	mov	r1, r3
 800b380:	4610      	mov	r0, r2
 800b382:	f7fd fe2c 	bl	8008fde <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b386:	bf00      	nop
 800b388:	3720      	adds	r7, #32
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	20000828 	.word	0x20000828
 800b394:	2000082c 	.word	0x2000082c
 800b398:	20000d04 	.word	0x20000d04

0800b39c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b39c:	b480      	push	{r7}
 800b39e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b3a0:	4b07      	ldr	r3, [pc, #28]	; (800b3c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d004      	beq.n	800b3b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b3a8:	4b05      	ldr	r3, [pc, #20]	; (800b3c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3ae:	3201      	adds	r2, #1
 800b3b0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b3b2:	4b03      	ldr	r3, [pc, #12]	; (800b3c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
	}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	20000828 	.word	0x20000828

0800b3c4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800b3ce:	f000 ff0d 	bl	800c1ec <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800b3d2:	4b20      	ldr	r3, [pc, #128]	; (800b454 <ulTaskNotifyTake+0x90>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d113      	bne.n	800b406 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b3de:	4b1d      	ldr	r3, [pc, #116]	; (800b454 <ulTaskNotifyTake+0x90>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d00b      	beq.n	800b406 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b3ee:	2101      	movs	r1, #1
 800b3f0:	6838      	ldr	r0, [r7, #0]
 800b3f2:	f000 f9e3 	bl	800b7bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b3f6:	4b18      	ldr	r3, [pc, #96]	; (800b458 <ulTaskNotifyTake+0x94>)
 800b3f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b406:	f000 ff25 	bl	800c254 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b40a:	f000 feef 	bl	800c1ec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800b40e:	4b11      	ldr	r3, [pc, #68]	; (800b454 <ulTaskNotifyTake+0x90>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b416:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00e      	beq.n	800b43c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d005      	beq.n	800b430 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800b424:	4b0b      	ldr	r3, [pc, #44]	; (800b454 <ulTaskNotifyTake+0x90>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2200      	movs	r2, #0
 800b42a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 800b42e:	e005      	b.n	800b43c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800b430:	4b08      	ldr	r3, [pc, #32]	; (800b454 <ulTaskNotifyTake+0x90>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	3a01      	subs	r2, #1
 800b438:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b43c:	4b05      	ldr	r3, [pc, #20]	; (800b454 <ulTaskNotifyTake+0x90>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2200      	movs	r2, #0
 800b442:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800b446:	f000 ff05 	bl	800c254 <vPortExitCritical>

		return ulReturn;
 800b44a:	68fb      	ldr	r3, [r7, #12]
	}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}
 800b454:	20000828 	.word	0x20000828
 800b458:	e000ed04 	.word	0xe000ed04

0800b45c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08a      	sub	sp, #40	; 0x28
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	603b      	str	r3, [r7, #0]
 800b468:	4613      	mov	r3, r2
 800b46a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800b46c:	2301      	movs	r3, #1
 800b46e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10c      	bne.n	800b490 <xTaskGenericNotify+0x34>
	__asm volatile
 800b476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47a:	b672      	cpsid	i
 800b47c:	f383 8811 	msr	BASEPRI, r3
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	b662      	cpsie	i
 800b48a:	61bb      	str	r3, [r7, #24]
}
 800b48c:	bf00      	nop
 800b48e:	e7fe      	b.n	800b48e <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800b494:	f000 feaa 	bl	800c1ec <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d004      	beq.n	800b4a8 <xTaskGenericNotify+0x4c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b49e:	6a3b      	ldr	r3, [r7, #32]
 800b4a0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b4a8:	6a3b      	ldr	r3, [r7, #32]
 800b4aa:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b4ae:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b4b0:	6a3b      	ldr	r3, [r7, #32]
 800b4b2:	2202      	movs	r2, #2
 800b4b4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800b4b8:	79fb      	ldrb	r3, [r7, #7]
 800b4ba:	2b04      	cmp	r3, #4
 800b4bc:	d82d      	bhi.n	800b51a <xTaskGenericNotify+0xbe>
 800b4be:	a201      	add	r2, pc, #4	; (adr r2, 800b4c4 <xTaskGenericNotify+0x68>)
 800b4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c4:	0800b541 	.word	0x0800b541
 800b4c8:	0800b4d9 	.word	0x0800b4d9
 800b4cc:	0800b4eb 	.word	0x0800b4eb
 800b4d0:	0800b4fb 	.word	0x0800b4fb
 800b4d4:	0800b505 	.word	0x0800b505
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b4d8:	6a3b      	ldr	r3, [r7, #32]
 800b4da:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	431a      	orrs	r2, r3
 800b4e2:	6a3b      	ldr	r3, [r7, #32]
 800b4e4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b4e8:	e02d      	b.n	800b546 <xTaskGenericNotify+0xea>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b4ea:	6a3b      	ldr	r3, [r7, #32]
 800b4ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b4f0:	1c5a      	adds	r2, r3, #1
 800b4f2:	6a3b      	ldr	r3, [r7, #32]
 800b4f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b4f8:	e025      	b.n	800b546 <xTaskGenericNotify+0xea>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b4fa:	6a3b      	ldr	r3, [r7, #32]
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b502:	e020      	b.n	800b546 <xTaskGenericNotify+0xea>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b504:	7ffb      	ldrb	r3, [r7, #31]
 800b506:	2b02      	cmp	r3, #2
 800b508:	d004      	beq.n	800b514 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b50a:	6a3b      	ldr	r3, [r7, #32]
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b512:	e018      	b.n	800b546 <xTaskGenericNotify+0xea>
						xReturn = pdFAIL;
 800b514:	2300      	movs	r3, #0
 800b516:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b518:	e015      	b.n	800b546 <xTaskGenericNotify+0xea>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b51a:	6a3b      	ldr	r3, [r7, #32]
 800b51c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b524:	d00e      	beq.n	800b544 <xTaskGenericNotify+0xe8>
	__asm volatile
 800b526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52a:	b672      	cpsid	i
 800b52c:	f383 8811 	msr	BASEPRI, r3
 800b530:	f3bf 8f6f 	isb	sy
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	b662      	cpsie	i
 800b53a:	617b      	str	r3, [r7, #20]
}
 800b53c:	bf00      	nop
 800b53e:	e7fe      	b.n	800b53e <xTaskGenericNotify+0xe2>
					break;
 800b540:	bf00      	nop
 800b542:	e000      	b.n	800b546 <xTaskGenericNotify+0xea>

					break;
 800b544:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b546:	7ffb      	ldrb	r3, [r7, #31]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d13c      	bne.n	800b5c6 <xTaskGenericNotify+0x16a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b54c:	6a3b      	ldr	r3, [r7, #32]
 800b54e:	3304      	adds	r3, #4
 800b550:	4618      	mov	r0, r3
 800b552:	f7fd fda1 	bl	8009098 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b556:	6a3b      	ldr	r3, [r7, #32]
 800b558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b55a:	4b1e      	ldr	r3, [pc, #120]	; (800b5d4 <xTaskGenericNotify+0x178>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d903      	bls.n	800b56a <xTaskGenericNotify+0x10e>
 800b562:	6a3b      	ldr	r3, [r7, #32]
 800b564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b566:	4a1b      	ldr	r2, [pc, #108]	; (800b5d4 <xTaskGenericNotify+0x178>)
 800b568:	6013      	str	r3, [r2, #0]
 800b56a:	6a3b      	ldr	r3, [r7, #32]
 800b56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b56e:	4613      	mov	r3, r2
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	4413      	add	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	4a18      	ldr	r2, [pc, #96]	; (800b5d8 <xTaskGenericNotify+0x17c>)
 800b578:	441a      	add	r2, r3
 800b57a:	6a3b      	ldr	r3, [r7, #32]
 800b57c:	3304      	adds	r3, #4
 800b57e:	4619      	mov	r1, r3
 800b580:	4610      	mov	r0, r2
 800b582:	f7fd fd2c 	bl	8008fde <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b586:	6a3b      	ldr	r3, [r7, #32]
 800b588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00c      	beq.n	800b5a8 <xTaskGenericNotify+0x14c>
	__asm volatile
 800b58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b592:	b672      	cpsid	i
 800b594:	f383 8811 	msr	BASEPRI, r3
 800b598:	f3bf 8f6f 	isb	sy
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	b662      	cpsie	i
 800b5a2:	613b      	str	r3, [r7, #16]
}
 800b5a4:	bf00      	nop
 800b5a6:	e7fe      	b.n	800b5a6 <xTaskGenericNotify+0x14a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b5a8:	6a3b      	ldr	r3, [r7, #32]
 800b5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ac:	4b0b      	ldr	r3, [pc, #44]	; (800b5dc <xTaskGenericNotify+0x180>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d907      	bls.n	800b5c6 <xTaskGenericNotify+0x16a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b5b6:	4b0a      	ldr	r3, [pc, #40]	; (800b5e0 <xTaskGenericNotify+0x184>)
 800b5b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5bc:	601a      	str	r2, [r3, #0]
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b5c6:	f000 fe45 	bl	800c254 <vPortExitCritical>

		return xReturn;
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3728      	adds	r7, #40	; 0x28
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	20000d04 	.word	0x20000d04
 800b5d8:	2000082c 	.word	0x2000082c
 800b5dc:	20000828 	.word	0x20000828
 800b5e0:	e000ed04 	.word	0xe000ed04

0800b5e4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b08e      	sub	sp, #56	; 0x38
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	603b      	str	r3, [r7, #0]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d10c      	bne.n	800b618 <xTaskGenericNotifyFromISR+0x34>
	__asm volatile
 800b5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b602:	b672      	cpsid	i
 800b604:	f383 8811 	msr	BASEPRI, r3
 800b608:	f3bf 8f6f 	isb	sy
 800b60c:	f3bf 8f4f 	dsb	sy
 800b610:	b662      	cpsie	i
 800b612:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b614:	bf00      	nop
 800b616:	e7fe      	b.n	800b616 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b618:	f000 fed0 	bl	800c3bc <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b620:	f3ef 8211 	mrs	r2, BASEPRI
 800b624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b628:	b672      	cpsid	i
 800b62a:	f383 8811 	msr	BASEPRI, r3
 800b62e:	f3bf 8f6f 	isb	sy
 800b632:	f3bf 8f4f 	dsb	sy
 800b636:	b662      	cpsie	i
 800b638:	623a      	str	r2, [r7, #32]
 800b63a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b63c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b63e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d004      	beq.n	800b650 <xTaskGenericNotifyFromISR+0x6c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b648:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b652:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800b656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65c:	2202      	movs	r2, #2
 800b65e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 800b662:	79fb      	ldrb	r3, [r7, #7]
 800b664:	2b04      	cmp	r3, #4
 800b666:	d82f      	bhi.n	800b6c8 <xTaskGenericNotifyFromISR+0xe4>
 800b668:	a201      	add	r2, pc, #4	; (adr r2, 800b670 <xTaskGenericNotifyFromISR+0x8c>)
 800b66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b66e:	bf00      	nop
 800b670:	0800b6ef 	.word	0x0800b6ef
 800b674:	0800b685 	.word	0x0800b685
 800b678:	0800b697 	.word	0x0800b697
 800b67c:	0800b6a7 	.word	0x0800b6a7
 800b680:	0800b6b1 	.word	0x0800b6b1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b686:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	431a      	orrs	r2, r3
 800b68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b690:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b694:	e02e      	b.n	800b6f4 <xTaskGenericNotifyFromISR+0x110>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b698:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b69c:	1c5a      	adds	r2, r3, #1
 800b69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b6a4:	e026      	b.n	800b6f4 <xTaskGenericNotifyFromISR+0x110>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a8:	68ba      	ldr	r2, [r7, #8]
 800b6aa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800b6ae:	e021      	b.n	800b6f4 <xTaskGenericNotifyFromISR+0x110>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b6b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	d004      	beq.n	800b6c2 <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ba:	68ba      	ldr	r2, [r7, #8]
 800b6bc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b6c0:	e018      	b.n	800b6f4 <xTaskGenericNotifyFromISR+0x110>
						xReturn = pdFAIL;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b6c6:	e015      	b.n	800b6f4 <xTaskGenericNotifyFromISR+0x110>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d2:	d00e      	beq.n	800b6f2 <xTaskGenericNotifyFromISR+0x10e>
	__asm volatile
 800b6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d8:	b672      	cpsid	i
 800b6da:	f383 8811 	msr	BASEPRI, r3
 800b6de:	f3bf 8f6f 	isb	sy
 800b6e2:	f3bf 8f4f 	dsb	sy
 800b6e6:	b662      	cpsie	i
 800b6e8:	61bb      	str	r3, [r7, #24]
}
 800b6ea:	bf00      	nop
 800b6ec:	e7fe      	b.n	800b6ec <xTaskGenericNotifyFromISR+0x108>
					break;
 800b6ee:	bf00      	nop
 800b6f0:	e000      	b.n	800b6f4 <xTaskGenericNotifyFromISR+0x110>
					break;
 800b6f2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b6f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d148      	bne.n	800b78e <xTaskGenericNotifyFromISR+0x1aa>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b700:	2b00      	cmp	r3, #0
 800b702:	d00c      	beq.n	800b71e <xTaskGenericNotifyFromISR+0x13a>
	__asm volatile
 800b704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b708:	b672      	cpsid	i
 800b70a:	f383 8811 	msr	BASEPRI, r3
 800b70e:	f3bf 8f6f 	isb	sy
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	b662      	cpsie	i
 800b718:	617b      	str	r3, [r7, #20]
}
 800b71a:	bf00      	nop
 800b71c:	e7fe      	b.n	800b71c <xTaskGenericNotifyFromISR+0x138>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b71e:	4b21      	ldr	r3, [pc, #132]	; (800b7a4 <xTaskGenericNotifyFromISR+0x1c0>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d11d      	bne.n	800b762 <xTaskGenericNotifyFromISR+0x17e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	3304      	adds	r3, #4
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7fd fcb4 	bl	8009098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b734:	4b1c      	ldr	r3, [pc, #112]	; (800b7a8 <xTaskGenericNotifyFromISR+0x1c4>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d903      	bls.n	800b744 <xTaskGenericNotifyFromISR+0x160>
 800b73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b740:	4a19      	ldr	r2, [pc, #100]	; (800b7a8 <xTaskGenericNotifyFromISR+0x1c4>)
 800b742:	6013      	str	r3, [r2, #0]
 800b744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b748:	4613      	mov	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	4413      	add	r3, r2
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	4a16      	ldr	r2, [pc, #88]	; (800b7ac <xTaskGenericNotifyFromISR+0x1c8>)
 800b752:	441a      	add	r2, r3
 800b754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b756:	3304      	adds	r3, #4
 800b758:	4619      	mov	r1, r3
 800b75a:	4610      	mov	r0, r2
 800b75c:	f7fd fc3f 	bl	8008fde <vListInsertEnd>
 800b760:	e005      	b.n	800b76e <xTaskGenericNotifyFromISR+0x18a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b764:	3318      	adds	r3, #24
 800b766:	4619      	mov	r1, r3
 800b768:	4811      	ldr	r0, [pc, #68]	; (800b7b0 <xTaskGenericNotifyFromISR+0x1cc>)
 800b76a:	f7fd fc38 	bl	8008fde <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b772:	4b10      	ldr	r3, [pc, #64]	; (800b7b4 <xTaskGenericNotifyFromISR+0x1d0>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b778:	429a      	cmp	r2, r3
 800b77a:	d908      	bls.n	800b78e <xTaskGenericNotifyFromISR+0x1aa>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b77c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d002      	beq.n	800b788 <xTaskGenericNotifyFromISR+0x1a4>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b784:	2201      	movs	r2, #1
 800b786:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b788:	4b0b      	ldr	r3, [pc, #44]	; (800b7b8 <xTaskGenericNotifyFromISR+0x1d4>)
 800b78a:	2201      	movs	r2, #1
 800b78c:	601a      	str	r2, [r3, #0]
 800b78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b790:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	f383 8811 	msr	BASEPRI, r3
}
 800b798:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b79a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3738      	adds	r7, #56	; 0x38
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	20000d24 	.word	0x20000d24
 800b7a8:	20000d04 	.word	0x20000d04
 800b7ac:	2000082c 	.word	0x2000082c
 800b7b0:	20000cbc 	.word	0x20000cbc
 800b7b4:	20000828 	.word	0x20000828
 800b7b8:	20000d10 	.word	0x20000d10

0800b7bc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b7c6:	4b21      	ldr	r3, [pc, #132]	; (800b84c <prvAddCurrentTaskToDelayedList+0x90>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7cc:	4b20      	ldr	r3, [pc, #128]	; (800b850 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7fd fc60 	bl	8009098 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7de:	d10a      	bne.n	800b7f6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d007      	beq.n	800b7f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b7e6:	4b1a      	ldr	r3, [pc, #104]	; (800b850 <prvAddCurrentTaskToDelayedList+0x94>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	3304      	adds	r3, #4
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	4819      	ldr	r0, [pc, #100]	; (800b854 <prvAddCurrentTaskToDelayedList+0x98>)
 800b7f0:	f7fd fbf5 	bl	8008fde <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b7f4:	e026      	b.n	800b844 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b7fe:	4b14      	ldr	r3, [pc, #80]	; (800b850 <prvAddCurrentTaskToDelayedList+0x94>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b806:	68ba      	ldr	r2, [r7, #8]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d209      	bcs.n	800b822 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b80e:	4b12      	ldr	r3, [pc, #72]	; (800b858 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	4b0f      	ldr	r3, [pc, #60]	; (800b850 <prvAddCurrentTaskToDelayedList+0x94>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	3304      	adds	r3, #4
 800b818:	4619      	mov	r1, r3
 800b81a:	4610      	mov	r0, r2
 800b81c:	f7fd fc03 	bl	8009026 <vListInsert>
}
 800b820:	e010      	b.n	800b844 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b822:	4b0e      	ldr	r3, [pc, #56]	; (800b85c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b824:	681a      	ldr	r2, [r3, #0]
 800b826:	4b0a      	ldr	r3, [pc, #40]	; (800b850 <prvAddCurrentTaskToDelayedList+0x94>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	3304      	adds	r3, #4
 800b82c:	4619      	mov	r1, r3
 800b82e:	4610      	mov	r0, r2
 800b830:	f7fd fbf9 	bl	8009026 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b834:	4b0a      	ldr	r3, [pc, #40]	; (800b860 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d202      	bcs.n	800b844 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b83e:	4a08      	ldr	r2, [pc, #32]	; (800b860 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	6013      	str	r3, [r2, #0]
}
 800b844:	bf00      	nop
 800b846:	3710      	adds	r7, #16
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	20000d00 	.word	0x20000d00
 800b850:	20000828 	.word	0x20000828
 800b854:	20000ce8 	.word	0x20000ce8
 800b858:	20000cb8 	.word	0x20000cb8
 800b85c:	20000cb4 	.word	0x20000cb4
 800b860:	20000d1c 	.word	0x20000d1c

0800b864 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b08a      	sub	sp, #40	; 0x28
 800b868:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b86a:	2300      	movs	r3, #0
 800b86c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b86e:	f000 fb73 	bl	800bf58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b872:	4b1d      	ldr	r3, [pc, #116]	; (800b8e8 <xTimerCreateTimerTask+0x84>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d021      	beq.n	800b8be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b87a:	2300      	movs	r3, #0
 800b87c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b87e:	2300      	movs	r3, #0
 800b880:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b882:	1d3a      	adds	r2, r7, #4
 800b884:	f107 0108 	add.w	r1, r7, #8
 800b888:	f107 030c 	add.w	r3, r7, #12
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7fd fb5f 	bl	8008f50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b892:	6879      	ldr	r1, [r7, #4]
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	9202      	str	r2, [sp, #8]
 800b89a:	9301      	str	r3, [sp, #4]
 800b89c:	2302      	movs	r3, #2
 800b89e:	9300      	str	r3, [sp, #0]
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	460a      	mov	r2, r1
 800b8a4:	4911      	ldr	r1, [pc, #68]	; (800b8ec <xTimerCreateTimerTask+0x88>)
 800b8a6:	4812      	ldr	r0, [pc, #72]	; (800b8f0 <xTimerCreateTimerTask+0x8c>)
 800b8a8:	f7fe fd70 	bl	800a38c <xTaskCreateStatic>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	4a11      	ldr	r2, [pc, #68]	; (800b8f4 <xTimerCreateTimerTask+0x90>)
 800b8b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b8b2:	4b10      	ldr	r3, [pc, #64]	; (800b8f4 <xTimerCreateTimerTask+0x90>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d001      	beq.n	800b8be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10c      	bne.n	800b8de <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800b8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c8:	b672      	cpsid	i
 800b8ca:	f383 8811 	msr	BASEPRI, r3
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	f3bf 8f4f 	dsb	sy
 800b8d6:	b662      	cpsie	i
 800b8d8:	613b      	str	r3, [r7, #16]
}
 800b8da:	bf00      	nop
 800b8dc:	e7fe      	b.n	800b8dc <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b8de:	697b      	ldr	r3, [r7, #20]
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3718      	adds	r7, #24
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	20000d58 	.word	0x20000d58
 800b8ec:	0801b128 	.word	0x0801b128
 800b8f0:	0800baf1 	.word	0x0800baf1
 800b8f4:	20000d5c 	.word	0x20000d5c

0800b8f8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b088      	sub	sp, #32
 800b8fc:	af02      	add	r7, sp, #8
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
 800b904:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b906:	202c      	movs	r0, #44	; 0x2c
 800b908:	f000 fd9c 	bl	800c444 <pvPortMalloc>
 800b90c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d00d      	beq.n	800b930 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	2200      	movs	r2, #0
 800b918:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	9301      	str	r3, [sp, #4]
 800b920:	6a3b      	ldr	r3, [r7, #32]
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	68b9      	ldr	r1, [r7, #8]
 800b92a:	68f8      	ldr	r0, [r7, #12]
 800b92c:	f000 f805 	bl	800b93a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b930:	697b      	ldr	r3, [r7, #20]
	}
 800b932:	4618      	mov	r0, r3
 800b934:	3718      	adds	r7, #24
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b086      	sub	sp, #24
 800b93e:	af00      	add	r7, sp, #0
 800b940:	60f8      	str	r0, [r7, #12]
 800b942:	60b9      	str	r1, [r7, #8]
 800b944:	607a      	str	r2, [r7, #4]
 800b946:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d10c      	bne.n	800b968 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800b94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b952:	b672      	cpsid	i
 800b954:	f383 8811 	msr	BASEPRI, r3
 800b958:	f3bf 8f6f 	isb	sy
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	b662      	cpsie	i
 800b962:	617b      	str	r3, [r7, #20]
}
 800b964:	bf00      	nop
 800b966:	e7fe      	b.n	800b966 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d01e      	beq.n	800b9ac <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b96e:	f000 faf3 	bl	800bf58 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	68fa      	ldr	r2, [r7, #12]
 800b976:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b980:	683a      	ldr	r2, [r7, #0]
 800b982:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b986:	6a3a      	ldr	r2, [r7, #32]
 800b988:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98c:	3304      	adds	r3, #4
 800b98e:	4618      	mov	r0, r3
 800b990:	f7fd fb18 	bl	8008fc4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d008      	beq.n	800b9ac <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9a0:	f043 0304 	orr.w	r3, r3, #4
 800b9a4:	b2da      	uxtb	r2, r3
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b9ac:	bf00      	nop
 800b9ae:	3718      	adds	r7, #24
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b08a      	sub	sp, #40	; 0x28
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
 800b9c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10c      	bne.n	800b9e6 <xTimerGenericCommand+0x32>
	__asm volatile
 800b9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d0:	b672      	cpsid	i
 800b9d2:	f383 8811 	msr	BASEPRI, r3
 800b9d6:	f3bf 8f6f 	isb	sy
 800b9da:	f3bf 8f4f 	dsb	sy
 800b9de:	b662      	cpsie	i
 800b9e0:	623b      	str	r3, [r7, #32]
}
 800b9e2:	bf00      	nop
 800b9e4:	e7fe      	b.n	800b9e4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b9e6:	4b1a      	ldr	r3, [pc, #104]	; (800ba50 <xTimerGenericCommand+0x9c>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d02a      	beq.n	800ba44 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	2b05      	cmp	r3, #5
 800b9fe:	dc18      	bgt.n	800ba32 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ba00:	f7ff fb4e 	bl	800b0a0 <xTaskGetSchedulerState>
 800ba04:	4603      	mov	r3, r0
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d109      	bne.n	800ba1e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ba0a:	4b11      	ldr	r3, [pc, #68]	; (800ba50 <xTimerGenericCommand+0x9c>)
 800ba0c:	6818      	ldr	r0, [r3, #0]
 800ba0e:	f107 0110 	add.w	r1, r7, #16
 800ba12:	2300      	movs	r3, #0
 800ba14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba16:	f7fd fde7 	bl	80095e8 <xQueueGenericSend>
 800ba1a:	6278      	str	r0, [r7, #36]	; 0x24
 800ba1c:	e012      	b.n	800ba44 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ba1e:	4b0c      	ldr	r3, [pc, #48]	; (800ba50 <xTimerGenericCommand+0x9c>)
 800ba20:	6818      	ldr	r0, [r3, #0]
 800ba22:	f107 0110 	add.w	r1, r7, #16
 800ba26:	2300      	movs	r3, #0
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f7fd fddd 	bl	80095e8 <xQueueGenericSend>
 800ba2e:	6278      	str	r0, [r7, #36]	; 0x24
 800ba30:	e008      	b.n	800ba44 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ba32:	4b07      	ldr	r3, [pc, #28]	; (800ba50 <xTimerGenericCommand+0x9c>)
 800ba34:	6818      	ldr	r0, [r3, #0]
 800ba36:	f107 0110 	add.w	r1, r7, #16
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	683a      	ldr	r2, [r7, #0]
 800ba3e:	f7fd fed9 	bl	80097f4 <xQueueGenericSendFromISR>
 800ba42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ba44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3728      	adds	r7, #40	; 0x28
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	20000d58 	.word	0x20000d58

0800ba54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b088      	sub	sp, #32
 800ba58:	af02      	add	r7, sp, #8
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba5e:	4b23      	ldr	r3, [pc, #140]	; (800baec <prvProcessExpiredTimer+0x98>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	3304      	adds	r3, #4
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7fd fb13 	bl	8009098 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba78:	f003 0304 	and.w	r3, r3, #4
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d024      	beq.n	800baca <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	699a      	ldr	r2, [r3, #24]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	18d1      	adds	r1, r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	6978      	ldr	r0, [r7, #20]
 800ba8e:	f000 f8d3 	bl	800bc38 <prvInsertTimerInActiveList>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d021      	beq.n	800badc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba98:	2300      	movs	r3, #0
 800ba9a:	9300      	str	r3, [sp, #0]
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	2100      	movs	r1, #0
 800baa2:	6978      	ldr	r0, [r7, #20]
 800baa4:	f7ff ff86 	bl	800b9b4 <xTimerGenericCommand>
 800baa8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d115      	bne.n	800badc <prvProcessExpiredTimer+0x88>
	__asm volatile
 800bab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab4:	b672      	cpsid	i
 800bab6:	f383 8811 	msr	BASEPRI, r3
 800baba:	f3bf 8f6f 	isb	sy
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	b662      	cpsie	i
 800bac4:	60fb      	str	r3, [r7, #12]
}
 800bac6:	bf00      	nop
 800bac8:	e7fe      	b.n	800bac8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bad0:	f023 0301 	bic.w	r3, r3, #1
 800bad4:	b2da      	uxtb	r2, r3
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	6a1b      	ldr	r3, [r3, #32]
 800bae0:	6978      	ldr	r0, [r7, #20]
 800bae2:	4798      	blx	r3
}
 800bae4:	bf00      	nop
 800bae6:	3718      	adds	r7, #24
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	20000d50 	.word	0x20000d50

0800baf0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800baf8:	f107 0308 	add.w	r3, r7, #8
 800bafc:	4618      	mov	r0, r3
 800bafe:	f000 f857 	bl	800bbb0 <prvGetNextExpireTime>
 800bb02:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	4619      	mov	r1, r3
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	f000 f803 	bl	800bb14 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bb0e:	f000 f8d5 	bl	800bcbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb12:	e7f1      	b.n	800baf8 <prvTimerTask+0x8>

0800bb14 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bb1e:	f7fe fe9f 	bl	800a860 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb22:	f107 0308 	add.w	r3, r7, #8
 800bb26:	4618      	mov	r0, r3
 800bb28:	f000 f866 	bl	800bbf8 <prvSampleTimeNow>
 800bb2c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d130      	bne.n	800bb96 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d10a      	bne.n	800bb50 <prvProcessTimerOrBlockTask+0x3c>
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d806      	bhi.n	800bb50 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bb42:	f7fe fe9b 	bl	800a87c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bb46:	68f9      	ldr	r1, [r7, #12]
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f7ff ff83 	bl	800ba54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bb4e:	e024      	b.n	800bb9a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d008      	beq.n	800bb68 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb56:	4b13      	ldr	r3, [pc, #76]	; (800bba4 <prvProcessTimerOrBlockTask+0x90>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d101      	bne.n	800bb64 <prvProcessTimerOrBlockTask+0x50>
 800bb60:	2301      	movs	r3, #1
 800bb62:	e000      	b.n	800bb66 <prvProcessTimerOrBlockTask+0x52>
 800bb64:	2300      	movs	r3, #0
 800bb66:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb68:	4b0f      	ldr	r3, [pc, #60]	; (800bba8 <prvProcessTimerOrBlockTask+0x94>)
 800bb6a:	6818      	ldr	r0, [r3, #0]
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	1ad3      	subs	r3, r2, r3
 800bb72:	683a      	ldr	r2, [r7, #0]
 800bb74:	4619      	mov	r1, r3
 800bb76:	f7fe fbd5 	bl	800a324 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb7a:	f7fe fe7f 	bl	800a87c <xTaskResumeAll>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d10a      	bne.n	800bb9a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bb84:	4b09      	ldr	r3, [pc, #36]	; (800bbac <prvProcessTimerOrBlockTask+0x98>)
 800bb86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb8a:	601a      	str	r2, [r3, #0]
 800bb8c:	f3bf 8f4f 	dsb	sy
 800bb90:	f3bf 8f6f 	isb	sy
}
 800bb94:	e001      	b.n	800bb9a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bb96:	f7fe fe71 	bl	800a87c <xTaskResumeAll>
}
 800bb9a:	bf00      	nop
 800bb9c:	3710      	adds	r7, #16
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	20000d54 	.word	0x20000d54
 800bba8:	20000d58 	.word	0x20000d58
 800bbac:	e000ed04 	.word	0xe000ed04

0800bbb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bbb8:	4b0e      	ldr	r3, [pc, #56]	; (800bbf4 <prvGetNextExpireTime+0x44>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d101      	bne.n	800bbc6 <prvGetNextExpireTime+0x16>
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	e000      	b.n	800bbc8 <prvGetNextExpireTime+0x18>
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d105      	bne.n	800bbe0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bbd4:	4b07      	ldr	r3, [pc, #28]	; (800bbf4 <prvGetNextExpireTime+0x44>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	60fb      	str	r3, [r7, #12]
 800bbde:	e001      	b.n	800bbe4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	20000d50 	.word	0x20000d50

0800bbf8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bc00:	f7fe fedc 	bl	800a9bc <xTaskGetTickCount>
 800bc04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bc06:	4b0b      	ldr	r3, [pc, #44]	; (800bc34 <prvSampleTimeNow+0x3c>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d205      	bcs.n	800bc1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bc10:	f000 f93c 	bl	800be8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	601a      	str	r2, [r3, #0]
 800bc1a:	e002      	b.n	800bc22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bc22:	4a04      	ldr	r2, [pc, #16]	; (800bc34 <prvSampleTimeNow+0x3c>)
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bc28:	68fb      	ldr	r3, [r7, #12]
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	20000d60 	.word	0x20000d60

0800bc38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b086      	sub	sp, #24
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]
 800bc44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bc46:	2300      	movs	r3, #0
 800bc48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	68fa      	ldr	r2, [r7, #12]
 800bc54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc56:	68ba      	ldr	r2, [r7, #8]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d812      	bhi.n	800bc84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	1ad2      	subs	r2, r2, r3
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	699b      	ldr	r3, [r3, #24]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d302      	bcc.n	800bc72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	617b      	str	r3, [r7, #20]
 800bc70:	e01b      	b.n	800bcaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc72:	4b10      	ldr	r3, [pc, #64]	; (800bcb4 <prvInsertTimerInActiveList+0x7c>)
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	3304      	adds	r3, #4
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	4610      	mov	r0, r2
 800bc7e:	f7fd f9d2 	bl	8009026 <vListInsert>
 800bc82:	e012      	b.n	800bcaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d206      	bcs.n	800bc9a <prvInsertTimerInActiveList+0x62>
 800bc8c:	68ba      	ldr	r2, [r7, #8]
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d302      	bcc.n	800bc9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bc94:	2301      	movs	r3, #1
 800bc96:	617b      	str	r3, [r7, #20]
 800bc98:	e007      	b.n	800bcaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc9a:	4b07      	ldr	r3, [pc, #28]	; (800bcb8 <prvInsertTimerInActiveList+0x80>)
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	3304      	adds	r3, #4
 800bca2:	4619      	mov	r1, r3
 800bca4:	4610      	mov	r0, r2
 800bca6:	f7fd f9be 	bl	8009026 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bcaa:	697b      	ldr	r3, [r7, #20]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3718      	adds	r7, #24
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	20000d54 	.word	0x20000d54
 800bcb8:	20000d50 	.word	0x20000d50

0800bcbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b08e      	sub	sp, #56	; 0x38
 800bcc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bcc2:	e0d0      	b.n	800be66 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	da1a      	bge.n	800bd00 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bcca:	1d3b      	adds	r3, r7, #4
 800bccc:	3304      	adds	r3, #4
 800bcce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10c      	bne.n	800bcf0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800bcd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcda:	b672      	cpsid	i
 800bcdc:	f383 8811 	msr	BASEPRI, r3
 800bce0:	f3bf 8f6f 	isb	sy
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	b662      	cpsie	i
 800bcea:	61fb      	str	r3, [r7, #28]
}
 800bcec:	bf00      	nop
 800bcee:	e7fe      	b.n	800bcee <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcf6:	6850      	ldr	r0, [r2, #4]
 800bcf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcfa:	6892      	ldr	r2, [r2, #8]
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	f2c0 80ae 	blt.w	800be64 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0e:	695b      	ldr	r3, [r3, #20]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d004      	beq.n	800bd1e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd16:	3304      	adds	r3, #4
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7fd f9bd 	bl	8009098 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd1e:	463b      	mov	r3, r7
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7ff ff69 	bl	800bbf8 <prvSampleTimeNow>
 800bd26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b09      	cmp	r3, #9
 800bd2c:	f200 809b 	bhi.w	800be66 <prvProcessReceivedCommands+0x1aa>
 800bd30:	a201      	add	r2, pc, #4	; (adr r2, 800bd38 <prvProcessReceivedCommands+0x7c>)
 800bd32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd36:	bf00      	nop
 800bd38:	0800bd61 	.word	0x0800bd61
 800bd3c:	0800bd61 	.word	0x0800bd61
 800bd40:	0800bd61 	.word	0x0800bd61
 800bd44:	0800bdd9 	.word	0x0800bdd9
 800bd48:	0800bded 	.word	0x0800bded
 800bd4c:	0800be3b 	.word	0x0800be3b
 800bd50:	0800bd61 	.word	0x0800bd61
 800bd54:	0800bd61 	.word	0x0800bd61
 800bd58:	0800bdd9 	.word	0x0800bdd9
 800bd5c:	0800bded 	.word	0x0800bded
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd66:	f043 0301 	orr.w	r3, r3, #1
 800bd6a:	b2da      	uxtb	r2, r3
 800bd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd76:	699b      	ldr	r3, [r3, #24]
 800bd78:	18d1      	adds	r1, r2, r3
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd80:	f7ff ff5a 	bl	800bc38 <prvInsertTimerInActiveList>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d06d      	beq.n	800be66 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8c:	6a1b      	ldr	r3, [r3, #32]
 800bd8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd98:	f003 0304 	and.w	r3, r3, #4
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d062      	beq.n	800be66 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bda0:	68ba      	ldr	r2, [r7, #8]
 800bda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda4:	699b      	ldr	r3, [r3, #24]
 800bda6:	441a      	add	r2, r3
 800bda8:	2300      	movs	r3, #0
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	2300      	movs	r3, #0
 800bdae:	2100      	movs	r1, #0
 800bdb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdb2:	f7ff fdff 	bl	800b9b4 <xTimerGenericCommand>
 800bdb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bdb8:	6a3b      	ldr	r3, [r7, #32]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d153      	bne.n	800be66 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800bdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc2:	b672      	cpsid	i
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	b662      	cpsie	i
 800bdd2:	61bb      	str	r3, [r7, #24]
}
 800bdd4:	bf00      	nop
 800bdd6:	e7fe      	b.n	800bdd6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdde:	f023 0301 	bic.w	r3, r3, #1
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bdea:	e03c      	b.n	800be66 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdf2:	f043 0301 	orr.w	r3, r3, #1
 800bdf6:	b2da      	uxtb	r2, r3
 800bdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bdfe:	68ba      	ldr	r2, [r7, #8]
 800be00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	699b      	ldr	r3, [r3, #24]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d10c      	bne.n	800be26 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800be0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be10:	b672      	cpsid	i
 800be12:	f383 8811 	msr	BASEPRI, r3
 800be16:	f3bf 8f6f 	isb	sy
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	b662      	cpsie	i
 800be20:	617b      	str	r3, [r7, #20]
}
 800be22:	bf00      	nop
 800be24:	e7fe      	b.n	800be24 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800be26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be28:	699a      	ldr	r2, [r3, #24]
 800be2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be2c:	18d1      	adds	r1, r2, r3
 800be2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be34:	f7ff ff00 	bl	800bc38 <prvInsertTimerInActiveList>
					break;
 800be38:	e015      	b.n	800be66 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800be3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be40:	f003 0302 	and.w	r3, r3, #2
 800be44:	2b00      	cmp	r3, #0
 800be46:	d103      	bne.n	800be50 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800be48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be4a:	f000 fbc5 	bl	800c5d8 <vPortFree>
 800be4e:	e00a      	b.n	800be66 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be56:	f023 0301 	bic.w	r3, r3, #1
 800be5a:	b2da      	uxtb	r2, r3
 800be5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be62:	e000      	b.n	800be66 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800be64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be66:	4b08      	ldr	r3, [pc, #32]	; (800be88 <prvProcessReceivedCommands+0x1cc>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	1d39      	adds	r1, r7, #4
 800be6c:	2200      	movs	r2, #0
 800be6e:	4618      	mov	r0, r3
 800be70:	f7fd fdf6 	bl	8009a60 <xQueueReceive>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	f47f af24 	bne.w	800bcc4 <prvProcessReceivedCommands+0x8>
	}
}
 800be7c:	bf00      	nop
 800be7e:	bf00      	nop
 800be80:	3730      	adds	r7, #48	; 0x30
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	20000d58 	.word	0x20000d58

0800be8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b088      	sub	sp, #32
 800be90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be92:	e04a      	b.n	800bf2a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be94:	4b2e      	ldr	r3, [pc, #184]	; (800bf50 <prvSwitchTimerLists+0xc4>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be9e:	4b2c      	ldr	r3, [pc, #176]	; (800bf50 <prvSwitchTimerLists+0xc4>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	3304      	adds	r3, #4
 800beac:	4618      	mov	r0, r3
 800beae:	f7fd f8f3 	bl	8009098 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	6a1b      	ldr	r3, [r3, #32]
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bec0:	f003 0304 	and.w	r3, r3, #4
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d030      	beq.n	800bf2a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	693a      	ldr	r2, [r7, #16]
 800bece:	4413      	add	r3, r2
 800bed0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bed2:	68ba      	ldr	r2, [r7, #8]
 800bed4:	693b      	ldr	r3, [r7, #16]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d90e      	bls.n	800bef8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	68ba      	ldr	r2, [r7, #8]
 800bede:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	68fa      	ldr	r2, [r7, #12]
 800bee4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bee6:	4b1a      	ldr	r3, [pc, #104]	; (800bf50 <prvSwitchTimerLists+0xc4>)
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	3304      	adds	r3, #4
 800beee:	4619      	mov	r1, r3
 800bef0:	4610      	mov	r0, r2
 800bef2:	f7fd f898 	bl	8009026 <vListInsert>
 800bef6:	e018      	b.n	800bf2a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bef8:	2300      	movs	r3, #0
 800befa:	9300      	str	r3, [sp, #0]
 800befc:	2300      	movs	r3, #0
 800befe:	693a      	ldr	r2, [r7, #16]
 800bf00:	2100      	movs	r1, #0
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f7ff fd56 	bl	800b9b4 <xTimerGenericCommand>
 800bf08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d10c      	bne.n	800bf2a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800bf10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf14:	b672      	cpsid	i
 800bf16:	f383 8811 	msr	BASEPRI, r3
 800bf1a:	f3bf 8f6f 	isb	sy
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	b662      	cpsie	i
 800bf24:	603b      	str	r3, [r7, #0]
}
 800bf26:	bf00      	nop
 800bf28:	e7fe      	b.n	800bf28 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf2a:	4b09      	ldr	r3, [pc, #36]	; (800bf50 <prvSwitchTimerLists+0xc4>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d1af      	bne.n	800be94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bf34:	4b06      	ldr	r3, [pc, #24]	; (800bf50 <prvSwitchTimerLists+0xc4>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bf3a:	4b06      	ldr	r3, [pc, #24]	; (800bf54 <prvSwitchTimerLists+0xc8>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	4a04      	ldr	r2, [pc, #16]	; (800bf50 <prvSwitchTimerLists+0xc4>)
 800bf40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bf42:	4a04      	ldr	r2, [pc, #16]	; (800bf54 <prvSwitchTimerLists+0xc8>)
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	6013      	str	r3, [r2, #0]
}
 800bf48:	bf00      	nop
 800bf4a:	3718      	adds	r7, #24
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	20000d50 	.word	0x20000d50
 800bf54:	20000d54 	.word	0x20000d54

0800bf58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf5e:	f000 f945 	bl	800c1ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf62:	4b15      	ldr	r3, [pc, #84]	; (800bfb8 <prvCheckForValidListAndQueue+0x60>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d120      	bne.n	800bfac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf6a:	4814      	ldr	r0, [pc, #80]	; (800bfbc <prvCheckForValidListAndQueue+0x64>)
 800bf6c:	f7fd f80a 	bl	8008f84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf70:	4813      	ldr	r0, [pc, #76]	; (800bfc0 <prvCheckForValidListAndQueue+0x68>)
 800bf72:	f7fd f807 	bl	8008f84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf76:	4b13      	ldr	r3, [pc, #76]	; (800bfc4 <prvCheckForValidListAndQueue+0x6c>)
 800bf78:	4a10      	ldr	r2, [pc, #64]	; (800bfbc <prvCheckForValidListAndQueue+0x64>)
 800bf7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf7c:	4b12      	ldr	r3, [pc, #72]	; (800bfc8 <prvCheckForValidListAndQueue+0x70>)
 800bf7e:	4a10      	ldr	r2, [pc, #64]	; (800bfc0 <prvCheckForValidListAndQueue+0x68>)
 800bf80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf82:	2300      	movs	r3, #0
 800bf84:	9300      	str	r3, [sp, #0]
 800bf86:	4b11      	ldr	r3, [pc, #68]	; (800bfcc <prvCheckForValidListAndQueue+0x74>)
 800bf88:	4a11      	ldr	r2, [pc, #68]	; (800bfd0 <prvCheckForValidListAndQueue+0x78>)
 800bf8a:	2110      	movs	r1, #16
 800bf8c:	200a      	movs	r0, #10
 800bf8e:	f7fd f917 	bl	80091c0 <xQueueGenericCreateStatic>
 800bf92:	4603      	mov	r3, r0
 800bf94:	4a08      	ldr	r2, [pc, #32]	; (800bfb8 <prvCheckForValidListAndQueue+0x60>)
 800bf96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf98:	4b07      	ldr	r3, [pc, #28]	; (800bfb8 <prvCheckForValidListAndQueue+0x60>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d005      	beq.n	800bfac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bfa0:	4b05      	ldr	r3, [pc, #20]	; (800bfb8 <prvCheckForValidListAndQueue+0x60>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	490b      	ldr	r1, [pc, #44]	; (800bfd4 <prvCheckForValidListAndQueue+0x7c>)
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7fe f968 	bl	800a27c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bfac:	f000 f952 	bl	800c254 <vPortExitCritical>
}
 800bfb0:	bf00      	nop
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	20000d58 	.word	0x20000d58
 800bfbc:	20000d28 	.word	0x20000d28
 800bfc0:	20000d3c 	.word	0x20000d3c
 800bfc4:	20000d50 	.word	0x20000d50
 800bfc8:	20000d54 	.word	0x20000d54
 800bfcc:	20000e04 	.word	0x20000e04
 800bfd0:	20000d64 	.word	0x20000d64
 800bfd4:	0801b130 	.word	0x0801b130

0800bfd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	3b04      	subs	r3, #4
 800bfe8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	3b04      	subs	r3, #4
 800bff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	f023 0201 	bic.w	r2, r3, #1
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	3b04      	subs	r3, #4
 800c006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c008:	4a0c      	ldr	r2, [pc, #48]	; (800c03c <pxPortInitialiseStack+0x64>)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	3b14      	subs	r3, #20
 800c012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	3b04      	subs	r3, #4
 800c01e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f06f 0202 	mvn.w	r2, #2
 800c026:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	3b20      	subs	r3, #32
 800c02c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c02e:	68fb      	ldr	r3, [r7, #12]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3714      	adds	r7, #20
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr
 800c03c:	0800c041 	.word	0x0800c041

0800c040 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c040:	b480      	push	{r7}
 800c042:	b085      	sub	sp, #20
 800c044:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c046:	2300      	movs	r3, #0
 800c048:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c04a:	4b14      	ldr	r3, [pc, #80]	; (800c09c <prvTaskExitError+0x5c>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c052:	d00c      	beq.n	800c06e <prvTaskExitError+0x2e>
	__asm volatile
 800c054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c058:	b672      	cpsid	i
 800c05a:	f383 8811 	msr	BASEPRI, r3
 800c05e:	f3bf 8f6f 	isb	sy
 800c062:	f3bf 8f4f 	dsb	sy
 800c066:	b662      	cpsie	i
 800c068:	60fb      	str	r3, [r7, #12]
}
 800c06a:	bf00      	nop
 800c06c:	e7fe      	b.n	800c06c <prvTaskExitError+0x2c>
	__asm volatile
 800c06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c072:	b672      	cpsid	i
 800c074:	f383 8811 	msr	BASEPRI, r3
 800c078:	f3bf 8f6f 	isb	sy
 800c07c:	f3bf 8f4f 	dsb	sy
 800c080:	b662      	cpsie	i
 800c082:	60bb      	str	r3, [r7, #8]
}
 800c084:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c086:	bf00      	nop
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d0fc      	beq.n	800c088 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c08e:	bf00      	nop
 800c090:	bf00      	nop
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr
 800c09c:	2000000c 	.word	0x2000000c

0800c0a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c0a0:	4b07      	ldr	r3, [pc, #28]	; (800c0c0 <pxCurrentTCBConst2>)
 800c0a2:	6819      	ldr	r1, [r3, #0]
 800c0a4:	6808      	ldr	r0, [r1, #0]
 800c0a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0aa:	f380 8809 	msr	PSP, r0
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	f04f 0000 	mov.w	r0, #0
 800c0b6:	f380 8811 	msr	BASEPRI, r0
 800c0ba:	4770      	bx	lr
 800c0bc:	f3af 8000 	nop.w

0800c0c0 <pxCurrentTCBConst2>:
 800c0c0:	20000828 	.word	0x20000828
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c0c4:	bf00      	nop
 800c0c6:	bf00      	nop

0800c0c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c0c8:	4808      	ldr	r0, [pc, #32]	; (800c0ec <prvPortStartFirstTask+0x24>)
 800c0ca:	6800      	ldr	r0, [r0, #0]
 800c0cc:	6800      	ldr	r0, [r0, #0]
 800c0ce:	f380 8808 	msr	MSP, r0
 800c0d2:	f04f 0000 	mov.w	r0, #0
 800c0d6:	f380 8814 	msr	CONTROL, r0
 800c0da:	b662      	cpsie	i
 800c0dc:	b661      	cpsie	f
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	f3bf 8f6f 	isb	sy
 800c0e6:	df00      	svc	0
 800c0e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c0ea:	bf00      	nop
 800c0ec:	e000ed08 	.word	0xe000ed08

0800c0f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c0f6:	4b37      	ldr	r3, [pc, #220]	; (800c1d4 <xPortStartScheduler+0xe4>)
 800c0f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	22ff      	movs	r2, #255	; 0xff
 800c106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c110:	78fb      	ldrb	r3, [r7, #3]
 800c112:	b2db      	uxtb	r3, r3
 800c114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c118:	b2da      	uxtb	r2, r3
 800c11a:	4b2f      	ldr	r3, [pc, #188]	; (800c1d8 <xPortStartScheduler+0xe8>)
 800c11c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c11e:	4b2f      	ldr	r3, [pc, #188]	; (800c1dc <xPortStartScheduler+0xec>)
 800c120:	2207      	movs	r2, #7
 800c122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c124:	e009      	b.n	800c13a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c126:	4b2d      	ldr	r3, [pc, #180]	; (800c1dc <xPortStartScheduler+0xec>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	3b01      	subs	r3, #1
 800c12c:	4a2b      	ldr	r2, [pc, #172]	; (800c1dc <xPortStartScheduler+0xec>)
 800c12e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c130:	78fb      	ldrb	r3, [r7, #3]
 800c132:	b2db      	uxtb	r3, r3
 800c134:	005b      	lsls	r3, r3, #1
 800c136:	b2db      	uxtb	r3, r3
 800c138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c13a:	78fb      	ldrb	r3, [r7, #3]
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c142:	2b80      	cmp	r3, #128	; 0x80
 800c144:	d0ef      	beq.n	800c126 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c146:	4b25      	ldr	r3, [pc, #148]	; (800c1dc <xPortStartScheduler+0xec>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f1c3 0307 	rsb	r3, r3, #7
 800c14e:	2b04      	cmp	r3, #4
 800c150:	d00c      	beq.n	800c16c <xPortStartScheduler+0x7c>
	__asm volatile
 800c152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c156:	b672      	cpsid	i
 800c158:	f383 8811 	msr	BASEPRI, r3
 800c15c:	f3bf 8f6f 	isb	sy
 800c160:	f3bf 8f4f 	dsb	sy
 800c164:	b662      	cpsie	i
 800c166:	60bb      	str	r3, [r7, #8]
}
 800c168:	bf00      	nop
 800c16a:	e7fe      	b.n	800c16a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c16c:	4b1b      	ldr	r3, [pc, #108]	; (800c1dc <xPortStartScheduler+0xec>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	021b      	lsls	r3, r3, #8
 800c172:	4a1a      	ldr	r2, [pc, #104]	; (800c1dc <xPortStartScheduler+0xec>)
 800c174:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c176:	4b19      	ldr	r3, [pc, #100]	; (800c1dc <xPortStartScheduler+0xec>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c17e:	4a17      	ldr	r2, [pc, #92]	; (800c1dc <xPortStartScheduler+0xec>)
 800c180:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	b2da      	uxtb	r2, r3
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c18a:	4b15      	ldr	r3, [pc, #84]	; (800c1e0 <xPortStartScheduler+0xf0>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4a14      	ldr	r2, [pc, #80]	; (800c1e0 <xPortStartScheduler+0xf0>)
 800c190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c194:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c196:	4b12      	ldr	r3, [pc, #72]	; (800c1e0 <xPortStartScheduler+0xf0>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a11      	ldr	r2, [pc, #68]	; (800c1e0 <xPortStartScheduler+0xf0>)
 800c19c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c1a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c1a2:	f000 f8dd 	bl	800c360 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c1a6:	4b0f      	ldr	r3, [pc, #60]	; (800c1e4 <xPortStartScheduler+0xf4>)
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c1ac:	f000 f8fc 	bl	800c3a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c1b0:	4b0d      	ldr	r3, [pc, #52]	; (800c1e8 <xPortStartScheduler+0xf8>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a0c      	ldr	r2, [pc, #48]	; (800c1e8 <xPortStartScheduler+0xf8>)
 800c1b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c1ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c1bc:	f7ff ff84 	bl	800c0c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c1c0:	f7fe fcda 	bl	800ab78 <vTaskSwitchContext>
	prvTaskExitError();
 800c1c4:	f7ff ff3c 	bl	800c040 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c1c8:	2300      	movs	r3, #0
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	e000e400 	.word	0xe000e400
 800c1d8:	20000e54 	.word	0x20000e54
 800c1dc:	20000e58 	.word	0x20000e58
 800c1e0:	e000ed20 	.word	0xe000ed20
 800c1e4:	2000000c 	.word	0x2000000c
 800c1e8:	e000ef34 	.word	0xe000ef34

0800c1ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b083      	sub	sp, #12
 800c1f0:	af00      	add	r7, sp, #0
	__asm volatile
 800c1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f6:	b672      	cpsid	i
 800c1f8:	f383 8811 	msr	BASEPRI, r3
 800c1fc:	f3bf 8f6f 	isb	sy
 800c200:	f3bf 8f4f 	dsb	sy
 800c204:	b662      	cpsie	i
 800c206:	607b      	str	r3, [r7, #4]
}
 800c208:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c20a:	4b10      	ldr	r3, [pc, #64]	; (800c24c <vPortEnterCritical+0x60>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	3301      	adds	r3, #1
 800c210:	4a0e      	ldr	r2, [pc, #56]	; (800c24c <vPortEnterCritical+0x60>)
 800c212:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c214:	4b0d      	ldr	r3, [pc, #52]	; (800c24c <vPortEnterCritical+0x60>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d111      	bne.n	800c240 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c21c:	4b0c      	ldr	r3, [pc, #48]	; (800c250 <vPortEnterCritical+0x64>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	b2db      	uxtb	r3, r3
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00c      	beq.n	800c240 <vPortEnterCritical+0x54>
	__asm volatile
 800c226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c22a:	b672      	cpsid	i
 800c22c:	f383 8811 	msr	BASEPRI, r3
 800c230:	f3bf 8f6f 	isb	sy
 800c234:	f3bf 8f4f 	dsb	sy
 800c238:	b662      	cpsie	i
 800c23a:	603b      	str	r3, [r7, #0]
}
 800c23c:	bf00      	nop
 800c23e:	e7fe      	b.n	800c23e <vPortEnterCritical+0x52>
	}
}
 800c240:	bf00      	nop
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr
 800c24c:	2000000c 	.word	0x2000000c
 800c250:	e000ed04 	.word	0xe000ed04

0800c254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c25a:	4b13      	ldr	r3, [pc, #76]	; (800c2a8 <vPortExitCritical+0x54>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10c      	bne.n	800c27c <vPortExitCritical+0x28>
	__asm volatile
 800c262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c266:	b672      	cpsid	i
 800c268:	f383 8811 	msr	BASEPRI, r3
 800c26c:	f3bf 8f6f 	isb	sy
 800c270:	f3bf 8f4f 	dsb	sy
 800c274:	b662      	cpsie	i
 800c276:	607b      	str	r3, [r7, #4]
}
 800c278:	bf00      	nop
 800c27a:	e7fe      	b.n	800c27a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c27c:	4b0a      	ldr	r3, [pc, #40]	; (800c2a8 <vPortExitCritical+0x54>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	3b01      	subs	r3, #1
 800c282:	4a09      	ldr	r2, [pc, #36]	; (800c2a8 <vPortExitCritical+0x54>)
 800c284:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c286:	4b08      	ldr	r3, [pc, #32]	; (800c2a8 <vPortExitCritical+0x54>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d105      	bne.n	800c29a <vPortExitCritical+0x46>
 800c28e:	2300      	movs	r3, #0
 800c290:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	f383 8811 	msr	BASEPRI, r3
}
 800c298:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c29a:	bf00      	nop
 800c29c:	370c      	adds	r7, #12
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
 800c2a8:	2000000c 	.word	0x2000000c
 800c2ac:	00000000 	.word	0x00000000

0800c2b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c2b0:	f3ef 8009 	mrs	r0, PSP
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	4b15      	ldr	r3, [pc, #84]	; (800c310 <pxCurrentTCBConst>)
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	f01e 0f10 	tst.w	lr, #16
 800c2c0:	bf08      	it	eq
 800c2c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c2c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ca:	6010      	str	r0, [r2, #0]
 800c2cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c2d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c2d4:	b672      	cpsid	i
 800c2d6:	f380 8811 	msr	BASEPRI, r0
 800c2da:	f3bf 8f4f 	dsb	sy
 800c2de:	f3bf 8f6f 	isb	sy
 800c2e2:	b662      	cpsie	i
 800c2e4:	f7fe fc48 	bl	800ab78 <vTaskSwitchContext>
 800c2e8:	f04f 0000 	mov.w	r0, #0
 800c2ec:	f380 8811 	msr	BASEPRI, r0
 800c2f0:	bc09      	pop	{r0, r3}
 800c2f2:	6819      	ldr	r1, [r3, #0]
 800c2f4:	6808      	ldr	r0, [r1, #0]
 800c2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fa:	f01e 0f10 	tst.w	lr, #16
 800c2fe:	bf08      	it	eq
 800c300:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c304:	f380 8809 	msr	PSP, r0
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop

0800c310 <pxCurrentTCBConst>:
 800c310:	20000828 	.word	0x20000828
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c314:	bf00      	nop
 800c316:	bf00      	nop

0800c318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c322:	b672      	cpsid	i
 800c324:	f383 8811 	msr	BASEPRI, r3
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	b662      	cpsie	i
 800c332:	607b      	str	r3, [r7, #4]
}
 800c334:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c336:	f7fe fb63 	bl	800aa00 <xTaskIncrementTick>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d003      	beq.n	800c348 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c340:	4b06      	ldr	r3, [pc, #24]	; (800c35c <xPortSysTickHandler+0x44>)
 800c342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c346:	601a      	str	r2, [r3, #0]
 800c348:	2300      	movs	r3, #0
 800c34a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	f383 8811 	msr	BASEPRI, r3
}
 800c352:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c354:	bf00      	nop
 800c356:	3708      	adds	r7, #8
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	e000ed04 	.word	0xe000ed04

0800c360 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c360:	b480      	push	{r7}
 800c362:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c364:	4b0b      	ldr	r3, [pc, #44]	; (800c394 <vPortSetupTimerInterrupt+0x34>)
 800c366:	2200      	movs	r2, #0
 800c368:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c36a:	4b0b      	ldr	r3, [pc, #44]	; (800c398 <vPortSetupTimerInterrupt+0x38>)
 800c36c:	2200      	movs	r2, #0
 800c36e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c370:	4b0a      	ldr	r3, [pc, #40]	; (800c39c <vPortSetupTimerInterrupt+0x3c>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a0a      	ldr	r2, [pc, #40]	; (800c3a0 <vPortSetupTimerInterrupt+0x40>)
 800c376:	fba2 2303 	umull	r2, r3, r2, r3
 800c37a:	099b      	lsrs	r3, r3, #6
 800c37c:	4a09      	ldr	r2, [pc, #36]	; (800c3a4 <vPortSetupTimerInterrupt+0x44>)
 800c37e:	3b01      	subs	r3, #1
 800c380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c382:	4b04      	ldr	r3, [pc, #16]	; (800c394 <vPortSetupTimerInterrupt+0x34>)
 800c384:	2207      	movs	r2, #7
 800c386:	601a      	str	r2, [r3, #0]
}
 800c388:	bf00      	nop
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	e000e010 	.word	0xe000e010
 800c398:	e000e018 	.word	0xe000e018
 800c39c:	20000000 	.word	0x20000000
 800c3a0:	10624dd3 	.word	0x10624dd3
 800c3a4:	e000e014 	.word	0xe000e014

0800c3a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c3a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c3b8 <vPortEnableVFP+0x10>
 800c3ac:	6801      	ldr	r1, [r0, #0]
 800c3ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c3b2:	6001      	str	r1, [r0, #0]
 800c3b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c3b6:	bf00      	nop
 800c3b8:	e000ed88 	.word	0xe000ed88

0800c3bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c3c2:	f3ef 8305 	mrs	r3, IPSR
 800c3c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2b0f      	cmp	r3, #15
 800c3cc:	d916      	bls.n	800c3fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c3ce:	4a19      	ldr	r2, [pc, #100]	; (800c434 <vPortValidateInterruptPriority+0x78>)
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c3d8:	4b17      	ldr	r3, [pc, #92]	; (800c438 <vPortValidateInterruptPriority+0x7c>)
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	7afa      	ldrb	r2, [r7, #11]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d20c      	bcs.n	800c3fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e6:	b672      	cpsid	i
 800c3e8:	f383 8811 	msr	BASEPRI, r3
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	b662      	cpsie	i
 800c3f6:	607b      	str	r3, [r7, #4]
}
 800c3f8:	bf00      	nop
 800c3fa:	e7fe      	b.n	800c3fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c3fc:	4b0f      	ldr	r3, [pc, #60]	; (800c43c <vPortValidateInterruptPriority+0x80>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c404:	4b0e      	ldr	r3, [pc, #56]	; (800c440 <vPortValidateInterruptPriority+0x84>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d90c      	bls.n	800c426 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c410:	b672      	cpsid	i
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	b662      	cpsie	i
 800c420:	603b      	str	r3, [r7, #0]
}
 800c422:	bf00      	nop
 800c424:	e7fe      	b.n	800c424 <vPortValidateInterruptPriority+0x68>
	}
 800c426:	bf00      	nop
 800c428:	3714      	adds	r7, #20
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop
 800c434:	e000e3f0 	.word	0xe000e3f0
 800c438:	20000e54 	.word	0x20000e54
 800c43c:	e000ed0c 	.word	0xe000ed0c
 800c440:	20000e58 	.word	0x20000e58

0800c444 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b08a      	sub	sp, #40	; 0x28
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c44c:	2300      	movs	r3, #0
 800c44e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c450:	f7fe fa06 	bl	800a860 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c454:	4b5b      	ldr	r3, [pc, #364]	; (800c5c4 <pvPortMalloc+0x180>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d101      	bne.n	800c460 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c45c:	f000 f91a 	bl	800c694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c460:	4b59      	ldr	r3, [pc, #356]	; (800c5c8 <pvPortMalloc+0x184>)
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	4013      	ands	r3, r2
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f040 8092 	bne.w	800c592 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d01f      	beq.n	800c4b4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c474:	2208      	movs	r2, #8
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4413      	add	r3, r2
 800c47a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f003 0307 	and.w	r3, r3, #7
 800c482:	2b00      	cmp	r3, #0
 800c484:	d016      	beq.n	800c4b4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f023 0307 	bic.w	r3, r3, #7
 800c48c:	3308      	adds	r3, #8
 800c48e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f003 0307 	and.w	r3, r3, #7
 800c496:	2b00      	cmp	r3, #0
 800c498:	d00c      	beq.n	800c4b4 <pvPortMalloc+0x70>
	__asm volatile
 800c49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c49e:	b672      	cpsid	i
 800c4a0:	f383 8811 	msr	BASEPRI, r3
 800c4a4:	f3bf 8f6f 	isb	sy
 800c4a8:	f3bf 8f4f 	dsb	sy
 800c4ac:	b662      	cpsie	i
 800c4ae:	617b      	str	r3, [r7, #20]
}
 800c4b0:	bf00      	nop
 800c4b2:	e7fe      	b.n	800c4b2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d06b      	beq.n	800c592 <pvPortMalloc+0x14e>
 800c4ba:	4b44      	ldr	r3, [pc, #272]	; (800c5cc <pvPortMalloc+0x188>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d866      	bhi.n	800c592 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c4c4:	4b42      	ldr	r3, [pc, #264]	; (800c5d0 <pvPortMalloc+0x18c>)
 800c4c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c4c8:	4b41      	ldr	r3, [pc, #260]	; (800c5d0 <pvPortMalloc+0x18c>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4ce:	e004      	b.n	800c4da <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4dc:	685b      	ldr	r3, [r3, #4]
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d903      	bls.n	800c4ec <pvPortMalloc+0xa8>
 800c4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d1f1      	bne.n	800c4d0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c4ec:	4b35      	ldr	r3, [pc, #212]	; (800c5c4 <pvPortMalloc+0x180>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d04d      	beq.n	800c592 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c4f6:	6a3b      	ldr	r3, [r7, #32]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2208      	movs	r2, #8
 800c4fc:	4413      	add	r3, r2
 800c4fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c502:	681a      	ldr	r2, [r3, #0]
 800c504:	6a3b      	ldr	r3, [r7, #32]
 800c506:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50a:	685a      	ldr	r2, [r3, #4]
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	1ad2      	subs	r2, r2, r3
 800c510:	2308      	movs	r3, #8
 800c512:	005b      	lsls	r3, r3, #1
 800c514:	429a      	cmp	r2, r3
 800c516:	d921      	bls.n	800c55c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4413      	add	r3, r2
 800c51e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	f003 0307 	and.w	r3, r3, #7
 800c526:	2b00      	cmp	r3, #0
 800c528:	d00c      	beq.n	800c544 <pvPortMalloc+0x100>
	__asm volatile
 800c52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52e:	b672      	cpsid	i
 800c530:	f383 8811 	msr	BASEPRI, r3
 800c534:	f3bf 8f6f 	isb	sy
 800c538:	f3bf 8f4f 	dsb	sy
 800c53c:	b662      	cpsie	i
 800c53e:	613b      	str	r3, [r7, #16]
}
 800c540:	bf00      	nop
 800c542:	e7fe      	b.n	800c542 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c546:	685a      	ldr	r2, [r3, #4]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	1ad2      	subs	r2, r2, r3
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c556:	69b8      	ldr	r0, [r7, #24]
 800c558:	f000 f8fe 	bl	800c758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c55c:	4b1b      	ldr	r3, [pc, #108]	; (800c5cc <pvPortMalloc+0x188>)
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	1ad3      	subs	r3, r2, r3
 800c566:	4a19      	ldr	r2, [pc, #100]	; (800c5cc <pvPortMalloc+0x188>)
 800c568:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c56a:	4b18      	ldr	r3, [pc, #96]	; (800c5cc <pvPortMalloc+0x188>)
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	4b19      	ldr	r3, [pc, #100]	; (800c5d4 <pvPortMalloc+0x190>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	429a      	cmp	r2, r3
 800c574:	d203      	bcs.n	800c57e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c576:	4b15      	ldr	r3, [pc, #84]	; (800c5cc <pvPortMalloc+0x188>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a16      	ldr	r2, [pc, #88]	; (800c5d4 <pvPortMalloc+0x190>)
 800c57c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c580:	685a      	ldr	r2, [r3, #4]
 800c582:	4b11      	ldr	r3, [pc, #68]	; (800c5c8 <pvPortMalloc+0x184>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	431a      	orrs	r2, r3
 800c588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58e:	2200      	movs	r2, #0
 800c590:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c592:	f7fe f973 	bl	800a87c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c596:	69fb      	ldr	r3, [r7, #28]
 800c598:	f003 0307 	and.w	r3, r3, #7
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d00c      	beq.n	800c5ba <pvPortMalloc+0x176>
	__asm volatile
 800c5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a4:	b672      	cpsid	i
 800c5a6:	f383 8811 	msr	BASEPRI, r3
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	f3bf 8f4f 	dsb	sy
 800c5b2:	b662      	cpsie	i
 800c5b4:	60fb      	str	r3, [r7, #12]
}
 800c5b6:	bf00      	nop
 800c5b8:	e7fe      	b.n	800c5b8 <pvPortMalloc+0x174>
	return pvReturn;
 800c5ba:	69fb      	ldr	r3, [r7, #28]
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3728      	adds	r7, #40	; 0x28
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	20004a64 	.word	0x20004a64
 800c5c8:	20004a70 	.word	0x20004a70
 800c5cc:	20004a68 	.word	0x20004a68
 800c5d0:	20004a5c 	.word	0x20004a5c
 800c5d4:	20004a6c 	.word	0x20004a6c

0800c5d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b086      	sub	sp, #24
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d04c      	beq.n	800c684 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c5ea:	2308      	movs	r3, #8
 800c5ec:	425b      	negs	r3, r3
 800c5ee:	697a      	ldr	r2, [r7, #20]
 800c5f0:	4413      	add	r3, r2
 800c5f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	685a      	ldr	r2, [r3, #4]
 800c5fc:	4b23      	ldr	r3, [pc, #140]	; (800c68c <vPortFree+0xb4>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4013      	ands	r3, r2
 800c602:	2b00      	cmp	r3, #0
 800c604:	d10c      	bne.n	800c620 <vPortFree+0x48>
	__asm volatile
 800c606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60a:	b672      	cpsid	i
 800c60c:	f383 8811 	msr	BASEPRI, r3
 800c610:	f3bf 8f6f 	isb	sy
 800c614:	f3bf 8f4f 	dsb	sy
 800c618:	b662      	cpsie	i
 800c61a:	60fb      	str	r3, [r7, #12]
}
 800c61c:	bf00      	nop
 800c61e:	e7fe      	b.n	800c61e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d00c      	beq.n	800c642 <vPortFree+0x6a>
	__asm volatile
 800c628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62c:	b672      	cpsid	i
 800c62e:	f383 8811 	msr	BASEPRI, r3
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	f3bf 8f4f 	dsb	sy
 800c63a:	b662      	cpsie	i
 800c63c:	60bb      	str	r3, [r7, #8]
}
 800c63e:	bf00      	nop
 800c640:	e7fe      	b.n	800c640 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	685a      	ldr	r2, [r3, #4]
 800c646:	4b11      	ldr	r3, [pc, #68]	; (800c68c <vPortFree+0xb4>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4013      	ands	r3, r2
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d019      	beq.n	800c684 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d115      	bne.n	800c684 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	4b0b      	ldr	r3, [pc, #44]	; (800c68c <vPortFree+0xb4>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	43db      	mvns	r3, r3
 800c662:	401a      	ands	r2, r3
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c668:	f7fe f8fa 	bl	800a860 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	685a      	ldr	r2, [r3, #4]
 800c670:	4b07      	ldr	r3, [pc, #28]	; (800c690 <vPortFree+0xb8>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4413      	add	r3, r2
 800c676:	4a06      	ldr	r2, [pc, #24]	; (800c690 <vPortFree+0xb8>)
 800c678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c67a:	6938      	ldr	r0, [r7, #16]
 800c67c:	f000 f86c 	bl	800c758 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c680:	f7fe f8fc 	bl	800a87c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c684:	bf00      	nop
 800c686:	3718      	adds	r7, #24
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	20004a70 	.word	0x20004a70
 800c690:	20004a68 	.word	0x20004a68

0800c694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c694:	b480      	push	{r7}
 800c696:	b085      	sub	sp, #20
 800c698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c69a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c69e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c6a0:	4b27      	ldr	r3, [pc, #156]	; (800c740 <prvHeapInit+0xac>)
 800c6a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f003 0307 	and.w	r3, r3, #7
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00c      	beq.n	800c6c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	3307      	adds	r3, #7
 800c6b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f023 0307 	bic.w	r3, r3, #7
 800c6ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c6bc:	68ba      	ldr	r2, [r7, #8]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	1ad3      	subs	r3, r2, r3
 800c6c2:	4a1f      	ldr	r2, [pc, #124]	; (800c740 <prvHeapInit+0xac>)
 800c6c4:	4413      	add	r3, r2
 800c6c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c6cc:	4a1d      	ldr	r2, [pc, #116]	; (800c744 <prvHeapInit+0xb0>)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c6d2:	4b1c      	ldr	r3, [pc, #112]	; (800c744 <prvHeapInit+0xb0>)
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	68ba      	ldr	r2, [r7, #8]
 800c6dc:	4413      	add	r3, r2
 800c6de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c6e0:	2208      	movs	r2, #8
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	1a9b      	subs	r3, r3, r2
 800c6e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f023 0307 	bic.w	r3, r3, #7
 800c6ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	4a15      	ldr	r2, [pc, #84]	; (800c748 <prvHeapInit+0xb4>)
 800c6f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c6f6:	4b14      	ldr	r3, [pc, #80]	; (800c748 <prvHeapInit+0xb4>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c6fe:	4b12      	ldr	r3, [pc, #72]	; (800c748 <prvHeapInit+0xb4>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2200      	movs	r2, #0
 800c704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	1ad2      	subs	r2, r2, r3
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c714:	4b0c      	ldr	r3, [pc, #48]	; (800c748 <prvHeapInit+0xb4>)
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	4a0a      	ldr	r2, [pc, #40]	; (800c74c <prvHeapInit+0xb8>)
 800c722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	4a09      	ldr	r2, [pc, #36]	; (800c750 <prvHeapInit+0xbc>)
 800c72a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c72c:	4b09      	ldr	r3, [pc, #36]	; (800c754 <prvHeapInit+0xc0>)
 800c72e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c732:	601a      	str	r2, [r3, #0]
}
 800c734:	bf00      	nop
 800c736:	3714      	adds	r7, #20
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr
 800c740:	20000e5c 	.word	0x20000e5c
 800c744:	20004a5c 	.word	0x20004a5c
 800c748:	20004a64 	.word	0x20004a64
 800c74c:	20004a6c 	.word	0x20004a6c
 800c750:	20004a68 	.word	0x20004a68
 800c754:	20004a70 	.word	0x20004a70

0800c758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c760:	4b28      	ldr	r3, [pc, #160]	; (800c804 <prvInsertBlockIntoFreeList+0xac>)
 800c762:	60fb      	str	r3, [r7, #12]
 800c764:	e002      	b.n	800c76c <prvInsertBlockIntoFreeList+0x14>
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	60fb      	str	r3, [r7, #12]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	429a      	cmp	r2, r3
 800c774:	d8f7      	bhi.n	800c766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	68ba      	ldr	r2, [r7, #8]
 800c780:	4413      	add	r3, r2
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	429a      	cmp	r2, r3
 800c786:	d108      	bne.n	800c79a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	685a      	ldr	r2, [r3, #4]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	441a      	add	r2, r3
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	441a      	add	r2, r3
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d118      	bne.n	800c7e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	4b15      	ldr	r3, [pc, #84]	; (800c808 <prvInsertBlockIntoFreeList+0xb0>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d00d      	beq.n	800c7d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	685a      	ldr	r2, [r3, #4]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	441a      	add	r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	681a      	ldr	r2, [r3, #0]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	601a      	str	r2, [r3, #0]
 800c7d4:	e008      	b.n	800c7e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c7d6:	4b0c      	ldr	r3, [pc, #48]	; (800c808 <prvInsertBlockIntoFreeList+0xb0>)
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	601a      	str	r2, [r3, #0]
 800c7de:	e003      	b.n	800c7e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d002      	beq.n	800c7f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7f6:	bf00      	nop
 800c7f8:	3714      	adds	r7, #20
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	20004a5c 	.word	0x20004a5c
 800c808:	20004a64 	.word	0x20004a64

0800c80c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	330c      	adds	r3, #12
 800c81c:	461a      	mov	r2, r3
 800c81e:	6839      	ldr	r1, [r7, #0]
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f002 fafb 	bl	800ee1c <tcpip_send_msg_wait_sem>
 800c826:	4603      	mov	r3, r0
 800c828:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c82a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d103      	bne.n	800c83a <netconn_apimsg+0x2e>
    return apimsg->err;
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c838:	e001      	b.n	800c83e <netconn_apimsg+0x32>
  }
  return err;
 800c83a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
	...

0800c848 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b08e      	sub	sp, #56	; 0x38
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	4603      	mov	r3, r0
 800c850:	603a      	str	r2, [r7, #0]
 800c852:	71fb      	strb	r3, [r7, #7]
 800c854:	460b      	mov	r3, r1
 800c856:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800c858:	79fb      	ldrb	r3, [r7, #7]
 800c85a:	6839      	ldr	r1, [r7, #0]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f001 f96b 	bl	800db38 <netconn_alloc>
 800c862:	6378      	str	r0, [r7, #52]	; 0x34
  if (conn != NULL) {
 800c864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c866:	2b00      	cmp	r3, #0
 800c868:	d054      	beq.n	800c914 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800c86a:	79bb      	ldrb	r3, [r7, #6]
 800c86c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800c86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c870:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800c872:	f107 030c 	add.w	r3, r7, #12
 800c876:	4619      	mov	r1, r3
 800c878:	4829      	ldr	r0, [pc, #164]	; (800c920 <netconn_new_with_proto_and_callback+0xd8>)
 800c87a:	f7ff ffc7 	bl	800c80c <netconn_apimsg>
 800c87e:	4603      	mov	r3, r0
 800c880:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (err != ERR_OK) {
 800c884:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d043      	beq.n	800c914 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800c88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d005      	beq.n	800c8a0 <netconn_new_with_proto_and_callback+0x58>
 800c894:	4b23      	ldr	r3, [pc, #140]	; (800c924 <netconn_new_with_proto_and_callback+0xdc>)
 800c896:	22a3      	movs	r2, #163	; 0xa3
 800c898:	4923      	ldr	r1, [pc, #140]	; (800c928 <netconn_new_with_proto_and_callback+0xe0>)
 800c89a:	4824      	ldr	r0, [pc, #144]	; (800c92c <netconn_new_with_proto_and_callback+0xe4>)
 800c89c:	f00d fc72 	bl	801a184 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800c8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a2:	3310      	adds	r3, #16
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f00d f9a9 	bl	8019bfc <sys_mbox_valid>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d105      	bne.n	800c8bc <netconn_new_with_proto_and_callback+0x74>
 800c8b0:	4b1c      	ldr	r3, [pc, #112]	; (800c924 <netconn_new_with_proto_and_callback+0xdc>)
 800c8b2:	22a4      	movs	r2, #164	; 0xa4
 800c8b4:	491e      	ldr	r1, [pc, #120]	; (800c930 <netconn_new_with_proto_and_callback+0xe8>)
 800c8b6:	481d      	ldr	r0, [pc, #116]	; (800c92c <netconn_new_with_proto_and_callback+0xe4>)
 800c8b8:	f00d fc64 	bl	801a184 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800c8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8be:	3314      	adds	r3, #20
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f00d f99b 	bl	8019bfc <sys_mbox_valid>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d005      	beq.n	800c8d8 <netconn_new_with_proto_and_callback+0x90>
 800c8cc:	4b15      	ldr	r3, [pc, #84]	; (800c924 <netconn_new_with_proto_and_callback+0xdc>)
 800c8ce:	22a6      	movs	r2, #166	; 0xa6
 800c8d0:	4918      	ldr	r1, [pc, #96]	; (800c934 <netconn_new_with_proto_and_callback+0xec>)
 800c8d2:	4816      	ldr	r0, [pc, #88]	; (800c92c <netconn_new_with_proto_and_callback+0xe4>)
 800c8d4:	f00d fc56 	bl	801a184 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800c8d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8da:	330c      	adds	r3, #12
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f00d fa1b 	bl	8019d18 <sys_sem_valid>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d105      	bne.n	800c8f4 <netconn_new_with_proto_and_callback+0xac>
 800c8e8:	4b0e      	ldr	r3, [pc, #56]	; (800c924 <netconn_new_with_proto_and_callback+0xdc>)
 800c8ea:	22a9      	movs	r2, #169	; 0xa9
 800c8ec:	4912      	ldr	r1, [pc, #72]	; (800c938 <netconn_new_with_proto_and_callback+0xf0>)
 800c8ee:	480f      	ldr	r0, [pc, #60]	; (800c92c <netconn_new_with_proto_and_callback+0xe4>)
 800c8f0:	f00d fc48 	bl	801a184 <iprintf>
      sys_sem_free(&conn->op_completed);
 800c8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8f6:	330c      	adds	r3, #12
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f00d fa00 	bl	8019cfe <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800c8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c900:	3310      	adds	r3, #16
 800c902:	4618      	mov	r0, r3
 800c904:	f00d f906 	bl	8019b14 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800c908:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c90a:	2007      	movs	r0, #7
 800c90c:	f002 ffee 	bl	800f8ec <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800c910:	2300      	movs	r3, #0
 800c912:	e000      	b.n	800c916 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800c914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c916:	4618      	mov	r0, r3
 800c918:	3738      	adds	r7, #56	; 0x38
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	0800db0d 	.word	0x0800db0d
 800c924:	0801b138 	.word	0x0801b138
 800c928:	0801b16c 	.word	0x0801b16c
 800c92c:	0801b190 	.word	0x0801b190
 800c930:	0801b1b8 	.word	0x0801b1b8
 800c934:	0801b1d0 	.word	0x0801b1d0
 800c938:	0801b1f4 	.word	0x0801b1f4

0800c93c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b08c      	sub	sp, #48	; 0x30
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d101      	bne.n	800c94e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800c94a:	2300      	movs	r3, #0
 800c94c:	e016      	b.n	800c97c <netconn_prepare_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	60bb      	str	r3, [r7, #8]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
 800c952:	f7f9 f9f5 	bl	8005d40 <sys_now>
 800c956:	4603      	mov	r3, r0
 800c958:	617b      	str	r3, [r7, #20]
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800c95a:	f107 0308 	add.w	r3, r7, #8
 800c95e:	4619      	mov	r1, r3
 800c960:	4808      	ldr	r0, [pc, #32]	; (800c984 <netconn_prepare_delete+0x48>)
 800c962:	f7ff ff53 	bl	800c80c <netconn_apimsg>
 800c966:	4603      	mov	r3, r0
 800c968:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800c96c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c970:	2b00      	cmp	r3, #0
 800c972:	d002      	beq.n	800c97a <netconn_prepare_delete+0x3e>
    return err;
 800c974:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c978:	e000      	b.n	800c97c <netconn_prepare_delete+0x40>
  }
  return ERR_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3730      	adds	r7, #48	; 0x30
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	0800e0b1 	.word	0x0800e0b1

0800c988 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d101      	bne.n	800c99a <netconn_delete+0x12>
    return ERR_OK;
 800c996:	2300      	movs	r3, #0
 800c998:	e00d      	b.n	800c9b6 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7ff ffce 	bl	800c93c <netconn_prepare_delete>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800c9a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d102      	bne.n	800c9b2 <netconn_delete+0x2a>
    netconn_free(conn);
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f001 f941 	bl	800dc34 <netconn_free>
  }
  return err;
 800c9b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
	...

0800c9c0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b08e      	sub	sp, #56	; 0x38
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	60b9      	str	r1, [r7, #8]
 800c9ca:	4613      	mov	r3, r2
 800c9cc:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d109      	bne.n	800c9e8 <netconn_bind+0x28>
 800c9d4:	4b11      	ldr	r3, [pc, #68]	; (800ca1c <netconn_bind+0x5c>)
 800c9d6:	f44f 729c 	mov.w	r2, #312	; 0x138
 800c9da:	4911      	ldr	r1, [pc, #68]	; (800ca20 <netconn_bind+0x60>)
 800c9dc:	4811      	ldr	r0, [pc, #68]	; (800ca24 <netconn_bind+0x64>)
 800c9de:	f00d fbd1 	bl	801a184 <iprintf>
 800c9e2:	f06f 030f 	mvn.w	r3, #15
 800c9e6:	e015      	b.n	800ca14 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d101      	bne.n	800c9f2 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800c9ee:	4b0e      	ldr	r3, [pc, #56]	; (800ca28 <netconn_bind+0x68>)
 800c9f0:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800c9fa:	88fb      	ldrh	r3, [r7, #6]
 800c9fc:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800c9fe:	f107 0310 	add.w	r3, r7, #16
 800ca02:	4619      	mov	r1, r3
 800ca04:	4809      	ldr	r0, [pc, #36]	; (800ca2c <netconn_bind+0x6c>)
 800ca06:	f7ff ff01 	bl	800c80c <netconn_apimsg>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800ca10:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3738      	adds	r7, #56	; 0x38
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	0801b138 	.word	0x0801b138
 800ca20:	0801b270 	.word	0x0801b270
 800ca24:	0801b190 	.word	0x0801b190
 800ca28:	0801e824 	.word	0x0801e824
 800ca2c:	0800e27d 	.word	0x0800e27d

0800ca30 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b08c      	sub	sp, #48	; 0x30
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	460b      	mov	r3, r1
 800ca3a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d109      	bne.n	800ca56 <netconn_listen_with_backlog+0x26>
 800ca42:	4b0d      	ldr	r3, [pc, #52]	; (800ca78 <netconn_listen_with_backlog+0x48>)
 800ca44:	f240 12bb 	movw	r2, #443	; 0x1bb
 800ca48:	490c      	ldr	r1, [pc, #48]	; (800ca7c <netconn_listen_with_backlog+0x4c>)
 800ca4a:	480d      	ldr	r0, [pc, #52]	; (800ca80 <netconn_listen_with_backlog+0x50>)
 800ca4c:	f00d fb9a 	bl	801a184 <iprintf>
 800ca50:	f06f 030f 	mvn.w	r3, #15
 800ca54:	e00c      	b.n	800ca70 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800ca5a:	f107 0308 	add.w	r3, r7, #8
 800ca5e:	4619      	mov	r1, r3
 800ca60:	4808      	ldr	r0, [pc, #32]	; (800ca84 <netconn_listen_with_backlog+0x54>)
 800ca62:	f7ff fed3 	bl	800c80c <netconn_apimsg>
 800ca66:	4603      	mov	r3, r0
 800ca68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ca6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3730      	adds	r7, #48	; 0x30
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}
 800ca78:	0801b138 	.word	0x0801b138
 800ca7c:	0801b2f0 	.word	0x0801b2f0
 800ca80:	0801b190 	.word	0x0801b190
 800ca84:	0800e2f1 	.word	0x0800e2f1

0800ca88 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b086      	sub	sp, #24
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d109      	bne.n	800caac <netconn_accept+0x24>
 800ca98:	4b42      	ldr	r3, [pc, #264]	; (800cba4 <netconn_accept+0x11c>)
 800ca9a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ca9e:	4942      	ldr	r1, [pc, #264]	; (800cba8 <netconn_accept+0x120>)
 800caa0:	4842      	ldr	r0, [pc, #264]	; (800cbac <netconn_accept+0x124>)
 800caa2:	f00d fb6f 	bl	801a184 <iprintf>
 800caa6:	f06f 030f 	mvn.w	r3, #15
 800caaa:	e077      	b.n	800cb9c <netconn_accept+0x114>
  *new_conn = NULL;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	2200      	movs	r2, #0
 800cab0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d109      	bne.n	800cacc <netconn_accept+0x44>
 800cab8:	4b3a      	ldr	r3, [pc, #232]	; (800cba4 <netconn_accept+0x11c>)
 800caba:	f240 12e3 	movw	r2, #483	; 0x1e3
 800cabe:	493c      	ldr	r1, [pc, #240]	; (800cbb0 <netconn_accept+0x128>)
 800cac0:	483a      	ldr	r0, [pc, #232]	; (800cbac <netconn_accept+0x124>)
 800cac2:	f00d fb5f 	bl	801a184 <iprintf>
 800cac6:	f06f 030f 	mvn.w	r3, #15
 800caca:	e067      	b.n	800cb9c <netconn_accept+0x114>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 fb8e 	bl	800d1ee <netconn_err>
 800cad2:	4603      	mov	r3, r0
 800cad4:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800cad6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d002      	beq.n	800cae4 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800cade:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cae2:	e05b      	b.n	800cb9c <netconn_accept+0x114>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	3314      	adds	r3, #20
 800cae8:	4618      	mov	r0, r3
 800caea:	f00d f887 	bl	8019bfc <sys_mbox_valid>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d006      	beq.n	800cb02 <netconn_accept+0x7a>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cafa:	f003 0301 	and.w	r3, r3, #1
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d002      	beq.n	800cb08 <netconn_accept+0x80>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800cb02:	f06f 030e 	mvn.w	r3, #14
 800cb06:	e049      	b.n	800cb9c <netconn_accept+0x114>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cb0e:	f003 0302 	and.w	r3, r3, #2
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d00e      	beq.n	800cb34 <netconn_accept+0xac>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	3314      	adds	r3, #20
 800cb1a:	f107 020c 	add.w	r2, r7, #12
 800cb1e:	4611      	mov	r1, r2
 800cb20:	4618      	mov	r0, r3
 800cb22:	f00d f854 	bl	8019bce <sys_arch_mbox_tryfetch>
 800cb26:	4603      	mov	r3, r0
 800cb28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb2c:	d113      	bne.n	800cb56 <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800cb2e:	f06f 0306 	mvn.w	r3, #6
 800cb32:	e033      	b.n	800cb9c <netconn_accept+0x114>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f103 0014 	add.w	r0, r3, #20
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6a1a      	ldr	r2, [r3, #32]
 800cb3e:	f107 030c 	add.w	r3, r7, #12
 800cb42:	4619      	mov	r1, r3
 800cb44:	f00d f812 	bl	8019b6c <sys_arch_mbox_fetch>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb4e:	d102      	bne.n	800cb56 <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 800cb50:	f06f 0302 	mvn.w	r3, #2
 800cb54:	e022      	b.n	800cb9c <netconn_accept+0x114>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d005      	beq.n	800cb6a <netconn_accept+0xe2>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb62:	2200      	movs	r2, #0
 800cb64:	2101      	movs	r1, #1
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	f107 0213 	add.w	r2, r7, #19
 800cb70:	4611      	mov	r1, r2
 800cb72:	4618      	mov	r0, r3
 800cb74:	f000 fb8c 	bl	800d290 <lwip_netconn_is_err_msg>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d002      	beq.n	800cb84 <netconn_accept+0xfc>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800cb7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb82:	e00b      	b.n	800cb9c <netconn_accept+0x114>
  }
  if (accept_ptr == NULL) {
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d102      	bne.n	800cb90 <netconn_accept+0x108>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800cb8a:	f06f 030e 	mvn.w	r3, #14
 800cb8e:	e005      	b.n	800cb9c <netconn_accept+0x114>
  }
  newconn = (struct netconn *)accept_ptr;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	697a      	ldr	r2, [r7, #20]
 800cb98:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800cb9a:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3718      	adds	r7, #24
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	0801b138 	.word	0x0801b138
 800cba8:	0801b310 	.word	0x0801b310
 800cbac:	0801b190 	.word	0x0801b190
 800cbb0:	0801b330 	.word	0x0801b330

0800cbb4 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b08a      	sub	sp, #40	; 0x28
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	60f8      	str	r0, [r7, #12]
 800cbbc:	60b9      	str	r1, [r7, #8]
 800cbbe:	4613      	mov	r3, r2
 800cbc0:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d109      	bne.n	800cbe0 <netconn_recv_data+0x2c>
 800cbcc:	4b64      	ldr	r3, [pc, #400]	; (800cd60 <netconn_recv_data+0x1ac>)
 800cbce:	f44f 7212 	mov.w	r2, #584	; 0x248
 800cbd2:	4964      	ldr	r1, [pc, #400]	; (800cd64 <netconn_recv_data+0x1b0>)
 800cbd4:	4864      	ldr	r0, [pc, #400]	; (800cd68 <netconn_recv_data+0x1b4>)
 800cbd6:	f00d fad5 	bl	801a184 <iprintf>
 800cbda:	f06f 030f 	mvn.w	r3, #15
 800cbde:	e0bb      	b.n	800cd58 <netconn_recv_data+0x1a4>
  *new_buf = NULL;
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d109      	bne.n	800cc00 <netconn_recv_data+0x4c>
 800cbec:	4b5c      	ldr	r3, [pc, #368]	; (800cd60 <netconn_recv_data+0x1ac>)
 800cbee:	f240 224a 	movw	r2, #586	; 0x24a
 800cbf2:	495e      	ldr	r1, [pc, #376]	; (800cd6c <netconn_recv_data+0x1b8>)
 800cbf4:	485c      	ldr	r0, [pc, #368]	; (800cd68 <netconn_recv_data+0x1b4>)
 800cbf6:	f00d fac5 	bl	801a184 <iprintf>
 800cbfa:	f06f 030f 	mvn.w	r3, #15
 800cbfe:	e0ab      	b.n	800cd58 <netconn_recv_data+0x1a4>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	3310      	adds	r3, #16
 800cc04:	4618      	mov	r0, r3
 800cc06:	f00c fff9 	bl	8019bfc <sys_mbox_valid>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d10e      	bne.n	800cc2e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f000 faec 	bl	800d1ee <netconn_err>
 800cc16:	4603      	mov	r3, r0
 800cc18:	77fb      	strb	r3, [r7, #31]
    if (err != ERR_OK) {
 800cc1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d002      	beq.n	800cc28 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800cc22:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cc26:	e097      	b.n	800cd58 <netconn_recv_data+0x1a4>
    }
    return ERR_CONN;
 800cc28:	f06f 030a 	mvn.w	r3, #10
 800cc2c:	e094      	b.n	800cd58 <netconn_recv_data+0x1a4>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cc34:	f003 0302 	and.w	r3, r3, #2
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d110      	bne.n	800cc5e <netconn_recv_data+0xaa>
 800cc3c:	79fb      	ldrb	r3, [r7, #7]
 800cc3e:	f003 0304 	and.w	r3, r3, #4
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d10b      	bne.n	800cc5e <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cc4c:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d104      	bne.n	800cc5e <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d025      	beq.n	800ccaa <netconn_recv_data+0xf6>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	3310      	adds	r3, #16
 800cc62:	f107 0218 	add.w	r2, r7, #24
 800cc66:	4611      	mov	r1, r2
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f00c ffb0 	bl	8019bce <sys_arch_mbox_tryfetch>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc74:	d12a      	bne.n	800cccc <netconn_recv_data+0x118>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f000 fab9 	bl	800d1ee <netconn_err>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      if (err != ERR_OK) {
 800cc82:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d002      	beq.n	800cc90 <netconn_recv_data+0xdc>
        /* return pending error */
        return err;
 800cc8a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cc8e:	e063      	b.n	800cd58 <netconn_recv_data+0x1a4>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cc96:	f003 0301 	and.w	r3, r3, #1
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d002      	beq.n	800cca4 <netconn_recv_data+0xf0>
        return ERR_CONN;
 800cc9e:	f06f 030a 	mvn.w	r3, #10
 800cca2:	e059      	b.n	800cd58 <netconn_recv_data+0x1a4>
      }
      return ERR_WOULDBLOCK;
 800cca4:	f06f 0306 	mvn.w	r3, #6
 800cca8:	e056      	b.n	800cd58 <netconn_recv_data+0x1a4>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	f103 0010 	add.w	r0, r3, #16
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6a1a      	ldr	r2, [r3, #32]
 800ccb4:	f107 0318 	add.w	r3, r7, #24
 800ccb8:	4619      	mov	r1, r3
 800ccba:	f00c ff57 	bl	8019b6c <sys_arch_mbox_fetch>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccc4:	d102      	bne.n	800cccc <netconn_recv_data+0x118>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 800ccc6:	f06f 0302 	mvn.w	r3, #2
 800ccca:	e045      	b.n	800cd58 <netconn_recv_data+0x1a4>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ccd4:	2b10      	cmp	r3, #16
 800ccd6:	d117      	bne.n	800cd08 <netconn_recv_data+0x154>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	f107 0217 	add.w	r2, r7, #23
 800ccde:	4611      	mov	r1, r2
 800cce0:	4618      	mov	r0, r3
 800cce2:	f000 fad5 	bl	800d290 <lwip_netconn_is_err_msg>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d009      	beq.n	800cd00 <netconn_recv_data+0x14c>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800ccec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ccf0:	f113 0f0f 	cmn.w	r3, #15
 800ccf4:	d101      	bne.n	800ccfa <netconn_recv_data+0x146>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	e02e      	b.n	800cd58 <netconn_recv_data+0x1a4>
      }
      return err;
 800ccfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ccfe:	e02b      	b.n	800cd58 <netconn_recv_data+0x1a4>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800cd00:	69bb      	ldr	r3, [r7, #24]
 800cd02:	891b      	ldrh	r3, [r3, #8]
 800cd04:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cd06:	e00d      	b.n	800cd24 <netconn_recv_data+0x170>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d106      	bne.n	800cd1c <netconn_recv_data+0x168>
 800cd0e:	4b14      	ldr	r3, [pc, #80]	; (800cd60 <netconn_recv_data+0x1ac>)
 800cd10:	f240 2291 	movw	r2, #657	; 0x291
 800cd14:	4916      	ldr	r1, [pc, #88]	; (800cd70 <netconn_recv_data+0x1bc>)
 800cd16:	4814      	ldr	r0, [pc, #80]	; (800cd68 <netconn_recv_data+0x1b4>)
 800cd18:	f00d fa34 	bl	801a184 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800cd1c:	69bb      	ldr	r3, [r7, #24]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	891b      	ldrh	r3, [r3, #8]
 800cd22:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
#endif /* (LWIP_UDP || LWIP_RAW) */

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
 800cd24:	f00d f874 	bl	8019e10 <sys_arch_protect>
 800cd28:	6238      	str	r0, [r7, #32]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cd30:	1ad2      	subs	r2, r2, r3
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	629a      	str	r2, [r3, #40]	; 0x28
 800cd36:	6a38      	ldr	r0, [r7, #32]
 800cd38:	f00d f878 	bl	8019e2c <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d005      	beq.n	800cd50 <netconn_recv_data+0x19c>
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd48:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cd4a:	2101      	movs	r1, #1
 800cd4c:	68f8      	ldr	r0, [r7, #12]
 800cd4e:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800cd50:	69ba      	ldr	r2, [r7, #24]
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800cd56:	2300      	movs	r3, #0
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3728      	adds	r7, #40	; 0x28
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	0801b138 	.word	0x0801b138
 800cd64:	0801b350 	.word	0x0801b350
 800cd68:	0801b190 	.word	0x0801b190
 800cd6c:	0801b370 	.word	0x0801b370
 800cd70:	0801b38c 	.word	0x0801b38c

0800cd74 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d005      	beq.n	800cd92 <netconn_tcp_recvd_msg+0x1e>
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd8e:	2b10      	cmp	r3, #16
 800cd90:	d009      	beq.n	800cda6 <netconn_tcp_recvd_msg+0x32>
 800cd92:	4b0c      	ldr	r3, [pc, #48]	; (800cdc4 <netconn_tcp_recvd_msg+0x50>)
 800cd94:	f240 22a7 	movw	r2, #679	; 0x2a7
 800cd98:	490b      	ldr	r1, [pc, #44]	; (800cdc8 <netconn_tcp_recvd_msg+0x54>)
 800cd9a:	480c      	ldr	r0, [pc, #48]	; (800cdcc <netconn_tcp_recvd_msg+0x58>)
 800cd9c:	f00d f9f2 	bl	801a184 <iprintf>
 800cda0:	f06f 030f 	mvn.w	r3, #15
 800cda4:	e00a      	b.n	800cdbc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	68ba      	ldr	r2, [r7, #8]
 800cdb0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800cdb2:	6879      	ldr	r1, [r7, #4]
 800cdb4:	4806      	ldr	r0, [pc, #24]	; (800cdd0 <netconn_tcp_recvd_msg+0x5c>)
 800cdb6:	f7ff fd29 	bl	800c80c <netconn_apimsg>
 800cdba:	4603      	mov	r3, r0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3710      	adds	r7, #16
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}
 800cdc4:	0801b138 	.word	0x0801b138
 800cdc8:	0801b398 	.word	0x0801b398
 800cdcc:	0801b190 	.word	0x0801b190
 800cdd0:	0800e421 	.word	0x0800e421

0800cdd4 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b090      	sub	sp, #64	; 0x40
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	4613      	mov	r3, r2
 800cde0:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	3310      	adds	r3, #16
 800cde6:	4618      	mov	r0, r3
 800cde8:	f00c ff08 	bl	8019bfc <sys_mbox_valid>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d102      	bne.n	800cdf8 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800cdf2:	f06f 030a 	mvn.w	r3, #10
 800cdf6:	e072      	b.n	800cede <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cdfe:	b25b      	sxtb	r3, r3
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	da09      	bge.n	800ce18 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ce0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce0e:	b2da      	uxtb	r2, r3
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    goto handle_fin;
 800ce16:	e03b      	b.n	800ce90 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800ce18:	79fb      	ldrb	r3, [r7, #7]
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	68b9      	ldr	r1, [r7, #8]
 800ce1e:	68f8      	ldr	r0, [r7, #12]
 800ce20:	f7ff fec8 	bl	800cbb4 <netconn_recv_data>
 800ce24:	4603      	mov	r3, r0
 800ce26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800ce2a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d002      	beq.n	800ce38 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800ce32:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ce36:	e052      	b.n	800cede <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800ce3e:	79fb      	ldrb	r3, [r7, #7]
 800ce40:	f003 0308 	and.w	r3, r3, #8
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d10e      	bne.n	800ce66 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800ce48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d002      	beq.n	800ce54 <netconn_recv_data_tcp+0x80>
 800ce4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce50:	891b      	ldrh	r3, [r3, #8]
 800ce52:	e000      	b.n	800ce56 <netconn_recv_data_tcp+0x82>
 800ce54:	2301      	movs	r3, #1
 800ce56:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800ce58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce5a:	f107 0210 	add.w	r2, r7, #16
 800ce5e:	4619      	mov	r1, r3
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f7ff ff87 	bl	800cd74 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800ce66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d136      	bne.n	800ceda <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 800ce6c:	79fb      	ldrb	r3, [r7, #7]
 800ce6e:	f003 0310 	and.w	r3, r3, #16
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d00b      	beq.n	800ce8e <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800ce7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce80:	b2da      	uxtb	r2, r3
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      return ERR_WOULDBLOCK;
 800ce88:	f06f 0306 	mvn.w	r3, #6
 800ce8c:	e027      	b.n	800cede <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 800ce8e:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d005      	beq.n	800cea4 <netconn_recv_data_tcp+0xd0>
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	2101      	movs	r1, #1
 800cea0:	68f8      	ldr	r0, [r7, #12]
 800cea2:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d10f      	bne.n	800cecc <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800ceac:	68f8      	ldr	r0, [r7, #12]
 800ceae:	f000 f99e 	bl	800d1ee <netconn_err>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800ceb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d002      	beq.n	800cec6 <netconn_recv_data_tcp+0xf2>
          return err;
 800cec0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cec4:	e00b      	b.n	800cede <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 800cec6:	f06f 030d 	mvn.w	r3, #13
 800ceca:	e008      	b.n	800cede <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800cecc:	2101      	movs	r1, #1
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f000 f94e 	bl	800d170 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800ced4:	f06f 030e 	mvn.w	r3, #14
 800ced8:	e001      	b.n	800cede <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 800ceda:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3740      	adds	r7, #64	; 0x40
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
	...

0800cee8 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b086      	sub	sp, #24
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800cef2:	2300      	movs	r3, #0
 800cef4:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d109      	bne.n	800cf10 <netconn_recv+0x28>
 800cefc:	4b32      	ldr	r3, [pc, #200]	; (800cfc8 <netconn_recv+0xe0>)
 800cefe:	f240 3263 	movw	r2, #867	; 0x363
 800cf02:	4932      	ldr	r1, [pc, #200]	; (800cfcc <netconn_recv+0xe4>)
 800cf04:	4832      	ldr	r0, [pc, #200]	; (800cfd0 <netconn_recv+0xe8>)
 800cf06:	f00d f93d 	bl	801a184 <iprintf>
 800cf0a:	f06f 030f 	mvn.w	r3, #15
 800cf0e:	e056      	b.n	800cfbe <netconn_recv+0xd6>
  *new_buf = NULL;
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	2200      	movs	r2, #0
 800cf14:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d109      	bne.n	800cf30 <netconn_recv+0x48>
 800cf1c:	4b2a      	ldr	r3, [pc, #168]	; (800cfc8 <netconn_recv+0xe0>)
 800cf1e:	f240 3265 	movw	r2, #869	; 0x365
 800cf22:	492c      	ldr	r1, [pc, #176]	; (800cfd4 <netconn_recv+0xec>)
 800cf24:	482a      	ldr	r0, [pc, #168]	; (800cfd0 <netconn_recv+0xe8>)
 800cf26:	f00d f92d 	bl	801a184 <iprintf>
 800cf2a:	f06f 030f 	mvn.w	r3, #15
 800cf2e:	e046      	b.n	800cfbe <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf38:	2b10      	cmp	r3, #16
 800cf3a:	d13a      	bne.n	800cfb2 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800cf40:	2006      	movs	r0, #6
 800cf42:	f002 fc81 	bl	800f848 <memp_malloc>
 800cf46:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d102      	bne.n	800cf54 <netconn_recv+0x6c>
      return ERR_MEM;
 800cf4e:	f04f 33ff 	mov.w	r3, #4294967295
 800cf52:	e034      	b.n	800cfbe <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800cf54:	f107 030c 	add.w	r3, r7, #12
 800cf58:	2200      	movs	r2, #0
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f7ff ff39 	bl	800cdd4 <netconn_recv_data_tcp>
 800cf62:	4603      	mov	r3, r0
 800cf64:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800cf66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d006      	beq.n	800cf7c <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800cf6e:	6979      	ldr	r1, [r7, #20]
 800cf70:	2006      	movs	r0, #6
 800cf72:	f002 fcbb 	bl	800f8ec <memp_free>
      return err;
 800cf76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cf7a:	e020      	b.n	800cfbe <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d106      	bne.n	800cf90 <netconn_recv+0xa8>
 800cf82:	4b11      	ldr	r3, [pc, #68]	; (800cfc8 <netconn_recv+0xe0>)
 800cf84:	f240 3279 	movw	r2, #889	; 0x379
 800cf88:	4913      	ldr	r1, [pc, #76]	; (800cfd8 <netconn_recv+0xf0>)
 800cf8a:	4811      	ldr	r0, [pc, #68]	; (800cfd0 <netconn_recv+0xe8>)
 800cf8c:	f00d f8fa 	bl	801a184 <iprintf>

    buf->p = p;
 800cf90:	68fa      	ldr	r2, [r7, #12]
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	697a      	ldr	r2, [r7, #20]
 800cfac:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	e005      	b.n	800cfbe <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	6839      	ldr	r1, [r7, #0]
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f7ff fdfc 	bl	800cbb4 <netconn_recv_data>
 800cfbc:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3718      	adds	r7, #24
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	0801b138 	.word	0x0801b138
 800cfcc:	0801b350 	.word	0x0801b350
 800cfd0:	0801b190 	.word	0x0801b190
 800cfd4:	0801b370 	.word	0x0801b370
 800cfd8:	0801b3e8 	.word	0x0801b3e8

0800cfdc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b092      	sub	sp, #72	; 0x48
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	4611      	mov	r1, r2
 800cfe8:	461a      	mov	r2, r3
 800cfea:	460b      	mov	r3, r1
 800cfec:	80fb      	strh	r3, [r7, #6]
 800cfee:	4613      	mov	r3, r2
 800cff0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d109      	bne.n	800d00c <netconn_write_vectors_partly+0x30>
 800cff8:	4b57      	ldr	r3, [pc, #348]	; (800d158 <netconn_write_vectors_partly+0x17c>)
 800cffa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800cffe:	4957      	ldr	r1, [pc, #348]	; (800d15c <netconn_write_vectors_partly+0x180>)
 800d000:	4857      	ldr	r0, [pc, #348]	; (800d160 <netconn_write_vectors_partly+0x184>)
 800d002:	f00d f8bf 	bl	801a184 <iprintf>
 800d006:	f06f 030f 	mvn.w	r3, #15
 800d00a:	e0a1      	b.n	800d150 <netconn_write_vectors_partly+0x174>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d014:	2b10      	cmp	r3, #16
 800d016:	d009      	beq.n	800d02c <netconn_write_vectors_partly+0x50>
 800d018:	4b4f      	ldr	r3, [pc, #316]	; (800d158 <netconn_write_vectors_partly+0x17c>)
 800d01a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800d01e:	4951      	ldr	r1, [pc, #324]	; (800d164 <netconn_write_vectors_partly+0x188>)
 800d020:	484f      	ldr	r0, [pc, #316]	; (800d160 <netconn_write_vectors_partly+0x184>)
 800d022:	f00d f8af 	bl	801a184 <iprintf>
 800d026:	f06f 0305 	mvn.w	r3, #5
 800d02a:	e091      	b.n	800d150 <netconn_write_vectors_partly+0x174>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d032:	f003 0302 	and.w	r3, r3, #2
 800d036:	2b00      	cmp	r3, #0
 800d038:	d104      	bne.n	800d044 <netconn_write_vectors_partly+0x68>
 800d03a:	797b      	ldrb	r3, [r7, #5]
 800d03c:	f003 0304 	and.w	r3, r3, #4
 800d040:	2b00      	cmp	r3, #0
 800d042:	d001      	beq.n	800d048 <netconn_write_vectors_partly+0x6c>
 800d044:	2301      	movs	r3, #1
 800d046:	e000      	b.n	800d04a <netconn_write_vectors_partly+0x6e>
 800d048:	2300      	movs	r3, #0
 800d04a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	69db      	ldr	r3, [r3, #28]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d002      	beq.n	800d05c <netconn_write_vectors_partly+0x80>
    dontblock = 1;
 800d056:	2301      	movs	r3, #1
 800d058:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800d05c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d060:	2b00      	cmp	r3, #0
 800d062:	d005      	beq.n	800d070 <netconn_write_vectors_partly+0x94>
 800d064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d066:	2b00      	cmp	r3, #0
 800d068:	d102      	bne.n	800d070 <netconn_write_vectors_partly+0x94>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800d06a:	f06f 0305 	mvn.w	r3, #5
 800d06e:	e06f      	b.n	800d150 <netconn_write_vectors_partly+0x174>
  }

  /* sum up the total size */
  size = 0;
 800d070:	2300      	movs	r3, #0
 800d072:	643b      	str	r3, [r7, #64]	; 0x40
  for (i = 0; i < vectorcnt; i++) {
 800d074:	2300      	movs	r3, #0
 800d076:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d078:	e015      	b.n	800d0a6 <netconn_write_vectors_partly+0xca>
    size += vectors[i].len;
 800d07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d07c:	00db      	lsls	r3, r3, #3
 800d07e:	68ba      	ldr	r2, [r7, #8]
 800d080:	4413      	add	r3, r2
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d086:	4413      	add	r3, r2
 800d088:	643b      	str	r3, [r7, #64]	; 0x40
    if (size < vectors[i].len) {
 800d08a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d08c:	00db      	lsls	r3, r3, #3
 800d08e:	68ba      	ldr	r2, [r7, #8]
 800d090:	4413      	add	r3, r2
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d096:	429a      	cmp	r2, r3
 800d098:	d202      	bcs.n	800d0a0 <netconn_write_vectors_partly+0xc4>
      /* overflow */
      return ERR_VAL;
 800d09a:	f06f 0305 	mvn.w	r3, #5
 800d09e:	e057      	b.n	800d150 <netconn_write_vectors_partly+0x174>
  for (i = 0; i < vectorcnt; i++) {
 800d0a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0a6:	88fb      	ldrh	r3, [r7, #6]
 800d0a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	dbe5      	blt.n	800d07a <netconn_write_vectors_partly+0x9e>
    }
  }
  if (size == 0) {
 800d0ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d101      	bne.n	800d0b8 <netconn_write_vectors_partly+0xdc>
    return ERR_OK;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	e04b      	b.n	800d150 <netconn_write_vectors_partly+0x174>
  } else if (size > SSIZE_MAX) {
 800d0b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	da0a      	bge.n	800d0d4 <netconn_write_vectors_partly+0xf8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800d0be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d102      	bne.n	800d0ca <netconn_write_vectors_partly+0xee>
      return ERR_VAL;
 800d0c4:	f06f 0305 	mvn.w	r3, #5
 800d0c8:	e042      	b.n	800d150 <netconn_write_vectors_partly+0x174>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800d0ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d0ce:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800d0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d2:	643b      	str	r3, [r7, #64]	; 0x40
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800d0dc:	88fb      	ldrh	r3, [r7, #6]
 800d0de:	83bb      	strh	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	623b      	str	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800d0e4:	797b      	ldrb	r3, [r7, #5]
 800d0e6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800d0ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ec:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	62bb      	str	r3, [r7, #40]	; 0x28
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	69db      	ldr	r3, [r3, #28]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d004      	beq.n	800d104 <netconn_write_vectors_partly+0x128>
    /* get the time we started, which is later compared to
        sys_now() + conn->send_timeout */
    API_MSG_VAR_REF(msg).msg.w.time_started = sys_now();
 800d0fa:	f7f8 fe21 	bl	8005d40 <sys_now>
 800d0fe:	4603      	mov	r3, r0
 800d100:	633b      	str	r3, [r7, #48]	; 0x30
 800d102:	e001      	b.n	800d108 <netconn_write_vectors_partly+0x12c>
  } else {
    API_MSG_VAR_REF(msg).msg.w.time_started = 0;
 800d104:	2300      	movs	r3, #0
 800d106:	633b      	str	r3, [r7, #48]	; 0x30
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800d108:	f107 0310 	add.w	r3, r7, #16
 800d10c:	4619      	mov	r1, r3
 800d10e:	4816      	ldr	r0, [pc, #88]	; (800d168 <netconn_write_vectors_partly+0x18c>)
 800d110:	f7ff fb7c 	bl	800c80c <netconn_apimsg>
 800d114:	4603      	mov	r3, r0
 800d116:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800d11a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d114      	bne.n	800d14c <netconn_write_vectors_partly+0x170>
    if (bytes_written != NULL) {
 800d122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d124:	2b00      	cmp	r3, #0
 800d126:	d002      	beq.n	800d12e <netconn_write_vectors_partly+0x152>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800d128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d12a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d12c:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800d12e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d132:	2b00      	cmp	r3, #0
 800d134:	d10a      	bne.n	800d14c <netconn_write_vectors_partly+0x170>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800d136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d138:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d006      	beq.n	800d14c <netconn_write_vectors_partly+0x170>
 800d13e:	4b06      	ldr	r3, [pc, #24]	; (800d158 <netconn_write_vectors_partly+0x17c>)
 800d140:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d144:	4909      	ldr	r1, [pc, #36]	; (800d16c <netconn_write_vectors_partly+0x190>)
 800d146:	4806      	ldr	r0, [pc, #24]	; (800d160 <netconn_write_vectors_partly+0x184>)
 800d148:	f00d f81c 	bl	801a184 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800d14c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d150:	4618      	mov	r0, r3
 800d152:	3748      	adds	r7, #72	; 0x48
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}
 800d158:	0801b138 	.word	0x0801b138
 800d15c:	0801b410 	.word	0x0801b410
 800d160:	0801b190 	.word	0x0801b190
 800d164:	0801b42c 	.word	0x0801b42c
 800d168:	0800e869 	.word	0x0800e869
 800d16c:	0801b450 	.word	0x0801b450

0800d170 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b08c      	sub	sp, #48	; 0x30
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	460b      	mov	r3, r1
 800d17a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d109      	bne.n	800d196 <netconn_close_shutdown+0x26>
 800d182:	4b10      	ldr	r3, [pc, #64]	; (800d1c4 <netconn_close_shutdown+0x54>)
 800d184:	f240 4247 	movw	r2, #1095	; 0x447
 800d188:	490f      	ldr	r1, [pc, #60]	; (800d1c8 <netconn_close_shutdown+0x58>)
 800d18a:	4810      	ldr	r0, [pc, #64]	; (800d1cc <netconn_close_shutdown+0x5c>)
 800d18c:	f00c fffa 	bl	801a184 <iprintf>
 800d190:	f06f 030f 	mvn.w	r3, #15
 800d194:	e012      	b.n	800d1bc <netconn_close_shutdown+0x4c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800d19a:	78fb      	ldrb	r3, [r7, #3]
 800d19c:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
 800d19e:	f7f8 fdcf 	bl	8005d40 <sys_now>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	617b      	str	r3, [r7, #20]
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800d1a6:	f107 0308 	add.w	r3, r7, #8
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	4808      	ldr	r0, [pc, #32]	; (800d1d0 <netconn_close_shutdown+0x60>)
 800d1ae:	f7ff fb2d 	bl	800c80c <netconn_apimsg>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800d1b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3730      	adds	r7, #48	; 0x30
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	0801b138 	.word	0x0801b138
 800d1c8:	0801b474 	.word	0x0801b474
 800d1cc:	0801b190 	.word	0x0801b190
 800d1d0:	0800e981 	.word	0x0800e981

0800d1d4 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800d1dc:	2103      	movs	r1, #3
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f7ff ffc6 	bl	800d170 <netconn_close_shutdown>
 800d1e4:	4603      	mov	r3, r0
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3708      	adds	r7, #8
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b084      	sub	sp, #16
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d101      	bne.n	800d200 <netconn_err+0x12>
    return ERR_OK;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	e00d      	b.n	800d21c <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800d200:	f00c fe06 	bl	8019e10 <sys_arch_protect>
 800d204:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	7a1b      	ldrb	r3, [r3, #8]
 800d20a:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800d212:	68f8      	ldr	r0, [r7, #12]
 800d214:	f00c fe0a 	bl	8019e2c <sys_arch_unprotect>
  return err;
 800d218:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3710      	adds	r7, #16
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	4603      	mov	r3, r0
 800d22c:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800d22e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d232:	f113 0f0d 	cmn.w	r3, #13
 800d236:	d009      	beq.n	800d24c <lwip_netconn_err_to_msg+0x28>
 800d238:	f113 0f0d 	cmn.w	r3, #13
 800d23c:	dc0c      	bgt.n	800d258 <lwip_netconn_err_to_msg+0x34>
 800d23e:	f113 0f0f 	cmn.w	r3, #15
 800d242:	d007      	beq.n	800d254 <lwip_netconn_err_to_msg+0x30>
 800d244:	f113 0f0e 	cmn.w	r3, #14
 800d248:	d002      	beq.n	800d250 <lwip_netconn_err_to_msg+0x2c>
 800d24a:	e005      	b.n	800d258 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800d24c:	4b0a      	ldr	r3, [pc, #40]	; (800d278 <lwip_netconn_err_to_msg+0x54>)
 800d24e:	e00e      	b.n	800d26e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800d250:	4b0a      	ldr	r3, [pc, #40]	; (800d27c <lwip_netconn_err_to_msg+0x58>)
 800d252:	e00c      	b.n	800d26e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800d254:	4b0a      	ldr	r3, [pc, #40]	; (800d280 <lwip_netconn_err_to_msg+0x5c>)
 800d256:	e00a      	b.n	800d26e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800d258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d005      	beq.n	800d26c <lwip_netconn_err_to_msg+0x48>
 800d260:	4b08      	ldr	r3, [pc, #32]	; (800d284 <lwip_netconn_err_to_msg+0x60>)
 800d262:	227d      	movs	r2, #125	; 0x7d
 800d264:	4908      	ldr	r1, [pc, #32]	; (800d288 <lwip_netconn_err_to_msg+0x64>)
 800d266:	4809      	ldr	r0, [pc, #36]	; (800d28c <lwip_netconn_err_to_msg+0x68>)
 800d268:	f00c ff8c 	bl	801a184 <iprintf>
      return NULL;
 800d26c:	2300      	movs	r3, #0
  }
}
 800d26e:	4618      	mov	r0, r3
 800d270:	3708      	adds	r7, #8
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}
 800d276:	bf00      	nop
 800d278:	0801e710 	.word	0x0801e710
 800d27c:	0801e711 	.word	0x0801e711
 800d280:	0801e712 	.word	0x0801e712
 800d284:	0801b490 	.word	0x0801b490
 800d288:	0801b4c4 	.word	0x0801b4c4
 800d28c:	0801b4d4 	.word	0x0801b4d4

0800d290 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d105      	bne.n	800d2ac <lwip_netconn_is_err_msg+0x1c>
 800d2a0:	4b12      	ldr	r3, [pc, #72]	; (800d2ec <lwip_netconn_is_err_msg+0x5c>)
 800d2a2:	2285      	movs	r2, #133	; 0x85
 800d2a4:	4912      	ldr	r1, [pc, #72]	; (800d2f0 <lwip_netconn_is_err_msg+0x60>)
 800d2a6:	4813      	ldr	r0, [pc, #76]	; (800d2f4 <lwip_netconn_is_err_msg+0x64>)
 800d2a8:	f00c ff6c 	bl	801a184 <iprintf>

  if (msg == &netconn_aborted) {
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4a12      	ldr	r2, [pc, #72]	; (800d2f8 <lwip_netconn_is_err_msg+0x68>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d104      	bne.n	800d2be <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	22f3      	movs	r2, #243	; 0xf3
 800d2b8:	701a      	strb	r2, [r3, #0]
    return 1;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e012      	b.n	800d2e4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4a0e      	ldr	r2, [pc, #56]	; (800d2fc <lwip_netconn_is_err_msg+0x6c>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d104      	bne.n	800d2d0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	22f2      	movs	r2, #242	; 0xf2
 800d2ca:	701a      	strb	r2, [r3, #0]
    return 1;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	e009      	b.n	800d2e4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	4a0b      	ldr	r2, [pc, #44]	; (800d300 <lwip_netconn_is_err_msg+0x70>)
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d104      	bne.n	800d2e2 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	22f1      	movs	r2, #241	; 0xf1
 800d2dc:	701a      	strb	r2, [r3, #0]
    return 1;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	e000      	b.n	800d2e4 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800d2e2:	2300      	movs	r3, #0
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3708      	adds	r7, #8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	0801b490 	.word	0x0801b490
 800d2f0:	0801b4fc 	.word	0x0801b4fc
 800d2f4:	0801b4d4 	.word	0x0801b4d4
 800d2f8:	0801e710 	.word	0x0801e710
 800d2fc:	0801e711 	.word	0x0801e711
 800d300:	0801e712 	.word	0x0801e712

0800d304 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b08a      	sub	sp, #40	; 0x28
 800d308:	af00      	add	r7, sp, #0
 800d30a:	60f8      	str	r0, [r7, #12]
 800d30c:	60b9      	str	r1, [r7, #8]
 800d30e:	607a      	str	r2, [r7, #4]
 800d310:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d105      	bne.n	800d324 <recv_udp+0x20>
 800d318:	4b43      	ldr	r3, [pc, #268]	; (800d428 <recv_udp+0x124>)
 800d31a:	22e5      	movs	r2, #229	; 0xe5
 800d31c:	4943      	ldr	r1, [pc, #268]	; (800d42c <recv_udp+0x128>)
 800d31e:	4844      	ldr	r0, [pc, #272]	; (800d430 <recv_udp+0x12c>)
 800d320:	f00c ff30 	bl	801a184 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d105      	bne.n	800d336 <recv_udp+0x32>
 800d32a:	4b3f      	ldr	r3, [pc, #252]	; (800d428 <recv_udp+0x124>)
 800d32c:	22e6      	movs	r2, #230	; 0xe6
 800d32e:	4941      	ldr	r1, [pc, #260]	; (800d434 <recv_udp+0x130>)
 800d330:	483f      	ldr	r0, [pc, #252]	; (800d430 <recv_udp+0x12c>)
 800d332:	f00c ff27 	bl	801a184 <iprintf>
  conn = (struct netconn *)arg;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	627b      	str	r3, [r7, #36]	; 0x24

  if (conn == NULL) {
 800d33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d103      	bne.n	800d348 <recv_udp+0x44>
    pbuf_free(p);
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f003 f977 	bl	8010634 <pbuf_free>
    return;
 800d346:	e06b      	b.n	800d420 <recv_udp+0x11c>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800d348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34a:	685b      	ldr	r3, [r3, #4]
 800d34c:	68ba      	ldr	r2, [r7, #8]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d005      	beq.n	800d35e <recv_udp+0x5a>
 800d352:	4b35      	ldr	r3, [pc, #212]	; (800d428 <recv_udp+0x124>)
 800d354:	22ee      	movs	r2, #238	; 0xee
 800d356:	4938      	ldr	r1, [pc, #224]	; (800d438 <recv_udp+0x134>)
 800d358:	4835      	ldr	r0, [pc, #212]	; (800d430 <recv_udp+0x12c>)
 800d35a:	f00c ff13 	bl	801a184 <iprintf>

#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
 800d35e:	f00c fd57 	bl	8019e10 <sys_arch_protect>
 800d362:	6238      	str	r0, [r7, #32]
 800d364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d368:	61fb      	str	r3, [r7, #28]
 800d36a:	6a38      	ldr	r0, [r7, #32]
 800d36c:	f00c fd5e 	bl	8019e2c <sys_arch_unprotect>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
 800d370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d372:	3310      	adds	r3, #16
 800d374:	4618      	mov	r0, r3
 800d376:	f00c fc41 	bl	8019bfc <sys_mbox_valid>
 800d37a:	4603      	mov	r3, r0
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d008      	beq.n	800d392 <recv_udp+0x8e>
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	891b      	ldrh	r3, [r3, #8]
 800d384:	461a      	mov	r2, r3
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	441a      	add	r2, r3
 800d38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
 800d38e:	429a      	cmp	r2, r3
 800d390:	dd03      	ble.n	800d39a <recv_udp+0x96>
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f003 f94e 	bl	8010634 <pbuf_free>
    return;
 800d398:	e042      	b.n	800d420 <recv_udp+0x11c>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d39a:	2006      	movs	r0, #6
 800d39c:	f002 fa54 	bl	800f848 <memp_malloc>
 800d3a0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800d3a2:	69bb      	ldr	r3, [r7, #24]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d103      	bne.n	800d3b0 <recv_udp+0xac>
    pbuf_free(p);
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f003 f943 	bl	8010634 <pbuf_free>
    return;
 800d3ae:	e037      	b.n	800d420 <recv_udp+0x11c>
  } else {
    buf->p = p;
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	687a      	ldr	r2, [r7, #4]
 800d3b4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d002      	beq.n	800d3c8 <recv_udp+0xc4>
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	e000      	b.n	800d3ca <recv_udp+0xc6>
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	69ba      	ldr	r2, [r7, #24]
 800d3cc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800d3d2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	891b      	ldrh	r3, [r3, #8]
 800d3d8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800d3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3dc:	3310      	adds	r3, #16
 800d3de:	69b9      	ldr	r1, [r7, #24]
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f00c fba9 	bl	8019b38 <sys_mbox_trypost>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d003      	beq.n	800d3f4 <recv_udp+0xf0>
    netbuf_delete(buf);
 800d3ec:	69b8      	ldr	r0, [r7, #24]
 800d3ee:	f001 fb53 	bl	800ea98 <netbuf_delete>
    return;
 800d3f2:	e015      	b.n	800d420 <recv_udp+0x11c>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
 800d3f4:	f00c fd0c 	bl	8019e10 <sys_arch_protect>
 800d3f8:	6138      	str	r0, [r7, #16]
 800d3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d3fe:	8afb      	ldrh	r3, [r7, #22]
 800d400:	441a      	add	r2, r3
 800d402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d404:	629a      	str	r2, [r3, #40]	; 0x28
 800d406:	6938      	ldr	r0, [r7, #16]
 800d408:	f00c fd10 	bl	8019e2c <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d410:	2b00      	cmp	r3, #0
 800d412:	d005      	beq.n	800d420 <recv_udp+0x11c>
 800d414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d418:	8afa      	ldrh	r2, [r7, #22]
 800d41a:	2100      	movs	r1, #0
 800d41c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d41e:	4798      	blx	r3
  }
}
 800d420:	3728      	adds	r7, #40	; 0x28
 800d422:	46bd      	mov	sp, r7
 800d424:	bd80      	pop	{r7, pc}
 800d426:	bf00      	nop
 800d428:	0801b490 	.word	0x0801b490
 800d42c:	0801b508 	.word	0x0801b508
 800d430:	0801b4d4 	.word	0x0801b4d4
 800d434:	0801b52c 	.word	0x0801b52c
 800d438:	0801b54c 	.word	0x0801b54c

0800d43c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b088      	sub	sp, #32
 800d440:	af00      	add	r7, sp, #0
 800d442:	60f8      	str	r0, [r7, #12]
 800d444:	60b9      	str	r1, [r7, #8]
 800d446:	607a      	str	r2, [r7, #4]
 800d448:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d106      	bne.n	800d45e <recv_tcp+0x22>
 800d450:	4b3c      	ldr	r3, [pc, #240]	; (800d544 <recv_tcp+0x108>)
 800d452:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d456:	493c      	ldr	r1, [pc, #240]	; (800d548 <recv_tcp+0x10c>)
 800d458:	483c      	ldr	r0, [pc, #240]	; (800d54c <recv_tcp+0x110>)
 800d45a:	f00c fe93 	bl	801a184 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d106      	bne.n	800d472 <recv_tcp+0x36>
 800d464:	4b37      	ldr	r3, [pc, #220]	; (800d544 <recv_tcp+0x108>)
 800d466:	f240 122d 	movw	r2, #301	; 0x12d
 800d46a:	4939      	ldr	r1, [pc, #228]	; (800d550 <recv_tcp+0x114>)
 800d46c:	4837      	ldr	r0, [pc, #220]	; (800d54c <recv_tcp+0x110>)
 800d46e:	f00c fe89 	bl	801a184 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800d472:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d006      	beq.n	800d488 <recv_tcp+0x4c>
 800d47a:	4b32      	ldr	r3, [pc, #200]	; (800d544 <recv_tcp+0x108>)
 800d47c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800d480:	4934      	ldr	r1, [pc, #208]	; (800d554 <recv_tcp+0x118>)
 800d482:	4832      	ldr	r0, [pc, #200]	; (800d54c <recv_tcp+0x110>)
 800d484:	f00c fe7e 	bl	801a184 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d102      	bne.n	800d498 <recv_tcp+0x5c>
    return ERR_VAL;
 800d492:	f06f 0305 	mvn.w	r3, #5
 800d496:	e051      	b.n	800d53c <recv_tcp+0x100>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	68ba      	ldr	r2, [r7, #8]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d006      	beq.n	800d4b0 <recv_tcp+0x74>
 800d4a2:	4b28      	ldr	r3, [pc, #160]	; (800d544 <recv_tcp+0x108>)
 800d4a4:	f240 1235 	movw	r2, #309	; 0x135
 800d4a8:	492b      	ldr	r1, [pc, #172]	; (800d558 <recv_tcp+0x11c>)
 800d4aa:	4828      	ldr	r0, [pc, #160]	; (800d54c <recv_tcp+0x110>)
 800d4ac:	f00c fe6a 	bl	801a184 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	3310      	adds	r3, #16
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f00c fba1 	bl	8019bfc <sys_mbox_valid>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10d      	bne.n	800d4dc <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d008      	beq.n	800d4d8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	891b      	ldrh	r3, [r3, #8]
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	68b8      	ldr	r0, [r7, #8]
 800d4ce:	f004 f869 	bl	80115a4 <tcp_recved>
      pbuf_free(p);
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f003 f8ae 	bl	8010634 <pbuf_free>
    }
    return ERR_OK;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	e02f      	b.n	800d53c <recv_tcp+0x100>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d005      	beq.n	800d4ee <recv_tcp+0xb2>
    msg = p;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	891b      	ldrh	r3, [r3, #8]
 800d4ea:	83fb      	strh	r3, [r7, #30]
 800d4ec:	e003      	b.n	800d4f6 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800d4ee:	4b1b      	ldr	r3, [pc, #108]	; (800d55c <recv_tcp+0x120>)
 800d4f0:	61bb      	str	r3, [r7, #24]
    len = 0;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	3310      	adds	r3, #16
 800d4fa:	69b9      	ldr	r1, [r7, #24]
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f00c fb1b 	bl	8019b38 <sys_mbox_trypost>
 800d502:	4603      	mov	r3, r0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d002      	beq.n	800d50e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800d508:	f04f 33ff 	mov.w	r3, #4294967295
 800d50c:	e016      	b.n	800d53c <recv_tcp+0x100>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
 800d50e:	f00c fc7f 	bl	8019e10 <sys_arch_protect>
 800d512:	6138      	str	r0, [r7, #16]
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d518:	8bfb      	ldrh	r3, [r7, #30]
 800d51a:	441a      	add	r2, r3
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	629a      	str	r2, [r3, #40]	; 0x28
 800d520:	6938      	ldr	r0, [r7, #16]
 800d522:	f00c fc83 	bl	8019e2c <sys_arch_unprotect>
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d005      	beq.n	800d53a <recv_tcp+0xfe>
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d532:	8bfa      	ldrh	r2, [r7, #30]
 800d534:	2100      	movs	r1, #0
 800d536:	6978      	ldr	r0, [r7, #20]
 800d538:	4798      	blx	r3
  }

  return ERR_OK;
 800d53a:	2300      	movs	r3, #0
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3720      	adds	r7, #32
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}
 800d544:	0801b490 	.word	0x0801b490
 800d548:	0801b56c 	.word	0x0801b56c
 800d54c:	0801b4d4 	.word	0x0801b4d4
 800d550:	0801b590 	.word	0x0801b590
 800d554:	0801b5b0 	.word	0x0801b5b0
 800d558:	0801b5c8 	.word	0x0801b5c8
 800d55c:	0801e712 	.word	0x0801e712

0800d560 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d106      	bne.n	800d582 <poll_tcp+0x22>
 800d574:	4b23      	ldr	r3, [pc, #140]	; (800d604 <poll_tcp+0xa4>)
 800d576:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800d57a:	4923      	ldr	r1, [pc, #140]	; (800d608 <poll_tcp+0xa8>)
 800d57c:	4823      	ldr	r0, [pc, #140]	; (800d60c <poll_tcp+0xac>)
 800d57e:	f00c fe01 	bl	801a184 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	785b      	ldrb	r3, [r3, #1]
 800d586:	2b01      	cmp	r3, #1
 800d588:	d104      	bne.n	800d594 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d58a:	2101      	movs	r1, #1
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f000 ff7d 	bl	800e48c <lwip_netconn_do_writemore>
 800d592:	e007      	b.n	800d5a4 <poll_tcp+0x44>
  } else if (conn->state == NETCONN_CLOSE) {
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	785b      	ldrb	r3, [r3, #1]
 800d598:	2b04      	cmp	r3, #4
 800d59a:	d103      	bne.n	800d5a4 <poll_tcp+0x44>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
      conn->current_msg->msg.sd.polls_left--;
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d59c:	2101      	movs	r1, #1
 800d59e:	68f8      	ldr	r0, [r7, #12]
 800d5a0:	f000 fc10 	bl	800ddc4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d5aa:	f003 0310 	and.w	r3, r3, #16
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d023      	beq.n	800d5fa <poll_tcp+0x9a>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	685b      	ldr	r3, [r3, #4]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d01f      	beq.n	800d5fa <poll_tcp+0x9a>
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d5c2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d5c6:	d318      	bcc.n	800d5fa <poll_tcp+0x9a>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d5d0:	2b04      	cmp	r3, #4
 800d5d2:	d812      	bhi.n	800d5fa <poll_tcp+0x9a>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d5da:	f023 0310 	bic.w	r3, r3, #16
 800d5de:	b2da      	uxtb	r2, r3
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d005      	beq.n	800d5fa <poll_tcp+0x9a>
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	2102      	movs	r1, #2
 800d5f6:	68f8      	ldr	r0, [r7, #12]
 800d5f8:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d5fa:	2300      	movs	r3, #0
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3710      	adds	r7, #16
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	0801b490 	.word	0x0801b490
 800d608:	0801b5e8 	.word	0x0801b5e8
 800d60c:	0801b4d4 	.word	0x0801b4d4

0800d610 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b086      	sub	sp, #24
 800d614:	af00      	add	r7, sp, #0
 800d616:	60f8      	str	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	4613      	mov	r3, r2
 800d61c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d106      	bne.n	800d636 <sent_tcp+0x26>
 800d628:	4b21      	ldr	r3, [pc, #132]	; (800d6b0 <sent_tcp+0xa0>)
 800d62a:	f240 1293 	movw	r2, #403	; 0x193
 800d62e:	4921      	ldr	r1, [pc, #132]	; (800d6b4 <sent_tcp+0xa4>)
 800d630:	4821      	ldr	r0, [pc, #132]	; (800d6b8 <sent_tcp+0xa8>)
 800d632:	f00c fda7 	bl	801a184 <iprintf>

  if (conn) {
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d034      	beq.n	800d6a6 <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	785b      	ldrb	r3, [r3, #1]
 800d640:	2b01      	cmp	r3, #1
 800d642:	d104      	bne.n	800d64e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d644:	2101      	movs	r1, #1
 800d646:	6978      	ldr	r0, [r7, #20]
 800d648:	f000 ff20 	bl	800e48c <lwip_netconn_do_writemore>
 800d64c:	e007      	b.n	800d65e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	785b      	ldrb	r3, [r3, #1]
 800d652:	2b04      	cmp	r3, #4
 800d654:	d103      	bne.n	800d65e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d656:	2101      	movs	r1, #1
 800d658:	6978      	ldr	r0, [r7, #20]
 800d65a:	f000 fbb3 	bl	800ddc4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	685b      	ldr	r3, [r3, #4]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d01f      	beq.n	800d6a6 <sent_tcp+0x96>
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d66e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d672:	d318      	bcc.n	800d6a6 <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d67c:	2b04      	cmp	r3, #4
 800d67e:	d812      	bhi.n	800d6a6 <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d686:	f023 0310 	bic.w	r3, r3, #16
 800d68a:	b2da      	uxtb	r2, r3
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d696:	2b00      	cmp	r3, #0
 800d698:	d005      	beq.n	800d6a6 <sent_tcp+0x96>
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d69e:	88fa      	ldrh	r2, [r7, #6]
 800d6a0:	2102      	movs	r1, #2
 800d6a2:	6978      	ldr	r0, [r7, #20]
 800d6a4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d6a6:	2300      	movs	r3, #0
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3718      	adds	r7, #24
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	0801b490 	.word	0x0801b490
 800d6b4:	0801b5e8 	.word	0x0801b5e8
 800d6b8:	0801b4d4 	.word	0x0801b4d4

0800d6bc <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b088      	sub	sp, #32
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d106      	bne.n	800d6e0 <err_tcp+0x24>
 800d6d2:	4b61      	ldr	r3, [pc, #388]	; (800d858 <err_tcp+0x19c>)
 800d6d4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800d6d8:	4960      	ldr	r1, [pc, #384]	; (800d85c <err_tcp+0x1a0>)
 800d6da:	4861      	ldr	r0, [pc, #388]	; (800d860 <err_tcp+0x1a4>)
 800d6dc:	f00c fd52 	bl	801a184 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800d6e0:	f00c fb96 	bl	8019e10 <sys_arch_protect>
 800d6e4:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	78fa      	ldrb	r2, [r7, #3]
 800d6f0:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d6f8:	f043 0301 	orr.w	r3, r3, #1
 800d6fc:	b2da      	uxtb	r2, r3
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	785b      	ldrb	r3, [r3, #1]
 800d708:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	2200      	movs	r2, #0
 800d70e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800d710:	69b8      	ldr	r0, [r7, #24]
 800d712:	f00c fb8b 	bl	8019e2c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d716:	69fb      	ldr	r3, [r7, #28]
 800d718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d005      	beq.n	800d72a <err_tcp+0x6e>
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d722:	2200      	movs	r2, #0
 800d724:	2104      	movs	r1, #4
 800d726:	69f8      	ldr	r0, [r7, #28]
 800d728:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d72a:	69fb      	ldr	r3, [r7, #28]
 800d72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d005      	beq.n	800d73e <err_tcp+0x82>
 800d732:	69fb      	ldr	r3, [r7, #28]
 800d734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d736:	2200      	movs	r2, #0
 800d738:	2100      	movs	r1, #0
 800d73a:	69f8      	ldr	r0, [r7, #28]
 800d73c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d73e:	69fb      	ldr	r3, [r7, #28]
 800d740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d742:	2b00      	cmp	r3, #0
 800d744:	d005      	beq.n	800d752 <err_tcp+0x96>
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d74a:	2200      	movs	r2, #0
 800d74c:	2102      	movs	r1, #2
 800d74e:	69f8      	ldr	r0, [r7, #28]
 800d750:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800d752:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d756:	4618      	mov	r0, r3
 800d758:	f7ff fd64 	bl	800d224 <lwip_netconn_err_to_msg>
 800d75c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d75e:	69fb      	ldr	r3, [r7, #28]
 800d760:	3310      	adds	r3, #16
 800d762:	4618      	mov	r0, r3
 800d764:	f00c fa4a 	bl	8019bfc <sys_mbox_valid>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d005      	beq.n	800d77a <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	3310      	adds	r3, #16
 800d772:	6939      	ldr	r1, [r7, #16]
 800d774:	4618      	mov	r0, r3
 800d776:	f00c f9df 	bl	8019b38 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	3314      	adds	r3, #20
 800d77e:	4618      	mov	r0, r3
 800d780:	f00c fa3c 	bl	8019bfc <sys_mbox_valid>
 800d784:	4603      	mov	r3, r0
 800d786:	2b00      	cmp	r3, #0
 800d788:	d005      	beq.n	800d796 <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800d78a:	69fb      	ldr	r3, [r7, #28]
 800d78c:	3314      	adds	r3, #20
 800d78e:	6939      	ldr	r1, [r7, #16]
 800d790:	4618      	mov	r0, r3
 800d792:	f00c f9d1 	bl	8019b38 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800d796:	7dfb      	ldrb	r3, [r7, #23]
 800d798:	2b01      	cmp	r3, #1
 800d79a:	d005      	beq.n	800d7a8 <err_tcp+0xec>
 800d79c:	7dfb      	ldrb	r3, [r7, #23]
 800d79e:	2b04      	cmp	r3, #4
 800d7a0:	d002      	beq.n	800d7a8 <err_tcp+0xec>
 800d7a2:	7dfb      	ldrb	r3, [r7, #23]
 800d7a4:	2b03      	cmp	r3, #3
 800d7a6:	d146      	bne.n	800d836 <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d7ae:	f003 0304 	and.w	r3, r3, #4
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	bf14      	ite	ne
 800d7b6:	2301      	movne	r3, #1
 800d7b8:	2300      	moveq	r3, #0
 800d7ba:	b2db      	uxtb	r3, r3
 800d7bc:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800d7be:	69fb      	ldr	r3, [r7, #28]
 800d7c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d7c4:	f023 0304 	bic.w	r3, r3, #4
 800d7c8:	b2da      	uxtb	r2, r3
 800d7ca:	69fb      	ldr	r3, [r7, #28]
 800d7cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (!was_nonblocking_connect) {
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d13b      	bne.n	800d84e <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d106      	bne.n	800d7ec <err_tcp+0x130>
 800d7de:	4b1e      	ldr	r3, [pc, #120]	; (800d858 <err_tcp+0x19c>)
 800d7e0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d7e4:	491f      	ldr	r1, [pc, #124]	; (800d864 <err_tcp+0x1a8>)
 800d7e6:	481e      	ldr	r0, [pc, #120]	; (800d860 <err_tcp+0x1a4>)
 800d7e8:	f00c fccc 	bl	801a184 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800d7ec:	7dfb      	ldrb	r3, [r7, #23]
 800d7ee:	2b04      	cmp	r3, #4
 800d7f0:	d104      	bne.n	800d7fc <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800d7f2:	69fb      	ldr	r3, [r7, #28]
 800d7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	711a      	strb	r2, [r3, #4]
 800d7fa:	e003      	b.n	800d804 <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d800:	78fa      	ldrb	r2, [r7, #3]
 800d802:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	330c      	adds	r3, #12
 800d80c:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d80e:	68b8      	ldr	r0, [r7, #8]
 800d810:	f00c fa82 	bl	8019d18 <sys_sem_valid>
 800d814:	4603      	mov	r3, r0
 800d816:	2b00      	cmp	r3, #0
 800d818:	d106      	bne.n	800d828 <err_tcp+0x16c>
 800d81a:	4b0f      	ldr	r3, [pc, #60]	; (800d858 <err_tcp+0x19c>)
 800d81c:	f240 12ef 	movw	r2, #495	; 0x1ef
 800d820:	4911      	ldr	r1, [pc, #68]	; (800d868 <err_tcp+0x1ac>)
 800d822:	480f      	ldr	r0, [pc, #60]	; (800d860 <err_tcp+0x1a4>)
 800d824:	f00c fcae 	bl	801a184 <iprintf>
      conn->current_msg = NULL;
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	2200      	movs	r2, #0
 800d82c:	631a      	str	r2, [r3, #48]	; 0x30
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800d82e:	68b8      	ldr	r0, [r7, #8]
 800d830:	f00c fa58 	bl	8019ce4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d834:	e00b      	b.n	800d84e <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d836:	69fb      	ldr	r3, [r7, #28]
 800d838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d008      	beq.n	800d850 <err_tcp+0x194>
 800d83e:	4b06      	ldr	r3, [pc, #24]	; (800d858 <err_tcp+0x19c>)
 800d840:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d844:	4909      	ldr	r1, [pc, #36]	; (800d86c <err_tcp+0x1b0>)
 800d846:	4806      	ldr	r0, [pc, #24]	; (800d860 <err_tcp+0x1a4>)
 800d848:	f00c fc9c 	bl	801a184 <iprintf>
  }
}
 800d84c:	e000      	b.n	800d850 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 800d84e:	bf00      	nop
}
 800d850:	bf00      	nop
 800d852:	3720      	adds	r7, #32
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	0801b490 	.word	0x0801b490
 800d85c:	0801b5e8 	.word	0x0801b5e8
 800d860:	0801b4d4 	.word	0x0801b4d4
 800d864:	0801b5f8 	.word	0x0801b5f8
 800d868:	0801b614 	.word	0x0801b614
 800d86c:	0801b630 	.word	0x0801b630

0800d870 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d87e:	6879      	ldr	r1, [r7, #4]
 800d880:	68f8      	ldr	r0, [r7, #12]
 800d882:	f004 fd55 	bl	8012330 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d886:	490a      	ldr	r1, [pc, #40]	; (800d8b0 <setup_tcp+0x40>)
 800d888:	68f8      	ldr	r0, [r7, #12]
 800d88a:	f004 fd63 	bl	8012354 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d88e:	4909      	ldr	r1, [pc, #36]	; (800d8b4 <setup_tcp+0x44>)
 800d890:	68f8      	ldr	r0, [r7, #12]
 800d892:	f004 fd81 	bl	8012398 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d896:	2202      	movs	r2, #2
 800d898:	4907      	ldr	r1, [pc, #28]	; (800d8b8 <setup_tcp+0x48>)
 800d89a:	68f8      	ldr	r0, [r7, #12]
 800d89c:	f004 fdd8 	bl	8012450 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d8a0:	4906      	ldr	r1, [pc, #24]	; (800d8bc <setup_tcp+0x4c>)
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f004 fd9a 	bl	80123dc <tcp_err>
}
 800d8a8:	bf00      	nop
 800d8aa:	3710      	adds	r7, #16
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	0800d43d 	.word	0x0800d43d
 800d8b4:	0800d611 	.word	0x0800d611
 800d8b8:	0800d561 	.word	0x0800d561
 800d8bc:	0800d6bd 	.word	0x0800d6bd

0800d8c0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800d8c0:	b590      	push	{r4, r7, lr}
 800d8c2:	b089      	sub	sp, #36	; 0x24
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	60b9      	str	r1, [r7, #8]
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d8d2:	69fb      	ldr	r3, [r7, #28]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d102      	bne.n	800d8de <accept_function+0x1e>
    return ERR_VAL;
 800d8d8:	f06f 0305 	mvn.w	r3, #5
 800d8dc:	e0a1      	b.n	800da22 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d8de:	69fb      	ldr	r3, [r7, #28]
 800d8e0:	3314      	adds	r3, #20
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f00c f98a 	bl	8019bfc <sys_mbox_valid>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d102      	bne.n	800d8f4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800d8ee:	f06f 0305 	mvn.w	r3, #5
 800d8f2:	e096      	b.n	800da22 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d11b      	bne.n	800d932 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	f103 0414 	add.w	r4, r3, #20
 800d900:	f06f 000c 	mvn.w	r0, #12
 800d904:	f7ff fc8e 	bl	800d224 <lwip_netconn_err_to_msg>
 800d908:	4603      	mov	r3, r0
 800d90a:	4619      	mov	r1, r3
 800d90c:	4620      	mov	r0, r4
 800d90e:	f00c f913 	bl	8019b38 <sys_mbox_trypost>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d109      	bne.n	800d92c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d005      	beq.n	800d92c <accept_function+0x6c>
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d924:	2200      	movs	r2, #0
 800d926:	2100      	movs	r1, #0
 800d928:	69f8      	ldr	r0, [r7, #28]
 800d92a:	4798      	blx	r3
    }
    return ERR_VAL;
 800d92c:	f06f 0305 	mvn.w	r3, #5
 800d930:	e077      	b.n	800da22 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800d932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d006      	beq.n	800d948 <accept_function+0x88>
 800d93a:	4b3c      	ldr	r3, [pc, #240]	; (800da2c <accept_function+0x16c>)
 800d93c:	f240 222a 	movw	r2, #554	; 0x22a
 800d940:	493b      	ldr	r1, [pc, #236]	; (800da30 <accept_function+0x170>)
 800d942:	483c      	ldr	r0, [pc, #240]	; (800da34 <accept_function+0x174>)
 800d944:	f00c fc1e 	bl	801a184 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	781a      	ldrb	r2, [r3, #0]
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d950:	4619      	mov	r1, r3
 800d952:	4610      	mov	r0, r2
 800d954:	f000 f8f0 	bl	800db38 <netconn_alloc>
 800d958:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800d95a:	69bb      	ldr	r3, [r7, #24]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d11b      	bne.n	800d998 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800d960:	69fb      	ldr	r3, [r7, #28]
 800d962:	f103 0414 	add.w	r4, r3, #20
 800d966:	f06f 000c 	mvn.w	r0, #12
 800d96a:	f7ff fc5b 	bl	800d224 <lwip_netconn_err_to_msg>
 800d96e:	4603      	mov	r3, r0
 800d970:	4619      	mov	r1, r3
 800d972:	4620      	mov	r0, r4
 800d974:	f00c f8e0 	bl	8019b38 <sys_mbox_trypost>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d109      	bne.n	800d992 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d97e:	69fb      	ldr	r3, [r7, #28]
 800d980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d982:	2b00      	cmp	r3, #0
 800d984:	d005      	beq.n	800d992 <accept_function+0xd2>
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d98a:	2200      	movs	r2, #0
 800d98c:	2100      	movs	r1, #0
 800d98e:	69f8      	ldr	r0, [r7, #28]
 800d990:	4798      	blx	r3
    }
    return ERR_MEM;
 800d992:	f04f 33ff 	mov.w	r3, #4294967295
 800d996:	e044      	b.n	800da22 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	68ba      	ldr	r2, [r7, #8]
 800d99c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800d99e:	69b8      	ldr	r0, [r7, #24]
 800d9a0:	f7ff ff66 	bl	800d870 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800d9a4:	69fb      	ldr	r3, [r7, #28]
 800d9a6:	3314      	adds	r3, #20
 800d9a8:	69b9      	ldr	r1, [r7, #24]
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f00c f8c4 	bl	8019b38 <sys_mbox_trypost>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d02a      	beq.n	800da0c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800d9bc:	2100      	movs	r1, #0
 800d9be:	6978      	ldr	r0, [r7, #20]
 800d9c0:	f004 fcb6 	bl	8012330 <tcp_arg>
    tcp_recv(pcb, NULL);
 800d9c4:	2100      	movs	r1, #0
 800d9c6:	6978      	ldr	r0, [r7, #20]
 800d9c8:	f004 fcc4 	bl	8012354 <tcp_recv>
    tcp_sent(pcb, NULL);
 800d9cc:	2100      	movs	r1, #0
 800d9ce:	6978      	ldr	r0, [r7, #20]
 800d9d0:	f004 fce2 	bl	8012398 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	2100      	movs	r1, #0
 800d9d8:	6978      	ldr	r0, [r7, #20]
 800d9da:	f004 fd39 	bl	8012450 <tcp_poll>
    tcp_err(pcb, NULL);
 800d9de:	2100      	movs	r1, #0
 800d9e0:	6978      	ldr	r0, [r7, #20]
 800d9e2:	f004 fcfb 	bl	80123dc <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	3310      	adds	r3, #16
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f00c f88f 	bl	8019b14 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	3310      	adds	r3, #16
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f00c f90f 	bl	8019c1e <sys_mbox_set_invalid>
    netconn_free(newconn);
 800da00:	69b8      	ldr	r0, [r7, #24]
 800da02:	f000 f917 	bl	800dc34 <netconn_free>
    return ERR_MEM;
 800da06:	f04f 33ff 	mov.w	r3, #4294967295
 800da0a:	e00a      	b.n	800da22 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da10:	2b00      	cmp	r3, #0
 800da12:	d005      	beq.n	800da20 <accept_function+0x160>
 800da14:	69fb      	ldr	r3, [r7, #28]
 800da16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da18:	2200      	movs	r2, #0
 800da1a:	2100      	movs	r1, #0
 800da1c:	69f8      	ldr	r0, [r7, #28]
 800da1e:	4798      	blx	r3
  }

  return ERR_OK;
 800da20:	2300      	movs	r3, #0
}
 800da22:	4618      	mov	r0, r3
 800da24:	3724      	adds	r7, #36	; 0x24
 800da26:	46bd      	mov	sp, r7
 800da28:	bd90      	pop	{r4, r7, pc}
 800da2a:	bf00      	nop
 800da2c:	0801b490 	.word	0x0801b490
 800da30:	0801b64c 	.word	0x0801b64c
 800da34:	0801b4d4 	.word	0x0801b4d4

0800da38 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800da38:	b590      	push	{r4, r7, lr}
 800da3a:	b085      	sub	sp, #20
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800da40:	2300      	movs	r3, #0
 800da42:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	685b      	ldr	r3, [r3, #4]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d006      	beq.n	800da5c <pcb_new+0x24>
 800da4e:	4b2b      	ldr	r3, [pc, #172]	; (800dafc <pcb_new+0xc4>)
 800da50:	f240 2265 	movw	r2, #613	; 0x265
 800da54:	492a      	ldr	r1, [pc, #168]	; (800db00 <pcb_new+0xc8>)
 800da56:	482b      	ldr	r0, [pc, #172]	; (800db04 <pcb_new+0xcc>)
 800da58:	f00c fb94 	bl	801a184 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da66:	2b10      	cmp	r3, #16
 800da68:	d022      	beq.n	800dab0 <pcb_new+0x78>
 800da6a:	2b20      	cmp	r3, #32
 800da6c:	d133      	bne.n	800dad6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681c      	ldr	r4, [r3, #0]
 800da72:	7bfb      	ldrb	r3, [r7, #15]
 800da74:	4618      	mov	r0, r3
 800da76:	f009 fd36 	bl	80174e6 <udp_new_ip_type>
 800da7a:	4603      	mov	r3, r0
 800da7c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	685b      	ldr	r3, [r3, #4]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d02a      	beq.n	800dade <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	2b22      	cmp	r3, #34	; 0x22
 800da90:	d104      	bne.n	800da9c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	685b      	ldr	r3, [r3, #4]
 800da98:	2201      	movs	r2, #1
 800da9a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	6858      	ldr	r0, [r3, #4]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	461a      	mov	r2, r3
 800daa8:	4917      	ldr	r1, [pc, #92]	; (800db08 <pcb_new+0xd0>)
 800daaa:	f009 fca3 	bl	80173f4 <udp_recv>
      }
      break;
 800daae:	e016      	b.n	800dade <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681c      	ldr	r4, [r3, #0]
 800dab4:	7bfb      	ldrb	r3, [r7, #15]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f004 fc2c 	bl	8012314 <tcp_new_ip_type>
 800dabc:	4603      	mov	r3, r0
 800dabe:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d00b      	beq.n	800dae2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4618      	mov	r0, r3
 800dad0:	f7ff fece 	bl	800d870 <setup_tcp>
      }
      break;
 800dad4:	e005      	b.n	800dae2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	22fa      	movs	r2, #250	; 0xfa
 800dada:	711a      	strb	r2, [r3, #4]
      return;
 800dadc:	e00a      	b.n	800daf4 <pcb_new+0xbc>
      break;
 800dade:	bf00      	nop
 800dae0:	e000      	b.n	800dae4 <pcb_new+0xac>
      break;
 800dae2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d102      	bne.n	800daf4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	22ff      	movs	r2, #255	; 0xff
 800daf2:	711a      	strb	r2, [r3, #4]
  }
}
 800daf4:	3714      	adds	r7, #20
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd90      	pop	{r4, r7, pc}
 800dafa:	bf00      	nop
 800dafc:	0801b490 	.word	0x0801b490
 800db00:	0801b674 	.word	0x0801b674
 800db04:	0801b4d4 	.word	0x0801b4d4
 800db08:	0800d305 	.word	0x0800d305

0800db0c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	2200      	movs	r2, #0
 800db1c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d102      	bne.n	800db2e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800db28:	68f8      	ldr	r0, [r7, #12]
 800db2a:	f7ff ff85 	bl	800da38 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800db2e:	bf00      	nop
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
	...

0800db38 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b086      	sub	sp, #24
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	4603      	mov	r3, r0
 800db40:	6039      	str	r1, [r7, #0]
 800db42:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800db44:	2300      	movs	r3, #0
 800db46:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800db48:	2007      	movs	r0, #7
 800db4a:	f001 fe7d 	bl	800f848 <memp_malloc>
 800db4e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d101      	bne.n	800db5a <netconn_alloc+0x22>
    return NULL;
 800db56:	2300      	movs	r3, #0
 800db58:	e05f      	b.n	800dc1a <netconn_alloc+0xe2>
  }

  conn->pending_err = ERR_OK;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2200      	movs	r2, #0
 800db5e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	79fa      	ldrb	r2, [r7, #7]
 800db64:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2200      	movs	r2, #0
 800db6a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800db6c:	79fb      	ldrb	r3, [r7, #7]
 800db6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db72:	2b10      	cmp	r3, #16
 800db74:	d004      	beq.n	800db80 <netconn_alloc+0x48>
 800db76:	2b20      	cmp	r3, #32
 800db78:	d105      	bne.n	800db86 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800db7a:	2306      	movs	r3, #6
 800db7c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800db7e:	e00a      	b.n	800db96 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800db80:	2306      	movs	r3, #6
 800db82:	617b      	str	r3, [r7, #20]
      break;
 800db84:	e007      	b.n	800db96 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800db86:	4b27      	ldr	r3, [pc, #156]	; (800dc24 <netconn_alloc+0xec>)
 800db88:	f240 22e5 	movw	r2, #741	; 0x2e5
 800db8c:	4926      	ldr	r1, [pc, #152]	; (800dc28 <netconn_alloc+0xf0>)
 800db8e:	4827      	ldr	r0, [pc, #156]	; (800dc2c <netconn_alloc+0xf4>)
 800db90:	f00c faf8 	bl	801a184 <iprintf>
      goto free_and_return;
 800db94:	e03c      	b.n	800dc10 <netconn_alloc+0xd8>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	3310      	adds	r3, #16
 800db9a:	6979      	ldr	r1, [r7, #20]
 800db9c:	4618      	mov	r0, r3
 800db9e:	f00b ff9f 	bl	8019ae0 <sys_mbox_new>
 800dba2:	4603      	mov	r3, r0
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d132      	bne.n	800dc0e <netconn_alloc+0xd6>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	330c      	adds	r3, #12
 800dbac:	2100      	movs	r1, #0
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f00c f842 	bl	8019c38 <sys_sem_new>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d005      	beq.n	800dbc6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	3310      	adds	r3, #16
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f00b ffa8 	bl	8019b14 <sys_mbox_free>
    goto free_and_return;
 800dbc4:	e024      	b.n	800dc10 <netconn_alloc+0xd8>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	3314      	adds	r3, #20
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f00c f827 	bl	8019c1e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f04f 32ff 	mov.w	r2, #4294967295
 800dbdc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	683a      	ldr	r2, [r7, #0]
 800dbe2:	635a      	str	r2, [r3, #52]	; 0x34
#if LWIP_TCP
  conn->current_msg  = NULL;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2200      	movs	r2, #0
 800dbee:	61da      	str	r2, [r3, #28]
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	621a      	str	r2, [r3, #32]
#endif /* LWIP_SO_RCVTIMEO */
#if LWIP_SO_RCVBUF
  conn->recv_bufsize = RECV_BUFSIZE_DEFAULT;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	4a0d      	ldr	r2, [pc, #52]	; (800dc30 <netconn_alloc+0xf8>)
 800dbfa:	625a      	str	r2, [r3, #36]	; 0x24
  conn->recv_avail   = 0;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	7cfa      	ldrb	r2, [r7, #19]
 800dc06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  return conn;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	e005      	b.n	800dc1a <netconn_alloc+0xe2>
    goto free_and_return;
 800dc0e:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800dc10:	68f9      	ldr	r1, [r7, #12]
 800dc12:	2007      	movs	r0, #7
 800dc14:	f001 fe6a 	bl	800f8ec <memp_free>
  return NULL;
 800dc18:	2300      	movs	r3, #0
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3718      	adds	r7, #24
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
 800dc22:	bf00      	nop
 800dc24:	0801b490 	.word	0x0801b490
 800dc28:	0801b694 	.word	0x0801b694
 800dc2c:	0801b4d4 	.word	0x0801b4d4
 800dc30:	77359400 	.word	0x77359400

0800dc34 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d006      	beq.n	800dc52 <netconn_free+0x1e>
 800dc44:	4b1b      	ldr	r3, [pc, #108]	; (800dcb4 <netconn_free+0x80>)
 800dc46:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800dc4a:	491b      	ldr	r1, [pc, #108]	; (800dcb8 <netconn_free+0x84>)
 800dc4c:	481b      	ldr	r0, [pc, #108]	; (800dcbc <netconn_free+0x88>)
 800dc4e:	f00c fa99 	bl	801a184 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	3310      	adds	r3, #16
 800dc56:	4618      	mov	r0, r3
 800dc58:	f00b ffd0 	bl	8019bfc <sys_mbox_valid>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d006      	beq.n	800dc70 <netconn_free+0x3c>
 800dc62:	4b14      	ldr	r3, [pc, #80]	; (800dcb4 <netconn_free+0x80>)
 800dc64:	f240 3223 	movw	r2, #803	; 0x323
 800dc68:	4915      	ldr	r1, [pc, #84]	; (800dcc0 <netconn_free+0x8c>)
 800dc6a:	4814      	ldr	r0, [pc, #80]	; (800dcbc <netconn_free+0x88>)
 800dc6c:	f00c fa8a 	bl	801a184 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	3314      	adds	r3, #20
 800dc74:	4618      	mov	r0, r3
 800dc76:	f00b ffc1 	bl	8019bfc <sys_mbox_valid>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d006      	beq.n	800dc8e <netconn_free+0x5a>
 800dc80:	4b0c      	ldr	r3, [pc, #48]	; (800dcb4 <netconn_free+0x80>)
 800dc82:	f240 3226 	movw	r2, #806	; 0x326
 800dc86:	490f      	ldr	r1, [pc, #60]	; (800dcc4 <netconn_free+0x90>)
 800dc88:	480c      	ldr	r0, [pc, #48]	; (800dcbc <netconn_free+0x88>)
 800dc8a:	f00c fa7b 	bl	801a184 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	330c      	adds	r3, #12
 800dc92:	4618      	mov	r0, r3
 800dc94:	f00c f833 	bl	8019cfe <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	330c      	adds	r3, #12
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f00c f84c 	bl	8019d3a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800dca2:	6879      	ldr	r1, [r7, #4]
 800dca4:	2007      	movs	r0, #7
 800dca6:	f001 fe21 	bl	800f8ec <memp_free>
}
 800dcaa:	bf00      	nop
 800dcac:	3708      	adds	r7, #8
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}
 800dcb2:	bf00      	nop
 800dcb4:	0801b490 	.word	0x0801b490
 800dcb8:	0801b6bc 	.word	0x0801b6bc
 800dcbc:	0801b4d4 	.word	0x0801b4d4
 800dcc0:	0801b6ec 	.word	0x0801b6ec
 800dcc4:	0801b728 	.word	0x0801b728

0800dcc8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b086      	sub	sp, #24
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	3310      	adds	r3, #16
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f00b ff91 	bl	8019bfc <sys_mbox_valid>
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d02f      	beq.n	800dd40 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800dce0:	e018      	b.n	800dd14 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcea:	2b10      	cmp	r3, #16
 800dcec:	d10e      	bne.n	800dd0c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	f107 020f 	add.w	r2, r7, #15
 800dcf4:	4611      	mov	r1, r2
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7ff faca 	bl	800d290 <lwip_netconn_is_err_msg>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d108      	bne.n	800dd14 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	4618      	mov	r0, r3
 800dd06:	f002 fc95 	bl	8010634 <pbuf_free>
 800dd0a:	e003      	b.n	800dd14 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f000 fec2 	bl	800ea98 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	3310      	adds	r3, #16
 800dd18:	f107 0210 	add.w	r2, r7, #16
 800dd1c:	4611      	mov	r1, r2
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f00b ff55 	bl	8019bce <sys_arch_mbox_tryfetch>
 800dd24:	4603      	mov	r3, r0
 800dd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd2a:	d1da      	bne.n	800dce2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	3310      	adds	r3, #16
 800dd30:	4618      	mov	r0, r3
 800dd32:	f00b feef 	bl	8019b14 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	3310      	adds	r3, #16
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f00b ff6f 	bl	8019c1e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	3314      	adds	r3, #20
 800dd44:	4618      	mov	r0, r3
 800dd46:	f00b ff59 	bl	8019bfc <sys_mbox_valid>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d034      	beq.n	800ddba <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800dd50:	e01d      	b.n	800dd8e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	f107 020e 	add.w	r2, r7, #14
 800dd58:	4611      	mov	r1, r2
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7ff fa98 	bl	800d290 <lwip_netconn_is_err_msg>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d113      	bne.n	800dd8e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800dd6a:	6978      	ldr	r0, [r7, #20]
 800dd6c:	f7ff ffac 	bl	800dcc8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d007      	beq.n	800dd88 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	685b      	ldr	r3, [r3, #4]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f003 fa49 	bl	8011214 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	2200      	movs	r2, #0
 800dd86:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800dd88:	6978      	ldr	r0, [r7, #20]
 800dd8a:	f7ff ff53 	bl	800dc34 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	3314      	adds	r3, #20
 800dd92:	f107 0210 	add.w	r2, r7, #16
 800dd96:	4611      	mov	r1, r2
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f00b ff18 	bl	8019bce <sys_arch_mbox_tryfetch>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dda4:	d1d5      	bne.n	800dd52 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	3314      	adds	r3, #20
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f00b feb2 	bl	8019b14 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	3314      	adds	r3, #20
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f00b ff32 	bl	8019c1e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800ddba:	bf00      	nop
 800ddbc:	3718      	adds	r7, #24
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
	...

0800ddc4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b088      	sub	sp, #32
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	460b      	mov	r3, r1
 800ddce:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d106      	bne.n	800dde8 <lwip_netconn_do_close_internal+0x24>
 800ddda:	4ba9      	ldr	r3, [pc, #676]	; (800e080 <lwip_netconn_do_close_internal+0x2bc>)
 800dddc:	f240 32a2 	movw	r2, #930	; 0x3a2
 800dde0:	49a8      	ldr	r1, [pc, #672]	; (800e084 <lwip_netconn_do_close_internal+0x2c0>)
 800dde2:	48a9      	ldr	r0, [pc, #676]	; (800e088 <lwip_netconn_do_close_internal+0x2c4>)
 800dde4:	f00c f9ce 	bl	801a184 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ddf0:	2b10      	cmp	r3, #16
 800ddf2:	d006      	beq.n	800de02 <lwip_netconn_do_close_internal+0x3e>
 800ddf4:	4ba2      	ldr	r3, [pc, #648]	; (800e080 <lwip_netconn_do_close_internal+0x2bc>)
 800ddf6:	f240 32a3 	movw	r2, #931	; 0x3a3
 800ddfa:	49a4      	ldr	r1, [pc, #656]	; (800e08c <lwip_netconn_do_close_internal+0x2c8>)
 800ddfc:	48a2      	ldr	r0, [pc, #648]	; (800e088 <lwip_netconn_do_close_internal+0x2c4>)
 800ddfe:	f00c f9c1 	bl	801a184 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	785b      	ldrb	r3, [r3, #1]
 800de06:	2b04      	cmp	r3, #4
 800de08:	d006      	beq.n	800de18 <lwip_netconn_do_close_internal+0x54>
 800de0a:	4b9d      	ldr	r3, [pc, #628]	; (800e080 <lwip_netconn_do_close_internal+0x2bc>)
 800de0c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800de10:	499f      	ldr	r1, [pc, #636]	; (800e090 <lwip_netconn_do_close_internal+0x2cc>)
 800de12:	489d      	ldr	r0, [pc, #628]	; (800e088 <lwip_netconn_do_close_internal+0x2c4>)
 800de14:	f00c f9b6 	bl	801a184 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	685b      	ldr	r3, [r3, #4]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d106      	bne.n	800de2e <lwip_netconn_do_close_internal+0x6a>
 800de20:	4b97      	ldr	r3, [pc, #604]	; (800e080 <lwip_netconn_do_close_internal+0x2bc>)
 800de22:	f240 32a5 	movw	r2, #933	; 0x3a5
 800de26:	499b      	ldr	r1, [pc, #620]	; (800e094 <lwip_netconn_do_close_internal+0x2d0>)
 800de28:	4897      	ldr	r0, [pc, #604]	; (800e088 <lwip_netconn_do_close_internal+0x2c4>)
 800de2a:	f00c f9ab 	bl	801a184 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de32:	2b00      	cmp	r3, #0
 800de34:	d106      	bne.n	800de44 <lwip_netconn_do_close_internal+0x80>
 800de36:	4b92      	ldr	r3, [pc, #584]	; (800e080 <lwip_netconn_do_close_internal+0x2bc>)
 800de38:	f240 32a6 	movw	r2, #934	; 0x3a6
 800de3c:	4996      	ldr	r1, [pc, #600]	; (800e098 <lwip_netconn_do_close_internal+0x2d4>)
 800de3e:	4892      	ldr	r0, [pc, #584]	; (800e088 <lwip_netconn_do_close_internal+0x2c4>)
 800de40:	f00c f9a0 	bl	801a184 <iprintf>

  tpcb = conn->pcb.tcp;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	617b      	str	r3, [r7, #20]
  shut = conn->current_msg->msg.sd.shut;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de4e:	7a1b      	ldrb	r3, [r3, #8]
 800de50:	74fb      	strb	r3, [r7, #19]
  shut_rx = shut & NETCONN_SHUT_RD;
 800de52:	7cfb      	ldrb	r3, [r7, #19]
 800de54:	f003 0301 	and.w	r3, r3, #1
 800de58:	74bb      	strb	r3, [r7, #18]
  shut_tx = shut & NETCONN_SHUT_WR;
 800de5a:	7cfb      	ldrb	r3, [r7, #19]
 800de5c:	f003 0302 	and.w	r3, r3, #2
 800de60:	747b      	strb	r3, [r7, #17]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800de62:	7cfb      	ldrb	r3, [r7, #19]
 800de64:	2b03      	cmp	r3, #3
 800de66:	d102      	bne.n	800de6e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800de68:	2301      	movs	r3, #1
 800de6a:	77bb      	strb	r3, [r7, #30]
 800de6c:	e01f      	b.n	800deae <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800de6e:	7cbb      	ldrb	r3, [r7, #18]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d00e      	beq.n	800de92 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800de78:	2b05      	cmp	r3, #5
 800de7a:	d007      	beq.n	800de8c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800de80:	2b06      	cmp	r3, #6
 800de82:	d003      	beq.n	800de8c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800de88:	2b08      	cmp	r3, #8
 800de8a:	d102      	bne.n	800de92 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800de8c:	2301      	movs	r3, #1
 800de8e:	77bb      	strb	r3, [r7, #30]
 800de90:	e00d      	b.n	800deae <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800de92:	7c7b      	ldrb	r3, [r7, #17]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d008      	beq.n	800deaa <lwip_netconn_do_close_internal+0xe6>
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	8b5b      	ldrh	r3, [r3, #26]
 800de9c:	f003 0310 	and.w	r3, r3, #16
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d002      	beq.n	800deaa <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800dea4:	2301      	movs	r3, #1
 800dea6:	77bb      	strb	r3, [r7, #30]
 800dea8:	e001      	b.n	800deae <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800deaa:	2300      	movs	r3, #0
 800deac:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800deae:	7fbb      	ldrb	r3, [r7, #30]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d003      	beq.n	800debc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800deb4:	2100      	movs	r1, #0
 800deb6:	6978      	ldr	r0, [r7, #20]
 800deb8:	f004 fa3a 	bl	8012330 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	7d1b      	ldrb	r3, [r3, #20]
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d104      	bne.n	800dece <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800dec4:	2100      	movs	r1, #0
 800dec6:	6978      	ldr	r0, [r7, #20]
 800dec8:	f004 faaa 	bl	8012420 <tcp_accept>
 800decc:	e01d      	b.n	800df0a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800dece:	7cbb      	ldrb	r3, [r7, #18]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d007      	beq.n	800dee4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800ded4:	2100      	movs	r1, #0
 800ded6:	6978      	ldr	r0, [r7, #20]
 800ded8:	f004 fa3c 	bl	8012354 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800dedc:	2100      	movs	r1, #0
 800dede:	6978      	ldr	r0, [r7, #20]
 800dee0:	f004 fa9e 	bl	8012420 <tcp_accept>
    }
    if (shut_tx) {
 800dee4:	7c7b      	ldrb	r3, [r7, #17]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d003      	beq.n	800def2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800deea:	2100      	movs	r1, #0
 800deec:	6978      	ldr	r0, [r7, #20]
 800deee:	f004 fa53 	bl	8012398 <tcp_sent>
    }
    if (shut_close) {
 800def2:	7fbb      	ldrb	r3, [r7, #30]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d008      	beq.n	800df0a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800def8:	2200      	movs	r2, #0
 800defa:	2100      	movs	r1, #0
 800defc:	6978      	ldr	r0, [r7, #20]
 800defe:	f004 faa7 	bl	8012450 <tcp_poll>
      tcp_err(tpcb, NULL);
 800df02:	2100      	movs	r1, #0
 800df04:	6978      	ldr	r0, [r7, #20]
 800df06:	f004 fa69 	bl	80123dc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800df0a:	7fbb      	ldrb	r3, [r7, #30]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d005      	beq.n	800df1c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800df10:	6978      	ldr	r0, [r7, #20]
 800df12:	f003 f839 	bl	8010f88 <tcp_close>
 800df16:	4603      	mov	r3, r0
 800df18:	77fb      	strb	r3, [r7, #31]
 800df1a:	e007      	b.n	800df2c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800df1c:	7cbb      	ldrb	r3, [r7, #18]
 800df1e:	7c7a      	ldrb	r2, [r7, #17]
 800df20:	4619      	mov	r1, r3
 800df22:	6978      	ldr	r0, [r7, #20]
 800df24:	f003 f85c 	bl	8010fe0 <tcp_shutdown>
 800df28:	4603      	mov	r3, r0
 800df2a:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 800df2c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d102      	bne.n	800df3a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800df34:	2301      	movs	r3, #1
 800df36:	777b      	strb	r3, [r7, #29]
 800df38:	e026      	b.n	800df88 <lwip_netconn_do_close_internal+0x1c4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800df3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df42:	d11f      	bne.n	800df84 <lwip_netconn_do_close_internal+0x1c0>
         nonblocking netconns, we have to wait since no standard socket application
         is prepared for close failing because of resource shortage.
         Check the timeout: this is kind of an lwip addition to the standard sockets:
         we wait for some time when failing to allocate a segment for the FIN */
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
      s32_t close_timeout = LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT;
 800df44:	f644 6320 	movw	r3, #20000	; 0x4e20
 800df48:	61bb      	str	r3, [r7, #24]
#if LWIP_SO_SNDTIMEO
      if (conn->send_timeout > 0) {
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	69db      	ldr	r3, [r3, #28]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	dd02      	ble.n	800df58 <lwip_netconn_do_close_internal+0x194>
        close_timeout = conn->send_timeout;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	69db      	ldr	r3, [r3, #28]
 800df56:	61bb      	str	r3, [r7, #24]
      if (conn->linger >= 0) {
        /* use linger timeout (seconds) */
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
 800df58:	f7f7 fef2 	bl	8005d40 <sys_now>
 800df5c:	4602      	mov	r2, r0
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df62:	68db      	ldr	r3, [r3, #12]
 800df64:	1ad3      	subs	r3, r2, r3
 800df66:	461a      	mov	r2, r3
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	4293      	cmp	r3, r2
 800df6c:	dc0c      	bgt.n	800df88 <lwip_netconn_do_close_internal+0x1c4>
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800df6e:	2301      	movs	r3, #1
 800df70:	777b      	strb	r3, [r7, #29]
        if (shut_close) {
 800df72:	7fbb      	ldrb	r3, [r7, #30]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d007      	beq.n	800df88 <lwip_netconn_do_close_internal+0x1c4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800df78:	6978      	ldr	r0, [r7, #20]
 800df7a:	f003 f94b 	bl	8011214 <tcp_abort>
          err = ERR_OK;
 800df7e:	2300      	movs	r3, #0
 800df80:	77fb      	strb	r3, [r7, #31]
 800df82:	e001      	b.n	800df88 <lwip_netconn_do_close_internal+0x1c4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800df84:	2301      	movs	r3, #1
 800df86:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800df88:	7f7b      	ldrb	r3, [r7, #29]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d044      	beq.n	800e018 <lwip_netconn_do_close_internal+0x254>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	330c      	adds	r3, #12
 800df96:	60fb      	str	r3, [r7, #12]
    conn->current_msg->err = err;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df9c:	7ffa      	ldrb	r2, [r7, #31]
 800df9e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	631a      	str	r2, [r3, #48]	; 0x30
    conn->state = NETCONN_NONE;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800dfac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d129      	bne.n	800e008 <lwip_netconn_do_close_internal+0x244>
      if (shut_close) {
 800dfb4:	7fbb      	ldrb	r3, [r7, #30]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d00c      	beq.n	800dfd4 <lwip_netconn_do_close_internal+0x210>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d005      	beq.n	800dfd4 <lwip_netconn_do_close_internal+0x210>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfcc:	2200      	movs	r2, #0
 800dfce:	2104      	movs	r1, #4
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	4798      	blx	r3
      }
      if (shut_rx) {
 800dfd4:	7cbb      	ldrb	r3, [r7, #18]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d009      	beq.n	800dfee <lwip_netconn_do_close_internal+0x22a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d005      	beq.n	800dfee <lwip_netconn_do_close_internal+0x22a>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	2100      	movs	r1, #0
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	4798      	blx	r3
      }
      if (shut_tx) {
 800dfee:	7c7b      	ldrb	r3, [r7, #17]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d009      	beq.n	800e008 <lwip_netconn_do_close_internal+0x244>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d005      	beq.n	800e008 <lwip_netconn_do_close_internal+0x244>
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e000:	2200      	movs	r2, #0
 800e002:	2102      	movs	r1, #2
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e008:	78fb      	ldrb	r3, [r7, #3]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d002      	beq.n	800e014 <lwip_netconn_do_close_internal+0x250>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800e00e:	68f8      	ldr	r0, [r7, #12]
 800e010:	f00b fe68 	bl	8019ce4 <sys_sem_signal>
    }
    return ERR_OK;
 800e014:	2300      	movs	r3, #0
 800e016:	e02e      	b.n	800e076 <lwip_netconn_do_close_internal+0x2b2>
  }
  if (!close_finished) {
 800e018:	7f7b      	ldrb	r3, [r7, #29]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d11e      	bne.n	800e05c <lwip_netconn_do_close_internal+0x298>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	7d1b      	ldrb	r3, [r3, #20]
 800e022:	2b01      	cmp	r3, #1
 800e024:	d106      	bne.n	800e034 <lwip_netconn_do_close_internal+0x270>
 800e026:	4b16      	ldr	r3, [pc, #88]	; (800e080 <lwip_netconn_do_close_internal+0x2bc>)
 800e028:	f240 4241 	movw	r2, #1089	; 0x441
 800e02c:	491b      	ldr	r1, [pc, #108]	; (800e09c <lwip_netconn_do_close_internal+0x2d8>)
 800e02e:	4816      	ldr	r0, [pc, #88]	; (800e088 <lwip_netconn_do_close_internal+0x2c4>)
 800e030:	f00c f8a8 	bl	801a184 <iprintf>
    if (shut_tx) {
 800e034:	7c7b      	ldrb	r3, [r7, #17]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d003      	beq.n	800e042 <lwip_netconn_do_close_internal+0x27e>
      tcp_sent(tpcb, sent_tcp);
 800e03a:	4919      	ldr	r1, [pc, #100]	; (800e0a0 <lwip_netconn_do_close_internal+0x2dc>)
 800e03c:	6978      	ldr	r0, [r7, #20]
 800e03e:	f004 f9ab 	bl	8012398 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800e042:	2201      	movs	r2, #1
 800e044:	4917      	ldr	r1, [pc, #92]	; (800e0a4 <lwip_netconn_do_close_internal+0x2e0>)
 800e046:	6978      	ldr	r0, [r7, #20]
 800e048:	f004 fa02 	bl	8012450 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800e04c:	4916      	ldr	r1, [pc, #88]	; (800e0a8 <lwip_netconn_do_close_internal+0x2e4>)
 800e04e:	6978      	ldr	r0, [r7, #20]
 800e050:	f004 f9c4 	bl	80123dc <tcp_err>
    tcp_arg(tpcb, conn);
 800e054:	6879      	ldr	r1, [r7, #4]
 800e056:	6978      	ldr	r0, [r7, #20]
 800e058:	f004 f96a 	bl	8012330 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800e05c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d106      	bne.n	800e072 <lwip_netconn_do_close_internal+0x2ae>
 800e064:	4b06      	ldr	r3, [pc, #24]	; (800e080 <lwip_netconn_do_close_internal+0x2bc>)
 800e066:	f240 424d 	movw	r2, #1101	; 0x44d
 800e06a:	4910      	ldr	r1, [pc, #64]	; (800e0ac <lwip_netconn_do_close_internal+0x2e8>)
 800e06c:	4806      	ldr	r0, [pc, #24]	; (800e088 <lwip_netconn_do_close_internal+0x2c4>)
 800e06e:	f00c f889 	bl	801a184 <iprintf>
  return err;
 800e072:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3720      	adds	r7, #32
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	0801b490 	.word	0x0801b490
 800e084:	0801b764 	.word	0x0801b764
 800e088:	0801b4d4 	.word	0x0801b4d4
 800e08c:	0801b774 	.word	0x0801b774
 800e090:	0801b794 	.word	0x0801b794
 800e094:	0801b7b8 	.word	0x0801b7b8
 800e098:	0801b5f8 	.word	0x0801b5f8
 800e09c:	0801b7cc 	.word	0x0801b7cc
 800e0a0:	0800d611 	.word	0x0800d611
 800e0a4:	0800d561 	.word	0x0800d561
 800e0a8:	0800d6bd 	.word	0x0800d6bd
 800e0ac:	0801b7f0 	.word	0x0801b7f0

0800e0b0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	785b      	ldrb	r3, [r3, #1]
 800e0c2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800e0c4:	7afb      	ldrb	r3, [r7, #11]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d00d      	beq.n	800e0e6 <lwip_netconn_do_delconn+0x36>
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0d4:	2b10      	cmp	r3, #16
 800e0d6:	d006      	beq.n	800e0e6 <lwip_netconn_do_delconn+0x36>
 800e0d8:	4b61      	ldr	r3, [pc, #388]	; (800e260 <lwip_netconn_do_delconn+0x1b0>)
 800e0da:	f240 425e 	movw	r2, #1118	; 0x45e
 800e0de:	4961      	ldr	r1, [pc, #388]	; (800e264 <lwip_netconn_do_delconn+0x1b4>)
 800e0e0:	4861      	ldr	r0, [pc, #388]	; (800e268 <lwip_netconn_do_delconn+0x1b8>)
 800e0e2:	f00c f84f 	bl	801a184 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800e0e6:	7afb      	ldrb	r3, [r7, #11]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d005      	beq.n	800e0f8 <lwip_netconn_do_delconn+0x48>
 800e0ec:	7afb      	ldrb	r3, [r7, #11]
 800e0ee:	2b02      	cmp	r3, #2
 800e0f0:	d002      	beq.n	800e0f8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800e0f2:	7afb      	ldrb	r3, [r7, #11]
 800e0f4:	2b03      	cmp	r3, #3
 800e0f6:	d10a      	bne.n	800e10e <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 800e0f8:	7afb      	ldrb	r3, [r7, #11]
 800e0fa:	2b03      	cmp	r3, #3
 800e0fc:	d10b      	bne.n	800e116 <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e106:	f003 0304 	and.w	r3, r3, #4
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d103      	bne.n	800e116 <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	22fb      	movs	r2, #251	; 0xfb
 800e112:	711a      	strb	r2, [r3, #4]
 800e114:	e098      	b.n	800e248 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800e116:	7afb      	ldrb	r3, [r7, #11]
 800e118:	2b03      	cmp	r3, #3
 800e11a:	d10e      	bne.n	800e13a <lwip_netconn_do_delconn+0x8a>
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e124:	f003 0304 	and.w	r3, r3, #4
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d106      	bne.n	800e13a <lwip_netconn_do_delconn+0x8a>
 800e12c:	4b4c      	ldr	r3, [pc, #304]	; (800e260 <lwip_netconn_do_delconn+0x1b0>)
 800e12e:	f240 427a 	movw	r2, #1146	; 0x47a
 800e132:	494e      	ldr	r1, [pc, #312]	; (800e26c <lwip_netconn_do_delconn+0x1bc>)
 800e134:	484c      	ldr	r0, [pc, #304]	; (800e268 <lwip_netconn_do_delconn+0x1b8>)
 800e136:	f00c f825 	bl	801a184 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2200      	movs	r2, #0
 800e13e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4618      	mov	r0, r3
 800e146:	f7ff fdbf 	bl	800dcc8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d05f      	beq.n	800e214 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e15e:	2b10      	cmp	r3, #16
 800e160:	d00d      	beq.n	800e17e <lwip_netconn_do_delconn+0xce>
 800e162:	2b20      	cmp	r3, #32
 800e164:	d151      	bne.n	800e20a <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	2200      	movs	r2, #0
 800e16e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	4618      	mov	r0, r3
 800e178:	f009 f95c 	bl	8017434 <udp_remove>
          break;
 800e17c:	e046      	b.n	800e20c <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e184:	2b00      	cmp	r3, #0
 800e186:	d006      	beq.n	800e196 <lwip_netconn_do_delconn+0xe6>
 800e188:	4b35      	ldr	r3, [pc, #212]	; (800e260 <lwip_netconn_do_delconn+0x1b0>)
 800e18a:	f240 4294 	movw	r2, #1172	; 0x494
 800e18e:	4938      	ldr	r1, [pc, #224]	; (800e270 <lwip_netconn_do_delconn+0x1c0>)
 800e190:	4835      	ldr	r0, [pc, #212]	; (800e268 <lwip_netconn_do_delconn+0x1b8>)
 800e192:	f00b fff7 	bl	801a184 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2204      	movs	r2, #4
 800e19c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2203      	movs	r2, #3
 800e1a2:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	68fa      	ldr	r2, [r7, #12]
 800e1aa:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7ff fe06 	bl	800ddc4 <lwip_netconn_do_close_internal>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d04b      	beq.n	800e256 <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	785b      	ldrb	r3, [r3, #1]
 800e1c4:	2b04      	cmp	r3, #4
 800e1c6:	d006      	beq.n	800e1d6 <lwip_netconn_do_delconn+0x126>
 800e1c8:	4b25      	ldr	r3, [pc, #148]	; (800e260 <lwip_netconn_do_delconn+0x1b0>)
 800e1ca:	f240 429a 	movw	r2, #1178	; 0x49a
 800e1ce:	4929      	ldr	r1, [pc, #164]	; (800e274 <lwip_netconn_do_delconn+0x1c4>)
 800e1d0:	4825      	ldr	r0, [pc, #148]	; (800e268 <lwip_netconn_do_delconn+0x1b8>)
 800e1d2:	f00b ffd7 	bl	801a184 <iprintf>
            UNLOCK_TCPIP_CORE();
 800e1d6:	4828      	ldr	r0, [pc, #160]	; (800e278 <lwip_netconn_do_delconn+0x1c8>)
 800e1d8:	f00b fded 	bl	8019db6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	330c      	adds	r3, #12
 800e1e2:	2100      	movs	r1, #0
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f00b fd4c 	bl	8019c82 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800e1ea:	4823      	ldr	r0, [pc, #140]	; (800e278 <lwip_netconn_do_delconn+0x1c8>)
 800e1ec:	f00b fdd4 	bl	8019d98 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	785b      	ldrb	r3, [r3, #1]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d02d      	beq.n	800e256 <lwip_netconn_do_delconn+0x1a6>
 800e1fa:	4b19      	ldr	r3, [pc, #100]	; (800e260 <lwip_netconn_do_delconn+0x1b0>)
 800e1fc:	f240 429e 	movw	r2, #1182	; 0x49e
 800e200:	491c      	ldr	r1, [pc, #112]	; (800e274 <lwip_netconn_do_delconn+0x1c4>)
 800e202:	4819      	ldr	r0, [pc, #100]	; (800e268 <lwip_netconn_do_delconn+0x1b8>)
 800e204:	f00b ffbe 	bl	801a184 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800e208:	e025      	b.n	800e256 <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 800e20a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	2200      	movs	r2, #0
 800e212:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d007      	beq.n	800e22e <lwip_netconn_do_delconn+0x17e>
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e224:	68fa      	ldr	r2, [r7, #12]
 800e226:	6810      	ldr	r0, [r2, #0]
 800e228:	2200      	movs	r2, #0
 800e22a:	2100      	movs	r1, #0
 800e22c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e234:	2b00      	cmp	r3, #0
 800e236:	d007      	beq.n	800e248 <lwip_netconn_do_delconn+0x198>
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e23e:	68fa      	ldr	r2, [r7, #12]
 800e240:	6810      	ldr	r0, [r2, #0]
 800e242:	2200      	movs	r2, #0
 800e244:	2102      	movs	r1, #2
 800e246:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	330c      	adds	r3, #12
 800e24e:	4618      	mov	r0, r3
 800e250:	f00b fd62 	bl	8019d18 <sys_sem_valid>
 800e254:	e000      	b.n	800e258 <lwip_netconn_do_delconn+0x1a8>
          return;
 800e256:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
 800e25e:	bf00      	nop
 800e260:	0801b490 	.word	0x0801b490
 800e264:	0801b800 	.word	0x0801b800
 800e268:	0801b4d4 	.word	0x0801b4d4
 800e26c:	0801b814 	.word	0x0801b814
 800e270:	0801b834 	.word	0x0801b834
 800e274:	0801b850 	.word	0x0801b850
 800e278:	2000828c 	.word	0x2000828c

0800e27c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d025      	beq.n	800e2de <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e29c:	2b10      	cmp	r3, #16
 800e29e:	d00e      	beq.n	800e2be <lwip_netconn_do_bind+0x42>
 800e2a0:	2b20      	cmp	r3, #32
 800e2a2:	d119      	bne.n	800e2d8 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	6858      	ldr	r0, [r3, #4]
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	6899      	ldr	r1, [r3, #8]
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	899b      	ldrh	r3, [r3, #12]
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	f009 f816 	bl	80172e4 <udp_bind>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	73fb      	strb	r3, [r7, #15]
        break;
 800e2bc:	e011      	b.n	800e2e2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	6858      	ldr	r0, [r3, #4]
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	6899      	ldr	r1, [r3, #8]
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	899b      	ldrh	r3, [r3, #12]
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	f002 ffad 	bl	801122c <tcp_bind>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	73fb      	strb	r3, [r7, #15]
        break;
 800e2d6:	e004      	b.n	800e2e2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800e2d8:	23fa      	movs	r3, #250	; 0xfa
 800e2da:	73fb      	strb	r3, [r7, #15]
        break;
 800e2dc:	e001      	b.n	800e2e2 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800e2de:	23fa      	movs	r3, #250	; 0xfa
 800e2e0:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	7bfa      	ldrb	r2, [r7, #15]
 800e2e6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e2e8:	bf00      	nop
 800e2ea:	3710      	adds	r7, #16
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	bd80      	pop	{r7, pc}

0800e2f0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800e2f0:	b580      	push	{r7, lr}
 800e2f2:	b086      	sub	sp, #24
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d07f      	beq.n	800e406 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e310:	2b10      	cmp	r3, #16
 800e312:	d175      	bne.n	800e400 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	785b      	ldrb	r3, [r3, #1]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d165      	bne.n	800e3ea <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	685b      	ldr	r3, [r3, #4]
 800e324:	7d1b      	ldrb	r3, [r3, #20]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d002      	beq.n	800e330 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800e32a:	23fa      	movs	r3, #250	; 0xfa
 800e32c:	72fb      	strb	r3, [r7, #11]
 800e32e:	e06c      	b.n	800e40a <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800e330:	23ff      	movs	r3, #255	; 0xff
 800e332:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	f107 020b 	add.w	r2, r7, #11
 800e33e:	7cf9      	ldrb	r1, [r7, #19]
 800e340:	4618      	mov	r0, r3
 800e342:	f003 f82b 	bl	801139c <tcp_listen_with_backlog_and_err>
 800e346:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d05d      	beq.n	800e40a <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	3310      	adds	r3, #16
 800e354:	4618      	mov	r0, r3
 800e356:	f00b fc51 	bl	8019bfc <sys_mbox_valid>
 800e35a:	4603      	mov	r3, r0
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d00b      	beq.n	800e378 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	3310      	adds	r3, #16
 800e366:	4618      	mov	r0, r3
 800e368:	f00b fbd4 	bl	8019b14 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	3310      	adds	r3, #16
 800e372:	4618      	mov	r0, r3
 800e374:	f00b fc53 	bl	8019c1e <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800e378:	2300      	movs	r3, #0
 800e37a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	3314      	adds	r3, #20
 800e382:	4618      	mov	r0, r3
 800e384:	f00b fc3a 	bl	8019bfc <sys_mbox_valid>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d108      	bne.n	800e3a0 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	3314      	adds	r3, #20
 800e394:	2106      	movs	r1, #6
 800e396:	4618      	mov	r0, r3
 800e398:	f00b fba2 	bl	8019ae0 <sys_mbox_new>
 800e39c:	4603      	mov	r3, r0
 800e39e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800e3a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d118      	bne.n	800e3da <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800e3a8:	697b      	ldr	r3, [r7, #20]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	2202      	movs	r2, #2
 800e3ae:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	68fa      	ldr	r2, [r7, #12]
 800e3b6:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	685a      	ldr	r2, [r3, #4]
 800e3be:	697b      	ldr	r3, [r7, #20]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	4610      	mov	r0, r2
 800e3c6:	f003 ffb3 	bl	8012330 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	4912      	ldr	r1, [pc, #72]	; (800e41c <lwip_netconn_do_listen+0x12c>)
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f004 f824 	bl	8012420 <tcp_accept>
 800e3d8:	e017      	b.n	800e40a <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800e3da:	68f8      	ldr	r0, [r7, #12]
 800e3dc:	f002 fdd4 	bl	8010f88 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	605a      	str	r2, [r3, #4]
 800e3e8:	e00f      	b.n	800e40a <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	785b      	ldrb	r3, [r3, #1]
 800e3f0:	2b02      	cmp	r3, #2
 800e3f2:	d102      	bne.n	800e3fa <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	72fb      	strb	r3, [r7, #11]
 800e3f8:	e007      	b.n	800e40a <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800e3fa:	23f5      	movs	r3, #245	; 0xf5
 800e3fc:	72fb      	strb	r3, [r7, #11]
 800e3fe:	e004      	b.n	800e40a <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800e400:	23f0      	movs	r3, #240	; 0xf0
 800e402:	72fb      	strb	r3, [r7, #11]
 800e404:	e001      	b.n	800e40a <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800e406:	23f5      	movs	r3, #245	; 0xf5
 800e408:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800e40a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e412:	bf00      	nop
 800e414:	3718      	adds	r7, #24
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}
 800e41a:	bf00      	nop
 800e41c:	0800d8c1 	.word	0x0800d8c1

0800e420 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b086      	sub	sp, #24
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800e42c:	693b      	ldr	r3, [r7, #16]
 800e42e:	2200      	movs	r2, #0
 800e430:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d022      	beq.n	800e482 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e43c:	693b      	ldr	r3, [r7, #16]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e446:	2b10      	cmp	r3, #16
 800e448:	d11b      	bne.n	800e482 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800e44a:	693b      	ldr	r3, [r7, #16]
 800e44c:	689b      	ldr	r3, [r3, #8]
 800e44e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e456:	d202      	bcs.n	800e45e <lwip_netconn_do_recv+0x3e>
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	b29b      	uxth	r3, r3
 800e45c:	e001      	b.n	800e462 <lwip_netconn_do_recv+0x42>
 800e45e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e462:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	685b      	ldr	r3, [r3, #4]
 800e46a:	89fa      	ldrh	r2, [r7, #14]
 800e46c:	4611      	mov	r1, r2
 800e46e:	4618      	mov	r0, r3
 800e470:	f003 f898 	bl	80115a4 <tcp_recved>
        remaining -= recved;
 800e474:	89fb      	ldrh	r3, [r7, #14]
 800e476:	697a      	ldr	r2, [r7, #20]
 800e478:	1ad3      	subs	r3, r2, r3
 800e47a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d1e6      	bne.n	800e450 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e482:	bf00      	nop
 800e484:	3718      	adds	r7, #24
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
	...

0800e48c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b088      	sub	sp, #32
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
 800e494:	460b      	mov	r3, r1
 800e496:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800e498:	2300      	movs	r3, #0
 800e49a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d106      	bne.n	800e4b0 <lwip_netconn_do_writemore+0x24>
 800e4a2:	4b70      	ldr	r3, [pc, #448]	; (800e664 <lwip_netconn_do_writemore+0x1d8>)
 800e4a4:	f240 6273 	movw	r2, #1651	; 0x673
 800e4a8:	496f      	ldr	r1, [pc, #444]	; (800e668 <lwip_netconn_do_writemore+0x1dc>)
 800e4aa:	4870      	ldr	r0, [pc, #448]	; (800e66c <lwip_netconn_do_writemore+0x1e0>)
 800e4ac:	f00b fe6a 	bl	801a184 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	785b      	ldrb	r3, [r3, #1]
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	d006      	beq.n	800e4c6 <lwip_netconn_do_writemore+0x3a>
 800e4b8:	4b6a      	ldr	r3, [pc, #424]	; (800e664 <lwip_netconn_do_writemore+0x1d8>)
 800e4ba:	f240 6274 	movw	r2, #1652	; 0x674
 800e4be:	496c      	ldr	r1, [pc, #432]	; (800e670 <lwip_netconn_do_writemore+0x1e4>)
 800e4c0:	486a      	ldr	r0, [pc, #424]	; (800e66c <lwip_netconn_do_writemore+0x1e0>)
 800e4c2:	f00b fe5f 	bl	801a184 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d106      	bne.n	800e4dc <lwip_netconn_do_writemore+0x50>
 800e4ce:	4b65      	ldr	r3, [pc, #404]	; (800e664 <lwip_netconn_do_writemore+0x1d8>)
 800e4d0:	f240 6275 	movw	r2, #1653	; 0x675
 800e4d4:	4967      	ldr	r1, [pc, #412]	; (800e674 <lwip_netconn_do_writemore+0x1e8>)
 800e4d6:	4865      	ldr	r0, [pc, #404]	; (800e66c <lwip_netconn_do_writemore+0x1e0>)
 800e4d8:	f00b fe54 	bl	801a184 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	685b      	ldr	r3, [r3, #4]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d106      	bne.n	800e4f2 <lwip_netconn_do_writemore+0x66>
 800e4e4:	4b5f      	ldr	r3, [pc, #380]	; (800e664 <lwip_netconn_do_writemore+0x1d8>)
 800e4e6:	f240 6276 	movw	r2, #1654	; 0x676
 800e4ea:	4963      	ldr	r1, [pc, #396]	; (800e678 <lwip_netconn_do_writemore+0x1ec>)
 800e4ec:	485f      	ldr	r0, [pc, #380]	; (800e66c <lwip_netconn_do_writemore+0x1e0>)
 800e4ee:	f00b fe49 	bl	801a184 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4f6:	699a      	ldr	r2, [r3, #24]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4fc:	695b      	ldr	r3, [r3, #20]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d306      	bcc.n	800e510 <lwip_netconn_do_writemore+0x84>
 800e502:	4b58      	ldr	r3, [pc, #352]	; (800e664 <lwip_netconn_do_writemore+0x1d8>)
 800e504:	f240 6277 	movw	r2, #1655	; 0x677
 800e508:	495c      	ldr	r1, [pc, #368]	; (800e67c <lwip_netconn_do_writemore+0x1f0>)
 800e50a:	4858      	ldr	r0, [pc, #352]	; (800e66c <lwip_netconn_do_writemore+0x1e0>)
 800e50c:	f00b fe3a 	bl	801a184 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e514:	899b      	ldrh	r3, [r3, #12]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d106      	bne.n	800e528 <lwip_netconn_do_writemore+0x9c>
 800e51a:	4b52      	ldr	r3, [pc, #328]	; (800e664 <lwip_netconn_do_writemore+0x1d8>)
 800e51c:	f240 6279 	movw	r2, #1657	; 0x679
 800e520:	4957      	ldr	r1, [pc, #348]	; (800e680 <lwip_netconn_do_writemore+0x1f4>)
 800e522:	4852      	ldr	r0, [pc, #328]	; (800e66c <lwip_netconn_do_writemore+0x1e0>)
 800e524:	f00b fe2e 	bl	801a184 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e52c:	7f1b      	ldrb	r3, [r3, #28]
 800e52e:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e536:	f003 0302 	and.w	r3, r3, #2
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d104      	bne.n	800e548 <lwip_netconn_do_writemore+0xbc>
 800e53e:	7ebb      	ldrb	r3, [r7, #26]
 800e540:	f003 0304 	and.w	r3, r3, #4
 800e544:	2b00      	cmp	r3, #0
 800e546:	d001      	beq.n	800e54c <lwip_netconn_do_writemore+0xc0>
 800e548:	2301      	movs	r3, #1
 800e54a:	e000      	b.n	800e54e <lwip_netconn_do_writemore+0xc2>
 800e54c:	2300      	movs	r3, #0
 800e54e:	763b      	strb	r3, [r7, #24]

#if LWIP_SO_SNDTIMEO
  if ((conn->send_timeout != 0) &&
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	69db      	ldr	r3, [r3, #28]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d018      	beq.n	800e58a <lwip_netconn_do_writemore+0xfe>
      ((s32_t)(sys_now() - conn->current_msg->msg.w.time_started) >= conn->send_timeout)) {
 800e558:	f7f7 fbf2 	bl	8005d40 <sys_now>
 800e55c:	4602      	mov	r2, r0
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e562:	6a1b      	ldr	r3, [r3, #32]
 800e564:	1ad3      	subs	r3, r2, r3
 800e566:	461a      	mov	r2, r3
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	69db      	ldr	r3, [r3, #28]
  if ((conn->send_timeout != 0) &&
 800e56c:	429a      	cmp	r2, r3
 800e56e:	db0c      	blt.n	800e58a <lwip_netconn_do_writemore+0xfe>
    write_finished = 1;
 800e570:	2301      	movs	r3, #1
 800e572:	76fb      	strb	r3, [r7, #27]
    if (conn->current_msg->msg.w.offset == 0) {
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e578:	699b      	ldr	r3, [r3, #24]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d102      	bne.n	800e584 <lwip_netconn_do_writemore+0xf8>
      /* nothing has been written */
      err = ERR_WOULDBLOCK;
 800e57e:	23f9      	movs	r3, #249	; 0xf9
 800e580:	77fb      	strb	r3, [r7, #31]
    if (conn->current_msg->msg.w.offset == 0) {
 800e582:	e14f      	b.n	800e824 <lwip_netconn_do_writemore+0x398>
    } else {
      /* partial write */
      err = ERR_OK;
 800e584:	2300      	movs	r3, #0
 800e586:	77fb      	strb	r3, [r7, #31]
    if (conn->current_msg->msg.w.offset == 0) {
 800e588:	e14c      	b.n	800e824 <lwip_netconn_do_writemore+0x398>
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e58e:	689b      	ldr	r3, [r3, #8]
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e596:	691b      	ldr	r3, [r3, #16]
 800e598:	4413      	add	r3, r2
 800e59a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5a0:	689b      	ldr	r3, [r3, #8]
 800e5a2:	685a      	ldr	r2, [r3, #4]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5a8:	691b      	ldr	r3, [r3, #16]
 800e5aa:	1ad3      	subs	r3, r2, r3
 800e5ac:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5b4:	d307      	bcc.n	800e5c6 <lwip_netconn_do_writemore+0x13a>
        len = 0xffff;
 800e5b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e5ba:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e5bc:	7ebb      	ldrb	r3, [r7, #26]
 800e5be:	f043 0302 	orr.w	r3, r3, #2
 800e5c2:	76bb      	strb	r3, [r7, #26]
 800e5c4:	e001      	b.n	800e5ca <lwip_netconn_do_writemore+0x13e>
      } else {
        len = (u16_t)diff;
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e5d2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800e5d4:	89fa      	ldrh	r2, [r7, #14]
 800e5d6:	8bbb      	ldrh	r3, [r7, #28]
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d216      	bcs.n	800e60a <lwip_netconn_do_writemore+0x17e>
        /* don't try to write more than sendbuf */
        len = available;
 800e5dc:	89fb      	ldrh	r3, [r7, #14]
 800e5de:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800e5e0:	7e3b      	ldrb	r3, [r7, #24]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d00d      	beq.n	800e602 <lwip_netconn_do_writemore+0x176>
          if (!len) {
 800e5e6:	8bbb      	ldrh	r3, [r7, #28]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d10e      	bne.n	800e60a <lwip_netconn_do_writemore+0x17e>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5f0:	699b      	ldr	r3, [r3, #24]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d102      	bne.n	800e5fc <lwip_netconn_do_writemore+0x170>
 800e5f6:	f06f 0306 	mvn.w	r3, #6
 800e5fa:	e000      	b.n	800e5fe <lwip_netconn_do_writemore+0x172>
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800e600:	e090      	b.n	800e724 <lwip_netconn_do_writemore+0x298>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800e602:	7ebb      	ldrb	r3, [r7, #26]
 800e604:	f043 0302 	orr.w	r3, r3, #2
 800e608:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e60e:	691a      	ldr	r2, [r3, #16]
 800e610:	8bbb      	ldrh	r3, [r7, #28]
 800e612:	441a      	add	r2, r3
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e618:	689b      	ldr	r3, [r3, #8]
 800e61a:	685b      	ldr	r3, [r3, #4]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d906      	bls.n	800e62e <lwip_netconn_do_writemore+0x1a2>
 800e620:	4b10      	ldr	r3, [pc, #64]	; (800e664 <lwip_netconn_do_writemore+0x1d8>)
 800e622:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800e626:	4917      	ldr	r1, [pc, #92]	; (800e684 <lwip_netconn_do_writemore+0x1f8>)
 800e628:	4810      	ldr	r0, [pc, #64]	; (800e66c <lwip_netconn_do_writemore+0x1e0>)
 800e62a:	f00b fdab 	bl	801a184 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e62e:	8bbb      	ldrh	r3, [r7, #28]
 800e630:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e634:	4293      	cmp	r3, r2
 800e636:	d103      	bne.n	800e640 <lwip_netconn_do_writemore+0x1b4>
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e63e:	d209      	bcs.n	800e654 <lwip_netconn_do_writemore+0x1c8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e644:	8bba      	ldrh	r2, [r7, #28]
 800e646:	429a      	cmp	r2, r3
 800e648:	d11e      	bne.n	800e688 <lwip_netconn_do_writemore+0x1fc>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e64e:	899b      	ldrh	r3, [r3, #12]
 800e650:	2b01      	cmp	r3, #1
 800e652:	d919      	bls.n	800e688 <lwip_netconn_do_writemore+0x1fc>
        write_more = 1;
 800e654:	2301      	movs	r3, #1
 800e656:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e658:	7ebb      	ldrb	r3, [r7, #26]
 800e65a:	f043 0302 	orr.w	r3, r3, #2
 800e65e:	76bb      	strb	r3, [r7, #26]
 800e660:	e014      	b.n	800e68c <lwip_netconn_do_writemore+0x200>
 800e662:	bf00      	nop
 800e664:	0801b490 	.word	0x0801b490
 800e668:	0801b5e8 	.word	0x0801b5e8
 800e66c:	0801b4d4 	.word	0x0801b4d4
 800e670:	0801b8f0 	.word	0x0801b8f0
 800e674:	0801b5f8 	.word	0x0801b5f8
 800e678:	0801b910 	.word	0x0801b910
 800e67c:	0801b928 	.word	0x0801b928
 800e680:	0801b968 	.word	0x0801b968
 800e684:	0801b990 	.word	0x0801b990
      } else {
        write_more = 0;
 800e688:	2300      	movs	r3, #0
 800e68a:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6858      	ldr	r0, [r3, #4]
 800e690:	7ebb      	ldrb	r3, [r7, #26]
 800e692:	8bba      	ldrh	r2, [r7, #28]
 800e694:	6979      	ldr	r1, [r7, #20]
 800e696:	f006 fd89 	bl	80151ac <tcp_write>
 800e69a:	4603      	mov	r3, r0
 800e69c:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800e69e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d12c      	bne.n	800e700 <lwip_netconn_do_writemore+0x274>
        conn->current_msg->msg.w.offset += len;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6aa:	6999      	ldr	r1, [r3, #24]
 800e6ac:	8bba      	ldrh	r2, [r7, #28]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6b2:	440a      	add	r2, r1
 800e6b4:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6ba:	6919      	ldr	r1, [r3, #16]
 800e6bc:	8bba      	ldrh	r2, [r7, #28]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6c2:	440a      	add	r2, r1
 800e6c4:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6ca:	691a      	ldr	r2, [r3, #16]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d0:	689b      	ldr	r3, [r3, #8]
 800e6d2:	685b      	ldr	r3, [r3, #4]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d113      	bne.n	800e700 <lwip_netconn_do_writemore+0x274>
          conn->current_msg->msg.w.vector_cnt--;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6dc:	899a      	ldrh	r2, [r3, #12]
 800e6de:	3a01      	subs	r2, #1
 800e6e0:	b292      	uxth	r2, r2
 800e6e2:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6e8:	899b      	ldrh	r3, [r3, #12]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d008      	beq.n	800e700 <lwip_netconn_do_writemore+0x274>
            conn->current_msg->msg.w.vector++;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6f2:	689a      	ldr	r2, [r3, #8]
 800e6f4:	3208      	adds	r2, #8
 800e6f6:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800e700:	7e7b      	ldrb	r3, [r7, #25]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d004      	beq.n	800e710 <lwip_netconn_do_writemore+0x284>
 800e706:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	f43f af3d 	beq.w	800e58a <lwip_netconn_do_writemore+0xfe>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800e710:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d004      	beq.n	800e722 <lwip_netconn_do_writemore+0x296>
 800e718:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e720:	d136      	bne.n	800e790 <lwip_netconn_do_writemore+0x304>
err_mem:
 800e722:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800e724:	7e3b      	ldrb	r3, [r7, #24]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d01b      	beq.n	800e762 <lwip_netconn_do_writemore+0x2d6>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e72e:	699a      	ldr	r2, [r3, #24]
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e734:	695b      	ldr	r3, [r3, #20]
 800e736:	429a      	cmp	r2, r3
 800e738:	d213      	bcs.n	800e762 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d005      	beq.n	800e74e <lwip_netconn_do_writemore+0x2c2>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e746:	2200      	movs	r2, #0
 800e748:	2103      	movs	r1, #3
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e754:	f043 0310 	orr.w	r3, r3, #16
 800e758:	b2da      	uxtb	r2, r3
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800e760:	e016      	b.n	800e790 <lwip_netconn_do_writemore+0x304>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e76a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e76e:	d305      	bcc.n	800e77c <lwip_netconn_do_writemore+0x2f0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e778:	2b04      	cmp	r3, #4
 800e77a:	d909      	bls.n	800e790 <lwip_netconn_do_writemore+0x304>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e780:	2b00      	cmp	r3, #0
 800e782:	d005      	beq.n	800e790 <lwip_netconn_do_writemore+0x304>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e788:	2200      	movs	r2, #0
 800e78a:	2103      	movs	r1, #3
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800e790:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d11d      	bne.n	800e7d4 <lwip_netconn_do_writemore+0x348>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e79c:	699a      	ldr	r2, [r3, #24]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a2:	695b      	ldr	r3, [r3, #20]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d002      	beq.n	800e7ae <lwip_netconn_do_writemore+0x322>
 800e7a8:	7e3b      	ldrb	r3, [r7, #24]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d001      	beq.n	800e7b2 <lwip_netconn_do_writemore+0x326>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f007 fae2 	bl	8015d80 <tcp_output>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800e7c0:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e7c4:	f113 0f04 	cmn.w	r3, #4
 800e7c8:	d12c      	bne.n	800e824 <lwip_netconn_do_writemore+0x398>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e7ca:	7b3b      	ldrb	r3, [r7, #12]
 800e7cc:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	76fb      	strb	r3, [r7, #27]
 800e7d2:	e027      	b.n	800e824 <lwip_netconn_do_writemore+0x398>
      }
    } else if (err == ERR_MEM) {
 800e7d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e7d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7dc:	d120      	bne.n	800e820 <lwip_netconn_do_writemore+0x394>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f007 facc 	bl	8015d80 <tcp_output>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800e7ec:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e7f0:	f113 0f04 	cmn.w	r3, #4
 800e7f4:	d104      	bne.n	800e800 <lwip_netconn_do_writemore+0x374>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e7f6:	7b7b      	ldrb	r3, [r7, #13]
 800e7f8:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	76fb      	strb	r3, [r7, #27]
 800e7fe:	e011      	b.n	800e824 <lwip_netconn_do_writemore+0x398>
      } else if (dontblock) {
 800e800:	7e3b      	ldrb	r3, [r7, #24]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d00e      	beq.n	800e824 <lwip_netconn_do_writemore+0x398>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e80a:	699b      	ldr	r3, [r3, #24]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d102      	bne.n	800e816 <lwip_netconn_do_writemore+0x38a>
 800e810:	f06f 0306 	mvn.w	r3, #6
 800e814:	e000      	b.n	800e818 <lwip_netconn_do_writemore+0x38c>
 800e816:	2300      	movs	r3, #0
 800e818:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e81a:	2301      	movs	r3, #1
 800e81c:	76fb      	strb	r3, [r7, #27]
 800e81e:	e001      	b.n	800e824 <lwip_netconn_do_writemore+0x398>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e820:	2301      	movs	r3, #1
 800e822:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800e824:	7efb      	ldrb	r3, [r7, #27]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d015      	beq.n	800e856 <lwip_netconn_do_writemore+0x3ca>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	330c      	adds	r3, #12
 800e832:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e838:	7ffa      	ldrb	r2, [r7, #31]
 800e83a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2200      	movs	r2, #0
 800e840:	631a      	str	r2, [r3, #48]	; 0x30
    conn->state = NETCONN_NONE;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2200      	movs	r2, #0
 800e846:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e848:	78fb      	ldrb	r3, [r7, #3]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d006      	beq.n	800e85c <lwip_netconn_do_writemore+0x3d0>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e84e:	68b8      	ldr	r0, [r7, #8]
 800e850:	f00b fa48 	bl	8019ce4 <sys_sem_signal>
 800e854:	e002      	b.n	800e85c <lwip_netconn_do_writemore+0x3d0>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e856:	f04f 33ff 	mov.w	r3, #4294967295
 800e85a:	e000      	b.n	800e85e <lwip_netconn_do_writemore+0x3d2>
  }
#endif
  return ERR_OK;
 800e85c:	2300      	movs	r3, #0
}
 800e85e:	4618      	mov	r0, r3
 800e860:	3720      	adds	r7, #32
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop

0800e868 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b084      	sub	sp, #16
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	4618      	mov	r0, r3
 800e87a:	f7fe fcb8 	bl	800d1ee <netconn_err>
 800e87e:	4603      	mov	r3, r0
 800e880:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d166      	bne.n	800e958 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e894:	2b10      	cmp	r3, #16
 800e896:	d15d      	bne.n	800e954 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	785b      	ldrb	r3, [r3, #1]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d002      	beq.n	800e8a8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800e8a2:	23fb      	movs	r3, #251	; 0xfb
 800e8a4:	73fb      	strb	r3, [r7, #15]
 800e8a6:	e057      	b.n	800e958 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	685b      	ldr	r3, [r3, #4]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d04d      	beq.n	800e94e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d006      	beq.n	800e8d2 <lwip_netconn_do_write+0x6a>
 800e8c4:	4b28      	ldr	r3, [pc, #160]	; (800e968 <lwip_netconn_do_write+0x100>)
 800e8c6:	f240 7223 	movw	r2, #1827	; 0x723
 800e8ca:	4928      	ldr	r1, [pc, #160]	; (800e96c <lwip_netconn_do_write+0x104>)
 800e8cc:	4828      	ldr	r0, [pc, #160]	; (800e970 <lwip_netconn_do_write+0x108>)
 800e8ce:	f00b fc59 	bl	801a184 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	695b      	ldr	r3, [r3, #20]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d106      	bne.n	800e8e8 <lwip_netconn_do_write+0x80>
 800e8da:	4b23      	ldr	r3, [pc, #140]	; (800e968 <lwip_netconn_do_write+0x100>)
 800e8dc:	f240 7224 	movw	r2, #1828	; 0x724
 800e8e0:	4924      	ldr	r1, [pc, #144]	; (800e974 <lwip_netconn_do_write+0x10c>)
 800e8e2:	4823      	ldr	r0, [pc, #140]	; (800e970 <lwip_netconn_do_write+0x108>)
 800e8e4:	f00b fc4e 	bl	801a184 <iprintf>
        msg->conn->current_msg = msg;
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	68ba      	ldr	r2, [r7, #8]
 800e8ee:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7ff fdc8 	bl	800e48c <lwip_netconn_do_writemore>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d02e      	beq.n	800e960 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	785b      	ldrb	r3, [r3, #1]
 800e908:	2b01      	cmp	r3, #1
 800e90a:	d006      	beq.n	800e91a <lwip_netconn_do_write+0xb2>
 800e90c:	4b16      	ldr	r3, [pc, #88]	; (800e968 <lwip_netconn_do_write+0x100>)
 800e90e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800e912:	4919      	ldr	r1, [pc, #100]	; (800e978 <lwip_netconn_do_write+0x110>)
 800e914:	4816      	ldr	r0, [pc, #88]	; (800e970 <lwip_netconn_do_write+0x108>)
 800e916:	f00b fc35 	bl	801a184 <iprintf>
          UNLOCK_TCPIP_CORE();
 800e91a:	4818      	ldr	r0, [pc, #96]	; (800e97c <lwip_netconn_do_write+0x114>)
 800e91c:	f00b fa4b 	bl	8019db6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	330c      	adds	r3, #12
 800e926:	2100      	movs	r1, #0
 800e928:	4618      	mov	r0, r3
 800e92a:	f00b f9aa 	bl	8019c82 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e92e:	4813      	ldr	r0, [pc, #76]	; (800e97c <lwip_netconn_do_write+0x114>)
 800e930:	f00b fa32 	bl	8019d98 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	785b      	ldrb	r3, [r3, #1]
 800e93a:	2b01      	cmp	r3, #1
 800e93c:	d110      	bne.n	800e960 <lwip_netconn_do_write+0xf8>
 800e93e:	4b0a      	ldr	r3, [pc, #40]	; (800e968 <lwip_netconn_do_write+0x100>)
 800e940:	f240 722c 	movw	r2, #1836	; 0x72c
 800e944:	490c      	ldr	r1, [pc, #48]	; (800e978 <lwip_netconn_do_write+0x110>)
 800e946:	480a      	ldr	r0, [pc, #40]	; (800e970 <lwip_netconn_do_write+0x108>)
 800e948:	f00b fc1c 	bl	801a184 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800e94c:	e008      	b.n	800e960 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800e94e:	23f5      	movs	r3, #245	; 0xf5
 800e950:	73fb      	strb	r3, [r7, #15]
 800e952:	e001      	b.n	800e958 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800e954:	23fa      	movs	r3, #250	; 0xfa
 800e956:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	7bfa      	ldrb	r2, [r7, #15]
 800e95c:	711a      	strb	r2, [r3, #4]
 800e95e:	e000      	b.n	800e962 <lwip_netconn_do_write+0xfa>
        return;
 800e960:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800e962:	3710      	adds	r7, #16
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	0801b490 	.word	0x0801b490
 800e96c:	0801b834 	.word	0x0801b834
 800e970:	0801b4d4 	.word	0x0801b4d4
 800e974:	0801b9bc 	.word	0x0801b9bc
 800e978:	0801b850 	.word	0x0801b850
 800e97c:	2000828c 	.word	0x2000828c

0800e980 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b084      	sub	sp, #16
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	785b      	ldrb	r3, [r3, #1]
 800e992:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	685b      	ldr	r3, [r3, #4]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d069      	beq.n	800ea72 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800e9a8:	2b10      	cmp	r3, #16
 800e9aa:	d162      	bne.n	800ea72 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e9b0:	2b03      	cmp	r3, #3
 800e9b2:	d002      	beq.n	800e9ba <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e9b4:	7afb      	ldrb	r3, [r7, #11]
 800e9b6:	2b02      	cmp	r3, #2
 800e9b8:	d05b      	beq.n	800ea72 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800e9ba:	7afb      	ldrb	r3, [r7, #11]
 800e9bc:	2b03      	cmp	r3, #3
 800e9be:	d103      	bne.n	800e9c8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	22f5      	movs	r2, #245	; 0xf5
 800e9c4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e9c6:	e059      	b.n	800ea7c <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800e9c8:	7afb      	ldrb	r3, [r7, #11]
 800e9ca:	2b01      	cmp	r3, #1
 800e9cc:	d103      	bne.n	800e9d6 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	22fb      	movs	r2, #251	; 0xfb
 800e9d2:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e9d4:	e052      	b.n	800ea7c <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	7a1b      	ldrb	r3, [r3, #8]
 800e9da:	f003 0301 	and.w	r3, r3, #1
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d004      	beq.n	800e9ec <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7ff f96e 	bl	800dcc8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d006      	beq.n	800ea04 <lwip_netconn_do_close+0x84>
 800e9f6:	4b23      	ldr	r3, [pc, #140]	; (800ea84 <lwip_netconn_do_close+0x104>)
 800e9f8:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800e9fc:	4922      	ldr	r1, [pc, #136]	; (800ea88 <lwip_netconn_do_close+0x108>)
 800e9fe:	4823      	ldr	r0, [pc, #140]	; (800ea8c <lwip_netconn_do_close+0x10c>)
 800ea00:	f00b fbc0 	bl	801a184 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	2204      	movs	r2, #4
 800ea0a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	68fa      	ldr	r2, [r7, #12]
 800ea12:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	2100      	movs	r1, #0
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7ff f9d2 	bl	800ddc4 <lwip_netconn_do_close_internal>
 800ea20:	4603      	mov	r3, r0
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d029      	beq.n	800ea7a <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	785b      	ldrb	r3, [r3, #1]
 800ea2c:	2b04      	cmp	r3, #4
 800ea2e:	d006      	beq.n	800ea3e <lwip_netconn_do_close+0xbe>
 800ea30:	4b14      	ldr	r3, [pc, #80]	; (800ea84 <lwip_netconn_do_close+0x104>)
 800ea32:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800ea36:	4916      	ldr	r1, [pc, #88]	; (800ea90 <lwip_netconn_do_close+0x110>)
 800ea38:	4814      	ldr	r0, [pc, #80]	; (800ea8c <lwip_netconn_do_close+0x10c>)
 800ea3a:	f00b fba3 	bl	801a184 <iprintf>
        UNLOCK_TCPIP_CORE();
 800ea3e:	4815      	ldr	r0, [pc, #84]	; (800ea94 <lwip_netconn_do_close+0x114>)
 800ea40:	f00b f9b9 	bl	8019db6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	330c      	adds	r3, #12
 800ea4a:	2100      	movs	r1, #0
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f00b f918 	bl	8019c82 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800ea52:	4810      	ldr	r0, [pc, #64]	; (800ea94 <lwip_netconn_do_close+0x114>)
 800ea54:	f00b f9a0 	bl	8019d98 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	785b      	ldrb	r3, [r3, #1]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00b      	beq.n	800ea7a <lwip_netconn_do_close+0xfa>
 800ea62:	4b08      	ldr	r3, [pc, #32]	; (800ea84 <lwip_netconn_do_close+0x104>)
 800ea64:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800ea68:	4909      	ldr	r1, [pc, #36]	; (800ea90 <lwip_netconn_do_close+0x110>)
 800ea6a:	4808      	ldr	r0, [pc, #32]	; (800ea8c <lwip_netconn_do_close+0x10c>)
 800ea6c:	f00b fb8a 	bl	801a184 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800ea70:	e003      	b.n	800ea7a <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	22f5      	movs	r2, #245	; 0xf5
 800ea76:	711a      	strb	r2, [r3, #4]
 800ea78:	e000      	b.n	800ea7c <lwip_netconn_do_close+0xfc>
      return;
 800ea7a:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ea7c:	3710      	adds	r7, #16
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	0801b490 	.word	0x0801b490
 800ea88:	0801b834 	.word	0x0801b834
 800ea8c:	0801b4d4 	.word	0x0801b4d4
 800ea90:	0801b850 	.word	0x0801b850
 800ea94:	2000828c 	.word	0x2000828c

0800ea98 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d013      	beq.n	800eace <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d00b      	beq.n	800eac6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	4618      	mov	r0, r3
 800eab4:	f001 fdbe 	bl	8010634 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2200      	movs	r2, #0
 800eabc:	605a      	str	r2, [r3, #4]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	685a      	ldr	r2, [r3, #4]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800eac6:	6879      	ldr	r1, [r7, #4]
 800eac8:	2006      	movs	r0, #6
 800eaca:	f000 ff0f 	bl	800f8ec <memp_free>
  }
}
 800eace:	bf00      	nop
 800ead0:	3708      	adds	r7, #8
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
	...

0800ead8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	60f8      	str	r0, [r7, #12]
 800eae0:	60b9      	str	r1, [r7, #8]
 800eae2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d108      	bne.n	800eafc <netbuf_data+0x24>
 800eaea:	4b1b      	ldr	r3, [pc, #108]	; (800eb58 <netbuf_data+0x80>)
 800eaec:	22c6      	movs	r2, #198	; 0xc6
 800eaee:	491b      	ldr	r1, [pc, #108]	; (800eb5c <netbuf_data+0x84>)
 800eaf0:	481b      	ldr	r0, [pc, #108]	; (800eb60 <netbuf_data+0x88>)
 800eaf2:	f00b fb47 	bl	801a184 <iprintf>
 800eaf6:	f06f 030f 	mvn.w	r3, #15
 800eafa:	e029      	b.n	800eb50 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d108      	bne.n	800eb14 <netbuf_data+0x3c>
 800eb02:	4b15      	ldr	r3, [pc, #84]	; (800eb58 <netbuf_data+0x80>)
 800eb04:	22c7      	movs	r2, #199	; 0xc7
 800eb06:	4917      	ldr	r1, [pc, #92]	; (800eb64 <netbuf_data+0x8c>)
 800eb08:	4815      	ldr	r0, [pc, #84]	; (800eb60 <netbuf_data+0x88>)
 800eb0a:	f00b fb3b 	bl	801a184 <iprintf>
 800eb0e:	f06f 030f 	mvn.w	r3, #15
 800eb12:	e01d      	b.n	800eb50 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d108      	bne.n	800eb2c <netbuf_data+0x54>
 800eb1a:	4b0f      	ldr	r3, [pc, #60]	; (800eb58 <netbuf_data+0x80>)
 800eb1c:	22c8      	movs	r2, #200	; 0xc8
 800eb1e:	4912      	ldr	r1, [pc, #72]	; (800eb68 <netbuf_data+0x90>)
 800eb20:	480f      	ldr	r0, [pc, #60]	; (800eb60 <netbuf_data+0x88>)
 800eb22:	f00b fb2f 	bl	801a184 <iprintf>
 800eb26:	f06f 030f 	mvn.w	r3, #15
 800eb2a:	e011      	b.n	800eb50 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d102      	bne.n	800eb3a <netbuf_data+0x62>
    return ERR_BUF;
 800eb34:	f06f 0301 	mvn.w	r3, #1
 800eb38:	e00a      	b.n	800eb50 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	685b      	ldr	r3, [r3, #4]
 800eb3e:	685a      	ldr	r2, [r3, #4]
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	685b      	ldr	r3, [r3, #4]
 800eb48:	895a      	ldrh	r2, [r3, #10]
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800eb4e:	2300      	movs	r3, #0
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	0801b9e8 	.word	0x0801b9e8
 800eb5c:	0801baf0 	.word	0x0801baf0
 800eb60:	0801ba38 	.word	0x0801ba38
 800eb64:	0801bb0c 	.word	0x0801bb0c
 800eb68:	0801bb2c 	.word	0x0801bb2c

0800eb6c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800eb76:	f008 f9bb 	bl	8016ef0 <sys_timeouts_sleeptime>
 800eb7a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb82:	d10b      	bne.n	800eb9c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800eb84:	4813      	ldr	r0, [pc, #76]	; (800ebd4 <tcpip_timeouts_mbox_fetch+0x68>)
 800eb86:	f00b f916 	bl	8019db6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	6839      	ldr	r1, [r7, #0]
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f00a ffec 	bl	8019b6c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800eb94:	480f      	ldr	r0, [pc, #60]	; (800ebd4 <tcpip_timeouts_mbox_fetch+0x68>)
 800eb96:	f00b f8ff 	bl	8019d98 <sys_mutex_lock>
    return;
 800eb9a:	e018      	b.n	800ebce <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d102      	bne.n	800eba8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800eba2:	f008 f96b 	bl	8016e7c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800eba6:	e7e6      	b.n	800eb76 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800eba8:	480a      	ldr	r0, [pc, #40]	; (800ebd4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ebaa:	f00b f904 	bl	8019db6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ebae:	68fa      	ldr	r2, [r7, #12]
 800ebb0:	6839      	ldr	r1, [r7, #0]
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f00a ffda 	bl	8019b6c <sys_arch_mbox_fetch>
 800ebb8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ebba:	4806      	ldr	r0, [pc, #24]	; (800ebd4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ebbc:	f00b f8ec 	bl	8019d98 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebc6:	d102      	bne.n	800ebce <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ebc8:	f008 f958 	bl	8016e7c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ebcc:	e7d3      	b.n	800eb76 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ebce:	3710      	adds	r7, #16
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	2000828c 	.word	0x2000828c

0800ebd8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b084      	sub	sp, #16
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ebe0:	4810      	ldr	r0, [pc, #64]	; (800ec24 <tcpip_thread+0x4c>)
 800ebe2:	f00b f8d9 	bl	8019d98 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ebe6:	4b10      	ldr	r3, [pc, #64]	; (800ec28 <tcpip_thread+0x50>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d005      	beq.n	800ebfa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ebee:	4b0e      	ldr	r3, [pc, #56]	; (800ec28 <tcpip_thread+0x50>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4a0e      	ldr	r2, [pc, #56]	; (800ec2c <tcpip_thread+0x54>)
 800ebf4:	6812      	ldr	r2, [r2, #0]
 800ebf6:	4610      	mov	r0, r2
 800ebf8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ebfa:	f107 030c 	add.w	r3, r7, #12
 800ebfe:	4619      	mov	r1, r3
 800ec00:	480b      	ldr	r0, [pc, #44]	; (800ec30 <tcpip_thread+0x58>)
 800ec02:	f7ff ffb3 	bl	800eb6c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d106      	bne.n	800ec1a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ec0c:	4b09      	ldr	r3, [pc, #36]	; (800ec34 <tcpip_thread+0x5c>)
 800ec0e:	2291      	movs	r2, #145	; 0x91
 800ec10:	4909      	ldr	r1, [pc, #36]	; (800ec38 <tcpip_thread+0x60>)
 800ec12:	480a      	ldr	r0, [pc, #40]	; (800ec3c <tcpip_thread+0x64>)
 800ec14:	f00b fab6 	bl	801a184 <iprintf>
      continue;
 800ec18:	e003      	b.n	800ec22 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f000 f80f 	bl	800ec40 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ec22:	e7ea      	b.n	800ebfa <tcpip_thread+0x22>
 800ec24:	2000828c 	.word	0x2000828c
 800ec28:	20004a74 	.word	0x20004a74
 800ec2c:	20004a78 	.word	0x20004a78
 800ec30:	20004a7c 	.word	0x20004a7c
 800ec34:	0801bb80 	.word	0x0801bb80
 800ec38:	0801bbb0 	.word	0x0801bbb0
 800ec3c:	0801bbd0 	.word	0x0801bbd0

0800ec40 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	2b02      	cmp	r3, #2
 800ec4e:	d026      	beq.n	800ec9e <tcpip_thread_handle_msg+0x5e>
 800ec50:	2b02      	cmp	r3, #2
 800ec52:	dc2b      	bgt.n	800ecac <tcpip_thread_handle_msg+0x6c>
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d002      	beq.n	800ec5e <tcpip_thread_handle_msg+0x1e>
 800ec58:	2b01      	cmp	r3, #1
 800ec5a:	d015      	beq.n	800ec88 <tcpip_thread_handle_msg+0x48>
 800ec5c:	e026      	b.n	800ecac <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	6850      	ldr	r0, [r2, #4]
 800ec66:	687a      	ldr	r2, [r7, #4]
 800ec68:	6892      	ldr	r2, [r2, #8]
 800ec6a:	4611      	mov	r1, r2
 800ec6c:	4798      	blx	r3
 800ec6e:	4603      	mov	r3, r0
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d004      	beq.n	800ec7e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f001 fcdb 	bl	8010634 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ec7e:	6879      	ldr	r1, [r7, #4]
 800ec80:	2009      	movs	r0, #9
 800ec82:	f000 fe33 	bl	800f8ec <memp_free>
      break;
 800ec86:	e018      	b.n	800ecba <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	687a      	ldr	r2, [r7, #4]
 800ec8e:	6892      	ldr	r2, [r2, #8]
 800ec90:	4610      	mov	r0, r2
 800ec92:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ec94:	6879      	ldr	r1, [r7, #4]
 800ec96:	2008      	movs	r0, #8
 800ec98:	f000 fe28 	bl	800f8ec <memp_free>
      break;
 800ec9c:	e00d      	b.n	800ecba <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	685b      	ldr	r3, [r3, #4]
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	6892      	ldr	r2, [r2, #8]
 800eca6:	4610      	mov	r0, r2
 800eca8:	4798      	blx	r3
      break;
 800ecaa:	e006      	b.n	800ecba <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ecac:	4b05      	ldr	r3, [pc, #20]	; (800ecc4 <tcpip_thread_handle_msg+0x84>)
 800ecae:	22cf      	movs	r2, #207	; 0xcf
 800ecb0:	4905      	ldr	r1, [pc, #20]	; (800ecc8 <tcpip_thread_handle_msg+0x88>)
 800ecb2:	4806      	ldr	r0, [pc, #24]	; (800eccc <tcpip_thread_handle_msg+0x8c>)
 800ecb4:	f00b fa66 	bl	801a184 <iprintf>
      break;
 800ecb8:	bf00      	nop
  }
}
 800ecba:	bf00      	nop
 800ecbc:	3708      	adds	r7, #8
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	0801bb80 	.word	0x0801bb80
 800ecc8:	0801bbb0 	.word	0x0801bbb0
 800eccc:	0801bbd0 	.word	0x0801bbd0

0800ecd0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b086      	sub	sp, #24
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	60f8      	str	r0, [r7, #12]
 800ecd8:	60b9      	str	r1, [r7, #8]
 800ecda:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ecdc:	481a      	ldr	r0, [pc, #104]	; (800ed48 <tcpip_inpkt+0x78>)
 800ecde:	f00a ff8d 	bl	8019bfc <sys_mbox_valid>
 800ece2:	4603      	mov	r3, r0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d105      	bne.n	800ecf4 <tcpip_inpkt+0x24>
 800ece8:	4b18      	ldr	r3, [pc, #96]	; (800ed4c <tcpip_inpkt+0x7c>)
 800ecea:	22fc      	movs	r2, #252	; 0xfc
 800ecec:	4918      	ldr	r1, [pc, #96]	; (800ed50 <tcpip_inpkt+0x80>)
 800ecee:	4819      	ldr	r0, [pc, #100]	; (800ed54 <tcpip_inpkt+0x84>)
 800ecf0:	f00b fa48 	bl	801a184 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ecf4:	2009      	movs	r0, #9
 800ecf6:	f000 fda7 	bl	800f848 <memp_malloc>
 800ecfa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d102      	bne.n	800ed08 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ed02:	f04f 33ff 	mov.w	r3, #4294967295
 800ed06:	e01a      	b.n	800ed3e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	68ba      	ldr	r2, [r7, #8]
 800ed18:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ed20:	6979      	ldr	r1, [r7, #20]
 800ed22:	4809      	ldr	r0, [pc, #36]	; (800ed48 <tcpip_inpkt+0x78>)
 800ed24:	f00a ff08 	bl	8019b38 <sys_mbox_trypost>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d006      	beq.n	800ed3c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ed2e:	6979      	ldr	r1, [r7, #20]
 800ed30:	2009      	movs	r0, #9
 800ed32:	f000 fddb 	bl	800f8ec <memp_free>
    return ERR_MEM;
 800ed36:	f04f 33ff 	mov.w	r3, #4294967295
 800ed3a:	e000      	b.n	800ed3e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ed3c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3718      	adds	r7, #24
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	20004a7c 	.word	0x20004a7c
 800ed4c:	0801bb80 	.word	0x0801bb80
 800ed50:	0801bbf8 	.word	0x0801bbf8
 800ed54:	0801bbd0 	.word	0x0801bbd0

0800ed58 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ed68:	f003 0318 	and.w	r3, r3, #24
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d006      	beq.n	800ed7e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ed70:	4a08      	ldr	r2, [pc, #32]	; (800ed94 <tcpip_input+0x3c>)
 800ed72:	6839      	ldr	r1, [r7, #0]
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f7ff ffab 	bl	800ecd0 <tcpip_inpkt>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	e005      	b.n	800ed8a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ed7e:	4a06      	ldr	r2, [pc, #24]	; (800ed98 <tcpip_input+0x40>)
 800ed80:	6839      	ldr	r1, [r7, #0]
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f7ff ffa4 	bl	800ecd0 <tcpip_inpkt>
 800ed88:	4603      	mov	r3, r0
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	3708      	adds	r7, #8
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	08019935 	.word	0x08019935
 800ed98:	08018849 	.word	0x08018849

0800ed9c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b084      	sub	sp, #16
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800eda6:	4819      	ldr	r0, [pc, #100]	; (800ee0c <tcpip_try_callback+0x70>)
 800eda8:	f00a ff28 	bl	8019bfc <sys_mbox_valid>
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d106      	bne.n	800edc0 <tcpip_try_callback+0x24>
 800edb2:	4b17      	ldr	r3, [pc, #92]	; (800ee10 <tcpip_try_callback+0x74>)
 800edb4:	f240 125d 	movw	r2, #349	; 0x15d
 800edb8:	4916      	ldr	r1, [pc, #88]	; (800ee14 <tcpip_try_callback+0x78>)
 800edba:	4817      	ldr	r0, [pc, #92]	; (800ee18 <tcpip_try_callback+0x7c>)
 800edbc:	f00b f9e2 	bl	801a184 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800edc0:	2008      	movs	r0, #8
 800edc2:	f000 fd41 	bl	800f848 <memp_malloc>
 800edc6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d102      	bne.n	800edd4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800edce:	f04f 33ff 	mov.w	r3, #4294967295
 800edd2:	e017      	b.n	800ee04 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2201      	movs	r2, #1
 800edd8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	687a      	ldr	r2, [r7, #4]
 800edde:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	683a      	ldr	r2, [r7, #0]
 800ede4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ede6:	68f9      	ldr	r1, [r7, #12]
 800ede8:	4808      	ldr	r0, [pc, #32]	; (800ee0c <tcpip_try_callback+0x70>)
 800edea:	f00a fea5 	bl	8019b38 <sys_mbox_trypost>
 800edee:	4603      	mov	r3, r0
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d006      	beq.n	800ee02 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800edf4:	68f9      	ldr	r1, [r7, #12]
 800edf6:	2008      	movs	r0, #8
 800edf8:	f000 fd78 	bl	800f8ec <memp_free>
    return ERR_MEM;
 800edfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ee00:	e000      	b.n	800ee04 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ee02:	2300      	movs	r3, #0
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3710      	adds	r7, #16
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}
 800ee0c:	20004a7c 	.word	0x20004a7c
 800ee10:	0801bb80 	.word	0x0801bb80
 800ee14:	0801bbf8 	.word	0x0801bbf8
 800ee18:	0801bbd0 	.word	0x0801bbd0

0800ee1c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ee28:	4806      	ldr	r0, [pc, #24]	; (800ee44 <tcpip_send_msg_wait_sem+0x28>)
 800ee2a:	f00a ffb5 	bl	8019d98 <sys_mutex_lock>
  fn(apimsg);
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	68b8      	ldr	r0, [r7, #8]
 800ee32:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ee34:	4803      	ldr	r0, [pc, #12]	; (800ee44 <tcpip_send_msg_wait_sem+0x28>)
 800ee36:	f00a ffbe 	bl	8019db6 <sys_mutex_unlock>
  return ERR_OK;
 800ee3a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3710      	adds	r7, #16
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}
 800ee44:	2000828c 	.word	0x2000828c

0800ee48 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b084      	sub	sp, #16
 800ee4c:	af02      	add	r7, sp, #8
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ee52:	f000 f871 	bl	800ef38 <lwip_init>

  tcpip_init_done = initfunc;
 800ee56:	4a17      	ldr	r2, [pc, #92]	; (800eeb4 <tcpip_init+0x6c>)
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ee5c:	4a16      	ldr	r2, [pc, #88]	; (800eeb8 <tcpip_init+0x70>)
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ee62:	2106      	movs	r1, #6
 800ee64:	4815      	ldr	r0, [pc, #84]	; (800eebc <tcpip_init+0x74>)
 800ee66:	f00a fe3b 	bl	8019ae0 <sys_mbox_new>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d006      	beq.n	800ee7e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ee70:	4b13      	ldr	r3, [pc, #76]	; (800eec0 <tcpip_init+0x78>)
 800ee72:	f240 2261 	movw	r2, #609	; 0x261
 800ee76:	4913      	ldr	r1, [pc, #76]	; (800eec4 <tcpip_init+0x7c>)
 800ee78:	4813      	ldr	r0, [pc, #76]	; (800eec8 <tcpip_init+0x80>)
 800ee7a:	f00b f983 	bl	801a184 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ee7e:	4813      	ldr	r0, [pc, #76]	; (800eecc <tcpip_init+0x84>)
 800ee80:	f00a ff74 	bl	8019d6c <sys_mutex_new>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d006      	beq.n	800ee98 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ee8a:	4b0d      	ldr	r3, [pc, #52]	; (800eec0 <tcpip_init+0x78>)
 800ee8c:	f240 2265 	movw	r2, #613	; 0x265
 800ee90:	490f      	ldr	r1, [pc, #60]	; (800eed0 <tcpip_init+0x88>)
 800ee92:	480d      	ldr	r0, [pc, #52]	; (800eec8 <tcpip_init+0x80>)
 800ee94:	f00b f976 	bl	801a184 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ee98:	2318      	movs	r3, #24
 800ee9a:	9300      	str	r3, [sp, #0]
 800ee9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eea0:	2200      	movs	r2, #0
 800eea2:	490c      	ldr	r1, [pc, #48]	; (800eed4 <tcpip_init+0x8c>)
 800eea4:	480c      	ldr	r0, [pc, #48]	; (800eed8 <tcpip_init+0x90>)
 800eea6:	f00a ff93 	bl	8019dd0 <sys_thread_new>
}
 800eeaa:	bf00      	nop
 800eeac:	3708      	adds	r7, #8
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}
 800eeb2:	bf00      	nop
 800eeb4:	20004a74 	.word	0x20004a74
 800eeb8:	20004a78 	.word	0x20004a78
 800eebc:	20004a7c 	.word	0x20004a7c
 800eec0:	0801bb80 	.word	0x0801bb80
 800eec4:	0801bc08 	.word	0x0801bc08
 800eec8:	0801bbd0 	.word	0x0801bbd0
 800eecc:	2000828c 	.word	0x2000828c
 800eed0:	0801bc2c 	.word	0x0801bc2c
 800eed4:	0800ebd9 	.word	0x0800ebd9
 800eed8:	0801bc50 	.word	0x0801bc50

0800eedc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800eedc:	b480      	push	{r7}
 800eede:	b083      	sub	sp, #12
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	4603      	mov	r3, r0
 800eee4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800eee6:	88fb      	ldrh	r3, [r7, #6]
 800eee8:	021b      	lsls	r3, r3, #8
 800eeea:	b21a      	sxth	r2, r3
 800eeec:	88fb      	ldrh	r3, [r7, #6]
 800eeee:	0a1b      	lsrs	r3, r3, #8
 800eef0:	b29b      	uxth	r3, r3
 800eef2:	b21b      	sxth	r3, r3
 800eef4:	4313      	orrs	r3, r2
 800eef6:	b21b      	sxth	r3, r3
 800eef8:	b29b      	uxth	r3, r3
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	370c      	adds	r7, #12
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr

0800ef06 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ef06:	b480      	push	{r7}
 800ef08:	b083      	sub	sp, #12
 800ef0a:	af00      	add	r7, sp, #0
 800ef0c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	061a      	lsls	r2, r3, #24
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	021b      	lsls	r3, r3, #8
 800ef16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ef1a:	431a      	orrs	r2, r3
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	0a1b      	lsrs	r3, r3, #8
 800ef20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ef24:	431a      	orrs	r2, r3
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	0e1b      	lsrs	r3, r3, #24
 800ef2a:	4313      	orrs	r3, r2
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	370c      	adds	r7, #12
 800ef30:	46bd      	mov	sp, r7
 800ef32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef36:	4770      	bx	lr

0800ef38 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ef42:	f00a ff07 	bl	8019d54 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ef46:	f000 f8d5 	bl	800f0f4 <mem_init>
  memp_init();
 800ef4a:	f000 fc31 	bl	800f7b0 <memp_init>
  pbuf_init();
  netif_init();
 800ef4e:	f000 fcf7 	bl	800f940 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ef52:	f008 f805 	bl	8016f60 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ef56:	f001 fe07 	bl	8010b68 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ef5a:	f007 ff47 	bl	8016dec <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ef5e:	bf00      	nop
 800ef60:	3708      	adds	r7, #8
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
	...

0800ef68 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b083      	sub	sp, #12
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	4603      	mov	r3, r0
 800ef70:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ef72:	4b05      	ldr	r3, [pc, #20]	; (800ef88 <ptr_to_mem+0x20>)
 800ef74:	681a      	ldr	r2, [r3, #0]
 800ef76:	88fb      	ldrh	r3, [r7, #6]
 800ef78:	4413      	add	r3, r2
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	370c      	adds	r7, #12
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef84:	4770      	bx	lr
 800ef86:	bf00      	nop
 800ef88:	20004a80 	.word	0x20004a80

0800ef8c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ef94:	4b05      	ldr	r3, [pc, #20]	; (800efac <mem_to_ptr+0x20>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	687a      	ldr	r2, [r7, #4]
 800ef9a:	1ad3      	subs	r3, r2, r3
 800ef9c:	b29b      	uxth	r3, r3
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	370c      	adds	r7, #12
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop
 800efac:	20004a80 	.word	0x20004a80

0800efb0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800efb0:	b590      	push	{r4, r7, lr}
 800efb2:	b085      	sub	sp, #20
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800efb8:	4b45      	ldr	r3, [pc, #276]	; (800f0d0 <plug_holes+0x120>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d206      	bcs.n	800efd0 <plug_holes+0x20>
 800efc2:	4b44      	ldr	r3, [pc, #272]	; (800f0d4 <plug_holes+0x124>)
 800efc4:	f240 12df 	movw	r2, #479	; 0x1df
 800efc8:	4943      	ldr	r1, [pc, #268]	; (800f0d8 <plug_holes+0x128>)
 800efca:	4844      	ldr	r0, [pc, #272]	; (800f0dc <plug_holes+0x12c>)
 800efcc:	f00b f8da 	bl	801a184 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800efd0:	4b43      	ldr	r3, [pc, #268]	; (800f0e0 <plug_holes+0x130>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	687a      	ldr	r2, [r7, #4]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d306      	bcc.n	800efe8 <plug_holes+0x38>
 800efda:	4b3e      	ldr	r3, [pc, #248]	; (800f0d4 <plug_holes+0x124>)
 800efdc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800efe0:	4940      	ldr	r1, [pc, #256]	; (800f0e4 <plug_holes+0x134>)
 800efe2:	483e      	ldr	r0, [pc, #248]	; (800f0dc <plug_holes+0x12c>)
 800efe4:	f00b f8ce 	bl	801a184 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	791b      	ldrb	r3, [r3, #4]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d006      	beq.n	800effe <plug_holes+0x4e>
 800eff0:	4b38      	ldr	r3, [pc, #224]	; (800f0d4 <plug_holes+0x124>)
 800eff2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800eff6:	493c      	ldr	r1, [pc, #240]	; (800f0e8 <plug_holes+0x138>)
 800eff8:	4838      	ldr	r0, [pc, #224]	; (800f0dc <plug_holes+0x12c>)
 800effa:	f00b f8c3 	bl	801a184 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	881b      	ldrh	r3, [r3, #0]
 800f002:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f006:	d906      	bls.n	800f016 <plug_holes+0x66>
 800f008:	4b32      	ldr	r3, [pc, #200]	; (800f0d4 <plug_holes+0x124>)
 800f00a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f00e:	4937      	ldr	r1, [pc, #220]	; (800f0ec <plug_holes+0x13c>)
 800f010:	4832      	ldr	r0, [pc, #200]	; (800f0dc <plug_holes+0x12c>)
 800f012:	f00b f8b7 	bl	801a184 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	881b      	ldrh	r3, [r3, #0]
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7ff ffa4 	bl	800ef68 <ptr_to_mem>
 800f020:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	429a      	cmp	r2, r3
 800f028:	d024      	beq.n	800f074 <plug_holes+0xc4>
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	791b      	ldrb	r3, [r3, #4]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d120      	bne.n	800f074 <plug_holes+0xc4>
 800f032:	4b2b      	ldr	r3, [pc, #172]	; (800f0e0 <plug_holes+0x130>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	68fa      	ldr	r2, [r7, #12]
 800f038:	429a      	cmp	r2, r3
 800f03a:	d01b      	beq.n	800f074 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f03c:	4b2c      	ldr	r3, [pc, #176]	; (800f0f0 <plug_holes+0x140>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	68fa      	ldr	r2, [r7, #12]
 800f042:	429a      	cmp	r2, r3
 800f044:	d102      	bne.n	800f04c <plug_holes+0x9c>
      lfree = mem;
 800f046:	4a2a      	ldr	r2, [pc, #168]	; (800f0f0 <plug_holes+0x140>)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	881a      	ldrh	r2, [r3, #0]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	881b      	ldrh	r3, [r3, #0]
 800f058:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f05c:	d00a      	beq.n	800f074 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	881b      	ldrh	r3, [r3, #0]
 800f062:	4618      	mov	r0, r3
 800f064:	f7ff ff80 	bl	800ef68 <ptr_to_mem>
 800f068:	4604      	mov	r4, r0
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f7ff ff8e 	bl	800ef8c <mem_to_ptr>
 800f070:	4603      	mov	r3, r0
 800f072:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	885b      	ldrh	r3, [r3, #2]
 800f078:	4618      	mov	r0, r3
 800f07a:	f7ff ff75 	bl	800ef68 <ptr_to_mem>
 800f07e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f080:	68ba      	ldr	r2, [r7, #8]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	429a      	cmp	r2, r3
 800f086:	d01f      	beq.n	800f0c8 <plug_holes+0x118>
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	791b      	ldrb	r3, [r3, #4]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d11b      	bne.n	800f0c8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f090:	4b17      	ldr	r3, [pc, #92]	; (800f0f0 <plug_holes+0x140>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	687a      	ldr	r2, [r7, #4]
 800f096:	429a      	cmp	r2, r3
 800f098:	d102      	bne.n	800f0a0 <plug_holes+0xf0>
      lfree = pmem;
 800f09a:	4a15      	ldr	r2, [pc, #84]	; (800f0f0 <plug_holes+0x140>)
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	881a      	ldrh	r2, [r3, #0]
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	881b      	ldrh	r3, [r3, #0]
 800f0ac:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f0b0:	d00a      	beq.n	800f0c8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	881b      	ldrh	r3, [r3, #0]
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7ff ff56 	bl	800ef68 <ptr_to_mem>
 800f0bc:	4604      	mov	r4, r0
 800f0be:	68b8      	ldr	r0, [r7, #8]
 800f0c0:	f7ff ff64 	bl	800ef8c <mem_to_ptr>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f0c8:	bf00      	nop
 800f0ca:	3714      	adds	r7, #20
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd90      	pop	{r4, r7, pc}
 800f0d0:	20004a80 	.word	0x20004a80
 800f0d4:	0801bc60 	.word	0x0801bc60
 800f0d8:	0801bc90 	.word	0x0801bc90
 800f0dc:	0801bca8 	.word	0x0801bca8
 800f0e0:	20004a84 	.word	0x20004a84
 800f0e4:	0801bcd0 	.word	0x0801bcd0
 800f0e8:	0801bcec 	.word	0x0801bcec
 800f0ec:	0801bd08 	.word	0x0801bd08
 800f0f0:	20004a8c 	.word	0x20004a8c

0800f0f4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f0fa:	4b1f      	ldr	r3, [pc, #124]	; (800f178 <mem_init+0x84>)
 800f0fc:	3303      	adds	r3, #3
 800f0fe:	f023 0303 	bic.w	r3, r3, #3
 800f102:	461a      	mov	r2, r3
 800f104:	4b1d      	ldr	r3, [pc, #116]	; (800f17c <mem_init+0x88>)
 800f106:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f108:	4b1c      	ldr	r3, [pc, #112]	; (800f17c <mem_init+0x88>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800f114:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2200      	movs	r2, #0
 800f11a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2200      	movs	r2, #0
 800f120:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f122:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800f126:	f7ff ff1f 	bl	800ef68 <ptr_to_mem>
 800f12a:	4603      	mov	r3, r0
 800f12c:	4a14      	ldr	r2, [pc, #80]	; (800f180 <mem_init+0x8c>)
 800f12e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f130:	4b13      	ldr	r3, [pc, #76]	; (800f180 <mem_init+0x8c>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2201      	movs	r2, #1
 800f136:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f138:	4b11      	ldr	r3, [pc, #68]	; (800f180 <mem_init+0x8c>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800f140:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f142:	4b0f      	ldr	r3, [pc, #60]	; (800f180 <mem_init+0x8c>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800f14a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f14c:	4b0b      	ldr	r3, [pc, #44]	; (800f17c <mem_init+0x88>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	4a0c      	ldr	r2, [pc, #48]	; (800f184 <mem_init+0x90>)
 800f152:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f154:	480c      	ldr	r0, [pc, #48]	; (800f188 <mem_init+0x94>)
 800f156:	f00a fe09 	bl	8019d6c <sys_mutex_new>
 800f15a:	4603      	mov	r3, r0
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d006      	beq.n	800f16e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f160:	4b0a      	ldr	r3, [pc, #40]	; (800f18c <mem_init+0x98>)
 800f162:	f240 221f 	movw	r2, #543	; 0x21f
 800f166:	490a      	ldr	r1, [pc, #40]	; (800f190 <mem_init+0x9c>)
 800f168:	480a      	ldr	r0, [pc, #40]	; (800f194 <mem_init+0xa0>)
 800f16a:	f00b f80b 	bl	801a184 <iprintf>
  }
}
 800f16e:	bf00      	nop
 800f170:	3708      	adds	r7, #8
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	200082a8 	.word	0x200082a8
 800f17c:	20004a80 	.word	0x20004a80
 800f180:	20004a84 	.word	0x20004a84
 800f184:	20004a8c 	.word	0x20004a8c
 800f188:	20004a88 	.word	0x20004a88
 800f18c:	0801bc60 	.word	0x0801bc60
 800f190:	0801bd34 	.word	0x0801bd34
 800f194:	0801bca8 	.word	0x0801bca8

0800f198 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b086      	sub	sp, #24
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f7ff fef3 	bl	800ef8c <mem_to_ptr>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	881b      	ldrh	r3, [r3, #0]
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f7ff feda 	bl	800ef68 <ptr_to_mem>
 800f1b4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	885b      	ldrh	r3, [r3, #2]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7ff fed4 	bl	800ef68 <ptr_to_mem>
 800f1c0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	881b      	ldrh	r3, [r3, #0]
 800f1c6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f1ca:	d818      	bhi.n	800f1fe <mem_link_valid+0x66>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	885b      	ldrh	r3, [r3, #2]
 800f1d0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f1d4:	d813      	bhi.n	800f1fe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f1da:	8afa      	ldrh	r2, [r7, #22]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d004      	beq.n	800f1ea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	881b      	ldrh	r3, [r3, #0]
 800f1e4:	8afa      	ldrh	r2, [r7, #22]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d109      	bne.n	800f1fe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f1ea:	4b08      	ldr	r3, [pc, #32]	; (800f20c <mem_link_valid+0x74>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f1ee:	693a      	ldr	r2, [r7, #16]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d006      	beq.n	800f202 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	885b      	ldrh	r3, [r3, #2]
 800f1f8:	8afa      	ldrh	r2, [r7, #22]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d001      	beq.n	800f202 <mem_link_valid+0x6a>
    return 0;
 800f1fe:	2300      	movs	r3, #0
 800f200:	e000      	b.n	800f204 <mem_link_valid+0x6c>
  }
  return 1;
 800f202:	2301      	movs	r3, #1
}
 800f204:	4618      	mov	r0, r3
 800f206:	3718      	adds	r7, #24
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	20004a84 	.word	0x20004a84

0800f210 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b088      	sub	sp, #32
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d070      	beq.n	800f300 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f003 0303 	and.w	r3, r3, #3
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00d      	beq.n	800f244 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f228:	4b37      	ldr	r3, [pc, #220]	; (800f308 <mem_free+0xf8>)
 800f22a:	f240 2273 	movw	r2, #627	; 0x273
 800f22e:	4937      	ldr	r1, [pc, #220]	; (800f30c <mem_free+0xfc>)
 800f230:	4837      	ldr	r0, [pc, #220]	; (800f310 <mem_free+0x100>)
 800f232:	f00a ffa7 	bl	801a184 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f236:	f00a fdeb 	bl	8019e10 <sys_arch_protect>
 800f23a:	60f8      	str	r0, [r7, #12]
 800f23c:	68f8      	ldr	r0, [r7, #12]
 800f23e:	f00a fdf5 	bl	8019e2c <sys_arch_unprotect>
    return;
 800f242:	e05e      	b.n	800f302 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	3b08      	subs	r3, #8
 800f248:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f24a:	4b32      	ldr	r3, [pc, #200]	; (800f314 <mem_free+0x104>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	69fa      	ldr	r2, [r7, #28]
 800f250:	429a      	cmp	r2, r3
 800f252:	d306      	bcc.n	800f262 <mem_free+0x52>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f103 020c 	add.w	r2, r3, #12
 800f25a:	4b2f      	ldr	r3, [pc, #188]	; (800f318 <mem_free+0x108>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	429a      	cmp	r2, r3
 800f260:	d90d      	bls.n	800f27e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f262:	4b29      	ldr	r3, [pc, #164]	; (800f308 <mem_free+0xf8>)
 800f264:	f240 227f 	movw	r2, #639	; 0x27f
 800f268:	492c      	ldr	r1, [pc, #176]	; (800f31c <mem_free+0x10c>)
 800f26a:	4829      	ldr	r0, [pc, #164]	; (800f310 <mem_free+0x100>)
 800f26c:	f00a ff8a 	bl	801a184 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f270:	f00a fdce 	bl	8019e10 <sys_arch_protect>
 800f274:	6138      	str	r0, [r7, #16]
 800f276:	6938      	ldr	r0, [r7, #16]
 800f278:	f00a fdd8 	bl	8019e2c <sys_arch_unprotect>
    return;
 800f27c:	e041      	b.n	800f302 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f27e:	4828      	ldr	r0, [pc, #160]	; (800f320 <mem_free+0x110>)
 800f280:	f00a fd8a 	bl	8019d98 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	791b      	ldrb	r3, [r3, #4]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d110      	bne.n	800f2ae <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f28c:	4b1e      	ldr	r3, [pc, #120]	; (800f308 <mem_free+0xf8>)
 800f28e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800f292:	4924      	ldr	r1, [pc, #144]	; (800f324 <mem_free+0x114>)
 800f294:	481e      	ldr	r0, [pc, #120]	; (800f310 <mem_free+0x100>)
 800f296:	f00a ff75 	bl	801a184 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f29a:	4821      	ldr	r0, [pc, #132]	; (800f320 <mem_free+0x110>)
 800f29c:	f00a fd8b 	bl	8019db6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f2a0:	f00a fdb6 	bl	8019e10 <sys_arch_protect>
 800f2a4:	6178      	str	r0, [r7, #20]
 800f2a6:	6978      	ldr	r0, [r7, #20]
 800f2a8:	f00a fdc0 	bl	8019e2c <sys_arch_unprotect>
    return;
 800f2ac:	e029      	b.n	800f302 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f2ae:	69f8      	ldr	r0, [r7, #28]
 800f2b0:	f7ff ff72 	bl	800f198 <mem_link_valid>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d110      	bne.n	800f2dc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f2ba:	4b13      	ldr	r3, [pc, #76]	; (800f308 <mem_free+0xf8>)
 800f2bc:	f240 2295 	movw	r2, #661	; 0x295
 800f2c0:	4919      	ldr	r1, [pc, #100]	; (800f328 <mem_free+0x118>)
 800f2c2:	4813      	ldr	r0, [pc, #76]	; (800f310 <mem_free+0x100>)
 800f2c4:	f00a ff5e 	bl	801a184 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f2c8:	4815      	ldr	r0, [pc, #84]	; (800f320 <mem_free+0x110>)
 800f2ca:	f00a fd74 	bl	8019db6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f2ce:	f00a fd9f 	bl	8019e10 <sys_arch_protect>
 800f2d2:	61b8      	str	r0, [r7, #24]
 800f2d4:	69b8      	ldr	r0, [r7, #24]
 800f2d6:	f00a fda9 	bl	8019e2c <sys_arch_unprotect>
    return;
 800f2da:	e012      	b.n	800f302 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f2e2:	4b12      	ldr	r3, [pc, #72]	; (800f32c <mem_free+0x11c>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	69fa      	ldr	r2, [r7, #28]
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d202      	bcs.n	800f2f2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f2ec:	4a0f      	ldr	r2, [pc, #60]	; (800f32c <mem_free+0x11c>)
 800f2ee:	69fb      	ldr	r3, [r7, #28]
 800f2f0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f2f2:	69f8      	ldr	r0, [r7, #28]
 800f2f4:	f7ff fe5c 	bl	800efb0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f2f8:	4809      	ldr	r0, [pc, #36]	; (800f320 <mem_free+0x110>)
 800f2fa:	f00a fd5c 	bl	8019db6 <sys_mutex_unlock>
 800f2fe:	e000      	b.n	800f302 <mem_free+0xf2>
    return;
 800f300:	bf00      	nop
}
 800f302:	3720      	adds	r7, #32
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	0801bc60 	.word	0x0801bc60
 800f30c:	0801bd50 	.word	0x0801bd50
 800f310:	0801bca8 	.word	0x0801bca8
 800f314:	20004a80 	.word	0x20004a80
 800f318:	20004a84 	.word	0x20004a84
 800f31c:	0801bd74 	.word	0x0801bd74
 800f320:	20004a88 	.word	0x20004a88
 800f324:	0801bd90 	.word	0x0801bd90
 800f328:	0801bdb8 	.word	0x0801bdb8
 800f32c:	20004a8c 	.word	0x20004a8c

0800f330 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b088      	sub	sp, #32
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	460b      	mov	r3, r1
 800f33a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f33c:	887b      	ldrh	r3, [r7, #2]
 800f33e:	3303      	adds	r3, #3
 800f340:	b29b      	uxth	r3, r3
 800f342:	f023 0303 	bic.w	r3, r3, #3
 800f346:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f348:	8bfb      	ldrh	r3, [r7, #30]
 800f34a:	2b0b      	cmp	r3, #11
 800f34c:	d801      	bhi.n	800f352 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f34e:	230c      	movs	r3, #12
 800f350:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f352:	8bfb      	ldrh	r3, [r7, #30]
 800f354:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f358:	d803      	bhi.n	800f362 <mem_trim+0x32>
 800f35a:	8bfa      	ldrh	r2, [r7, #30]
 800f35c:	887b      	ldrh	r3, [r7, #2]
 800f35e:	429a      	cmp	r2, r3
 800f360:	d201      	bcs.n	800f366 <mem_trim+0x36>
    return NULL;
 800f362:	2300      	movs	r3, #0
 800f364:	e0d8      	b.n	800f518 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f366:	4b6e      	ldr	r3, [pc, #440]	; (800f520 <mem_trim+0x1f0>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	687a      	ldr	r2, [r7, #4]
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d304      	bcc.n	800f37a <mem_trim+0x4a>
 800f370:	4b6c      	ldr	r3, [pc, #432]	; (800f524 <mem_trim+0x1f4>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	687a      	ldr	r2, [r7, #4]
 800f376:	429a      	cmp	r2, r3
 800f378:	d306      	bcc.n	800f388 <mem_trim+0x58>
 800f37a:	4b6b      	ldr	r3, [pc, #428]	; (800f528 <mem_trim+0x1f8>)
 800f37c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f380:	496a      	ldr	r1, [pc, #424]	; (800f52c <mem_trim+0x1fc>)
 800f382:	486b      	ldr	r0, [pc, #428]	; (800f530 <mem_trim+0x200>)
 800f384:	f00a fefe 	bl	801a184 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f388:	4b65      	ldr	r3, [pc, #404]	; (800f520 <mem_trim+0x1f0>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	429a      	cmp	r2, r3
 800f390:	d304      	bcc.n	800f39c <mem_trim+0x6c>
 800f392:	4b64      	ldr	r3, [pc, #400]	; (800f524 <mem_trim+0x1f4>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	687a      	ldr	r2, [r7, #4]
 800f398:	429a      	cmp	r2, r3
 800f39a:	d307      	bcc.n	800f3ac <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f39c:	f00a fd38 	bl	8019e10 <sys_arch_protect>
 800f3a0:	60b8      	str	r0, [r7, #8]
 800f3a2:	68b8      	ldr	r0, [r7, #8]
 800f3a4:	f00a fd42 	bl	8019e2c <sys_arch_unprotect>
    return rmem;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	e0b5      	b.n	800f518 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	3b08      	subs	r3, #8
 800f3b0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f3b2:	69b8      	ldr	r0, [r7, #24]
 800f3b4:	f7ff fdea 	bl	800ef8c <mem_to_ptr>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f3bc:	69bb      	ldr	r3, [r7, #24]
 800f3be:	881a      	ldrh	r2, [r3, #0]
 800f3c0:	8afb      	ldrh	r3, [r7, #22]
 800f3c2:	1ad3      	subs	r3, r2, r3
 800f3c4:	b29b      	uxth	r3, r3
 800f3c6:	3b08      	subs	r3, #8
 800f3c8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f3ca:	8bfa      	ldrh	r2, [r7, #30]
 800f3cc:	8abb      	ldrh	r3, [r7, #20]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d906      	bls.n	800f3e0 <mem_trim+0xb0>
 800f3d2:	4b55      	ldr	r3, [pc, #340]	; (800f528 <mem_trim+0x1f8>)
 800f3d4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f3d8:	4956      	ldr	r1, [pc, #344]	; (800f534 <mem_trim+0x204>)
 800f3da:	4855      	ldr	r0, [pc, #340]	; (800f530 <mem_trim+0x200>)
 800f3dc:	f00a fed2 	bl	801a184 <iprintf>
  if (newsize > size) {
 800f3e0:	8bfa      	ldrh	r2, [r7, #30]
 800f3e2:	8abb      	ldrh	r3, [r7, #20]
 800f3e4:	429a      	cmp	r2, r3
 800f3e6:	d901      	bls.n	800f3ec <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	e095      	b.n	800f518 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800f3ec:	8bfa      	ldrh	r2, [r7, #30]
 800f3ee:	8abb      	ldrh	r3, [r7, #20]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	d101      	bne.n	800f3f8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	e08f      	b.n	800f518 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f3f8:	484f      	ldr	r0, [pc, #316]	; (800f538 <mem_trim+0x208>)
 800f3fa:	f00a fccd 	bl	8019d98 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f3fe:	69bb      	ldr	r3, [r7, #24]
 800f400:	881b      	ldrh	r3, [r3, #0]
 800f402:	4618      	mov	r0, r3
 800f404:	f7ff fdb0 	bl	800ef68 <ptr_to_mem>
 800f408:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	791b      	ldrb	r3, [r3, #4]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d13f      	bne.n	800f492 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f412:	69bb      	ldr	r3, [r7, #24]
 800f414:	881b      	ldrh	r3, [r3, #0]
 800f416:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f41a:	d106      	bne.n	800f42a <mem_trim+0xfa>
 800f41c:	4b42      	ldr	r3, [pc, #264]	; (800f528 <mem_trim+0x1f8>)
 800f41e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f422:	4946      	ldr	r1, [pc, #280]	; (800f53c <mem_trim+0x20c>)
 800f424:	4842      	ldr	r0, [pc, #264]	; (800f530 <mem_trim+0x200>)
 800f426:	f00a fead 	bl	801a184 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	881b      	ldrh	r3, [r3, #0]
 800f42e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f430:	8afa      	ldrh	r2, [r7, #22]
 800f432:	8bfb      	ldrh	r3, [r7, #30]
 800f434:	4413      	add	r3, r2
 800f436:	b29b      	uxth	r3, r3
 800f438:	3308      	adds	r3, #8
 800f43a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f43c:	4b40      	ldr	r3, [pc, #256]	; (800f540 <mem_trim+0x210>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	693a      	ldr	r2, [r7, #16]
 800f442:	429a      	cmp	r2, r3
 800f444:	d106      	bne.n	800f454 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f446:	89fb      	ldrh	r3, [r7, #14]
 800f448:	4618      	mov	r0, r3
 800f44a:	f7ff fd8d 	bl	800ef68 <ptr_to_mem>
 800f44e:	4603      	mov	r3, r0
 800f450:	4a3b      	ldr	r2, [pc, #236]	; (800f540 <mem_trim+0x210>)
 800f452:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f454:	89fb      	ldrh	r3, [r7, #14]
 800f456:	4618      	mov	r0, r3
 800f458:	f7ff fd86 	bl	800ef68 <ptr_to_mem>
 800f45c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	2200      	movs	r2, #0
 800f462:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	89ba      	ldrh	r2, [r7, #12]
 800f468:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	8afa      	ldrh	r2, [r7, #22]
 800f46e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f470:	69bb      	ldr	r3, [r7, #24]
 800f472:	89fa      	ldrh	r2, [r7, #14]
 800f474:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	881b      	ldrh	r3, [r3, #0]
 800f47a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f47e:	d047      	beq.n	800f510 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f480:	693b      	ldr	r3, [r7, #16]
 800f482:	881b      	ldrh	r3, [r3, #0]
 800f484:	4618      	mov	r0, r3
 800f486:	f7ff fd6f 	bl	800ef68 <ptr_to_mem>
 800f48a:	4602      	mov	r2, r0
 800f48c:	89fb      	ldrh	r3, [r7, #14]
 800f48e:	8053      	strh	r3, [r2, #2]
 800f490:	e03e      	b.n	800f510 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f492:	8bfb      	ldrh	r3, [r7, #30]
 800f494:	f103 0214 	add.w	r2, r3, #20
 800f498:	8abb      	ldrh	r3, [r7, #20]
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d838      	bhi.n	800f510 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f49e:	8afa      	ldrh	r2, [r7, #22]
 800f4a0:	8bfb      	ldrh	r3, [r7, #30]
 800f4a2:	4413      	add	r3, r2
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	3308      	adds	r3, #8
 800f4a8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	881b      	ldrh	r3, [r3, #0]
 800f4ae:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f4b2:	d106      	bne.n	800f4c2 <mem_trim+0x192>
 800f4b4:	4b1c      	ldr	r3, [pc, #112]	; (800f528 <mem_trim+0x1f8>)
 800f4b6:	f240 3216 	movw	r2, #790	; 0x316
 800f4ba:	4920      	ldr	r1, [pc, #128]	; (800f53c <mem_trim+0x20c>)
 800f4bc:	481c      	ldr	r0, [pc, #112]	; (800f530 <mem_trim+0x200>)
 800f4be:	f00a fe61 	bl	801a184 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f4c2:	89fb      	ldrh	r3, [r7, #14]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7ff fd4f 	bl	800ef68 <ptr_to_mem>
 800f4ca:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f4cc:	4b1c      	ldr	r3, [pc, #112]	; (800f540 <mem_trim+0x210>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	693a      	ldr	r2, [r7, #16]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d202      	bcs.n	800f4dc <mem_trim+0x1ac>
      lfree = mem2;
 800f4d6:	4a1a      	ldr	r2, [pc, #104]	; (800f540 <mem_trim+0x210>)
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f4e2:	69bb      	ldr	r3, [r7, #24]
 800f4e4:	881a      	ldrh	r2, [r3, #0]
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	8afa      	ldrh	r2, [r7, #22]
 800f4ee:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f4f0:	69bb      	ldr	r3, [r7, #24]
 800f4f2:	89fa      	ldrh	r2, [r7, #14]
 800f4f4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	881b      	ldrh	r3, [r3, #0]
 800f4fa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f4fe:	d007      	beq.n	800f510 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	881b      	ldrh	r3, [r3, #0]
 800f504:	4618      	mov	r0, r3
 800f506:	f7ff fd2f 	bl	800ef68 <ptr_to_mem>
 800f50a:	4602      	mov	r2, r0
 800f50c:	89fb      	ldrh	r3, [r7, #14]
 800f50e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f510:	4809      	ldr	r0, [pc, #36]	; (800f538 <mem_trim+0x208>)
 800f512:	f00a fc50 	bl	8019db6 <sys_mutex_unlock>
  return rmem;
 800f516:	687b      	ldr	r3, [r7, #4]
}
 800f518:	4618      	mov	r0, r3
 800f51a:	3720      	adds	r7, #32
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd80      	pop	{r7, pc}
 800f520:	20004a80 	.word	0x20004a80
 800f524:	20004a84 	.word	0x20004a84
 800f528:	0801bc60 	.word	0x0801bc60
 800f52c:	0801bdec 	.word	0x0801bdec
 800f530:	0801bca8 	.word	0x0801bca8
 800f534:	0801be04 	.word	0x0801be04
 800f538:	20004a88 	.word	0x20004a88
 800f53c:	0801be24 	.word	0x0801be24
 800f540:	20004a8c 	.word	0x20004a8c

0800f544 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b088      	sub	sp, #32
 800f548:	af00      	add	r7, sp, #0
 800f54a:	4603      	mov	r3, r0
 800f54c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f54e:	88fb      	ldrh	r3, [r7, #6]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d101      	bne.n	800f558 <mem_malloc+0x14>
    return NULL;
 800f554:	2300      	movs	r3, #0
 800f556:	e0e2      	b.n	800f71e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f558:	88fb      	ldrh	r3, [r7, #6]
 800f55a:	3303      	adds	r3, #3
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	f023 0303 	bic.w	r3, r3, #3
 800f562:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f564:	8bbb      	ldrh	r3, [r7, #28]
 800f566:	2b0b      	cmp	r3, #11
 800f568:	d801      	bhi.n	800f56e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f56a:	230c      	movs	r3, #12
 800f56c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f56e:	8bbb      	ldrh	r3, [r7, #28]
 800f570:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f574:	d803      	bhi.n	800f57e <mem_malloc+0x3a>
 800f576:	8bba      	ldrh	r2, [r7, #28]
 800f578:	88fb      	ldrh	r3, [r7, #6]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d201      	bcs.n	800f582 <mem_malloc+0x3e>
    return NULL;
 800f57e:	2300      	movs	r3, #0
 800f580:	e0cd      	b.n	800f71e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f582:	4869      	ldr	r0, [pc, #420]	; (800f728 <mem_malloc+0x1e4>)
 800f584:	f00a fc08 	bl	8019d98 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f588:	4b68      	ldr	r3, [pc, #416]	; (800f72c <mem_malloc+0x1e8>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	4618      	mov	r0, r3
 800f58e:	f7ff fcfd 	bl	800ef8c <mem_to_ptr>
 800f592:	4603      	mov	r3, r0
 800f594:	83fb      	strh	r3, [r7, #30]
 800f596:	e0b7      	b.n	800f708 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f598:	8bfb      	ldrh	r3, [r7, #30]
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7ff fce4 	bl	800ef68 <ptr_to_mem>
 800f5a0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	791b      	ldrb	r3, [r3, #4]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	f040 80a7 	bne.w	800f6fa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	881b      	ldrh	r3, [r3, #0]
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	8bfb      	ldrh	r3, [r7, #30]
 800f5b4:	1ad3      	subs	r3, r2, r3
 800f5b6:	f1a3 0208 	sub.w	r2, r3, #8
 800f5ba:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	f0c0 809c 	bcc.w	800f6fa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	881b      	ldrh	r3, [r3, #0]
 800f5c6:	461a      	mov	r2, r3
 800f5c8:	8bfb      	ldrh	r3, [r7, #30]
 800f5ca:	1ad3      	subs	r3, r2, r3
 800f5cc:	f1a3 0208 	sub.w	r2, r3, #8
 800f5d0:	8bbb      	ldrh	r3, [r7, #28]
 800f5d2:	3314      	adds	r3, #20
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d333      	bcc.n	800f640 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f5d8:	8bfa      	ldrh	r2, [r7, #30]
 800f5da:	8bbb      	ldrh	r3, [r7, #28]
 800f5dc:	4413      	add	r3, r2
 800f5de:	b29b      	uxth	r3, r3
 800f5e0:	3308      	adds	r3, #8
 800f5e2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f5e4:	8a7b      	ldrh	r3, [r7, #18]
 800f5e6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f5ea:	d106      	bne.n	800f5fa <mem_malloc+0xb6>
 800f5ec:	4b50      	ldr	r3, [pc, #320]	; (800f730 <mem_malloc+0x1ec>)
 800f5ee:	f240 3287 	movw	r2, #903	; 0x387
 800f5f2:	4950      	ldr	r1, [pc, #320]	; (800f734 <mem_malloc+0x1f0>)
 800f5f4:	4850      	ldr	r0, [pc, #320]	; (800f738 <mem_malloc+0x1f4>)
 800f5f6:	f00a fdc5 	bl	801a184 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f5fa:	8a7b      	ldrh	r3, [r7, #18]
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7ff fcb3 	bl	800ef68 <ptr_to_mem>
 800f602:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	2200      	movs	r2, #0
 800f608:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	881a      	ldrh	r2, [r3, #0]
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	8bfa      	ldrh	r2, [r7, #30]
 800f616:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	8a7a      	ldrh	r2, [r7, #18]
 800f61c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	2201      	movs	r2, #1
 800f622:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	881b      	ldrh	r3, [r3, #0]
 800f628:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f62c:	d00b      	beq.n	800f646 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	881b      	ldrh	r3, [r3, #0]
 800f632:	4618      	mov	r0, r3
 800f634:	f7ff fc98 	bl	800ef68 <ptr_to_mem>
 800f638:	4602      	mov	r2, r0
 800f63a:	8a7b      	ldrh	r3, [r7, #18]
 800f63c:	8053      	strh	r3, [r2, #2]
 800f63e:	e002      	b.n	800f646 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	2201      	movs	r2, #1
 800f644:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f646:	4b39      	ldr	r3, [pc, #228]	; (800f72c <mem_malloc+0x1e8>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	697a      	ldr	r2, [r7, #20]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d127      	bne.n	800f6a0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800f650:	4b36      	ldr	r3, [pc, #216]	; (800f72c <mem_malloc+0x1e8>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f656:	e005      	b.n	800f664 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f658:	69bb      	ldr	r3, [r7, #24]
 800f65a:	881b      	ldrh	r3, [r3, #0]
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7ff fc83 	bl	800ef68 <ptr_to_mem>
 800f662:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f664:	69bb      	ldr	r3, [r7, #24]
 800f666:	791b      	ldrb	r3, [r3, #4]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d004      	beq.n	800f676 <mem_malloc+0x132>
 800f66c:	4b33      	ldr	r3, [pc, #204]	; (800f73c <mem_malloc+0x1f8>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	69ba      	ldr	r2, [r7, #24]
 800f672:	429a      	cmp	r2, r3
 800f674:	d1f0      	bne.n	800f658 <mem_malloc+0x114>
          }
          lfree = cur;
 800f676:	4a2d      	ldr	r2, [pc, #180]	; (800f72c <mem_malloc+0x1e8>)
 800f678:	69bb      	ldr	r3, [r7, #24]
 800f67a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f67c:	4b2b      	ldr	r3, [pc, #172]	; (800f72c <mem_malloc+0x1e8>)
 800f67e:	681a      	ldr	r2, [r3, #0]
 800f680:	4b2e      	ldr	r3, [pc, #184]	; (800f73c <mem_malloc+0x1f8>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	429a      	cmp	r2, r3
 800f686:	d00b      	beq.n	800f6a0 <mem_malloc+0x15c>
 800f688:	4b28      	ldr	r3, [pc, #160]	; (800f72c <mem_malloc+0x1e8>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	791b      	ldrb	r3, [r3, #4]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d006      	beq.n	800f6a0 <mem_malloc+0x15c>
 800f692:	4b27      	ldr	r3, [pc, #156]	; (800f730 <mem_malloc+0x1ec>)
 800f694:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f698:	4929      	ldr	r1, [pc, #164]	; (800f740 <mem_malloc+0x1fc>)
 800f69a:	4827      	ldr	r0, [pc, #156]	; (800f738 <mem_malloc+0x1f4>)
 800f69c:	f00a fd72 	bl	801a184 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f6a0:	4821      	ldr	r0, [pc, #132]	; (800f728 <mem_malloc+0x1e4>)
 800f6a2:	f00a fb88 	bl	8019db6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f6a6:	8bba      	ldrh	r2, [r7, #28]
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	4413      	add	r3, r2
 800f6ac:	3308      	adds	r3, #8
 800f6ae:	4a23      	ldr	r2, [pc, #140]	; (800f73c <mem_malloc+0x1f8>)
 800f6b0:	6812      	ldr	r2, [r2, #0]
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d906      	bls.n	800f6c4 <mem_malloc+0x180>
 800f6b6:	4b1e      	ldr	r3, [pc, #120]	; (800f730 <mem_malloc+0x1ec>)
 800f6b8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f6bc:	4921      	ldr	r1, [pc, #132]	; (800f744 <mem_malloc+0x200>)
 800f6be:	481e      	ldr	r0, [pc, #120]	; (800f738 <mem_malloc+0x1f4>)
 800f6c0:	f00a fd60 	bl	801a184 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	f003 0303 	and.w	r3, r3, #3
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d006      	beq.n	800f6dc <mem_malloc+0x198>
 800f6ce:	4b18      	ldr	r3, [pc, #96]	; (800f730 <mem_malloc+0x1ec>)
 800f6d0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f6d4:	491c      	ldr	r1, [pc, #112]	; (800f748 <mem_malloc+0x204>)
 800f6d6:	4818      	ldr	r0, [pc, #96]	; (800f738 <mem_malloc+0x1f4>)
 800f6d8:	f00a fd54 	bl	801a184 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	f003 0303 	and.w	r3, r3, #3
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d006      	beq.n	800f6f4 <mem_malloc+0x1b0>
 800f6e6:	4b12      	ldr	r3, [pc, #72]	; (800f730 <mem_malloc+0x1ec>)
 800f6e8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f6ec:	4917      	ldr	r1, [pc, #92]	; (800f74c <mem_malloc+0x208>)
 800f6ee:	4812      	ldr	r0, [pc, #72]	; (800f738 <mem_malloc+0x1f4>)
 800f6f0:	f00a fd48 	bl	801a184 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	3308      	adds	r3, #8
 800f6f8:	e011      	b.n	800f71e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800f6fa:	8bfb      	ldrh	r3, [r7, #30]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7ff fc33 	bl	800ef68 <ptr_to_mem>
 800f702:	4603      	mov	r3, r0
 800f704:	881b      	ldrh	r3, [r3, #0]
 800f706:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f708:	8bfa      	ldrh	r2, [r7, #30]
 800f70a:	8bbb      	ldrh	r3, [r7, #28]
 800f70c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800f710:	429a      	cmp	r2, r3
 800f712:	f4ff af41 	bcc.w	800f598 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f716:	4804      	ldr	r0, [pc, #16]	; (800f728 <mem_malloc+0x1e4>)
 800f718:	f00a fb4d 	bl	8019db6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f71c:	2300      	movs	r3, #0
}
 800f71e:	4618      	mov	r0, r3
 800f720:	3720      	adds	r7, #32
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	20004a88 	.word	0x20004a88
 800f72c:	20004a8c 	.word	0x20004a8c
 800f730:	0801bc60 	.word	0x0801bc60
 800f734:	0801be24 	.word	0x0801be24
 800f738:	0801bca8 	.word	0x0801bca8
 800f73c:	20004a84 	.word	0x20004a84
 800f740:	0801be38 	.word	0x0801be38
 800f744:	0801be54 	.word	0x0801be54
 800f748:	0801be84 	.word	0x0801be84
 800f74c:	0801beb4 	.word	0x0801beb4

0800f750 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f750:	b480      	push	{r7}
 800f752:	b085      	sub	sp, #20
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	689b      	ldr	r3, [r3, #8]
 800f75c:	2200      	movs	r2, #0
 800f75e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	3303      	adds	r3, #3
 800f766:	f023 0303 	bic.w	r3, r3, #3
 800f76a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f76c:	2300      	movs	r3, #0
 800f76e:	60fb      	str	r3, [r7, #12]
 800f770:	e011      	b.n	800f796 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	689b      	ldr	r3, [r3, #8]
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	689b      	ldr	r3, [r3, #8]
 800f780:	68ba      	ldr	r2, [r7, #8]
 800f782:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	881b      	ldrh	r3, [r3, #0]
 800f788:	461a      	mov	r2, r3
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	4413      	add	r3, r2
 800f78e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	3301      	adds	r3, #1
 800f794:	60fb      	str	r3, [r7, #12]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	885b      	ldrh	r3, [r3, #2]
 800f79a:	461a      	mov	r2, r3
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	dbe7      	blt.n	800f772 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f7a2:	bf00      	nop
 800f7a4:	bf00      	nop
 800f7a6:	3714      	adds	r7, #20
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ae:	4770      	bx	lr

0800f7b0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b082      	sub	sp, #8
 800f7b4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	80fb      	strh	r3, [r7, #6]
 800f7ba:	e009      	b.n	800f7d0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f7bc:	88fb      	ldrh	r3, [r7, #6]
 800f7be:	4a08      	ldr	r2, [pc, #32]	; (800f7e0 <memp_init+0x30>)
 800f7c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f7ff ffc3 	bl	800f750 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f7ca:	88fb      	ldrh	r3, [r7, #6]
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	80fb      	strh	r3, [r7, #6]
 800f7d0:	88fb      	ldrh	r3, [r7, #6]
 800f7d2:	2b0c      	cmp	r3, #12
 800f7d4:	d9f2      	bls.n	800f7bc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f7d6:	bf00      	nop
 800f7d8:	bf00      	nop
 800f7da:	3708      	adds	r7, #8
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}
 800f7e0:	0801e7b0 	.word	0x0801e7b0

0800f7e4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f7e4:	b580      	push	{r7, lr}
 800f7e6:	b084      	sub	sp, #16
 800f7e8:	af00      	add	r7, sp, #0
 800f7ea:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f7ec:	f00a fb10 	bl	8019e10 <sys_arch_protect>
 800f7f0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	689b      	ldr	r3, [r3, #8]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d015      	beq.n	800f82c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	689b      	ldr	r3, [r3, #8]
 800f804:	68ba      	ldr	r2, [r7, #8]
 800f806:	6812      	ldr	r2, [r2, #0]
 800f808:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	f003 0303 	and.w	r3, r3, #3
 800f810:	2b00      	cmp	r3, #0
 800f812:	d006      	beq.n	800f822 <do_memp_malloc_pool+0x3e>
 800f814:	4b09      	ldr	r3, [pc, #36]	; (800f83c <do_memp_malloc_pool+0x58>)
 800f816:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f81a:	4909      	ldr	r1, [pc, #36]	; (800f840 <do_memp_malloc_pool+0x5c>)
 800f81c:	4809      	ldr	r0, [pc, #36]	; (800f844 <do_memp_malloc_pool+0x60>)
 800f81e:	f00a fcb1 	bl	801a184 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f822:	68f8      	ldr	r0, [r7, #12]
 800f824:	f00a fb02 	bl	8019e2c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	e003      	b.n	800f834 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f82c:	68f8      	ldr	r0, [r7, #12]
 800f82e:	f00a fafd 	bl	8019e2c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f832:	2300      	movs	r3, #0
}
 800f834:	4618      	mov	r0, r3
 800f836:	3710      	adds	r7, #16
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}
 800f83c:	0801bed8 	.word	0x0801bed8
 800f840:	0801bf08 	.word	0x0801bf08
 800f844:	0801bf2c 	.word	0x0801bf2c

0800f848 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b084      	sub	sp, #16
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	4603      	mov	r3, r0
 800f850:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f852:	79fb      	ldrb	r3, [r7, #7]
 800f854:	2b0c      	cmp	r3, #12
 800f856:	d908      	bls.n	800f86a <memp_malloc+0x22>
 800f858:	4b0a      	ldr	r3, [pc, #40]	; (800f884 <memp_malloc+0x3c>)
 800f85a:	f240 1257 	movw	r2, #343	; 0x157
 800f85e:	490a      	ldr	r1, [pc, #40]	; (800f888 <memp_malloc+0x40>)
 800f860:	480a      	ldr	r0, [pc, #40]	; (800f88c <memp_malloc+0x44>)
 800f862:	f00a fc8f 	bl	801a184 <iprintf>
 800f866:	2300      	movs	r3, #0
 800f868:	e008      	b.n	800f87c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f86a:	79fb      	ldrb	r3, [r7, #7]
 800f86c:	4a08      	ldr	r2, [pc, #32]	; (800f890 <memp_malloc+0x48>)
 800f86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f872:	4618      	mov	r0, r3
 800f874:	f7ff ffb6 	bl	800f7e4 <do_memp_malloc_pool>
 800f878:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f87a:	68fb      	ldr	r3, [r7, #12]
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	3710      	adds	r7, #16
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}
 800f884:	0801bed8 	.word	0x0801bed8
 800f888:	0801bf68 	.word	0x0801bf68
 800f88c:	0801bf2c 	.word	0x0801bf2c
 800f890:	0801e7b0 	.word	0x0801e7b0

0800f894 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	f003 0303 	and.w	r3, r3, #3
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d006      	beq.n	800f8b6 <do_memp_free_pool+0x22>
 800f8a8:	4b0d      	ldr	r3, [pc, #52]	; (800f8e0 <do_memp_free_pool+0x4c>)
 800f8aa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f8ae:	490d      	ldr	r1, [pc, #52]	; (800f8e4 <do_memp_free_pool+0x50>)
 800f8b0:	480d      	ldr	r0, [pc, #52]	; (800f8e8 <do_memp_free_pool+0x54>)
 800f8b2:	f00a fc67 	bl	801a184 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f8ba:	f00a faa9 	bl	8019e10 <sys_arch_protect>
 800f8be:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	689b      	ldr	r3, [r3, #8]
 800f8c4:	681a      	ldr	r2, [r3, #0]
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	689b      	ldr	r3, [r3, #8]
 800f8ce:	68fa      	ldr	r2, [r7, #12]
 800f8d0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f8d2:	68b8      	ldr	r0, [r7, #8]
 800f8d4:	f00a faaa 	bl	8019e2c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f8d8:	bf00      	nop
 800f8da:	3710      	adds	r7, #16
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	0801bed8 	.word	0x0801bed8
 800f8e4:	0801bf88 	.word	0x0801bf88
 800f8e8:	0801bf2c 	.word	0x0801bf2c

0800f8ec <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	6039      	str	r1, [r7, #0]
 800f8f6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f8f8:	79fb      	ldrb	r3, [r7, #7]
 800f8fa:	2b0c      	cmp	r3, #12
 800f8fc:	d907      	bls.n	800f90e <memp_free+0x22>
 800f8fe:	4b0c      	ldr	r3, [pc, #48]	; (800f930 <memp_free+0x44>)
 800f900:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f904:	490b      	ldr	r1, [pc, #44]	; (800f934 <memp_free+0x48>)
 800f906:	480c      	ldr	r0, [pc, #48]	; (800f938 <memp_free+0x4c>)
 800f908:	f00a fc3c 	bl	801a184 <iprintf>
 800f90c:	e00c      	b.n	800f928 <memp_free+0x3c>

  if (mem == NULL) {
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d008      	beq.n	800f926 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f914:	79fb      	ldrb	r3, [r7, #7]
 800f916:	4a09      	ldr	r2, [pc, #36]	; (800f93c <memp_free+0x50>)
 800f918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f91c:	6839      	ldr	r1, [r7, #0]
 800f91e:	4618      	mov	r0, r3
 800f920:	f7ff ffb8 	bl	800f894 <do_memp_free_pool>
 800f924:	e000      	b.n	800f928 <memp_free+0x3c>
    return;
 800f926:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f928:	3708      	adds	r7, #8
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	0801bed8 	.word	0x0801bed8
 800f934:	0801bfa8 	.word	0x0801bfa8
 800f938:	0801bf2c 	.word	0x0801bf2c
 800f93c:	0801e7b0 	.word	0x0801e7b0

0800f940 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f940:	b480      	push	{r7}
 800f942:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f944:	bf00      	nop
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr
	...

0800f950 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b086      	sub	sp, #24
 800f954:	af00      	add	r7, sp, #0
 800f956:	60f8      	str	r0, [r7, #12]
 800f958:	60b9      	str	r1, [r7, #8]
 800f95a:	607a      	str	r2, [r7, #4]
 800f95c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d108      	bne.n	800f976 <netif_add+0x26>
 800f964:	4b57      	ldr	r3, [pc, #348]	; (800fac4 <netif_add+0x174>)
 800f966:	f240 1227 	movw	r2, #295	; 0x127
 800f96a:	4957      	ldr	r1, [pc, #348]	; (800fac8 <netif_add+0x178>)
 800f96c:	4857      	ldr	r0, [pc, #348]	; (800facc <netif_add+0x17c>)
 800f96e:	f00a fc09 	bl	801a184 <iprintf>
 800f972:	2300      	movs	r3, #0
 800f974:	e0a2      	b.n	800fabc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d108      	bne.n	800f98e <netif_add+0x3e>
 800f97c:	4b51      	ldr	r3, [pc, #324]	; (800fac4 <netif_add+0x174>)
 800f97e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f982:	4953      	ldr	r1, [pc, #332]	; (800fad0 <netif_add+0x180>)
 800f984:	4851      	ldr	r0, [pc, #324]	; (800facc <netif_add+0x17c>)
 800f986:	f00a fbfd 	bl	801a184 <iprintf>
 800f98a:	2300      	movs	r3, #0
 800f98c:	e096      	b.n	800fabc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d101      	bne.n	800f998 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f994:	4b4f      	ldr	r3, [pc, #316]	; (800fad4 <netif_add+0x184>)
 800f996:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d101      	bne.n	800f9a2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f99e:	4b4d      	ldr	r3, [pc, #308]	; (800fad4 <netif_add+0x184>)
 800f9a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d101      	bne.n	800f9ac <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f9a8:	4b4a      	ldr	r3, [pc, #296]	; (800fad4 <netif_add+0x184>)
 800f9aa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	4a45      	ldr	r2, [pc, #276]	; (800fad8 <netif_add+0x188>)
 800f9c2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	6a3a      	ldr	r2, [r7, #32]
 800f9dc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f9de:	4b3f      	ldr	r3, [pc, #252]	; (800fadc <netif_add+0x18c>)
 800f9e0:	781a      	ldrb	r2, [r3, #0]
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9ec:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	687a      	ldr	r2, [r7, #4]
 800f9f2:	68b9      	ldr	r1, [r7, #8]
 800f9f4:	68f8      	ldr	r0, [r7, #12]
 800f9f6:	f000 f913 	bl	800fc20 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9fc:	68f8      	ldr	r0, [r7, #12]
 800f9fe:	4798      	blx	r3
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d001      	beq.n	800fa0a <netif_add+0xba>
    return NULL;
 800fa06:	2300      	movs	r3, #0
 800fa08:	e058      	b.n	800fabc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa10:	2bff      	cmp	r3, #255	; 0xff
 800fa12:	d103      	bne.n	800fa1c <netif_add+0xcc>
        netif->num = 0;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	2200      	movs	r2, #0
 800fa18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fa20:	4b2f      	ldr	r3, [pc, #188]	; (800fae0 <netif_add+0x190>)
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	617b      	str	r3, [r7, #20]
 800fa26:	e02b      	b.n	800fa80 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800fa28:	697a      	ldr	r2, [r7, #20]
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d106      	bne.n	800fa3e <netif_add+0xee>
 800fa30:	4b24      	ldr	r3, [pc, #144]	; (800fac4 <netif_add+0x174>)
 800fa32:	f240 128b 	movw	r2, #395	; 0x18b
 800fa36:	492b      	ldr	r1, [pc, #172]	; (800fae4 <netif_add+0x194>)
 800fa38:	4824      	ldr	r0, [pc, #144]	; (800facc <netif_add+0x17c>)
 800fa3a:	f00a fba3 	bl	801a184 <iprintf>
        num_netifs++;
 800fa3e:	693b      	ldr	r3, [r7, #16]
 800fa40:	3301      	adds	r3, #1
 800fa42:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	2bff      	cmp	r3, #255	; 0xff
 800fa48:	dd06      	ble.n	800fa58 <netif_add+0x108>
 800fa4a:	4b1e      	ldr	r3, [pc, #120]	; (800fac4 <netif_add+0x174>)
 800fa4c:	f240 128d 	movw	r2, #397	; 0x18d
 800fa50:	4925      	ldr	r1, [pc, #148]	; (800fae8 <netif_add+0x198>)
 800fa52:	481e      	ldr	r0, [pc, #120]	; (800facc <netif_add+0x17c>)
 800fa54:	f00a fb96 	bl	801a184 <iprintf>
        if (netif2->num == netif->num) {
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa64:	429a      	cmp	r2, r3
 800fa66:	d108      	bne.n	800fa7a <netif_add+0x12a>
          netif->num++;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa6e:	3301      	adds	r3, #1
 800fa70:	b2da      	uxtb	r2, r3
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800fa78:	e005      	b.n	800fa86 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	617b      	str	r3, [r7, #20]
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d1d0      	bne.n	800fa28 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800fa86:	697b      	ldr	r3, [r7, #20]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d1be      	bne.n	800fa0a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fa92:	2bfe      	cmp	r3, #254	; 0xfe
 800fa94:	d103      	bne.n	800fa9e <netif_add+0x14e>
    netif_num = 0;
 800fa96:	4b11      	ldr	r3, [pc, #68]	; (800fadc <netif_add+0x18c>)
 800fa98:	2200      	movs	r2, #0
 800fa9a:	701a      	strb	r2, [r3, #0]
 800fa9c:	e006      	b.n	800faac <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800faa4:	3301      	adds	r3, #1
 800faa6:	b2da      	uxtb	r2, r3
 800faa8:	4b0c      	ldr	r3, [pc, #48]	; (800fadc <netif_add+0x18c>)
 800faaa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800faac:	4b0c      	ldr	r3, [pc, #48]	; (800fae0 <netif_add+0x190>)
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fab4:	4a0a      	ldr	r2, [pc, #40]	; (800fae0 <netif_add+0x190>)
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800faba:	68fb      	ldr	r3, [r7, #12]
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3718      	adds	r7, #24
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	0801bfc4 	.word	0x0801bfc4
 800fac8:	0801c058 	.word	0x0801c058
 800facc:	0801c014 	.word	0x0801c014
 800fad0:	0801c074 	.word	0x0801c074
 800fad4:	0801e824 	.word	0x0801e824
 800fad8:	0800fefb 	.word	0x0800fefb
 800fadc:	20004ac4 	.word	0x20004ac4
 800fae0:	2000db94 	.word	0x2000db94
 800fae4:	0801c098 	.word	0x0801c098
 800fae8:	0801c0ac 	.word	0x0801c0ac

0800faec <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800faf6:	6839      	ldr	r1, [r7, #0]
 800faf8:	6878      	ldr	r0, [r7, #4]
 800fafa:	f002 fe4f 	bl	801279c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800fafe:	6839      	ldr	r1, [r7, #0]
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f007 fcfd 	bl	8017500 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800fb06:	bf00      	nop
 800fb08:	3708      	adds	r7, #8
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
	...

0800fb10 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b086      	sub	sp, #24
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	60b9      	str	r1, [r7, #8]
 800fb1a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d106      	bne.n	800fb30 <netif_do_set_ipaddr+0x20>
 800fb22:	4b1d      	ldr	r3, [pc, #116]	; (800fb98 <netif_do_set_ipaddr+0x88>)
 800fb24:	f240 12cb 	movw	r2, #459	; 0x1cb
 800fb28:	491c      	ldr	r1, [pc, #112]	; (800fb9c <netif_do_set_ipaddr+0x8c>)
 800fb2a:	481d      	ldr	r0, [pc, #116]	; (800fba0 <netif_do_set_ipaddr+0x90>)
 800fb2c:	f00a fb2a 	bl	801a184 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d106      	bne.n	800fb44 <netif_do_set_ipaddr+0x34>
 800fb36:	4b18      	ldr	r3, [pc, #96]	; (800fb98 <netif_do_set_ipaddr+0x88>)
 800fb38:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800fb3c:	4917      	ldr	r1, [pc, #92]	; (800fb9c <netif_do_set_ipaddr+0x8c>)
 800fb3e:	4818      	ldr	r0, [pc, #96]	; (800fba0 <netif_do_set_ipaddr+0x90>)
 800fb40:	f00a fb20 	bl	801a184 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	681a      	ldr	r2, [r3, #0]
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	3304      	adds	r3, #4
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	429a      	cmp	r2, r3
 800fb50:	d01c      	beq.n	800fb8c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	3304      	adds	r3, #4
 800fb5c:	681a      	ldr	r2, [r3, #0]
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800fb62:	f107 0314 	add.w	r3, r7, #20
 800fb66:	4619      	mov	r1, r3
 800fb68:	6878      	ldr	r0, [r7, #4]
 800fb6a:	f7ff ffbf 	bl	800faec <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d002      	beq.n	800fb7a <netif_do_set_ipaddr+0x6a>
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	e000      	b.n	800fb7c <netif_do_set_ipaddr+0x6c>
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	68fa      	ldr	r2, [r7, #12]
 800fb7e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fb80:	2101      	movs	r1, #1
 800fb82:	68f8      	ldr	r0, [r7, #12]
 800fb84:	f000 f8d2 	bl	800fd2c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800fb88:	2301      	movs	r3, #1
 800fb8a:	e000      	b.n	800fb8e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800fb8c:	2300      	movs	r3, #0
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3718      	adds	r7, #24
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}
 800fb96:	bf00      	nop
 800fb98:	0801bfc4 	.word	0x0801bfc4
 800fb9c:	0801c0dc 	.word	0x0801c0dc
 800fba0:	0801c014 	.word	0x0801c014

0800fba4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b085      	sub	sp, #20
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	60f8      	str	r0, [r7, #12]
 800fbac:	60b9      	str	r1, [r7, #8]
 800fbae:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	681a      	ldr	r2, [r3, #0]
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	3308      	adds	r3, #8
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d00a      	beq.n	800fbd4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d002      	beq.n	800fbca <netif_do_set_netmask+0x26>
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	e000      	b.n	800fbcc <netif_do_set_netmask+0x28>
 800fbca:	2300      	movs	r3, #0
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	e000      	b.n	800fbd6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fbd4:	2300      	movs	r3, #0
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3714      	adds	r7, #20
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr

0800fbe2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fbe2:	b480      	push	{r7}
 800fbe4:	b085      	sub	sp, #20
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	60f8      	str	r0, [r7, #12]
 800fbea:	60b9      	str	r1, [r7, #8]
 800fbec:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	681a      	ldr	r2, [r3, #0]
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	330c      	adds	r3, #12
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d00a      	beq.n	800fc12 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d002      	beq.n	800fc08 <netif_do_set_gw+0x26>
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	e000      	b.n	800fc0a <netif_do_set_gw+0x28>
 800fc08:	2300      	movs	r3, #0
 800fc0a:	68fa      	ldr	r2, [r7, #12]
 800fc0c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fc0e:	2301      	movs	r3, #1
 800fc10:	e000      	b.n	800fc14 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fc12:	2300      	movs	r3, #0
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	3714      	adds	r7, #20
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1e:	4770      	bx	lr

0800fc20 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b088      	sub	sp, #32
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	60f8      	str	r0, [r7, #12]
 800fc28:	60b9      	str	r1, [r7, #8]
 800fc2a:	607a      	str	r2, [r7, #4]
 800fc2c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fc32:	2300      	movs	r3, #0
 800fc34:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d101      	bne.n	800fc40 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fc3c:	4b1c      	ldr	r3, [pc, #112]	; (800fcb0 <netif_set_addr+0x90>)
 800fc3e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d101      	bne.n	800fc4a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800fc46:	4b1a      	ldr	r3, [pc, #104]	; (800fcb0 <netif_set_addr+0x90>)
 800fc48:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d101      	bne.n	800fc54 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800fc50:	4b17      	ldr	r3, [pc, #92]	; (800fcb0 <netif_set_addr+0x90>)
 800fc52:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d003      	beq.n	800fc62 <netif_set_addr+0x42>
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d101      	bne.n	800fc66 <netif_set_addr+0x46>
 800fc62:	2301      	movs	r3, #1
 800fc64:	e000      	b.n	800fc68 <netif_set_addr+0x48>
 800fc66:	2300      	movs	r3, #0
 800fc68:	617b      	str	r3, [r7, #20]
  if (remove) {
 800fc6a:	697b      	ldr	r3, [r7, #20]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d006      	beq.n	800fc7e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fc70:	f107 0310 	add.w	r3, r7, #16
 800fc74:	461a      	mov	r2, r3
 800fc76:	68b9      	ldr	r1, [r7, #8]
 800fc78:	68f8      	ldr	r0, [r7, #12]
 800fc7a:	f7ff ff49 	bl	800fb10 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fc7e:	69fa      	ldr	r2, [r7, #28]
 800fc80:	6879      	ldr	r1, [r7, #4]
 800fc82:	68f8      	ldr	r0, [r7, #12]
 800fc84:	f7ff ff8e 	bl	800fba4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fc88:	69ba      	ldr	r2, [r7, #24]
 800fc8a:	6839      	ldr	r1, [r7, #0]
 800fc8c:	68f8      	ldr	r0, [r7, #12]
 800fc8e:	f7ff ffa8 	bl	800fbe2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d106      	bne.n	800fca6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fc98:	f107 0310 	add.w	r3, r7, #16
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	68b9      	ldr	r1, [r7, #8]
 800fca0:	68f8      	ldr	r0, [r7, #12]
 800fca2:	f7ff ff35 	bl	800fb10 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fca6:	bf00      	nop
 800fca8:	3720      	adds	r7, #32
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	0801e824 	.word	0x0801e824

0800fcb4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b083      	sub	sp, #12
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fcbc:	4a04      	ldr	r2, [pc, #16]	; (800fcd0 <netif_set_default+0x1c>)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fcc2:	bf00      	nop
 800fcc4:	370c      	adds	r7, #12
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fccc:	4770      	bx	lr
 800fcce:	bf00      	nop
 800fcd0:	2000db98 	.word	0x2000db98

0800fcd4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d107      	bne.n	800fcf2 <netif_set_up+0x1e>
 800fce2:	4b0f      	ldr	r3, [pc, #60]	; (800fd20 <netif_set_up+0x4c>)
 800fce4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800fce8:	490e      	ldr	r1, [pc, #56]	; (800fd24 <netif_set_up+0x50>)
 800fcea:	480f      	ldr	r0, [pc, #60]	; (800fd28 <netif_set_up+0x54>)
 800fcec:	f00a fa4a 	bl	801a184 <iprintf>
 800fcf0:	e013      	b.n	800fd1a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fcf8:	f003 0301 	and.w	r3, r3, #1
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d10c      	bne.n	800fd1a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd06:	f043 0301 	orr.w	r3, r3, #1
 800fd0a:	b2da      	uxtb	r2, r3
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fd12:	2103      	movs	r1, #3
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f000 f809 	bl	800fd2c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800fd1a:	3708      	adds	r7, #8
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}
 800fd20:	0801bfc4 	.word	0x0801bfc4
 800fd24:	0801c14c 	.word	0x0801c14c
 800fd28:	0801c014 	.word	0x0801c014

0800fd2c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	460b      	mov	r3, r1
 800fd36:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d106      	bne.n	800fd4c <netif_issue_reports+0x20>
 800fd3e:	4b18      	ldr	r3, [pc, #96]	; (800fda0 <netif_issue_reports+0x74>)
 800fd40:	f240 326d 	movw	r2, #877	; 0x36d
 800fd44:	4917      	ldr	r1, [pc, #92]	; (800fda4 <netif_issue_reports+0x78>)
 800fd46:	4818      	ldr	r0, [pc, #96]	; (800fda8 <netif_issue_reports+0x7c>)
 800fd48:	f00a fa1c 	bl	801a184 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd52:	f003 0304 	and.w	r3, r3, #4
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d01e      	beq.n	800fd98 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd60:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d017      	beq.n	800fd98 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fd68:	78fb      	ldrb	r3, [r7, #3]
 800fd6a:	f003 0301 	and.w	r3, r3, #1
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d013      	beq.n	800fd9a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	3304      	adds	r3, #4
 800fd76:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d00e      	beq.n	800fd9a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd82:	f003 0308 	and.w	r3, r3, #8
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d007      	beq.n	800fd9a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	3304      	adds	r3, #4
 800fd8e:	4619      	mov	r1, r3
 800fd90:	6878      	ldr	r0, [r7, #4]
 800fd92:	f008 fb1f 	bl	80183d4 <etharp_request>
 800fd96:	e000      	b.n	800fd9a <netif_issue_reports+0x6e>
    return;
 800fd98:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fd9a:	3708      	adds	r7, #8
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	0801bfc4 	.word	0x0801bfc4
 800fda4:	0801c168 	.word	0x0801c168
 800fda8:	0801c014 	.word	0x0801c014

0800fdac <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d107      	bne.n	800fdca <netif_set_down+0x1e>
 800fdba:	4b12      	ldr	r3, [pc, #72]	; (800fe04 <netif_set_down+0x58>)
 800fdbc:	f240 329b 	movw	r2, #923	; 0x39b
 800fdc0:	4911      	ldr	r1, [pc, #68]	; (800fe08 <netif_set_down+0x5c>)
 800fdc2:	4812      	ldr	r0, [pc, #72]	; (800fe0c <netif_set_down+0x60>)
 800fdc4:	f00a f9de 	bl	801a184 <iprintf>
 800fdc8:	e019      	b.n	800fdfe <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fdd0:	f003 0301 	and.w	r3, r3, #1
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d012      	beq.n	800fdfe <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fdde:	f023 0301 	bic.w	r3, r3, #1
 800fde2:	b2da      	uxtb	r2, r3
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fdf0:	f003 0308 	and.w	r3, r3, #8
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d002      	beq.n	800fdfe <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f007 fea9 	bl	8017b50 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800fdfe:	3708      	adds	r7, #8
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	0801bfc4 	.word	0x0801bfc4
 800fe08:	0801c18c 	.word	0x0801c18c
 800fe0c:	0801c014 	.word	0x0801c014

0800fe10 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d107      	bne.n	800fe2e <netif_set_link_up+0x1e>
 800fe1e:	4b13      	ldr	r3, [pc, #76]	; (800fe6c <netif_set_link_up+0x5c>)
 800fe20:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800fe24:	4912      	ldr	r1, [pc, #72]	; (800fe70 <netif_set_link_up+0x60>)
 800fe26:	4813      	ldr	r0, [pc, #76]	; (800fe74 <netif_set_link_up+0x64>)
 800fe28:	f00a f9ac 	bl	801a184 <iprintf>
 800fe2c:	e01b      	b.n	800fe66 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fe34:	f003 0304 	and.w	r3, r3, #4
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d114      	bne.n	800fe66 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fe42:	f043 0304 	orr.w	r3, r3, #4
 800fe46:	b2da      	uxtb	r2, r3
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fe4e:	2103      	movs	r1, #3
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f7ff ff6b 	bl	800fd2c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	69db      	ldr	r3, [r3, #28]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d003      	beq.n	800fe66 <netif_set_link_up+0x56>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	69db      	ldr	r3, [r3, #28]
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fe66:	3708      	adds	r7, #8
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}
 800fe6c:	0801bfc4 	.word	0x0801bfc4
 800fe70:	0801c1ac 	.word	0x0801c1ac
 800fe74:	0801c014 	.word	0x0801c014

0800fe78 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d107      	bne.n	800fe96 <netif_set_link_down+0x1e>
 800fe86:	4b11      	ldr	r3, [pc, #68]	; (800fecc <netif_set_link_down+0x54>)
 800fe88:	f240 4206 	movw	r2, #1030	; 0x406
 800fe8c:	4910      	ldr	r1, [pc, #64]	; (800fed0 <netif_set_link_down+0x58>)
 800fe8e:	4811      	ldr	r0, [pc, #68]	; (800fed4 <netif_set_link_down+0x5c>)
 800fe90:	f00a f978 	bl	801a184 <iprintf>
 800fe94:	e017      	b.n	800fec6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fe9c:	f003 0304 	and.w	r3, r3, #4
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d010      	beq.n	800fec6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800feaa:	f023 0304 	bic.w	r3, r3, #4
 800feae:	b2da      	uxtb	r2, r3
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	69db      	ldr	r3, [r3, #28]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d003      	beq.n	800fec6 <netif_set_link_down+0x4e>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	69db      	ldr	r3, [r3, #28]
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fec6:	3708      	adds	r7, #8
 800fec8:	46bd      	mov	sp, r7
 800feca:	bd80      	pop	{r7, pc}
 800fecc:	0801bfc4 	.word	0x0801bfc4
 800fed0:	0801c1d0 	.word	0x0801c1d0
 800fed4:	0801c014 	.word	0x0801c014

0800fed8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d002      	beq.n	800feee <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	683a      	ldr	r2, [r7, #0]
 800feec:	61da      	str	r2, [r3, #28]
  }
}
 800feee:	bf00      	nop
 800fef0:	370c      	adds	r7, #12
 800fef2:	46bd      	mov	sp, r7
 800fef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef8:	4770      	bx	lr

0800fefa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800fefa:	b480      	push	{r7}
 800fefc:	b085      	sub	sp, #20
 800fefe:	af00      	add	r7, sp, #0
 800ff00:	60f8      	str	r0, [r7, #12]
 800ff02:	60b9      	str	r1, [r7, #8]
 800ff04:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ff06:	f06f 030b 	mvn.w	r3, #11
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3714      	adds	r7, #20
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr
	...

0800ff18 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b085      	sub	sp, #20
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	4603      	mov	r3, r0
 800ff20:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ff22:	79fb      	ldrb	r3, [r7, #7]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d013      	beq.n	800ff50 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ff28:	4b0d      	ldr	r3, [pc, #52]	; (800ff60 <netif_get_by_index+0x48>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	60fb      	str	r3, [r7, #12]
 800ff2e:	e00c      	b.n	800ff4a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff36:	3301      	adds	r3, #1
 800ff38:	b2db      	uxtb	r3, r3
 800ff3a:	79fa      	ldrb	r2, [r7, #7]
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	d101      	bne.n	800ff44 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	e006      	b.n	800ff52 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	60fb      	str	r3, [r7, #12]
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d1ef      	bne.n	800ff30 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ff50:	2300      	movs	r3, #0
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	3714      	adds	r7, #20
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr
 800ff5e:	bf00      	nop
 800ff60:	2000db94 	.word	0x2000db94

0800ff64 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b082      	sub	sp, #8
 800ff68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ff6a:	f009 ff51 	bl	8019e10 <sys_arch_protect>
 800ff6e:	6038      	str	r0, [r7, #0]
 800ff70:	4b0d      	ldr	r3, [pc, #52]	; (800ffa8 <pbuf_free_ooseq+0x44>)
 800ff72:	2200      	movs	r2, #0
 800ff74:	701a      	strb	r2, [r3, #0]
 800ff76:	6838      	ldr	r0, [r7, #0]
 800ff78:	f009 ff58 	bl	8019e2c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ff7c:	4b0b      	ldr	r3, [pc, #44]	; (800ffac <pbuf_free_ooseq+0x48>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	607b      	str	r3, [r7, #4]
 800ff82:	e00a      	b.n	800ff9a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d003      	beq.n	800ff94 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f002 fc43 	bl	8012818 <tcp_free_ooseq>
      return;
 800ff92:	e005      	b.n	800ffa0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	607b      	str	r3, [r7, #4]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d1f1      	bne.n	800ff84 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ffa0:	3708      	adds	r7, #8
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
 800ffa6:	bf00      	nop
 800ffa8:	2000db9c 	.word	0x2000db9c
 800ffac:	2000dba4 	.word	0x2000dba4

0800ffb0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b082      	sub	sp, #8
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ffb8:	f7ff ffd4 	bl	800ff64 <pbuf_free_ooseq>
}
 800ffbc:	bf00      	nop
 800ffbe:	3708      	adds	r7, #8
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}

0800ffc4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ffca:	f009 ff21 	bl	8019e10 <sys_arch_protect>
 800ffce:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ffd0:	4b0f      	ldr	r3, [pc, #60]	; (8010010 <pbuf_pool_is_empty+0x4c>)
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ffd6:	4b0e      	ldr	r3, [pc, #56]	; (8010010 <pbuf_pool_is_empty+0x4c>)
 800ffd8:	2201      	movs	r2, #1
 800ffda:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f009 ff25 	bl	8019e2c <sys_arch_unprotect>

  if (!queued) {
 800ffe2:	78fb      	ldrb	r3, [r7, #3]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d10f      	bne.n	8010008 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ffe8:	2100      	movs	r1, #0
 800ffea:	480a      	ldr	r0, [pc, #40]	; (8010014 <pbuf_pool_is_empty+0x50>)
 800ffec:	f7fe fed6 	bl	800ed9c <tcpip_try_callback>
 800fff0:	4603      	mov	r3, r0
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d008      	beq.n	8010008 <pbuf_pool_is_empty+0x44>
 800fff6:	f009 ff0b 	bl	8019e10 <sys_arch_protect>
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	4b04      	ldr	r3, [pc, #16]	; (8010010 <pbuf_pool_is_empty+0x4c>)
 800fffe:	2200      	movs	r2, #0
 8010000:	701a      	strb	r2, [r3, #0]
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f009 ff12 	bl	8019e2c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010008:	bf00      	nop
 801000a:	3708      	adds	r7, #8
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}
 8010010:	2000db9c 	.word	0x2000db9c
 8010014:	0800ffb1 	.word	0x0800ffb1

08010018 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010018:	b480      	push	{r7}
 801001a:	b085      	sub	sp, #20
 801001c:	af00      	add	r7, sp, #0
 801001e:	60f8      	str	r0, [r7, #12]
 8010020:	60b9      	str	r1, [r7, #8]
 8010022:	4611      	mov	r1, r2
 8010024:	461a      	mov	r2, r3
 8010026:	460b      	mov	r3, r1
 8010028:	80fb      	strh	r3, [r7, #6]
 801002a:	4613      	mov	r3, r2
 801002c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	2200      	movs	r2, #0
 8010032:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	68ba      	ldr	r2, [r7, #8]
 8010038:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	88fa      	ldrh	r2, [r7, #6]
 801003e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	88ba      	ldrh	r2, [r7, #4]
 8010044:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010046:	8b3b      	ldrh	r3, [r7, #24]
 8010048:	b2da      	uxtb	r2, r3
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	7f3a      	ldrb	r2, [r7, #28]
 8010052:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	2201      	movs	r2, #1
 8010058:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	2200      	movs	r2, #0
 801005e:	73da      	strb	r2, [r3, #15]
}
 8010060:	bf00      	nop
 8010062:	3714      	adds	r7, #20
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr

0801006c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801006c:	b580      	push	{r7, lr}
 801006e:	b08c      	sub	sp, #48	; 0x30
 8010070:	af02      	add	r7, sp, #8
 8010072:	4603      	mov	r3, r0
 8010074:	71fb      	strb	r3, [r7, #7]
 8010076:	460b      	mov	r3, r1
 8010078:	80bb      	strh	r3, [r7, #4]
 801007a:	4613      	mov	r3, r2
 801007c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801007e:	79fb      	ldrb	r3, [r7, #7]
 8010080:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010082:	887b      	ldrh	r3, [r7, #2]
 8010084:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010088:	d07f      	beq.n	801018a <pbuf_alloc+0x11e>
 801008a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801008e:	f300 80c8 	bgt.w	8010222 <pbuf_alloc+0x1b6>
 8010092:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010096:	d010      	beq.n	80100ba <pbuf_alloc+0x4e>
 8010098:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801009c:	f300 80c1 	bgt.w	8010222 <pbuf_alloc+0x1b6>
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	d002      	beq.n	80100aa <pbuf_alloc+0x3e>
 80100a4:	2b41      	cmp	r3, #65	; 0x41
 80100a6:	f040 80bc 	bne.w	8010222 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80100aa:	887a      	ldrh	r2, [r7, #2]
 80100ac:	88bb      	ldrh	r3, [r7, #4]
 80100ae:	4619      	mov	r1, r3
 80100b0:	2000      	movs	r0, #0
 80100b2:	f000 f8d1 	bl	8010258 <pbuf_alloc_reference>
 80100b6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80100b8:	e0bd      	b.n	8010236 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80100ba:	2300      	movs	r3, #0
 80100bc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80100be:	2300      	movs	r3, #0
 80100c0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80100c2:	88bb      	ldrh	r3, [r7, #4]
 80100c4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80100c6:	200c      	movs	r0, #12
 80100c8:	f7ff fbbe 	bl	800f848 <memp_malloc>
 80100cc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d109      	bne.n	80100e8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80100d4:	f7ff ff76 	bl	800ffc4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80100d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d002      	beq.n	80100e4 <pbuf_alloc+0x78>
            pbuf_free(p);
 80100de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100e0:	f000 faa8 	bl	8010634 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80100e4:	2300      	movs	r3, #0
 80100e6:	e0a7      	b.n	8010238 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80100e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80100ea:	3303      	adds	r3, #3
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	f023 0303 	bic.w	r3, r3, #3
 80100f2:	b29b      	uxth	r3, r3
 80100f4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80100f8:	b29b      	uxth	r3, r3
 80100fa:	8b7a      	ldrh	r2, [r7, #26]
 80100fc:	4293      	cmp	r3, r2
 80100fe:	bf28      	it	cs
 8010100:	4613      	movcs	r3, r2
 8010102:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010104:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010106:	3310      	adds	r3, #16
 8010108:	693a      	ldr	r2, [r7, #16]
 801010a:	4413      	add	r3, r2
 801010c:	3303      	adds	r3, #3
 801010e:	f023 0303 	bic.w	r3, r3, #3
 8010112:	4618      	mov	r0, r3
 8010114:	89f9      	ldrh	r1, [r7, #14]
 8010116:	8b7a      	ldrh	r2, [r7, #26]
 8010118:	2300      	movs	r3, #0
 801011a:	9301      	str	r3, [sp, #4]
 801011c:	887b      	ldrh	r3, [r7, #2]
 801011e:	9300      	str	r3, [sp, #0]
 8010120:	460b      	mov	r3, r1
 8010122:	4601      	mov	r1, r0
 8010124:	6938      	ldr	r0, [r7, #16]
 8010126:	f7ff ff77 	bl	8010018 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801012a:	693b      	ldr	r3, [r7, #16]
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	f003 0303 	and.w	r3, r3, #3
 8010132:	2b00      	cmp	r3, #0
 8010134:	d006      	beq.n	8010144 <pbuf_alloc+0xd8>
 8010136:	4b42      	ldr	r3, [pc, #264]	; (8010240 <pbuf_alloc+0x1d4>)
 8010138:	f44f 7280 	mov.w	r2, #256	; 0x100
 801013c:	4941      	ldr	r1, [pc, #260]	; (8010244 <pbuf_alloc+0x1d8>)
 801013e:	4842      	ldr	r0, [pc, #264]	; (8010248 <pbuf_alloc+0x1dc>)
 8010140:	f00a f820 	bl	801a184 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010144:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010146:	3303      	adds	r3, #3
 8010148:	f023 0303 	bic.w	r3, r3, #3
 801014c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010150:	d106      	bne.n	8010160 <pbuf_alloc+0xf4>
 8010152:	4b3b      	ldr	r3, [pc, #236]	; (8010240 <pbuf_alloc+0x1d4>)
 8010154:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010158:	493c      	ldr	r1, [pc, #240]	; (801024c <pbuf_alloc+0x1e0>)
 801015a:	483b      	ldr	r0, [pc, #236]	; (8010248 <pbuf_alloc+0x1dc>)
 801015c:	f00a f812 	bl	801a184 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010162:	2b00      	cmp	r3, #0
 8010164:	d102      	bne.n	801016c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010166:	693b      	ldr	r3, [r7, #16]
 8010168:	627b      	str	r3, [r7, #36]	; 0x24
 801016a:	e002      	b.n	8010172 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801016c:	69fb      	ldr	r3, [r7, #28]
 801016e:	693a      	ldr	r2, [r7, #16]
 8010170:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010176:	8b7a      	ldrh	r2, [r7, #26]
 8010178:	89fb      	ldrh	r3, [r7, #14]
 801017a:	1ad3      	subs	r3, r2, r3
 801017c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801017e:	2300      	movs	r3, #0
 8010180:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010182:	8b7b      	ldrh	r3, [r7, #26]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d19e      	bne.n	80100c6 <pbuf_alloc+0x5a>
      break;
 8010188:	e055      	b.n	8010236 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801018a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801018c:	3303      	adds	r3, #3
 801018e:	b29b      	uxth	r3, r3
 8010190:	f023 0303 	bic.w	r3, r3, #3
 8010194:	b29a      	uxth	r2, r3
 8010196:	88bb      	ldrh	r3, [r7, #4]
 8010198:	3303      	adds	r3, #3
 801019a:	b29b      	uxth	r3, r3
 801019c:	f023 0303 	bic.w	r3, r3, #3
 80101a0:	b29b      	uxth	r3, r3
 80101a2:	4413      	add	r3, r2
 80101a4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80101a6:	8b3b      	ldrh	r3, [r7, #24]
 80101a8:	3310      	adds	r3, #16
 80101aa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80101ac:	8b3a      	ldrh	r2, [r7, #24]
 80101ae:	88bb      	ldrh	r3, [r7, #4]
 80101b0:	3303      	adds	r3, #3
 80101b2:	f023 0303 	bic.w	r3, r3, #3
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d306      	bcc.n	80101c8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80101ba:	8afa      	ldrh	r2, [r7, #22]
 80101bc:	88bb      	ldrh	r3, [r7, #4]
 80101be:	3303      	adds	r3, #3
 80101c0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80101c4:	429a      	cmp	r2, r3
 80101c6:	d201      	bcs.n	80101cc <pbuf_alloc+0x160>
        return NULL;
 80101c8:	2300      	movs	r3, #0
 80101ca:	e035      	b.n	8010238 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80101cc:	8afb      	ldrh	r3, [r7, #22]
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7ff f9b8 	bl	800f544 <mem_malloc>
 80101d4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80101d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d101      	bne.n	80101e0 <pbuf_alloc+0x174>
        return NULL;
 80101dc:	2300      	movs	r3, #0
 80101de:	e02b      	b.n	8010238 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80101e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80101e2:	3310      	adds	r3, #16
 80101e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101e6:	4413      	add	r3, r2
 80101e8:	3303      	adds	r3, #3
 80101ea:	f023 0303 	bic.w	r3, r3, #3
 80101ee:	4618      	mov	r0, r3
 80101f0:	88b9      	ldrh	r1, [r7, #4]
 80101f2:	88ba      	ldrh	r2, [r7, #4]
 80101f4:	2300      	movs	r3, #0
 80101f6:	9301      	str	r3, [sp, #4]
 80101f8:	887b      	ldrh	r3, [r7, #2]
 80101fa:	9300      	str	r3, [sp, #0]
 80101fc:	460b      	mov	r3, r1
 80101fe:	4601      	mov	r1, r0
 8010200:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010202:	f7ff ff09 	bl	8010018 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010208:	685b      	ldr	r3, [r3, #4]
 801020a:	f003 0303 	and.w	r3, r3, #3
 801020e:	2b00      	cmp	r3, #0
 8010210:	d010      	beq.n	8010234 <pbuf_alloc+0x1c8>
 8010212:	4b0b      	ldr	r3, [pc, #44]	; (8010240 <pbuf_alloc+0x1d4>)
 8010214:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010218:	490d      	ldr	r1, [pc, #52]	; (8010250 <pbuf_alloc+0x1e4>)
 801021a:	480b      	ldr	r0, [pc, #44]	; (8010248 <pbuf_alloc+0x1dc>)
 801021c:	f009 ffb2 	bl	801a184 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010220:	e008      	b.n	8010234 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010222:	4b07      	ldr	r3, [pc, #28]	; (8010240 <pbuf_alloc+0x1d4>)
 8010224:	f240 1227 	movw	r2, #295	; 0x127
 8010228:	490a      	ldr	r1, [pc, #40]	; (8010254 <pbuf_alloc+0x1e8>)
 801022a:	4807      	ldr	r0, [pc, #28]	; (8010248 <pbuf_alloc+0x1dc>)
 801022c:	f009 ffaa 	bl	801a184 <iprintf>
      return NULL;
 8010230:	2300      	movs	r3, #0
 8010232:	e001      	b.n	8010238 <pbuf_alloc+0x1cc>
      break;
 8010234:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010238:	4618      	mov	r0, r3
 801023a:	3728      	adds	r7, #40	; 0x28
 801023c:	46bd      	mov	sp, r7
 801023e:	bd80      	pop	{r7, pc}
 8010240:	0801c1f4 	.word	0x0801c1f4
 8010244:	0801c224 	.word	0x0801c224
 8010248:	0801c254 	.word	0x0801c254
 801024c:	0801c27c 	.word	0x0801c27c
 8010250:	0801c2b0 	.word	0x0801c2b0
 8010254:	0801c2dc 	.word	0x0801c2dc

08010258 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b086      	sub	sp, #24
 801025c:	af02      	add	r7, sp, #8
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	460b      	mov	r3, r1
 8010262:	807b      	strh	r3, [r7, #2]
 8010264:	4613      	mov	r3, r2
 8010266:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010268:	883b      	ldrh	r3, [r7, #0]
 801026a:	2b41      	cmp	r3, #65	; 0x41
 801026c:	d009      	beq.n	8010282 <pbuf_alloc_reference+0x2a>
 801026e:	883b      	ldrh	r3, [r7, #0]
 8010270:	2b01      	cmp	r3, #1
 8010272:	d006      	beq.n	8010282 <pbuf_alloc_reference+0x2a>
 8010274:	4b0f      	ldr	r3, [pc, #60]	; (80102b4 <pbuf_alloc_reference+0x5c>)
 8010276:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801027a:	490f      	ldr	r1, [pc, #60]	; (80102b8 <pbuf_alloc_reference+0x60>)
 801027c:	480f      	ldr	r0, [pc, #60]	; (80102bc <pbuf_alloc_reference+0x64>)
 801027e:	f009 ff81 	bl	801a184 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010282:	200b      	movs	r0, #11
 8010284:	f7ff fae0 	bl	800f848 <memp_malloc>
 8010288:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d101      	bne.n	8010294 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010290:	2300      	movs	r3, #0
 8010292:	e00b      	b.n	80102ac <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010294:	8879      	ldrh	r1, [r7, #2]
 8010296:	887a      	ldrh	r2, [r7, #2]
 8010298:	2300      	movs	r3, #0
 801029a:	9301      	str	r3, [sp, #4]
 801029c:	883b      	ldrh	r3, [r7, #0]
 801029e:	9300      	str	r3, [sp, #0]
 80102a0:	460b      	mov	r3, r1
 80102a2:	6879      	ldr	r1, [r7, #4]
 80102a4:	68f8      	ldr	r0, [r7, #12]
 80102a6:	f7ff feb7 	bl	8010018 <pbuf_init_alloced_pbuf>
  return p;
 80102aa:	68fb      	ldr	r3, [r7, #12]
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	3710      	adds	r7, #16
 80102b0:	46bd      	mov	sp, r7
 80102b2:	bd80      	pop	{r7, pc}
 80102b4:	0801c1f4 	.word	0x0801c1f4
 80102b8:	0801c2f8 	.word	0x0801c2f8
 80102bc:	0801c254 	.word	0x0801c254

080102c0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b088      	sub	sp, #32
 80102c4:	af02      	add	r7, sp, #8
 80102c6:	607b      	str	r3, [r7, #4]
 80102c8:	4603      	mov	r3, r0
 80102ca:	73fb      	strb	r3, [r7, #15]
 80102cc:	460b      	mov	r3, r1
 80102ce:	81bb      	strh	r3, [r7, #12]
 80102d0:	4613      	mov	r3, r2
 80102d2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80102d4:	7bfb      	ldrb	r3, [r7, #15]
 80102d6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80102d8:	8a7b      	ldrh	r3, [r7, #18]
 80102da:	3303      	adds	r3, #3
 80102dc:	f023 0203 	bic.w	r2, r3, #3
 80102e0:	89bb      	ldrh	r3, [r7, #12]
 80102e2:	441a      	add	r2, r3
 80102e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d901      	bls.n	80102ee <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80102ea:	2300      	movs	r3, #0
 80102ec:	e018      	b.n	8010320 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80102ee:	6a3b      	ldr	r3, [r7, #32]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d007      	beq.n	8010304 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80102f4:	8a7b      	ldrh	r3, [r7, #18]
 80102f6:	3303      	adds	r3, #3
 80102f8:	f023 0303 	bic.w	r3, r3, #3
 80102fc:	6a3a      	ldr	r2, [r7, #32]
 80102fe:	4413      	add	r3, r2
 8010300:	617b      	str	r3, [r7, #20]
 8010302:	e001      	b.n	8010308 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010304:	2300      	movs	r3, #0
 8010306:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	89b9      	ldrh	r1, [r7, #12]
 801030c:	89ba      	ldrh	r2, [r7, #12]
 801030e:	2302      	movs	r3, #2
 8010310:	9301      	str	r3, [sp, #4]
 8010312:	897b      	ldrh	r3, [r7, #10]
 8010314:	9300      	str	r3, [sp, #0]
 8010316:	460b      	mov	r3, r1
 8010318:	6979      	ldr	r1, [r7, #20]
 801031a:	f7ff fe7d 	bl	8010018 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801031e:	687b      	ldr	r3, [r7, #4]
}
 8010320:	4618      	mov	r0, r3
 8010322:	3718      	adds	r7, #24
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}

08010328 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b084      	sub	sp, #16
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	460b      	mov	r3, r1
 8010332:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d106      	bne.n	8010348 <pbuf_realloc+0x20>
 801033a:	4b3a      	ldr	r3, [pc, #232]	; (8010424 <pbuf_realloc+0xfc>)
 801033c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010340:	4939      	ldr	r1, [pc, #228]	; (8010428 <pbuf_realloc+0x100>)
 8010342:	483a      	ldr	r0, [pc, #232]	; (801042c <pbuf_realloc+0x104>)
 8010344:	f009 ff1e 	bl	801a184 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	891b      	ldrh	r3, [r3, #8]
 801034c:	887a      	ldrh	r2, [r7, #2]
 801034e:	429a      	cmp	r2, r3
 8010350:	d263      	bcs.n	801041a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	891a      	ldrh	r2, [r3, #8]
 8010356:	887b      	ldrh	r3, [r7, #2]
 8010358:	1ad3      	subs	r3, r2, r3
 801035a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801035c:	887b      	ldrh	r3, [r7, #2]
 801035e:	817b      	strh	r3, [r7, #10]
  q = p;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010364:	e018      	b.n	8010398 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	895b      	ldrh	r3, [r3, #10]
 801036a:	897a      	ldrh	r2, [r7, #10]
 801036c:	1ad3      	subs	r3, r2, r3
 801036e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	891a      	ldrh	r2, [r3, #8]
 8010374:	893b      	ldrh	r3, [r7, #8]
 8010376:	1ad3      	subs	r3, r2, r3
 8010378:	b29a      	uxth	r2, r3
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d106      	bne.n	8010398 <pbuf_realloc+0x70>
 801038a:	4b26      	ldr	r3, [pc, #152]	; (8010424 <pbuf_realloc+0xfc>)
 801038c:	f240 12af 	movw	r2, #431	; 0x1af
 8010390:	4927      	ldr	r1, [pc, #156]	; (8010430 <pbuf_realloc+0x108>)
 8010392:	4826      	ldr	r0, [pc, #152]	; (801042c <pbuf_realloc+0x104>)
 8010394:	f009 fef6 	bl	801a184 <iprintf>
  while (rem_len > q->len) {
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	895b      	ldrh	r3, [r3, #10]
 801039c:	897a      	ldrh	r2, [r7, #10]
 801039e:	429a      	cmp	r2, r3
 80103a0:	d8e1      	bhi.n	8010366 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	7b1b      	ldrb	r3, [r3, #12]
 80103a6:	f003 030f 	and.w	r3, r3, #15
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d121      	bne.n	80103f2 <pbuf_realloc+0xca>
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	895b      	ldrh	r3, [r3, #10]
 80103b2:	897a      	ldrh	r2, [r7, #10]
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d01c      	beq.n	80103f2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	7b5b      	ldrb	r3, [r3, #13]
 80103bc:	f003 0302 	and.w	r3, r3, #2
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d116      	bne.n	80103f2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	685a      	ldr	r2, [r3, #4]
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	1ad3      	subs	r3, r2, r3
 80103cc:	b29a      	uxth	r2, r3
 80103ce:	897b      	ldrh	r3, [r7, #10]
 80103d0:	4413      	add	r3, r2
 80103d2:	b29b      	uxth	r3, r3
 80103d4:	4619      	mov	r1, r3
 80103d6:	68f8      	ldr	r0, [r7, #12]
 80103d8:	f7fe ffaa 	bl	800f330 <mem_trim>
 80103dc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d106      	bne.n	80103f2 <pbuf_realloc+0xca>
 80103e4:	4b0f      	ldr	r3, [pc, #60]	; (8010424 <pbuf_realloc+0xfc>)
 80103e6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80103ea:	4912      	ldr	r1, [pc, #72]	; (8010434 <pbuf_realloc+0x10c>)
 80103ec:	480f      	ldr	r0, [pc, #60]	; (801042c <pbuf_realloc+0x104>)
 80103ee:	f009 fec9 	bl	801a184 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	897a      	ldrh	r2, [r7, #10]
 80103f6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	895a      	ldrh	r2, [r3, #10]
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d004      	beq.n	8010412 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4618      	mov	r0, r3
 801040e:	f000 f911 	bl	8010634 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	2200      	movs	r2, #0
 8010416:	601a      	str	r2, [r3, #0]
 8010418:	e000      	b.n	801041c <pbuf_realloc+0xf4>
    return;
 801041a:	bf00      	nop

}
 801041c:	3710      	adds	r7, #16
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}
 8010422:	bf00      	nop
 8010424:	0801c1f4 	.word	0x0801c1f4
 8010428:	0801c30c 	.word	0x0801c30c
 801042c:	0801c254 	.word	0x0801c254
 8010430:	0801c324 	.word	0x0801c324
 8010434:	0801c33c 	.word	0x0801c33c

08010438 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b086      	sub	sp, #24
 801043c:	af00      	add	r7, sp, #0
 801043e:	60f8      	str	r0, [r7, #12]
 8010440:	60b9      	str	r1, [r7, #8]
 8010442:	4613      	mov	r3, r2
 8010444:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d106      	bne.n	801045a <pbuf_add_header_impl+0x22>
 801044c:	4b2b      	ldr	r3, [pc, #172]	; (80104fc <pbuf_add_header_impl+0xc4>)
 801044e:	f240 12df 	movw	r2, #479	; 0x1df
 8010452:	492b      	ldr	r1, [pc, #172]	; (8010500 <pbuf_add_header_impl+0xc8>)
 8010454:	482b      	ldr	r0, [pc, #172]	; (8010504 <pbuf_add_header_impl+0xcc>)
 8010456:	f009 fe95 	bl	801a184 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d003      	beq.n	8010468 <pbuf_add_header_impl+0x30>
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010466:	d301      	bcc.n	801046c <pbuf_add_header_impl+0x34>
    return 1;
 8010468:	2301      	movs	r3, #1
 801046a:	e043      	b.n	80104f4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801046c:	68bb      	ldr	r3, [r7, #8]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d101      	bne.n	8010476 <pbuf_add_header_impl+0x3e>
    return 0;
 8010472:	2300      	movs	r3, #0
 8010474:	e03e      	b.n	80104f4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	891a      	ldrh	r2, [r3, #8]
 801047e:	8a7b      	ldrh	r3, [r7, #18]
 8010480:	4413      	add	r3, r2
 8010482:	b29b      	uxth	r3, r3
 8010484:	8a7a      	ldrh	r2, [r7, #18]
 8010486:	429a      	cmp	r2, r3
 8010488:	d901      	bls.n	801048e <pbuf_add_header_impl+0x56>
    return 1;
 801048a:	2301      	movs	r3, #1
 801048c:	e032      	b.n	80104f4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	7b1b      	ldrb	r3, [r3, #12]
 8010492:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010494:	8a3b      	ldrh	r3, [r7, #16]
 8010496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801049a:	2b00      	cmp	r3, #0
 801049c:	d00c      	beq.n	80104b8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	685a      	ldr	r2, [r3, #4]
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	425b      	negs	r3, r3
 80104a6:	4413      	add	r3, r2
 80104a8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	3310      	adds	r3, #16
 80104ae:	697a      	ldr	r2, [r7, #20]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	d20d      	bcs.n	80104d0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80104b4:	2301      	movs	r3, #1
 80104b6:	e01d      	b.n	80104f4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80104b8:	79fb      	ldrb	r3, [r7, #7]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d006      	beq.n	80104cc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	685a      	ldr	r2, [r3, #4]
 80104c2:	68bb      	ldr	r3, [r7, #8]
 80104c4:	425b      	negs	r3, r3
 80104c6:	4413      	add	r3, r2
 80104c8:	617b      	str	r3, [r7, #20]
 80104ca:	e001      	b.n	80104d0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80104cc:	2301      	movs	r3, #1
 80104ce:	e011      	b.n	80104f4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	697a      	ldr	r2, [r7, #20]
 80104d4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	895a      	ldrh	r2, [r3, #10]
 80104da:	8a7b      	ldrh	r3, [r7, #18]
 80104dc:	4413      	add	r3, r2
 80104de:	b29a      	uxth	r2, r3
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	891a      	ldrh	r2, [r3, #8]
 80104e8:	8a7b      	ldrh	r3, [r7, #18]
 80104ea:	4413      	add	r3, r2
 80104ec:	b29a      	uxth	r2, r3
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	811a      	strh	r2, [r3, #8]


  return 0;
 80104f2:	2300      	movs	r3, #0
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3718      	adds	r7, #24
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}
 80104fc:	0801c1f4 	.word	0x0801c1f4
 8010500:	0801c358 	.word	0x0801c358
 8010504:	0801c254 	.word	0x0801c254

08010508 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010512:	2200      	movs	r2, #0
 8010514:	6839      	ldr	r1, [r7, #0]
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f7ff ff8e 	bl	8010438 <pbuf_add_header_impl>
 801051c:	4603      	mov	r3, r0
}
 801051e:	4618      	mov	r0, r3
 8010520:	3708      	adds	r7, #8
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}
	...

08010528 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b084      	sub	sp, #16
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d106      	bne.n	8010546 <pbuf_remove_header+0x1e>
 8010538:	4b20      	ldr	r3, [pc, #128]	; (80105bc <pbuf_remove_header+0x94>)
 801053a:	f240 224b 	movw	r2, #587	; 0x24b
 801053e:	4920      	ldr	r1, [pc, #128]	; (80105c0 <pbuf_remove_header+0x98>)
 8010540:	4820      	ldr	r0, [pc, #128]	; (80105c4 <pbuf_remove_header+0x9c>)
 8010542:	f009 fe1f 	bl	801a184 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d003      	beq.n	8010554 <pbuf_remove_header+0x2c>
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010552:	d301      	bcc.n	8010558 <pbuf_remove_header+0x30>
    return 1;
 8010554:	2301      	movs	r3, #1
 8010556:	e02c      	b.n	80105b2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d101      	bne.n	8010562 <pbuf_remove_header+0x3a>
    return 0;
 801055e:	2300      	movs	r3, #0
 8010560:	e027      	b.n	80105b2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	895b      	ldrh	r3, [r3, #10]
 801056a:	89fa      	ldrh	r2, [r7, #14]
 801056c:	429a      	cmp	r2, r3
 801056e:	d908      	bls.n	8010582 <pbuf_remove_header+0x5a>
 8010570:	4b12      	ldr	r3, [pc, #72]	; (80105bc <pbuf_remove_header+0x94>)
 8010572:	f240 2255 	movw	r2, #597	; 0x255
 8010576:	4914      	ldr	r1, [pc, #80]	; (80105c8 <pbuf_remove_header+0xa0>)
 8010578:	4812      	ldr	r0, [pc, #72]	; (80105c4 <pbuf_remove_header+0x9c>)
 801057a:	f009 fe03 	bl	801a184 <iprintf>
 801057e:	2301      	movs	r3, #1
 8010580:	e017      	b.n	80105b2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	685a      	ldr	r2, [r3, #4]
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	441a      	add	r2, r3
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	895a      	ldrh	r2, [r3, #10]
 8010598:	89fb      	ldrh	r3, [r7, #14]
 801059a:	1ad3      	subs	r3, r2, r3
 801059c:	b29a      	uxth	r2, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	891a      	ldrh	r2, [r3, #8]
 80105a6:	89fb      	ldrh	r3, [r7, #14]
 80105a8:	1ad3      	subs	r3, r2, r3
 80105aa:	b29a      	uxth	r2, r3
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80105b0:	2300      	movs	r3, #0
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3710      	adds	r7, #16
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
 80105ba:	bf00      	nop
 80105bc:	0801c1f4 	.word	0x0801c1f4
 80105c0:	0801c358 	.word	0x0801c358
 80105c4:	0801c254 	.word	0x0801c254
 80105c8:	0801c364 	.word	0x0801c364

080105cc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	460b      	mov	r3, r1
 80105d6:	807b      	strh	r3, [r7, #2]
 80105d8:	4613      	mov	r3, r2
 80105da:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80105dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	da08      	bge.n	80105f6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80105e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80105e8:	425b      	negs	r3, r3
 80105ea:	4619      	mov	r1, r3
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f7ff ff9b 	bl	8010528 <pbuf_remove_header>
 80105f2:	4603      	mov	r3, r0
 80105f4:	e007      	b.n	8010606 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80105f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80105fa:	787a      	ldrb	r2, [r7, #1]
 80105fc:	4619      	mov	r1, r3
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f7ff ff1a 	bl	8010438 <pbuf_add_header_impl>
 8010604:	4603      	mov	r3, r0
  }
}
 8010606:	4618      	mov	r0, r3
 8010608:	3708      	adds	r7, #8
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}

0801060e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801060e:	b580      	push	{r7, lr}
 8010610:	b082      	sub	sp, #8
 8010612:	af00      	add	r7, sp, #0
 8010614:	6078      	str	r0, [r7, #4]
 8010616:	460b      	mov	r3, r1
 8010618:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801061a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801061e:	2201      	movs	r2, #1
 8010620:	4619      	mov	r1, r3
 8010622:	6878      	ldr	r0, [r7, #4]
 8010624:	f7ff ffd2 	bl	80105cc <pbuf_header_impl>
 8010628:	4603      	mov	r3, r0
}
 801062a:	4618      	mov	r0, r3
 801062c:	3708      	adds	r7, #8
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
	...

08010634 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b088      	sub	sp, #32
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d10b      	bne.n	801065a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d106      	bne.n	8010656 <pbuf_free+0x22>
 8010648:	4b3b      	ldr	r3, [pc, #236]	; (8010738 <pbuf_free+0x104>)
 801064a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801064e:	493b      	ldr	r1, [pc, #236]	; (801073c <pbuf_free+0x108>)
 8010650:	483b      	ldr	r0, [pc, #236]	; (8010740 <pbuf_free+0x10c>)
 8010652:	f009 fd97 	bl	801a184 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010656:	2300      	movs	r3, #0
 8010658:	e069      	b.n	801072e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801065a:	2300      	movs	r3, #0
 801065c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801065e:	e062      	b.n	8010726 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010660:	f009 fbd6 	bl	8019e10 <sys_arch_protect>
 8010664:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	7b9b      	ldrb	r3, [r3, #14]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d106      	bne.n	801067c <pbuf_free+0x48>
 801066e:	4b32      	ldr	r3, [pc, #200]	; (8010738 <pbuf_free+0x104>)
 8010670:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010674:	4933      	ldr	r1, [pc, #204]	; (8010744 <pbuf_free+0x110>)
 8010676:	4832      	ldr	r0, [pc, #200]	; (8010740 <pbuf_free+0x10c>)
 8010678:	f009 fd84 	bl	801a184 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	7b9b      	ldrb	r3, [r3, #14]
 8010680:	3b01      	subs	r3, #1
 8010682:	b2da      	uxtb	r2, r3
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	739a      	strb	r2, [r3, #14]
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	7b9b      	ldrb	r3, [r3, #14]
 801068c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801068e:	69b8      	ldr	r0, [r7, #24]
 8010690:	f009 fbcc 	bl	8019e2c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010694:	7dfb      	ldrb	r3, [r7, #23]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d143      	bne.n	8010722 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	7b1b      	ldrb	r3, [r3, #12]
 80106a4:	f003 030f 	and.w	r3, r3, #15
 80106a8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	7b5b      	ldrb	r3, [r3, #13]
 80106ae:	f003 0302 	and.w	r3, r3, #2
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d011      	beq.n	80106da <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	691b      	ldr	r3, [r3, #16]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d106      	bne.n	80106d0 <pbuf_free+0x9c>
 80106c2:	4b1d      	ldr	r3, [pc, #116]	; (8010738 <pbuf_free+0x104>)
 80106c4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80106c8:	491f      	ldr	r1, [pc, #124]	; (8010748 <pbuf_free+0x114>)
 80106ca:	481d      	ldr	r0, [pc, #116]	; (8010740 <pbuf_free+0x10c>)
 80106cc:	f009 fd5a 	bl	801a184 <iprintf>
        pc->custom_free_function(p);
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	691b      	ldr	r3, [r3, #16]
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	4798      	blx	r3
 80106d8:	e01d      	b.n	8010716 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80106da:	7bfb      	ldrb	r3, [r7, #15]
 80106dc:	2b02      	cmp	r3, #2
 80106de:	d104      	bne.n	80106ea <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80106e0:	6879      	ldr	r1, [r7, #4]
 80106e2:	200c      	movs	r0, #12
 80106e4:	f7ff f902 	bl	800f8ec <memp_free>
 80106e8:	e015      	b.n	8010716 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80106ea:	7bfb      	ldrb	r3, [r7, #15]
 80106ec:	2b01      	cmp	r3, #1
 80106ee:	d104      	bne.n	80106fa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80106f0:	6879      	ldr	r1, [r7, #4]
 80106f2:	200b      	movs	r0, #11
 80106f4:	f7ff f8fa 	bl	800f8ec <memp_free>
 80106f8:	e00d      	b.n	8010716 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80106fa:	7bfb      	ldrb	r3, [r7, #15]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d103      	bne.n	8010708 <pbuf_free+0xd4>
          mem_free(p);
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f7fe fd85 	bl	800f210 <mem_free>
 8010706:	e006      	b.n	8010716 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010708:	4b0b      	ldr	r3, [pc, #44]	; (8010738 <pbuf_free+0x104>)
 801070a:	f240 320f 	movw	r2, #783	; 0x30f
 801070e:	490f      	ldr	r1, [pc, #60]	; (801074c <pbuf_free+0x118>)
 8010710:	480b      	ldr	r0, [pc, #44]	; (8010740 <pbuf_free+0x10c>)
 8010712:	f009 fd37 	bl	801a184 <iprintf>
        }
      }
      count++;
 8010716:	7ffb      	ldrb	r3, [r7, #31]
 8010718:	3301      	adds	r3, #1
 801071a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801071c:	693b      	ldr	r3, [r7, #16]
 801071e:	607b      	str	r3, [r7, #4]
 8010720:	e001      	b.n	8010726 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010722:	2300      	movs	r3, #0
 8010724:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d199      	bne.n	8010660 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801072c:	7ffb      	ldrb	r3, [r7, #31]
}
 801072e:	4618      	mov	r0, r3
 8010730:	3720      	adds	r7, #32
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}
 8010736:	bf00      	nop
 8010738:	0801c1f4 	.word	0x0801c1f4
 801073c:	0801c358 	.word	0x0801c358
 8010740:	0801c254 	.word	0x0801c254
 8010744:	0801c384 	.word	0x0801c384
 8010748:	0801c39c 	.word	0x0801c39c
 801074c:	0801c3c0 	.word	0x0801c3c0

08010750 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010750:	b480      	push	{r7}
 8010752:	b085      	sub	sp, #20
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010758:	2300      	movs	r3, #0
 801075a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801075c:	e005      	b.n	801076a <pbuf_clen+0x1a>
    ++len;
 801075e:	89fb      	ldrh	r3, [r7, #14]
 8010760:	3301      	adds	r3, #1
 8010762:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d1f6      	bne.n	801075e <pbuf_clen+0xe>
  }
  return len;
 8010770:	89fb      	ldrh	r3, [r7, #14]
}
 8010772:	4618      	mov	r0, r3
 8010774:	3714      	adds	r7, #20
 8010776:	46bd      	mov	sp, r7
 8010778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077c:	4770      	bx	lr
	...

08010780 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b084      	sub	sp, #16
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d016      	beq.n	80107bc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801078e:	f009 fb3f 	bl	8019e10 <sys_arch_protect>
 8010792:	60f8      	str	r0, [r7, #12]
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	7b9b      	ldrb	r3, [r3, #14]
 8010798:	3301      	adds	r3, #1
 801079a:	b2da      	uxtb	r2, r3
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	739a      	strb	r2, [r3, #14]
 80107a0:	68f8      	ldr	r0, [r7, #12]
 80107a2:	f009 fb43 	bl	8019e2c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	7b9b      	ldrb	r3, [r3, #14]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d106      	bne.n	80107bc <pbuf_ref+0x3c>
 80107ae:	4b05      	ldr	r3, [pc, #20]	; (80107c4 <pbuf_ref+0x44>)
 80107b0:	f240 3242 	movw	r2, #834	; 0x342
 80107b4:	4904      	ldr	r1, [pc, #16]	; (80107c8 <pbuf_ref+0x48>)
 80107b6:	4805      	ldr	r0, [pc, #20]	; (80107cc <pbuf_ref+0x4c>)
 80107b8:	f009 fce4 	bl	801a184 <iprintf>
  }
}
 80107bc:	bf00      	nop
 80107be:	3710      	adds	r7, #16
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	0801c1f4 	.word	0x0801c1f4
 80107c8:	0801c3d4 	.word	0x0801c3d4
 80107cc:	0801c254 	.word	0x0801c254

080107d0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b084      	sub	sp, #16
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d002      	beq.n	80107e6 <pbuf_cat+0x16>
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d107      	bne.n	80107f6 <pbuf_cat+0x26>
 80107e6:	4b20      	ldr	r3, [pc, #128]	; (8010868 <pbuf_cat+0x98>)
 80107e8:	f240 3259 	movw	r2, #857	; 0x359
 80107ec:	491f      	ldr	r1, [pc, #124]	; (801086c <pbuf_cat+0x9c>)
 80107ee:	4820      	ldr	r0, [pc, #128]	; (8010870 <pbuf_cat+0xa0>)
 80107f0:	f009 fcc8 	bl	801a184 <iprintf>
 80107f4:	e034      	b.n	8010860 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	60fb      	str	r3, [r7, #12]
 80107fa:	e00a      	b.n	8010812 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	891a      	ldrh	r2, [r3, #8]
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	891b      	ldrh	r3, [r3, #8]
 8010804:	4413      	add	r3, r2
 8010806:	b29a      	uxth	r2, r3
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	60fb      	str	r3, [r7, #12]
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d1f0      	bne.n	80107fc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	891a      	ldrh	r2, [r3, #8]
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	895b      	ldrh	r3, [r3, #10]
 8010822:	429a      	cmp	r2, r3
 8010824:	d006      	beq.n	8010834 <pbuf_cat+0x64>
 8010826:	4b10      	ldr	r3, [pc, #64]	; (8010868 <pbuf_cat+0x98>)
 8010828:	f240 3262 	movw	r2, #866	; 0x362
 801082c:	4911      	ldr	r1, [pc, #68]	; (8010874 <pbuf_cat+0xa4>)
 801082e:	4810      	ldr	r0, [pc, #64]	; (8010870 <pbuf_cat+0xa0>)
 8010830:	f009 fca8 	bl	801a184 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d006      	beq.n	801084a <pbuf_cat+0x7a>
 801083c:	4b0a      	ldr	r3, [pc, #40]	; (8010868 <pbuf_cat+0x98>)
 801083e:	f240 3263 	movw	r2, #867	; 0x363
 8010842:	490d      	ldr	r1, [pc, #52]	; (8010878 <pbuf_cat+0xa8>)
 8010844:	480a      	ldr	r0, [pc, #40]	; (8010870 <pbuf_cat+0xa0>)
 8010846:	f009 fc9d 	bl	801a184 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	891a      	ldrh	r2, [r3, #8]
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	891b      	ldrh	r3, [r3, #8]
 8010852:	4413      	add	r3, r2
 8010854:	b29a      	uxth	r2, r3
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	683a      	ldr	r2, [r7, #0]
 801085e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	0801c1f4 	.word	0x0801c1f4
 801086c:	0801c3e8 	.word	0x0801c3e8
 8010870:	0801c254 	.word	0x0801c254
 8010874:	0801c420 	.word	0x0801c420
 8010878:	0801c450 	.word	0x0801c450

0801087c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b086      	sub	sp, #24
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010886:	2300      	movs	r3, #0
 8010888:	617b      	str	r3, [r7, #20]
 801088a:	2300      	movs	r3, #0
 801088c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d008      	beq.n	80108a6 <pbuf_copy+0x2a>
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d005      	beq.n	80108a6 <pbuf_copy+0x2a>
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	891a      	ldrh	r2, [r3, #8]
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	891b      	ldrh	r3, [r3, #8]
 80108a2:	429a      	cmp	r2, r3
 80108a4:	d209      	bcs.n	80108ba <pbuf_copy+0x3e>
 80108a6:	4b57      	ldr	r3, [pc, #348]	; (8010a04 <pbuf_copy+0x188>)
 80108a8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80108ac:	4956      	ldr	r1, [pc, #344]	; (8010a08 <pbuf_copy+0x18c>)
 80108ae:	4857      	ldr	r0, [pc, #348]	; (8010a0c <pbuf_copy+0x190>)
 80108b0:	f009 fc68 	bl	801a184 <iprintf>
 80108b4:	f06f 030f 	mvn.w	r3, #15
 80108b8:	e09f      	b.n	80109fa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	895b      	ldrh	r3, [r3, #10]
 80108be:	461a      	mov	r2, r3
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	1ad2      	subs	r2, r2, r3
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	895b      	ldrh	r3, [r3, #10]
 80108c8:	4619      	mov	r1, r3
 80108ca:	693b      	ldr	r3, [r7, #16]
 80108cc:	1acb      	subs	r3, r1, r3
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d306      	bcc.n	80108e0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	895b      	ldrh	r3, [r3, #10]
 80108d6:	461a      	mov	r2, r3
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	1ad3      	subs	r3, r2, r3
 80108dc:	60fb      	str	r3, [r7, #12]
 80108de:	e005      	b.n	80108ec <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	895b      	ldrh	r3, [r3, #10]
 80108e4:	461a      	mov	r2, r3
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	1ad3      	subs	r3, r2, r3
 80108ea:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	685a      	ldr	r2, [r3, #4]
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	18d0      	adds	r0, r2, r3
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	685a      	ldr	r2, [r3, #4]
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	4413      	add	r3, r2
 80108fc:	68fa      	ldr	r2, [r7, #12]
 80108fe:	4619      	mov	r1, r3
 8010900:	f009 fbcf 	bl	801a0a2 <memcpy>
    offset_to += len;
 8010904:	697a      	ldr	r2, [r7, #20]
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	4413      	add	r3, r2
 801090a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801090c:	693a      	ldr	r2, [r7, #16]
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	4413      	add	r3, r2
 8010912:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	895b      	ldrh	r3, [r3, #10]
 8010918:	461a      	mov	r2, r3
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	4293      	cmp	r3, r2
 801091e:	d906      	bls.n	801092e <pbuf_copy+0xb2>
 8010920:	4b38      	ldr	r3, [pc, #224]	; (8010a04 <pbuf_copy+0x188>)
 8010922:	f240 32d9 	movw	r2, #985	; 0x3d9
 8010926:	493a      	ldr	r1, [pc, #232]	; (8010a10 <pbuf_copy+0x194>)
 8010928:	4838      	ldr	r0, [pc, #224]	; (8010a0c <pbuf_copy+0x190>)
 801092a:	f009 fc2b 	bl	801a184 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	895b      	ldrh	r3, [r3, #10]
 8010932:	461a      	mov	r2, r3
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	4293      	cmp	r3, r2
 8010938:	d906      	bls.n	8010948 <pbuf_copy+0xcc>
 801093a:	4b32      	ldr	r3, [pc, #200]	; (8010a04 <pbuf_copy+0x188>)
 801093c:	f240 32da 	movw	r2, #986	; 0x3da
 8010940:	4934      	ldr	r1, [pc, #208]	; (8010a14 <pbuf_copy+0x198>)
 8010942:	4832      	ldr	r0, [pc, #200]	; (8010a0c <pbuf_copy+0x190>)
 8010944:	f009 fc1e 	bl	801a184 <iprintf>
    if (offset_from >= p_from->len) {
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	895b      	ldrh	r3, [r3, #10]
 801094c:	461a      	mov	r2, r3
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	4293      	cmp	r3, r2
 8010952:	d304      	bcc.n	801095e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010954:	2300      	movs	r3, #0
 8010956:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	895b      	ldrh	r3, [r3, #10]
 8010962:	461a      	mov	r2, r3
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	4293      	cmp	r3, r2
 8010968:	d114      	bne.n	8010994 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801096a:	2300      	movs	r3, #0
 801096c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d10c      	bne.n	8010994 <pbuf_copy+0x118>
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d009      	beq.n	8010994 <pbuf_copy+0x118>
 8010980:	4b20      	ldr	r3, [pc, #128]	; (8010a04 <pbuf_copy+0x188>)
 8010982:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010986:	4924      	ldr	r1, [pc, #144]	; (8010a18 <pbuf_copy+0x19c>)
 8010988:	4820      	ldr	r0, [pc, #128]	; (8010a0c <pbuf_copy+0x190>)
 801098a:	f009 fbfb 	bl	801a184 <iprintf>
 801098e:	f06f 030f 	mvn.w	r3, #15
 8010992:	e032      	b.n	80109fa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d013      	beq.n	80109c2 <pbuf_copy+0x146>
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	895a      	ldrh	r2, [r3, #10]
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	891b      	ldrh	r3, [r3, #8]
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d10d      	bne.n	80109c2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d009      	beq.n	80109c2 <pbuf_copy+0x146>
 80109ae:	4b15      	ldr	r3, [pc, #84]	; (8010a04 <pbuf_copy+0x188>)
 80109b0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80109b4:	4919      	ldr	r1, [pc, #100]	; (8010a1c <pbuf_copy+0x1a0>)
 80109b6:	4815      	ldr	r0, [pc, #84]	; (8010a0c <pbuf_copy+0x190>)
 80109b8:	f009 fbe4 	bl	801a184 <iprintf>
 80109bc:	f06f 0305 	mvn.w	r3, #5
 80109c0:	e01b      	b.n	80109fa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d013      	beq.n	80109f0 <pbuf_copy+0x174>
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	895a      	ldrh	r2, [r3, #10]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	891b      	ldrh	r3, [r3, #8]
 80109d0:	429a      	cmp	r2, r3
 80109d2:	d10d      	bne.n	80109f0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d009      	beq.n	80109f0 <pbuf_copy+0x174>
 80109dc:	4b09      	ldr	r3, [pc, #36]	; (8010a04 <pbuf_copy+0x188>)
 80109de:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80109e2:	490e      	ldr	r1, [pc, #56]	; (8010a1c <pbuf_copy+0x1a0>)
 80109e4:	4809      	ldr	r0, [pc, #36]	; (8010a0c <pbuf_copy+0x190>)
 80109e6:	f009 fbcd 	bl	801a184 <iprintf>
 80109ea:	f06f 0305 	mvn.w	r3, #5
 80109ee:	e004      	b.n	80109fa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	f47f af61 	bne.w	80108ba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80109f8:	2300      	movs	r3, #0
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	3718      	adds	r7, #24
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	0801c1f4 	.word	0x0801c1f4
 8010a08:	0801c49c 	.word	0x0801c49c
 8010a0c:	0801c254 	.word	0x0801c254
 8010a10:	0801c4cc 	.word	0x0801c4cc
 8010a14:	0801c4e4 	.word	0x0801c4e4
 8010a18:	0801c500 	.word	0x0801c500
 8010a1c:	0801c510 	.word	0x0801c510

08010a20 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b088      	sub	sp, #32
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	60f8      	str	r0, [r7, #12]
 8010a28:	60b9      	str	r1, [r7, #8]
 8010a2a:	4611      	mov	r1, r2
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	460b      	mov	r3, r1
 8010a30:	80fb      	strh	r3, [r7, #6]
 8010a32:	4613      	mov	r3, r2
 8010a34:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010a36:	2300      	movs	r3, #0
 8010a38:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d108      	bne.n	8010a56 <pbuf_copy_partial+0x36>
 8010a44:	4b2b      	ldr	r3, [pc, #172]	; (8010af4 <pbuf_copy_partial+0xd4>)
 8010a46:	f240 420a 	movw	r2, #1034	; 0x40a
 8010a4a:	492b      	ldr	r1, [pc, #172]	; (8010af8 <pbuf_copy_partial+0xd8>)
 8010a4c:	482b      	ldr	r0, [pc, #172]	; (8010afc <pbuf_copy_partial+0xdc>)
 8010a4e:	f009 fb99 	bl	801a184 <iprintf>
 8010a52:	2300      	movs	r3, #0
 8010a54:	e04a      	b.n	8010aec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d108      	bne.n	8010a6e <pbuf_copy_partial+0x4e>
 8010a5c:	4b25      	ldr	r3, [pc, #148]	; (8010af4 <pbuf_copy_partial+0xd4>)
 8010a5e:	f240 420b 	movw	r2, #1035	; 0x40b
 8010a62:	4927      	ldr	r1, [pc, #156]	; (8010b00 <pbuf_copy_partial+0xe0>)
 8010a64:	4825      	ldr	r0, [pc, #148]	; (8010afc <pbuf_copy_partial+0xdc>)
 8010a66:	f009 fb8d 	bl	801a184 <iprintf>
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	e03e      	b.n	8010aec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	61fb      	str	r3, [r7, #28]
 8010a72:	e034      	b.n	8010ade <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010a74:	88bb      	ldrh	r3, [r7, #4]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d00a      	beq.n	8010a90 <pbuf_copy_partial+0x70>
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	895b      	ldrh	r3, [r3, #10]
 8010a7e:	88ba      	ldrh	r2, [r7, #4]
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d305      	bcc.n	8010a90 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010a84:	69fb      	ldr	r3, [r7, #28]
 8010a86:	895b      	ldrh	r3, [r3, #10]
 8010a88:	88ba      	ldrh	r2, [r7, #4]
 8010a8a:	1ad3      	subs	r3, r2, r3
 8010a8c:	80bb      	strh	r3, [r7, #4]
 8010a8e:	e023      	b.n	8010ad8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	895a      	ldrh	r2, [r3, #10]
 8010a94:	88bb      	ldrh	r3, [r7, #4]
 8010a96:	1ad3      	subs	r3, r2, r3
 8010a98:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010a9a:	8b3a      	ldrh	r2, [r7, #24]
 8010a9c:	88fb      	ldrh	r3, [r7, #6]
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d901      	bls.n	8010aa6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010aa2:	88fb      	ldrh	r3, [r7, #6]
 8010aa4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010aa6:	8b7b      	ldrh	r3, [r7, #26]
 8010aa8:	68ba      	ldr	r2, [r7, #8]
 8010aaa:	18d0      	adds	r0, r2, r3
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	685a      	ldr	r2, [r3, #4]
 8010ab0:	88bb      	ldrh	r3, [r7, #4]
 8010ab2:	4413      	add	r3, r2
 8010ab4:	8b3a      	ldrh	r2, [r7, #24]
 8010ab6:	4619      	mov	r1, r3
 8010ab8:	f009 faf3 	bl	801a0a2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010abc:	8afa      	ldrh	r2, [r7, #22]
 8010abe:	8b3b      	ldrh	r3, [r7, #24]
 8010ac0:	4413      	add	r3, r2
 8010ac2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010ac4:	8b7a      	ldrh	r2, [r7, #26]
 8010ac6:	8b3b      	ldrh	r3, [r7, #24]
 8010ac8:	4413      	add	r3, r2
 8010aca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010acc:	88fa      	ldrh	r2, [r7, #6]
 8010ace:	8b3b      	ldrh	r3, [r7, #24]
 8010ad0:	1ad3      	subs	r3, r2, r3
 8010ad2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010ad8:	69fb      	ldr	r3, [r7, #28]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	61fb      	str	r3, [r7, #28]
 8010ade:	88fb      	ldrh	r3, [r7, #6]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d002      	beq.n	8010aea <pbuf_copy_partial+0xca>
 8010ae4:	69fb      	ldr	r3, [r7, #28]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d1c4      	bne.n	8010a74 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010aea:	8afb      	ldrh	r3, [r7, #22]
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	3720      	adds	r7, #32
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	0801c1f4 	.word	0x0801c1f4
 8010af8:	0801c53c 	.word	0x0801c53c
 8010afc:	0801c254 	.word	0x0801c254
 8010b00:	0801c55c 	.word	0x0801c55c

08010b04 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b084      	sub	sp, #16
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	603a      	str	r2, [r7, #0]
 8010b0e:	71fb      	strb	r3, [r7, #7]
 8010b10:	460b      	mov	r3, r1
 8010b12:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	8919      	ldrh	r1, [r3, #8]
 8010b18:	88ba      	ldrh	r2, [r7, #4]
 8010b1a:	79fb      	ldrb	r3, [r7, #7]
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7ff faa5 	bl	801006c <pbuf_alloc>
 8010b22:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d101      	bne.n	8010b2e <pbuf_clone+0x2a>
    return NULL;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	e011      	b.n	8010b52 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010b2e:	6839      	ldr	r1, [r7, #0]
 8010b30:	68f8      	ldr	r0, [r7, #12]
 8010b32:	f7ff fea3 	bl	801087c <pbuf_copy>
 8010b36:	4603      	mov	r3, r0
 8010b38:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010b3a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d006      	beq.n	8010b50 <pbuf_clone+0x4c>
 8010b42:	4b06      	ldr	r3, [pc, #24]	; (8010b5c <pbuf_clone+0x58>)
 8010b44:	f240 5224 	movw	r2, #1316	; 0x524
 8010b48:	4905      	ldr	r1, [pc, #20]	; (8010b60 <pbuf_clone+0x5c>)
 8010b4a:	4806      	ldr	r0, [pc, #24]	; (8010b64 <pbuf_clone+0x60>)
 8010b4c:	f009 fb1a 	bl	801a184 <iprintf>
  return q;
 8010b50:	68fb      	ldr	r3, [r7, #12]
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3710      	adds	r7, #16
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	0801c1f4 	.word	0x0801c1f4
 8010b60:	0801c668 	.word	0x0801c668
 8010b64:	0801c254 	.word	0x0801c254

08010b68 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010b6c:	f009 fb22 	bl	801a1b4 <rand>
 8010b70:	4603      	mov	r3, r0
 8010b72:	b29b      	uxth	r3, r3
 8010b74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010b78:	b29b      	uxth	r3, r3
 8010b7a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010b7e:	b29a      	uxth	r2, r3
 8010b80:	4b01      	ldr	r3, [pc, #4]	; (8010b88 <tcp_init+0x20>)
 8010b82:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010b84:	bf00      	nop
 8010b86:	bd80      	pop	{r7, pc}
 8010b88:	20000010 	.word	0x20000010

08010b8c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b082      	sub	sp, #8
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	7d1b      	ldrb	r3, [r3, #20]
 8010b98:	2b01      	cmp	r3, #1
 8010b9a:	d105      	bne.n	8010ba8 <tcp_free+0x1c>
 8010b9c:	4b06      	ldr	r3, [pc, #24]	; (8010bb8 <tcp_free+0x2c>)
 8010b9e:	22d4      	movs	r2, #212	; 0xd4
 8010ba0:	4906      	ldr	r1, [pc, #24]	; (8010bbc <tcp_free+0x30>)
 8010ba2:	4807      	ldr	r0, [pc, #28]	; (8010bc0 <tcp_free+0x34>)
 8010ba4:	f009 faee 	bl	801a184 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010ba8:	6879      	ldr	r1, [r7, #4]
 8010baa:	2001      	movs	r0, #1
 8010bac:	f7fe fe9e 	bl	800f8ec <memp_free>
}
 8010bb0:	bf00      	nop
 8010bb2:	3708      	adds	r7, #8
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bd80      	pop	{r7, pc}
 8010bb8:	0801c6f4 	.word	0x0801c6f4
 8010bbc:	0801c724 	.word	0x0801c724
 8010bc0:	0801c738 	.word	0x0801c738

08010bc4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b082      	sub	sp, #8
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	7d1b      	ldrb	r3, [r3, #20]
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	d105      	bne.n	8010be0 <tcp_free_listen+0x1c>
 8010bd4:	4b06      	ldr	r3, [pc, #24]	; (8010bf0 <tcp_free_listen+0x2c>)
 8010bd6:	22df      	movs	r2, #223	; 0xdf
 8010bd8:	4906      	ldr	r1, [pc, #24]	; (8010bf4 <tcp_free_listen+0x30>)
 8010bda:	4807      	ldr	r0, [pc, #28]	; (8010bf8 <tcp_free_listen+0x34>)
 8010bdc:	f009 fad2 	bl	801a184 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010be0:	6879      	ldr	r1, [r7, #4]
 8010be2:	2002      	movs	r0, #2
 8010be4:	f7fe fe82 	bl	800f8ec <memp_free>
}
 8010be8:	bf00      	nop
 8010bea:	3708      	adds	r7, #8
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}
 8010bf0:	0801c6f4 	.word	0x0801c6f4
 8010bf4:	0801c760 	.word	0x0801c760
 8010bf8:	0801c738 	.word	0x0801c738

08010bfc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010c00:	f001 f8a6 	bl	8011d50 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010c04:	4b07      	ldr	r3, [pc, #28]	; (8010c24 <tcp_tmr+0x28>)
 8010c06:	781b      	ldrb	r3, [r3, #0]
 8010c08:	3301      	adds	r3, #1
 8010c0a:	b2da      	uxtb	r2, r3
 8010c0c:	4b05      	ldr	r3, [pc, #20]	; (8010c24 <tcp_tmr+0x28>)
 8010c0e:	701a      	strb	r2, [r3, #0]
 8010c10:	4b04      	ldr	r3, [pc, #16]	; (8010c24 <tcp_tmr+0x28>)
 8010c12:	781b      	ldrb	r3, [r3, #0]
 8010c14:	f003 0301 	and.w	r3, r3, #1
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d001      	beq.n	8010c20 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010c1c:	f000 fd58 	bl	80116d0 <tcp_slowtmr>
  }
}
 8010c20:	bf00      	nop
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	20004ac5 	.word	0x20004ac5

08010c28 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b084      	sub	sp, #16
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d105      	bne.n	8010c44 <tcp_remove_listener+0x1c>
 8010c38:	4b0d      	ldr	r3, [pc, #52]	; (8010c70 <tcp_remove_listener+0x48>)
 8010c3a:	22ff      	movs	r2, #255	; 0xff
 8010c3c:	490d      	ldr	r1, [pc, #52]	; (8010c74 <tcp_remove_listener+0x4c>)
 8010c3e:	480e      	ldr	r0, [pc, #56]	; (8010c78 <tcp_remove_listener+0x50>)
 8010c40:	f009 faa0 	bl	801a184 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	60fb      	str	r3, [r7, #12]
 8010c48:	e00a      	b.n	8010c60 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c4e:	683a      	ldr	r2, [r7, #0]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d102      	bne.n	8010c5a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	2200      	movs	r2, #0
 8010c58:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	68db      	ldr	r3, [r3, #12]
 8010c5e:	60fb      	str	r3, [r7, #12]
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d1f1      	bne.n	8010c4a <tcp_remove_listener+0x22>
    }
  }
}
 8010c66:	bf00      	nop
 8010c68:	bf00      	nop
 8010c6a:	3710      	adds	r7, #16
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}
 8010c70:	0801c6f4 	.word	0x0801c6f4
 8010c74:	0801c77c 	.word	0x0801c77c
 8010c78:	0801c738 	.word	0x0801c738

08010c7c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b084      	sub	sp, #16
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d106      	bne.n	8010c98 <tcp_listen_closed+0x1c>
 8010c8a:	4b14      	ldr	r3, [pc, #80]	; (8010cdc <tcp_listen_closed+0x60>)
 8010c8c:	f240 1211 	movw	r2, #273	; 0x111
 8010c90:	4913      	ldr	r1, [pc, #76]	; (8010ce0 <tcp_listen_closed+0x64>)
 8010c92:	4814      	ldr	r0, [pc, #80]	; (8010ce4 <tcp_listen_closed+0x68>)
 8010c94:	f009 fa76 	bl	801a184 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	7d1b      	ldrb	r3, [r3, #20]
 8010c9c:	2b01      	cmp	r3, #1
 8010c9e:	d006      	beq.n	8010cae <tcp_listen_closed+0x32>
 8010ca0:	4b0e      	ldr	r3, [pc, #56]	; (8010cdc <tcp_listen_closed+0x60>)
 8010ca2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010ca6:	4910      	ldr	r1, [pc, #64]	; (8010ce8 <tcp_listen_closed+0x6c>)
 8010ca8:	480e      	ldr	r0, [pc, #56]	; (8010ce4 <tcp_listen_closed+0x68>)
 8010caa:	f009 fa6b 	bl	801a184 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010cae:	2301      	movs	r3, #1
 8010cb0:	60fb      	str	r3, [r7, #12]
 8010cb2:	e00b      	b.n	8010ccc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010cb4:	4a0d      	ldr	r2, [pc, #52]	; (8010cec <tcp_listen_closed+0x70>)
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	6879      	ldr	r1, [r7, #4]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7ff ffb1 	bl	8010c28 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	3301      	adds	r3, #1
 8010cca:	60fb      	str	r3, [r7, #12]
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	2b03      	cmp	r3, #3
 8010cd0:	d9f0      	bls.n	8010cb4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010cd2:	bf00      	nop
 8010cd4:	bf00      	nop
 8010cd6:	3710      	adds	r7, #16
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}
 8010cdc:	0801c6f4 	.word	0x0801c6f4
 8010ce0:	0801c7a4 	.word	0x0801c7a4
 8010ce4:	0801c738 	.word	0x0801c738
 8010ce8:	0801c7b0 	.word	0x0801c7b0
 8010cec:	0801e7fc 	.word	0x0801e7fc

08010cf0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010cf0:	b5b0      	push	{r4, r5, r7, lr}
 8010cf2:	b088      	sub	sp, #32
 8010cf4:	af04      	add	r7, sp, #16
 8010cf6:	6078      	str	r0, [r7, #4]
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d106      	bne.n	8010d10 <tcp_close_shutdown+0x20>
 8010d02:	4b63      	ldr	r3, [pc, #396]	; (8010e90 <tcp_close_shutdown+0x1a0>)
 8010d04:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010d08:	4962      	ldr	r1, [pc, #392]	; (8010e94 <tcp_close_shutdown+0x1a4>)
 8010d0a:	4863      	ldr	r0, [pc, #396]	; (8010e98 <tcp_close_shutdown+0x1a8>)
 8010d0c:	f009 fa3a 	bl	801a184 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010d10:	78fb      	ldrb	r3, [r7, #3]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d066      	beq.n	8010de4 <tcp_close_shutdown+0xf4>
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	7d1b      	ldrb	r3, [r3, #20]
 8010d1a:	2b04      	cmp	r3, #4
 8010d1c:	d003      	beq.n	8010d26 <tcp_close_shutdown+0x36>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	7d1b      	ldrb	r3, [r3, #20]
 8010d22:	2b07      	cmp	r3, #7
 8010d24:	d15e      	bne.n	8010de4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d104      	bne.n	8010d38 <tcp_close_shutdown+0x48>
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d32:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010d36:	d055      	beq.n	8010de4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	8b5b      	ldrh	r3, [r3, #26]
 8010d3c:	f003 0310 	and.w	r3, r3, #16
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d106      	bne.n	8010d52 <tcp_close_shutdown+0x62>
 8010d44:	4b52      	ldr	r3, [pc, #328]	; (8010e90 <tcp_close_shutdown+0x1a0>)
 8010d46:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010d4a:	4954      	ldr	r1, [pc, #336]	; (8010e9c <tcp_close_shutdown+0x1ac>)
 8010d4c:	4852      	ldr	r0, [pc, #328]	; (8010e98 <tcp_close_shutdown+0x1a8>)
 8010d4e:	f009 fa19 	bl	801a184 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010d5a:	687d      	ldr	r5, [r7, #4]
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	3304      	adds	r3, #4
 8010d60:	687a      	ldr	r2, [r7, #4]
 8010d62:	8ad2      	ldrh	r2, [r2, #22]
 8010d64:	6879      	ldr	r1, [r7, #4]
 8010d66:	8b09      	ldrh	r1, [r1, #24]
 8010d68:	9102      	str	r1, [sp, #8]
 8010d6a:	9201      	str	r2, [sp, #4]
 8010d6c:	9300      	str	r3, [sp, #0]
 8010d6e:	462b      	mov	r3, r5
 8010d70:	4622      	mov	r2, r4
 8010d72:	4601      	mov	r1, r0
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f005 fdb7 	bl	80168e8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f001 fb98 	bl	80124b0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010d80:	4b47      	ldr	r3, [pc, #284]	; (8010ea0 <tcp_close_shutdown+0x1b0>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	687a      	ldr	r2, [r7, #4]
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d105      	bne.n	8010d96 <tcp_close_shutdown+0xa6>
 8010d8a:	4b45      	ldr	r3, [pc, #276]	; (8010ea0 <tcp_close_shutdown+0x1b0>)
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	68db      	ldr	r3, [r3, #12]
 8010d90:	4a43      	ldr	r2, [pc, #268]	; (8010ea0 <tcp_close_shutdown+0x1b0>)
 8010d92:	6013      	str	r3, [r2, #0]
 8010d94:	e013      	b.n	8010dbe <tcp_close_shutdown+0xce>
 8010d96:	4b42      	ldr	r3, [pc, #264]	; (8010ea0 <tcp_close_shutdown+0x1b0>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	60fb      	str	r3, [r7, #12]
 8010d9c:	e00c      	b.n	8010db8 <tcp_close_shutdown+0xc8>
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	68db      	ldr	r3, [r3, #12]
 8010da2:	687a      	ldr	r2, [r7, #4]
 8010da4:	429a      	cmp	r2, r3
 8010da6:	d104      	bne.n	8010db2 <tcp_close_shutdown+0xc2>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	68da      	ldr	r2, [r3, #12]
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	60da      	str	r2, [r3, #12]
 8010db0:	e005      	b.n	8010dbe <tcp_close_shutdown+0xce>
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	68db      	ldr	r3, [r3, #12]
 8010db6:	60fb      	str	r3, [r7, #12]
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d1ef      	bne.n	8010d9e <tcp_close_shutdown+0xae>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	60da      	str	r2, [r3, #12]
 8010dc4:	4b37      	ldr	r3, [pc, #220]	; (8010ea4 <tcp_close_shutdown+0x1b4>)
 8010dc6:	2201      	movs	r2, #1
 8010dc8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010dca:	4b37      	ldr	r3, [pc, #220]	; (8010ea8 <tcp_close_shutdown+0x1b8>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	687a      	ldr	r2, [r7, #4]
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	d102      	bne.n	8010dda <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010dd4:	f004 f82c 	bl	8014e30 <tcp_trigger_input_pcb_close>
 8010dd8:	e002      	b.n	8010de0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f7ff fed6 	bl	8010b8c <tcp_free>
      }
      return ERR_OK;
 8010de0:	2300      	movs	r3, #0
 8010de2:	e050      	b.n	8010e86 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	7d1b      	ldrb	r3, [r3, #20]
 8010de8:	2b02      	cmp	r3, #2
 8010dea:	d03b      	beq.n	8010e64 <tcp_close_shutdown+0x174>
 8010dec:	2b02      	cmp	r3, #2
 8010dee:	dc44      	bgt.n	8010e7a <tcp_close_shutdown+0x18a>
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d002      	beq.n	8010dfa <tcp_close_shutdown+0x10a>
 8010df4:	2b01      	cmp	r3, #1
 8010df6:	d02a      	beq.n	8010e4e <tcp_close_shutdown+0x15e>
 8010df8:	e03f      	b.n	8010e7a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	8adb      	ldrh	r3, [r3, #22]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d021      	beq.n	8010e46 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010e02:	4b2a      	ldr	r3, [pc, #168]	; (8010eac <tcp_close_shutdown+0x1bc>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	687a      	ldr	r2, [r7, #4]
 8010e08:	429a      	cmp	r2, r3
 8010e0a:	d105      	bne.n	8010e18 <tcp_close_shutdown+0x128>
 8010e0c:	4b27      	ldr	r3, [pc, #156]	; (8010eac <tcp_close_shutdown+0x1bc>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	68db      	ldr	r3, [r3, #12]
 8010e12:	4a26      	ldr	r2, [pc, #152]	; (8010eac <tcp_close_shutdown+0x1bc>)
 8010e14:	6013      	str	r3, [r2, #0]
 8010e16:	e013      	b.n	8010e40 <tcp_close_shutdown+0x150>
 8010e18:	4b24      	ldr	r3, [pc, #144]	; (8010eac <tcp_close_shutdown+0x1bc>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	60bb      	str	r3, [r7, #8]
 8010e1e:	e00c      	b.n	8010e3a <tcp_close_shutdown+0x14a>
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	68db      	ldr	r3, [r3, #12]
 8010e24:	687a      	ldr	r2, [r7, #4]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d104      	bne.n	8010e34 <tcp_close_shutdown+0x144>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	68da      	ldr	r2, [r3, #12]
 8010e2e:	68bb      	ldr	r3, [r7, #8]
 8010e30:	60da      	str	r2, [r3, #12]
 8010e32:	e005      	b.n	8010e40 <tcp_close_shutdown+0x150>
 8010e34:	68bb      	ldr	r3, [r7, #8]
 8010e36:	68db      	ldr	r3, [r3, #12]
 8010e38:	60bb      	str	r3, [r7, #8]
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d1ef      	bne.n	8010e20 <tcp_close_shutdown+0x130>
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2200      	movs	r2, #0
 8010e44:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f7ff fea0 	bl	8010b8c <tcp_free>
      break;
 8010e4c:	e01a      	b.n	8010e84 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f7ff ff14 	bl	8010c7c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010e54:	6879      	ldr	r1, [r7, #4]
 8010e56:	4816      	ldr	r0, [pc, #88]	; (8010eb0 <tcp_close_shutdown+0x1c0>)
 8010e58:	f001 fb7a 	bl	8012550 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f7ff feb1 	bl	8010bc4 <tcp_free_listen>
      break;
 8010e62:	e00f      	b.n	8010e84 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010e64:	6879      	ldr	r1, [r7, #4]
 8010e66:	480e      	ldr	r0, [pc, #56]	; (8010ea0 <tcp_close_shutdown+0x1b0>)
 8010e68:	f001 fb72 	bl	8012550 <tcp_pcb_remove>
 8010e6c:	4b0d      	ldr	r3, [pc, #52]	; (8010ea4 <tcp_close_shutdown+0x1b4>)
 8010e6e:	2201      	movs	r2, #1
 8010e70:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f7ff fe8a 	bl	8010b8c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010e78:	e004      	b.n	8010e84 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010e7a:	6878      	ldr	r0, [r7, #4]
 8010e7c:	f000 f81a 	bl	8010eb4 <tcp_close_shutdown_fin>
 8010e80:	4603      	mov	r3, r0
 8010e82:	e000      	b.n	8010e86 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8010e84:	2300      	movs	r3, #0
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3710      	adds	r7, #16
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8010e8e:	bf00      	nop
 8010e90:	0801c6f4 	.word	0x0801c6f4
 8010e94:	0801c7c8 	.word	0x0801c7c8
 8010e98:	0801c738 	.word	0x0801c738
 8010e9c:	0801c7e8 	.word	0x0801c7e8
 8010ea0:	2000dba4 	.word	0x2000dba4
 8010ea4:	2000dba0 	.word	0x2000dba0
 8010ea8:	2000dbb8 	.word	0x2000dbb8
 8010eac:	2000dbb0 	.word	0x2000dbb0
 8010eb0:	2000dbac 	.word	0x2000dbac

08010eb4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b084      	sub	sp, #16
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d106      	bne.n	8010ed0 <tcp_close_shutdown_fin+0x1c>
 8010ec2:	4b2e      	ldr	r3, [pc, #184]	; (8010f7c <tcp_close_shutdown_fin+0xc8>)
 8010ec4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010ec8:	492d      	ldr	r1, [pc, #180]	; (8010f80 <tcp_close_shutdown_fin+0xcc>)
 8010eca:	482e      	ldr	r0, [pc, #184]	; (8010f84 <tcp_close_shutdown_fin+0xd0>)
 8010ecc:	f009 f95a 	bl	801a184 <iprintf>

  switch (pcb->state) {
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	7d1b      	ldrb	r3, [r3, #20]
 8010ed4:	2b07      	cmp	r3, #7
 8010ed6:	d020      	beq.n	8010f1a <tcp_close_shutdown_fin+0x66>
 8010ed8:	2b07      	cmp	r3, #7
 8010eda:	dc2b      	bgt.n	8010f34 <tcp_close_shutdown_fin+0x80>
 8010edc:	2b03      	cmp	r3, #3
 8010ede:	d002      	beq.n	8010ee6 <tcp_close_shutdown_fin+0x32>
 8010ee0:	2b04      	cmp	r3, #4
 8010ee2:	d00d      	beq.n	8010f00 <tcp_close_shutdown_fin+0x4c>
 8010ee4:	e026      	b.n	8010f34 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f004 fe0c 	bl	8015b04 <tcp_send_fin>
 8010eec:	4603      	mov	r3, r0
 8010eee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d11f      	bne.n	8010f38 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2205      	movs	r2, #5
 8010efc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010efe:	e01b      	b.n	8010f38 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f004 fdff 	bl	8015b04 <tcp_send_fin>
 8010f06:	4603      	mov	r3, r0
 8010f08:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d114      	bne.n	8010f3c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	2205      	movs	r2, #5
 8010f16:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010f18:	e010      	b.n	8010f3c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f004 fdf2 	bl	8015b04 <tcp_send_fin>
 8010f20:	4603      	mov	r3, r0
 8010f22:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d109      	bne.n	8010f40 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2209      	movs	r2, #9
 8010f30:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010f32:	e005      	b.n	8010f40 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010f34:	2300      	movs	r3, #0
 8010f36:	e01c      	b.n	8010f72 <tcp_close_shutdown_fin+0xbe>
      break;
 8010f38:	bf00      	nop
 8010f3a:	e002      	b.n	8010f42 <tcp_close_shutdown_fin+0x8e>
      break;
 8010f3c:	bf00      	nop
 8010f3e:	e000      	b.n	8010f42 <tcp_close_shutdown_fin+0x8e>
      break;
 8010f40:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d103      	bne.n	8010f52 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f004 ff18 	bl	8015d80 <tcp_output>
 8010f50:	e00d      	b.n	8010f6e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8010f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f5a:	d108      	bne.n	8010f6e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	8b5b      	ldrh	r3, [r3, #26]
 8010f60:	f043 0308 	orr.w	r3, r3, #8
 8010f64:	b29a      	uxth	r2, r3
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	e001      	b.n	8010f72 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	3710      	adds	r7, #16
 8010f76:	46bd      	mov	sp, r7
 8010f78:	bd80      	pop	{r7, pc}
 8010f7a:	bf00      	nop
 8010f7c:	0801c6f4 	.word	0x0801c6f4
 8010f80:	0801c7a4 	.word	0x0801c7a4
 8010f84:	0801c738 	.word	0x0801c738

08010f88 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d109      	bne.n	8010faa <tcp_close+0x22>
 8010f96:	4b0f      	ldr	r3, [pc, #60]	; (8010fd4 <tcp_close+0x4c>)
 8010f98:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010f9c:	490e      	ldr	r1, [pc, #56]	; (8010fd8 <tcp_close+0x50>)
 8010f9e:	480f      	ldr	r0, [pc, #60]	; (8010fdc <tcp_close+0x54>)
 8010fa0:	f009 f8f0 	bl	801a184 <iprintf>
 8010fa4:	f06f 030f 	mvn.w	r3, #15
 8010fa8:	e00f      	b.n	8010fca <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	7d1b      	ldrb	r3, [r3, #20]
 8010fae:	2b01      	cmp	r3, #1
 8010fb0:	d006      	beq.n	8010fc0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	8b5b      	ldrh	r3, [r3, #26]
 8010fb6:	f043 0310 	orr.w	r3, r3, #16
 8010fba:	b29a      	uxth	r2, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010fc0:	2101      	movs	r1, #1
 8010fc2:	6878      	ldr	r0, [r7, #4]
 8010fc4:	f7ff fe94 	bl	8010cf0 <tcp_close_shutdown>
 8010fc8:	4603      	mov	r3, r0
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3708      	adds	r7, #8
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	bf00      	nop
 8010fd4:	0801c6f4 	.word	0x0801c6f4
 8010fd8:	0801c804 	.word	0x0801c804
 8010fdc:	0801c738 	.word	0x0801c738

08010fe0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b084      	sub	sp, #16
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	60f8      	str	r0, [r7, #12]
 8010fe8:	60b9      	str	r1, [r7, #8]
 8010fea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d109      	bne.n	8011006 <tcp_shutdown+0x26>
 8010ff2:	4b26      	ldr	r3, [pc, #152]	; (801108c <tcp_shutdown+0xac>)
 8010ff4:	f240 2207 	movw	r2, #519	; 0x207
 8010ff8:	4925      	ldr	r1, [pc, #148]	; (8011090 <tcp_shutdown+0xb0>)
 8010ffa:	4826      	ldr	r0, [pc, #152]	; (8011094 <tcp_shutdown+0xb4>)
 8010ffc:	f009 f8c2 	bl	801a184 <iprintf>
 8011000:	f06f 030f 	mvn.w	r3, #15
 8011004:	e03d      	b.n	8011082 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	7d1b      	ldrb	r3, [r3, #20]
 801100a:	2b01      	cmp	r3, #1
 801100c:	d102      	bne.n	8011014 <tcp_shutdown+0x34>
    return ERR_CONN;
 801100e:	f06f 030a 	mvn.w	r3, #10
 8011012:	e036      	b.n	8011082 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d01b      	beq.n	8011052 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	8b5b      	ldrh	r3, [r3, #26]
 801101e:	f043 0310 	orr.w	r3, r3, #16
 8011022:	b29a      	uxth	r2, r3
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d005      	beq.n	801103a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801102e:	2101      	movs	r1, #1
 8011030:	68f8      	ldr	r0, [r7, #12]
 8011032:	f7ff fe5d 	bl	8010cf0 <tcp_close_shutdown>
 8011036:	4603      	mov	r3, r0
 8011038:	e023      	b.n	8011082 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801103e:	2b00      	cmp	r3, #0
 8011040:	d007      	beq.n	8011052 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011046:	4618      	mov	r0, r3
 8011048:	f7ff faf4 	bl	8010634 <pbuf_free>
      pcb->refused_data = NULL;
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	2200      	movs	r2, #0
 8011050:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d013      	beq.n	8011080 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	7d1b      	ldrb	r3, [r3, #20]
 801105c:	2b04      	cmp	r3, #4
 801105e:	dc02      	bgt.n	8011066 <tcp_shutdown+0x86>
 8011060:	2b03      	cmp	r3, #3
 8011062:	da02      	bge.n	801106a <tcp_shutdown+0x8a>
 8011064:	e009      	b.n	801107a <tcp_shutdown+0x9a>
 8011066:	2b07      	cmp	r3, #7
 8011068:	d107      	bne.n	801107a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	b2db      	uxtb	r3, r3
 801106e:	4619      	mov	r1, r3
 8011070:	68f8      	ldr	r0, [r7, #12]
 8011072:	f7ff fe3d 	bl	8010cf0 <tcp_close_shutdown>
 8011076:	4603      	mov	r3, r0
 8011078:	e003      	b.n	8011082 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801107a:	f06f 030a 	mvn.w	r3, #10
 801107e:	e000      	b.n	8011082 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8011080:	2300      	movs	r3, #0
}
 8011082:	4618      	mov	r0, r3
 8011084:	3710      	adds	r7, #16
 8011086:	46bd      	mov	sp, r7
 8011088:	bd80      	pop	{r7, pc}
 801108a:	bf00      	nop
 801108c:	0801c6f4 	.word	0x0801c6f4
 8011090:	0801c81c 	.word	0x0801c81c
 8011094:	0801c738 	.word	0x0801c738

08011098 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b08e      	sub	sp, #56	; 0x38
 801109c:	af04      	add	r7, sp, #16
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d107      	bne.n	80110b8 <tcp_abandon+0x20>
 80110a8:	4b52      	ldr	r3, [pc, #328]	; (80111f4 <tcp_abandon+0x15c>)
 80110aa:	f240 223d 	movw	r2, #573	; 0x23d
 80110ae:	4952      	ldr	r1, [pc, #328]	; (80111f8 <tcp_abandon+0x160>)
 80110b0:	4852      	ldr	r0, [pc, #328]	; (80111fc <tcp_abandon+0x164>)
 80110b2:	f009 f867 	bl	801a184 <iprintf>
 80110b6:	e099      	b.n	80111ec <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	7d1b      	ldrb	r3, [r3, #20]
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d106      	bne.n	80110ce <tcp_abandon+0x36>
 80110c0:	4b4c      	ldr	r3, [pc, #304]	; (80111f4 <tcp_abandon+0x15c>)
 80110c2:	f44f 7210 	mov.w	r2, #576	; 0x240
 80110c6:	494e      	ldr	r1, [pc, #312]	; (8011200 <tcp_abandon+0x168>)
 80110c8:	484c      	ldr	r0, [pc, #304]	; (80111fc <tcp_abandon+0x164>)
 80110ca:	f009 f85b 	bl	801a184 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	7d1b      	ldrb	r3, [r3, #20]
 80110d2:	2b0a      	cmp	r3, #10
 80110d4:	d107      	bne.n	80110e6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80110d6:	6879      	ldr	r1, [r7, #4]
 80110d8:	484a      	ldr	r0, [pc, #296]	; (8011204 <tcp_abandon+0x16c>)
 80110da:	f001 fa39 	bl	8012550 <tcp_pcb_remove>
    tcp_free(pcb);
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f7ff fd54 	bl	8010b8c <tcp_free>
 80110e4:	e082      	b.n	80111ec <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80110e6:	2300      	movs	r3, #0
 80110e8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80110ea:	2300      	movs	r3, #0
 80110ec:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110f2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110f8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011100:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	691b      	ldr	r3, [r3, #16]
 8011106:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	7d1b      	ldrb	r3, [r3, #20]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d126      	bne.n	801115e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	8adb      	ldrh	r3, [r3, #22]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d02e      	beq.n	8011176 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011118:	4b3b      	ldr	r3, [pc, #236]	; (8011208 <tcp_abandon+0x170>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	687a      	ldr	r2, [r7, #4]
 801111e:	429a      	cmp	r2, r3
 8011120:	d105      	bne.n	801112e <tcp_abandon+0x96>
 8011122:	4b39      	ldr	r3, [pc, #228]	; (8011208 <tcp_abandon+0x170>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	68db      	ldr	r3, [r3, #12]
 8011128:	4a37      	ldr	r2, [pc, #220]	; (8011208 <tcp_abandon+0x170>)
 801112a:	6013      	str	r3, [r2, #0]
 801112c:	e013      	b.n	8011156 <tcp_abandon+0xbe>
 801112e:	4b36      	ldr	r3, [pc, #216]	; (8011208 <tcp_abandon+0x170>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	61fb      	str	r3, [r7, #28]
 8011134:	e00c      	b.n	8011150 <tcp_abandon+0xb8>
 8011136:	69fb      	ldr	r3, [r7, #28]
 8011138:	68db      	ldr	r3, [r3, #12]
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	429a      	cmp	r2, r3
 801113e:	d104      	bne.n	801114a <tcp_abandon+0xb2>
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	68da      	ldr	r2, [r3, #12]
 8011144:	69fb      	ldr	r3, [r7, #28]
 8011146:	60da      	str	r2, [r3, #12]
 8011148:	e005      	b.n	8011156 <tcp_abandon+0xbe>
 801114a:	69fb      	ldr	r3, [r7, #28]
 801114c:	68db      	ldr	r3, [r3, #12]
 801114e:	61fb      	str	r3, [r7, #28]
 8011150:	69fb      	ldr	r3, [r7, #28]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d1ef      	bne.n	8011136 <tcp_abandon+0x9e>
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	2200      	movs	r2, #0
 801115a:	60da      	str	r2, [r3, #12]
 801115c:	e00b      	b.n	8011176 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	8adb      	ldrh	r3, [r3, #22]
 8011166:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011168:	6879      	ldr	r1, [r7, #4]
 801116a:	4828      	ldr	r0, [pc, #160]	; (801120c <tcp_abandon+0x174>)
 801116c:	f001 f9f0 	bl	8012550 <tcp_pcb_remove>
 8011170:	4b27      	ldr	r3, [pc, #156]	; (8011210 <tcp_abandon+0x178>)
 8011172:	2201      	movs	r2, #1
 8011174:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801117a:	2b00      	cmp	r3, #0
 801117c:	d004      	beq.n	8011188 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011182:	4618      	mov	r0, r3
 8011184:	f000 fec4 	bl	8011f10 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801118c:	2b00      	cmp	r3, #0
 801118e:	d004      	beq.n	801119a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011194:	4618      	mov	r0, r3
 8011196:	f000 febb 	bl	8011f10 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d004      	beq.n	80111ac <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111a6:	4618      	mov	r0, r3
 80111a8:	f000 feb2 	bl	8011f10 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80111ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d00e      	beq.n	80111d0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80111b2:	6879      	ldr	r1, [r7, #4]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	3304      	adds	r3, #4
 80111b8:	687a      	ldr	r2, [r7, #4]
 80111ba:	8b12      	ldrh	r2, [r2, #24]
 80111bc:	9202      	str	r2, [sp, #8]
 80111be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80111c0:	9201      	str	r2, [sp, #4]
 80111c2:	9300      	str	r3, [sp, #0]
 80111c4:	460b      	mov	r3, r1
 80111c6:	697a      	ldr	r2, [r7, #20]
 80111c8:	69b9      	ldr	r1, [r7, #24]
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f005 fb8c 	bl	80168e8 <tcp_rst>
    }
    last_state = pcb->state;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	7d1b      	ldrb	r3, [r3, #20]
 80111d4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80111d6:	6878      	ldr	r0, [r7, #4]
 80111d8:	f7ff fcd8 	bl	8010b8c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80111dc:	693b      	ldr	r3, [r7, #16]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d004      	beq.n	80111ec <tcp_abandon+0x154>
 80111e2:	693b      	ldr	r3, [r7, #16]
 80111e4:	f06f 010c 	mvn.w	r1, #12
 80111e8:	68f8      	ldr	r0, [r7, #12]
 80111ea:	4798      	blx	r3
  }
}
 80111ec:	3728      	adds	r7, #40	; 0x28
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}
 80111f2:	bf00      	nop
 80111f4:	0801c6f4 	.word	0x0801c6f4
 80111f8:	0801c838 	.word	0x0801c838
 80111fc:	0801c738 	.word	0x0801c738
 8011200:	0801c854 	.word	0x0801c854
 8011204:	2000dbb4 	.word	0x2000dbb4
 8011208:	2000dbb0 	.word	0x2000dbb0
 801120c:	2000dba4 	.word	0x2000dba4
 8011210:	2000dba0 	.word	0x2000dba0

08011214 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b082      	sub	sp, #8
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801121c:	2101      	movs	r1, #1
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f7ff ff3a 	bl	8011098 <tcp_abandon>
}
 8011224:	bf00      	nop
 8011226:	3708      	adds	r7, #8
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}

0801122c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b088      	sub	sp, #32
 8011230:	af00      	add	r7, sp, #0
 8011232:	60f8      	str	r0, [r7, #12]
 8011234:	60b9      	str	r1, [r7, #8]
 8011236:	4613      	mov	r3, r2
 8011238:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801123a:	2304      	movs	r3, #4
 801123c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d101      	bne.n	8011248 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8011244:	4b3e      	ldr	r3, [pc, #248]	; (8011340 <tcp_bind+0x114>)
 8011246:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d109      	bne.n	8011262 <tcp_bind+0x36>
 801124e:	4b3d      	ldr	r3, [pc, #244]	; (8011344 <tcp_bind+0x118>)
 8011250:	f240 22a9 	movw	r2, #681	; 0x2a9
 8011254:	493c      	ldr	r1, [pc, #240]	; (8011348 <tcp_bind+0x11c>)
 8011256:	483d      	ldr	r0, [pc, #244]	; (801134c <tcp_bind+0x120>)
 8011258:	f008 ff94 	bl	801a184 <iprintf>
 801125c:	f06f 030f 	mvn.w	r3, #15
 8011260:	e06a      	b.n	8011338 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	7d1b      	ldrb	r3, [r3, #20]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d009      	beq.n	801127e <tcp_bind+0x52>
 801126a:	4b36      	ldr	r3, [pc, #216]	; (8011344 <tcp_bind+0x118>)
 801126c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011270:	4937      	ldr	r1, [pc, #220]	; (8011350 <tcp_bind+0x124>)
 8011272:	4836      	ldr	r0, [pc, #216]	; (801134c <tcp_bind+0x120>)
 8011274:	f008 ff86 	bl	801a184 <iprintf>
 8011278:	f06f 0305 	mvn.w	r3, #5
 801127c:	e05c      	b.n	8011338 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801127e:	88fb      	ldrh	r3, [r7, #6]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d109      	bne.n	8011298 <tcp_bind+0x6c>
    port = tcp_new_port();
 8011284:	f000 f9de 	bl	8011644 <tcp_new_port>
 8011288:	4603      	mov	r3, r0
 801128a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801128c:	88fb      	ldrh	r3, [r7, #6]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d135      	bne.n	80112fe <tcp_bind+0xd2>
      return ERR_BUF;
 8011292:	f06f 0301 	mvn.w	r3, #1
 8011296:	e04f      	b.n	8011338 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8011298:	2300      	movs	r3, #0
 801129a:	61fb      	str	r3, [r7, #28]
 801129c:	e02b      	b.n	80112f6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801129e:	4a2d      	ldr	r2, [pc, #180]	; (8011354 <tcp_bind+0x128>)
 80112a0:	69fb      	ldr	r3, [r7, #28]
 80112a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	61bb      	str	r3, [r7, #24]
 80112aa:	e01e      	b.n	80112ea <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80112ac:	69bb      	ldr	r3, [r7, #24]
 80112ae:	8adb      	ldrh	r3, [r3, #22]
 80112b0:	88fa      	ldrh	r2, [r7, #6]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d116      	bne.n	80112e4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80112b6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d010      	beq.n	80112de <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80112bc:	69bb      	ldr	r3, [r7, #24]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d00c      	beq.n	80112de <tcp_bind+0xb2>
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d009      	beq.n	80112de <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d005      	beq.n	80112de <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80112d2:	69bb      	ldr	r3, [r7, #24]
 80112d4:	681a      	ldr	r2, [r3, #0]
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80112da:	429a      	cmp	r2, r3
 80112dc:	d102      	bne.n	80112e4 <tcp_bind+0xb8>
              return ERR_USE;
 80112de:	f06f 0307 	mvn.w	r3, #7
 80112e2:	e029      	b.n	8011338 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80112e4:	69bb      	ldr	r3, [r7, #24]
 80112e6:	68db      	ldr	r3, [r3, #12]
 80112e8:	61bb      	str	r3, [r7, #24]
 80112ea:	69bb      	ldr	r3, [r7, #24]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d1dd      	bne.n	80112ac <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80112f0:	69fb      	ldr	r3, [r7, #28]
 80112f2:	3301      	adds	r3, #1
 80112f4:	61fb      	str	r3, [r7, #28]
 80112f6:	69fa      	ldr	r2, [r7, #28]
 80112f8:	697b      	ldr	r3, [r7, #20]
 80112fa:	429a      	cmp	r2, r3
 80112fc:	dbcf      	blt.n	801129e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d00c      	beq.n	801131e <tcp_bind+0xf2>
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d008      	beq.n	801131e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d002      	beq.n	8011318 <tcp_bind+0xec>
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	e000      	b.n	801131a <tcp_bind+0xee>
 8011318:	2300      	movs	r3, #0
 801131a:	68fa      	ldr	r2, [r7, #12]
 801131c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	88fa      	ldrh	r2, [r7, #6]
 8011322:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8011324:	4b0c      	ldr	r3, [pc, #48]	; (8011358 <tcp_bind+0x12c>)
 8011326:	681a      	ldr	r2, [r3, #0]
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	60da      	str	r2, [r3, #12]
 801132c:	4a0a      	ldr	r2, [pc, #40]	; (8011358 <tcp_bind+0x12c>)
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	6013      	str	r3, [r2, #0]
 8011332:	f005 fc9b 	bl	8016c6c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8011336:	2300      	movs	r3, #0
}
 8011338:	4618      	mov	r0, r3
 801133a:	3720      	adds	r7, #32
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}
 8011340:	0801e824 	.word	0x0801e824
 8011344:	0801c6f4 	.word	0x0801c6f4
 8011348:	0801c888 	.word	0x0801c888
 801134c:	0801c738 	.word	0x0801c738
 8011350:	0801c8a0 	.word	0x0801c8a0
 8011354:	0801e7fc 	.word	0x0801e7fc
 8011358:	2000dbb0 	.word	0x2000dbb0

0801135c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	60f8      	str	r0, [r7, #12]
 8011364:	60b9      	str	r1, [r7, #8]
 8011366:	4613      	mov	r3, r2
 8011368:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d106      	bne.n	801137e <tcp_accept_null+0x22>
 8011370:	4b07      	ldr	r3, [pc, #28]	; (8011390 <tcp_accept_null+0x34>)
 8011372:	f240 320f 	movw	r2, #783	; 0x30f
 8011376:	4907      	ldr	r1, [pc, #28]	; (8011394 <tcp_accept_null+0x38>)
 8011378:	4807      	ldr	r0, [pc, #28]	; (8011398 <tcp_accept_null+0x3c>)
 801137a:	f008 ff03 	bl	801a184 <iprintf>

  tcp_abort(pcb);
 801137e:	68b8      	ldr	r0, [r7, #8]
 8011380:	f7ff ff48 	bl	8011214 <tcp_abort>

  return ERR_ABRT;
 8011384:	f06f 030c 	mvn.w	r3, #12
}
 8011388:	4618      	mov	r0, r3
 801138a:	3710      	adds	r7, #16
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}
 8011390:	0801c6f4 	.word	0x0801c6f4
 8011394:	0801c8c8 	.word	0x0801c8c8
 8011398:	0801c738 	.word	0x0801c738

0801139c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b088      	sub	sp, #32
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	60f8      	str	r0, [r7, #12]
 80113a4:	460b      	mov	r3, r1
 80113a6:	607a      	str	r2, [r7, #4]
 80113a8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80113aa:	2300      	movs	r3, #0
 80113ac:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d109      	bne.n	80113c8 <tcp_listen_with_backlog_and_err+0x2c>
 80113b4:	4b47      	ldr	r3, [pc, #284]	; (80114d4 <tcp_listen_with_backlog_and_err+0x138>)
 80113b6:	f240 3259 	movw	r2, #857	; 0x359
 80113ba:	4947      	ldr	r1, [pc, #284]	; (80114d8 <tcp_listen_with_backlog_and_err+0x13c>)
 80113bc:	4847      	ldr	r0, [pc, #284]	; (80114dc <tcp_listen_with_backlog_and_err+0x140>)
 80113be:	f008 fee1 	bl	801a184 <iprintf>
 80113c2:	23f0      	movs	r3, #240	; 0xf0
 80113c4:	76fb      	strb	r3, [r7, #27]
 80113c6:	e079      	b.n	80114bc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	7d1b      	ldrb	r3, [r3, #20]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d009      	beq.n	80113e4 <tcp_listen_with_backlog_and_err+0x48>
 80113d0:	4b40      	ldr	r3, [pc, #256]	; (80114d4 <tcp_listen_with_backlog_and_err+0x138>)
 80113d2:	f240 325a 	movw	r2, #858	; 0x35a
 80113d6:	4942      	ldr	r1, [pc, #264]	; (80114e0 <tcp_listen_with_backlog_and_err+0x144>)
 80113d8:	4840      	ldr	r0, [pc, #256]	; (80114dc <tcp_listen_with_backlog_and_err+0x140>)
 80113da:	f008 fed3 	bl	801a184 <iprintf>
 80113de:	23f1      	movs	r3, #241	; 0xf1
 80113e0:	76fb      	strb	r3, [r7, #27]
 80113e2:	e06b      	b.n	80114bc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	7d1b      	ldrb	r3, [r3, #20]
 80113e8:	2b01      	cmp	r3, #1
 80113ea:	d104      	bne.n	80113f6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80113f0:	23f7      	movs	r3, #247	; 0xf7
 80113f2:	76fb      	strb	r3, [r7, #27]
    goto done;
 80113f4:	e062      	b.n	80114bc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80113f6:	2002      	movs	r0, #2
 80113f8:	f7fe fa26 	bl	800f848 <memp_malloc>
 80113fc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80113fe:	69fb      	ldr	r3, [r7, #28]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d102      	bne.n	801140a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8011404:	23ff      	movs	r3, #255	; 0xff
 8011406:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011408:	e058      	b.n	80114bc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	691a      	ldr	r2, [r3, #16]
 801140e:	69fb      	ldr	r3, [r7, #28]
 8011410:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	8ada      	ldrh	r2, [r3, #22]
 8011416:	69fb      	ldr	r3, [r7, #28]
 8011418:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801141a:	69fb      	ldr	r3, [r7, #28]
 801141c:	2201      	movs	r2, #1
 801141e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	7d5a      	ldrb	r2, [r3, #21]
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	7a5a      	ldrb	r2, [r3, #9]
 801142c:	69fb      	ldr	r3, [r7, #28]
 801142e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8011430:	69fb      	ldr	r3, [r7, #28]
 8011432:	2200      	movs	r2, #0
 8011434:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	7ada      	ldrb	r2, [r3, #11]
 801143a:	69fb      	ldr	r3, [r7, #28]
 801143c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	7a9a      	ldrb	r2, [r3, #10]
 8011442:	69fb      	ldr	r3, [r7, #28]
 8011444:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	681a      	ldr	r2, [r3, #0]
 801144a:	69fb      	ldr	r3, [r7, #28]
 801144c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	8adb      	ldrh	r3, [r3, #22]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d021      	beq.n	801149a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8011456:	4b23      	ldr	r3, [pc, #140]	; (80114e4 <tcp_listen_with_backlog_and_err+0x148>)
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	68fa      	ldr	r2, [r7, #12]
 801145c:	429a      	cmp	r2, r3
 801145e:	d105      	bne.n	801146c <tcp_listen_with_backlog_and_err+0xd0>
 8011460:	4b20      	ldr	r3, [pc, #128]	; (80114e4 <tcp_listen_with_backlog_and_err+0x148>)
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	68db      	ldr	r3, [r3, #12]
 8011466:	4a1f      	ldr	r2, [pc, #124]	; (80114e4 <tcp_listen_with_backlog_and_err+0x148>)
 8011468:	6013      	str	r3, [r2, #0]
 801146a:	e013      	b.n	8011494 <tcp_listen_with_backlog_and_err+0xf8>
 801146c:	4b1d      	ldr	r3, [pc, #116]	; (80114e4 <tcp_listen_with_backlog_and_err+0x148>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	617b      	str	r3, [r7, #20]
 8011472:	e00c      	b.n	801148e <tcp_listen_with_backlog_and_err+0xf2>
 8011474:	697b      	ldr	r3, [r7, #20]
 8011476:	68db      	ldr	r3, [r3, #12]
 8011478:	68fa      	ldr	r2, [r7, #12]
 801147a:	429a      	cmp	r2, r3
 801147c:	d104      	bne.n	8011488 <tcp_listen_with_backlog_and_err+0xec>
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	68da      	ldr	r2, [r3, #12]
 8011482:	697b      	ldr	r3, [r7, #20]
 8011484:	60da      	str	r2, [r3, #12]
 8011486:	e005      	b.n	8011494 <tcp_listen_with_backlog_and_err+0xf8>
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	68db      	ldr	r3, [r3, #12]
 801148c:	617b      	str	r3, [r7, #20]
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d1ef      	bne.n	8011474 <tcp_listen_with_backlog_and_err+0xd8>
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	2200      	movs	r2, #0
 8011498:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801149a:	68f8      	ldr	r0, [r7, #12]
 801149c:	f7ff fb76 	bl	8010b8c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80114a0:	69fb      	ldr	r3, [r7, #28]
 80114a2:	4a11      	ldr	r2, [pc, #68]	; (80114e8 <tcp_listen_with_backlog_and_err+0x14c>)
 80114a4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80114a6:	4b11      	ldr	r3, [pc, #68]	; (80114ec <tcp_listen_with_backlog_and_err+0x150>)
 80114a8:	681a      	ldr	r2, [r3, #0]
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	60da      	str	r2, [r3, #12]
 80114ae:	4a0f      	ldr	r2, [pc, #60]	; (80114ec <tcp_listen_with_backlog_and_err+0x150>)
 80114b0:	69fb      	ldr	r3, [r7, #28]
 80114b2:	6013      	str	r3, [r2, #0]
 80114b4:	f005 fbda 	bl	8016c6c <tcp_timer_needed>
  res = ERR_OK;
 80114b8:	2300      	movs	r3, #0
 80114ba:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d002      	beq.n	80114c8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	7efa      	ldrb	r2, [r7, #27]
 80114c6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80114c8:	69fb      	ldr	r3, [r7, #28]
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3720      	adds	r7, #32
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
 80114d2:	bf00      	nop
 80114d4:	0801c6f4 	.word	0x0801c6f4
 80114d8:	0801c8e8 	.word	0x0801c8e8
 80114dc:	0801c738 	.word	0x0801c738
 80114e0:	0801c918 	.word	0x0801c918
 80114e4:	2000dbb0 	.word	0x2000dbb0
 80114e8:	0801135d 	.word	0x0801135d
 80114ec:	2000dbac 	.word	0x2000dbac

080114f0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d106      	bne.n	801150c <tcp_update_rcv_ann_wnd+0x1c>
 80114fe:	4b25      	ldr	r3, [pc, #148]	; (8011594 <tcp_update_rcv_ann_wnd+0xa4>)
 8011500:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011504:	4924      	ldr	r1, [pc, #144]	; (8011598 <tcp_update_rcv_ann_wnd+0xa8>)
 8011506:	4825      	ldr	r0, [pc, #148]	; (801159c <tcp_update_rcv_ann_wnd+0xac>)
 8011508:	f008 fe3c 	bl	801a184 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011510:	687a      	ldr	r2, [r7, #4]
 8011512:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011514:	4413      	add	r3, r2
 8011516:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011520:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011524:	bf28      	it	cs
 8011526:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801152a:	b292      	uxth	r2, r2
 801152c:	4413      	add	r3, r2
 801152e:	68fa      	ldr	r2, [r7, #12]
 8011530:	1ad3      	subs	r3, r2, r3
 8011532:	2b00      	cmp	r3, #0
 8011534:	db08      	blt.n	8011548 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011542:	68fa      	ldr	r2, [r7, #12]
 8011544:	1ad3      	subs	r3, r2, r3
 8011546:	e020      	b.n	801158a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011550:	1ad3      	subs	r3, r2, r3
 8011552:	2b00      	cmp	r3, #0
 8011554:	dd03      	ble.n	801155e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2200      	movs	r2, #0
 801155a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801155c:	e014      	b.n	8011588 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011566:	1ad3      	subs	r3, r2, r3
 8011568:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011570:	d306      	bcc.n	8011580 <tcp_update_rcv_ann_wnd+0x90>
 8011572:	4b08      	ldr	r3, [pc, #32]	; (8011594 <tcp_update_rcv_ann_wnd+0xa4>)
 8011574:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011578:	4909      	ldr	r1, [pc, #36]	; (80115a0 <tcp_update_rcv_ann_wnd+0xb0>)
 801157a:	4808      	ldr	r0, [pc, #32]	; (801159c <tcp_update_rcv_ann_wnd+0xac>)
 801157c:	f008 fe02 	bl	801a184 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	b29a      	uxth	r2, r3
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011588:	2300      	movs	r3, #0
  }
}
 801158a:	4618      	mov	r0, r3
 801158c:	3710      	adds	r7, #16
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
 8011592:	bf00      	nop
 8011594:	0801c6f4 	.word	0x0801c6f4
 8011598:	0801c950 	.word	0x0801c950
 801159c:	0801c738 	.word	0x0801c738
 80115a0:	0801c974 	.word	0x0801c974

080115a4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b084      	sub	sp, #16
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
 80115ac:	460b      	mov	r3, r1
 80115ae:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d107      	bne.n	80115c6 <tcp_recved+0x22>
 80115b6:	4b1f      	ldr	r3, [pc, #124]	; (8011634 <tcp_recved+0x90>)
 80115b8:	f240 32cf 	movw	r2, #975	; 0x3cf
 80115bc:	491e      	ldr	r1, [pc, #120]	; (8011638 <tcp_recved+0x94>)
 80115be:	481f      	ldr	r0, [pc, #124]	; (801163c <tcp_recved+0x98>)
 80115c0:	f008 fde0 	bl	801a184 <iprintf>
 80115c4:	e032      	b.n	801162c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	7d1b      	ldrb	r3, [r3, #20]
 80115ca:	2b01      	cmp	r3, #1
 80115cc:	d106      	bne.n	80115dc <tcp_recved+0x38>
 80115ce:	4b19      	ldr	r3, [pc, #100]	; (8011634 <tcp_recved+0x90>)
 80115d0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80115d4:	491a      	ldr	r1, [pc, #104]	; (8011640 <tcp_recved+0x9c>)
 80115d6:	4819      	ldr	r0, [pc, #100]	; (801163c <tcp_recved+0x98>)
 80115d8:	f008 fdd4 	bl	801a184 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80115e0:	887b      	ldrh	r3, [r7, #2]
 80115e2:	4413      	add	r3, r2
 80115e4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80115e6:	89fb      	ldrh	r3, [r7, #14]
 80115e8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80115ec:	d804      	bhi.n	80115f8 <tcp_recved+0x54>
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80115f2:	89fa      	ldrh	r2, [r7, #14]
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d204      	bcs.n	8011602 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80115fe:	851a      	strh	r2, [r3, #40]	; 0x28
 8011600:	e002      	b.n	8011608 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	89fa      	ldrh	r2, [r7, #14]
 8011606:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	f7ff ff71 	bl	80114f0 <tcp_update_rcv_ann_wnd>
 801160e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011616:	d309      	bcc.n	801162c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	8b5b      	ldrh	r3, [r3, #26]
 801161c:	f043 0302 	orr.w	r3, r3, #2
 8011620:	b29a      	uxth	r2, r3
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f004 fbaa 	bl	8015d80 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801162c:	3710      	adds	r7, #16
 801162e:	46bd      	mov	sp, r7
 8011630:	bd80      	pop	{r7, pc}
 8011632:	bf00      	nop
 8011634:	0801c6f4 	.word	0x0801c6f4
 8011638:	0801c990 	.word	0x0801c990
 801163c:	0801c738 	.word	0x0801c738
 8011640:	0801c9a8 	.word	0x0801c9a8

08011644 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8011644:	b480      	push	{r7}
 8011646:	b083      	sub	sp, #12
 8011648:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801164a:	2300      	movs	r3, #0
 801164c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801164e:	4b1e      	ldr	r3, [pc, #120]	; (80116c8 <tcp_new_port+0x84>)
 8011650:	881b      	ldrh	r3, [r3, #0]
 8011652:	3301      	adds	r3, #1
 8011654:	b29a      	uxth	r2, r3
 8011656:	4b1c      	ldr	r3, [pc, #112]	; (80116c8 <tcp_new_port+0x84>)
 8011658:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801165a:	4b1b      	ldr	r3, [pc, #108]	; (80116c8 <tcp_new_port+0x84>)
 801165c:	881b      	ldrh	r3, [r3, #0]
 801165e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011662:	4293      	cmp	r3, r2
 8011664:	d103      	bne.n	801166e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8011666:	4b18      	ldr	r3, [pc, #96]	; (80116c8 <tcp_new_port+0x84>)
 8011668:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801166c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801166e:	2300      	movs	r3, #0
 8011670:	71fb      	strb	r3, [r7, #7]
 8011672:	e01e      	b.n	80116b2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011674:	79fb      	ldrb	r3, [r7, #7]
 8011676:	4a15      	ldr	r2, [pc, #84]	; (80116cc <tcp_new_port+0x88>)
 8011678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	603b      	str	r3, [r7, #0]
 8011680:	e011      	b.n	80116a6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	8ada      	ldrh	r2, [r3, #22]
 8011686:	4b10      	ldr	r3, [pc, #64]	; (80116c8 <tcp_new_port+0x84>)
 8011688:	881b      	ldrh	r3, [r3, #0]
 801168a:	429a      	cmp	r2, r3
 801168c:	d108      	bne.n	80116a0 <tcp_new_port+0x5c>
        n++;
 801168e:	88bb      	ldrh	r3, [r7, #4]
 8011690:	3301      	adds	r3, #1
 8011692:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8011694:	88bb      	ldrh	r3, [r7, #4]
 8011696:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801169a:	d3d8      	bcc.n	801164e <tcp_new_port+0xa>
          return 0;
 801169c:	2300      	movs	r3, #0
 801169e:	e00d      	b.n	80116bc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	68db      	ldr	r3, [r3, #12]
 80116a4:	603b      	str	r3, [r7, #0]
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d1ea      	bne.n	8011682 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80116ac:	79fb      	ldrb	r3, [r7, #7]
 80116ae:	3301      	adds	r3, #1
 80116b0:	71fb      	strb	r3, [r7, #7]
 80116b2:	79fb      	ldrb	r3, [r7, #7]
 80116b4:	2b03      	cmp	r3, #3
 80116b6:	d9dd      	bls.n	8011674 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80116b8:	4b03      	ldr	r3, [pc, #12]	; (80116c8 <tcp_new_port+0x84>)
 80116ba:	881b      	ldrh	r3, [r3, #0]
}
 80116bc:	4618      	mov	r0, r3
 80116be:	370c      	adds	r7, #12
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr
 80116c8:	20000010 	.word	0x20000010
 80116cc:	0801e7fc 	.word	0x0801e7fc

080116d0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80116d0:	b5b0      	push	{r4, r5, r7, lr}
 80116d2:	b090      	sub	sp, #64	; 0x40
 80116d4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80116d6:	2300      	movs	r3, #0
 80116d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80116dc:	4b94      	ldr	r3, [pc, #592]	; (8011930 <tcp_slowtmr+0x260>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	3301      	adds	r3, #1
 80116e2:	4a93      	ldr	r2, [pc, #588]	; (8011930 <tcp_slowtmr+0x260>)
 80116e4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80116e6:	4b93      	ldr	r3, [pc, #588]	; (8011934 <tcp_slowtmr+0x264>)
 80116e8:	781b      	ldrb	r3, [r3, #0]
 80116ea:	3301      	adds	r3, #1
 80116ec:	b2da      	uxtb	r2, r3
 80116ee:	4b91      	ldr	r3, [pc, #580]	; (8011934 <tcp_slowtmr+0x264>)
 80116f0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80116f2:	2300      	movs	r3, #0
 80116f4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80116f6:	4b90      	ldr	r3, [pc, #576]	; (8011938 <tcp_slowtmr+0x268>)
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80116fc:	e29d      	b.n	8011c3a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80116fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011700:	7d1b      	ldrb	r3, [r3, #20]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d106      	bne.n	8011714 <tcp_slowtmr+0x44>
 8011706:	4b8d      	ldr	r3, [pc, #564]	; (801193c <tcp_slowtmr+0x26c>)
 8011708:	f240 42be 	movw	r2, #1214	; 0x4be
 801170c:	498c      	ldr	r1, [pc, #560]	; (8011940 <tcp_slowtmr+0x270>)
 801170e:	488d      	ldr	r0, [pc, #564]	; (8011944 <tcp_slowtmr+0x274>)
 8011710:	f008 fd38 	bl	801a184 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011716:	7d1b      	ldrb	r3, [r3, #20]
 8011718:	2b01      	cmp	r3, #1
 801171a:	d106      	bne.n	801172a <tcp_slowtmr+0x5a>
 801171c:	4b87      	ldr	r3, [pc, #540]	; (801193c <tcp_slowtmr+0x26c>)
 801171e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8011722:	4989      	ldr	r1, [pc, #548]	; (8011948 <tcp_slowtmr+0x278>)
 8011724:	4887      	ldr	r0, [pc, #540]	; (8011944 <tcp_slowtmr+0x274>)
 8011726:	f008 fd2d 	bl	801a184 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801172a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801172c:	7d1b      	ldrb	r3, [r3, #20]
 801172e:	2b0a      	cmp	r3, #10
 8011730:	d106      	bne.n	8011740 <tcp_slowtmr+0x70>
 8011732:	4b82      	ldr	r3, [pc, #520]	; (801193c <tcp_slowtmr+0x26c>)
 8011734:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011738:	4984      	ldr	r1, [pc, #528]	; (801194c <tcp_slowtmr+0x27c>)
 801173a:	4882      	ldr	r0, [pc, #520]	; (8011944 <tcp_slowtmr+0x274>)
 801173c:	f008 fd22 	bl	801a184 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011742:	7f9a      	ldrb	r2, [r3, #30]
 8011744:	4b7b      	ldr	r3, [pc, #492]	; (8011934 <tcp_slowtmr+0x264>)
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	429a      	cmp	r2, r3
 801174a:	d105      	bne.n	8011758 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801174c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801174e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011752:	68db      	ldr	r3, [r3, #12]
 8011754:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011756:	e270      	b.n	8011c3a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011758:	4b76      	ldr	r3, [pc, #472]	; (8011934 <tcp_slowtmr+0x264>)
 801175a:	781a      	ldrb	r2, [r3, #0]
 801175c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801175e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011760:	2300      	movs	r3, #0
 8011762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011766:	2300      	movs	r3, #0
 8011768:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801176c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801176e:	7d1b      	ldrb	r3, [r3, #20]
 8011770:	2b02      	cmp	r3, #2
 8011772:	d10a      	bne.n	801178a <tcp_slowtmr+0xba>
 8011774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801177a:	2b05      	cmp	r3, #5
 801177c:	d905      	bls.n	801178a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801177e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011782:	3301      	adds	r3, #1
 8011784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011788:	e11e      	b.n	80119c8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011790:	2b0b      	cmp	r3, #11
 8011792:	d905      	bls.n	80117a0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011798:	3301      	adds	r3, #1
 801179a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801179e:	e113      	b.n	80119c8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80117a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d075      	beq.n	8011896 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80117aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d006      	beq.n	80117c0 <tcp_slowtmr+0xf0>
 80117b2:	4b62      	ldr	r3, [pc, #392]	; (801193c <tcp_slowtmr+0x26c>)
 80117b4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80117b8:	4965      	ldr	r1, [pc, #404]	; (8011950 <tcp_slowtmr+0x280>)
 80117ba:	4862      	ldr	r0, [pc, #392]	; (8011944 <tcp_slowtmr+0x274>)
 80117bc:	f008 fce2 	bl	801a184 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80117c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d106      	bne.n	80117d6 <tcp_slowtmr+0x106>
 80117c8:	4b5c      	ldr	r3, [pc, #368]	; (801193c <tcp_slowtmr+0x26c>)
 80117ca:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80117ce:	4961      	ldr	r1, [pc, #388]	; (8011954 <tcp_slowtmr+0x284>)
 80117d0:	485c      	ldr	r0, [pc, #368]	; (8011944 <tcp_slowtmr+0x274>)
 80117d2:	f008 fcd7 	bl	801a184 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80117d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80117dc:	2b0b      	cmp	r3, #11
 80117de:	d905      	bls.n	80117ec <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80117e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117e4:	3301      	adds	r3, #1
 80117e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80117ea:	e0ed      	b.n	80119c8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80117ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80117f2:	3b01      	subs	r3, #1
 80117f4:	4a58      	ldr	r2, [pc, #352]	; (8011958 <tcp_slowtmr+0x288>)
 80117f6:	5cd3      	ldrb	r3, [r2, r3]
 80117f8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80117fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011800:	7c7a      	ldrb	r2, [r7, #17]
 8011802:	429a      	cmp	r2, r3
 8011804:	d907      	bls.n	8011816 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011808:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801180c:	3301      	adds	r3, #1
 801180e:	b2da      	uxtb	r2, r3
 8011810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011812:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011818:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801181c:	7c7a      	ldrb	r2, [r7, #17]
 801181e:	429a      	cmp	r2, r3
 8011820:	f200 80d2 	bhi.w	80119c8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011824:	2301      	movs	r3, #1
 8011826:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801182a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801182e:	2b00      	cmp	r3, #0
 8011830:	d108      	bne.n	8011844 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011832:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011834:	f005 f94c 	bl	8016ad0 <tcp_zero_window_probe>
 8011838:	4603      	mov	r3, r0
 801183a:	2b00      	cmp	r3, #0
 801183c:	d014      	beq.n	8011868 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801183e:	2300      	movs	r3, #0
 8011840:	623b      	str	r3, [r7, #32]
 8011842:	e011      	b.n	8011868 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011846:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801184a:	4619      	mov	r1, r3
 801184c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801184e:	f004 f811 	bl	8015874 <tcp_split_unsent_seg>
 8011852:	4603      	mov	r3, r0
 8011854:	2b00      	cmp	r3, #0
 8011856:	d107      	bne.n	8011868 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011858:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801185a:	f004 fa91 	bl	8015d80 <tcp_output>
 801185e:	4603      	mov	r3, r0
 8011860:	2b00      	cmp	r3, #0
 8011862:	d101      	bne.n	8011868 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011864:	2300      	movs	r3, #0
 8011866:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011868:	6a3b      	ldr	r3, [r7, #32]
 801186a:	2b00      	cmp	r3, #0
 801186c:	f000 80ac 	beq.w	80119c8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011872:	2200      	movs	r2, #0
 8011874:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801187a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801187e:	2b06      	cmp	r3, #6
 8011880:	f200 80a2 	bhi.w	80119c8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011886:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801188a:	3301      	adds	r3, #1
 801188c:	b2da      	uxtb	r2, r3
 801188e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011890:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011894:	e098      	b.n	80119c8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011898:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801189c:	2b00      	cmp	r3, #0
 801189e:	db0f      	blt.n	80118c0 <tcp_slowtmr+0x1f0>
 80118a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80118a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80118aa:	4293      	cmp	r3, r2
 80118ac:	d008      	beq.n	80118c0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80118ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80118b4:	b29b      	uxth	r3, r3
 80118b6:	3301      	adds	r3, #1
 80118b8:	b29b      	uxth	r3, r3
 80118ba:	b21a      	sxth	r2, r3
 80118bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118be:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80118c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80118c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80118cc:	429a      	cmp	r2, r3
 80118ce:	db7b      	blt.n	80119c8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80118d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80118d2:	f004 fd47 	bl	8016364 <tcp_rexmit_rto_prepare>
 80118d6:	4603      	mov	r3, r0
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d007      	beq.n	80118ec <tcp_slowtmr+0x21c>
 80118dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d171      	bne.n	80119c8 <tcp_slowtmr+0x2f8>
 80118e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d06d      	beq.n	80119c8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80118ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ee:	7d1b      	ldrb	r3, [r3, #20]
 80118f0:	2b02      	cmp	r3, #2
 80118f2:	d03a      	beq.n	801196a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80118f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80118fa:	2b0c      	cmp	r3, #12
 80118fc:	bf28      	it	cs
 80118fe:	230c      	movcs	r3, #12
 8011900:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011904:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011908:	10db      	asrs	r3, r3, #3
 801190a:	b21b      	sxth	r3, r3
 801190c:	461a      	mov	r2, r3
 801190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011910:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011914:	4413      	add	r3, r2
 8011916:	7efa      	ldrb	r2, [r7, #27]
 8011918:	4910      	ldr	r1, [pc, #64]	; (801195c <tcp_slowtmr+0x28c>)
 801191a:	5c8a      	ldrb	r2, [r1, r2]
 801191c:	4093      	lsls	r3, r2
 801191e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011926:	4293      	cmp	r3, r2
 8011928:	dc1a      	bgt.n	8011960 <tcp_slowtmr+0x290>
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	b21a      	sxth	r2, r3
 801192e:	e019      	b.n	8011964 <tcp_slowtmr+0x294>
 8011930:	2000dba8 	.word	0x2000dba8
 8011934:	20004ac6 	.word	0x20004ac6
 8011938:	2000dba4 	.word	0x2000dba4
 801193c:	0801c6f4 	.word	0x0801c6f4
 8011940:	0801ca38 	.word	0x0801ca38
 8011944:	0801c738 	.word	0x0801c738
 8011948:	0801ca64 	.word	0x0801ca64
 801194c:	0801ca90 	.word	0x0801ca90
 8011950:	0801cac0 	.word	0x0801cac0
 8011954:	0801caf4 	.word	0x0801caf4
 8011958:	0801e7f4 	.word	0x0801e7f4
 801195c:	0801e7e4 	.word	0x0801e7e4
 8011960:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011966:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801196c:	2200      	movs	r2, #0
 801196e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8011970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011972:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011978:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801197c:	4293      	cmp	r3, r2
 801197e:	bf28      	it	cs
 8011980:	4613      	movcs	r3, r2
 8011982:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011984:	8a7b      	ldrh	r3, [r7, #18]
 8011986:	085b      	lsrs	r3, r3, #1
 8011988:	b29a      	uxth	r2, r3
 801198a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801198c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8011990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011992:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801199a:	005b      	lsls	r3, r3, #1
 801199c:	b29b      	uxth	r3, r3
 801199e:	429a      	cmp	r2, r3
 80119a0:	d206      	bcs.n	80119b0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80119a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119a6:	005b      	lsls	r3, r3, #1
 80119a8:	b29a      	uxth	r2, r3
 80119aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80119b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80119b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80119ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119bc:	2200      	movs	r2, #0
 80119be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80119c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80119c4:	f004 fd3e 	bl	8016444 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80119c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ca:	7d1b      	ldrb	r3, [r3, #20]
 80119cc:	2b06      	cmp	r3, #6
 80119ce:	d111      	bne.n	80119f4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80119d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d2:	8b5b      	ldrh	r3, [r3, #26]
 80119d4:	f003 0310 	and.w	r3, r3, #16
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d00b      	beq.n	80119f4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80119dc:	4b9c      	ldr	r3, [pc, #624]	; (8011c50 <tcp_slowtmr+0x580>)
 80119de:	681a      	ldr	r2, [r3, #0]
 80119e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e2:	6a1b      	ldr	r3, [r3, #32]
 80119e4:	1ad3      	subs	r3, r2, r3
 80119e6:	2b28      	cmp	r3, #40	; 0x28
 80119e8:	d904      	bls.n	80119f4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80119ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80119ee:	3301      	adds	r3, #1
 80119f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80119f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f6:	7a5b      	ldrb	r3, [r3, #9]
 80119f8:	f003 0308 	and.w	r3, r3, #8
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d04a      	beq.n	8011a96 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a02:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011a04:	2b04      	cmp	r3, #4
 8011a06:	d003      	beq.n	8011a10 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a0a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011a0c:	2b07      	cmp	r3, #7
 8011a0e:	d142      	bne.n	8011a96 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a10:	4b8f      	ldr	r3, [pc, #572]	; (8011c50 <tcp_slowtmr+0x580>)
 8011a12:	681a      	ldr	r2, [r3, #0]
 8011a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a16:	6a1b      	ldr	r3, [r3, #32]
 8011a18:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a1c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011a20:	4b8c      	ldr	r3, [pc, #560]	; (8011c54 <tcp_slowtmr+0x584>)
 8011a22:	440b      	add	r3, r1
 8011a24:	498c      	ldr	r1, [pc, #560]	; (8011c58 <tcp_slowtmr+0x588>)
 8011a26:	fba1 1303 	umull	r1, r3, r1, r3
 8011a2a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a2c:	429a      	cmp	r2, r3
 8011a2e:	d90a      	bls.n	8011a46 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a34:	3301      	adds	r3, #1
 8011a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011a3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011a3e:	3301      	adds	r3, #1
 8011a40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011a44:	e027      	b.n	8011a96 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a46:	4b82      	ldr	r3, [pc, #520]	; (8011c50 <tcp_slowtmr+0x580>)
 8011a48:	681a      	ldr	r2, [r3, #0]
 8011a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a4c:	6a1b      	ldr	r3, [r3, #32]
 8011a4e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a52:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a58:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	4b7f      	ldr	r3, [pc, #508]	; (8011c5c <tcp_slowtmr+0x58c>)
 8011a60:	fb03 f300 	mul.w	r3, r3, r0
 8011a64:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011a66:	497c      	ldr	r1, [pc, #496]	; (8011c58 <tcp_slowtmr+0x588>)
 8011a68:	fba1 1303 	umull	r1, r3, r1, r3
 8011a6c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	d911      	bls.n	8011a96 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8011a72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a74:	f004 ffec 	bl	8016a50 <tcp_keepalive>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011a7e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d107      	bne.n	8011a96 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a88:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011a8c:	3301      	adds	r3, #1
 8011a8e:	b2da      	uxtb	r2, r3
 8011a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a92:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d011      	beq.n	8011ac2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011a9e:	4b6c      	ldr	r3, [pc, #432]	; (8011c50 <tcp_slowtmr+0x580>)
 8011aa0:	681a      	ldr	r2, [r3, #0]
 8011aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa4:	6a1b      	ldr	r3, [r3, #32]
 8011aa6:	1ad2      	subs	r2, r2, r3
 8011aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aaa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011aae:	4619      	mov	r1, r3
 8011ab0:	460b      	mov	r3, r1
 8011ab2:	005b      	lsls	r3, r3, #1
 8011ab4:	440b      	add	r3, r1
 8011ab6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011ab8:	429a      	cmp	r2, r3
 8011aba:	d302      	bcc.n	8011ac2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011abc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011abe:	f000 feab 	bl	8012818 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac4:	7d1b      	ldrb	r3, [r3, #20]
 8011ac6:	2b03      	cmp	r3, #3
 8011ac8:	d10b      	bne.n	8011ae2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011aca:	4b61      	ldr	r3, [pc, #388]	; (8011c50 <tcp_slowtmr+0x580>)
 8011acc:	681a      	ldr	r2, [r3, #0]
 8011ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad0:	6a1b      	ldr	r3, [r3, #32]
 8011ad2:	1ad3      	subs	r3, r2, r3
 8011ad4:	2b28      	cmp	r3, #40	; 0x28
 8011ad6:	d904      	bls.n	8011ae2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011adc:	3301      	adds	r3, #1
 8011ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ae4:	7d1b      	ldrb	r3, [r3, #20]
 8011ae6:	2b09      	cmp	r3, #9
 8011ae8:	d10b      	bne.n	8011b02 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011aea:	4b59      	ldr	r3, [pc, #356]	; (8011c50 <tcp_slowtmr+0x580>)
 8011aec:	681a      	ldr	r2, [r3, #0]
 8011aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af0:	6a1b      	ldr	r3, [r3, #32]
 8011af2:	1ad3      	subs	r3, r2, r3
 8011af4:	2bf0      	cmp	r3, #240	; 0xf0
 8011af6:	d904      	bls.n	8011b02 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011afc:	3301      	adds	r3, #1
 8011afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d060      	beq.n	8011bcc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b10:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011b12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b14:	f000 fccc 	bl	80124b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d010      	beq.n	8011b40 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011b1e:	4b50      	ldr	r3, [pc, #320]	; (8011c60 <tcp_slowtmr+0x590>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d106      	bne.n	8011b36 <tcp_slowtmr+0x466>
 8011b28:	4b4e      	ldr	r3, [pc, #312]	; (8011c64 <tcp_slowtmr+0x594>)
 8011b2a:	f240 526d 	movw	r2, #1389	; 0x56d
 8011b2e:	494e      	ldr	r1, [pc, #312]	; (8011c68 <tcp_slowtmr+0x598>)
 8011b30:	484e      	ldr	r0, [pc, #312]	; (8011c6c <tcp_slowtmr+0x59c>)
 8011b32:	f008 fb27 	bl	801a184 <iprintf>
        prev->next = pcb->next;
 8011b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b38:	68da      	ldr	r2, [r3, #12]
 8011b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b3c:	60da      	str	r2, [r3, #12]
 8011b3e:	e00f      	b.n	8011b60 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011b40:	4b47      	ldr	r3, [pc, #284]	; (8011c60 <tcp_slowtmr+0x590>)
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d006      	beq.n	8011b58 <tcp_slowtmr+0x488>
 8011b4a:	4b46      	ldr	r3, [pc, #280]	; (8011c64 <tcp_slowtmr+0x594>)
 8011b4c:	f240 5271 	movw	r2, #1393	; 0x571
 8011b50:	4947      	ldr	r1, [pc, #284]	; (8011c70 <tcp_slowtmr+0x5a0>)
 8011b52:	4846      	ldr	r0, [pc, #280]	; (8011c6c <tcp_slowtmr+0x59c>)
 8011b54:	f008 fb16 	bl	801a184 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b5a:	68db      	ldr	r3, [r3, #12]
 8011b5c:	4a40      	ldr	r2, [pc, #256]	; (8011c60 <tcp_slowtmr+0x590>)
 8011b5e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011b60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d013      	beq.n	8011b90 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b6a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b6e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011b70:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b74:	3304      	adds	r3, #4
 8011b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b78:	8ad2      	ldrh	r2, [r2, #22]
 8011b7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b7c:	8b09      	ldrh	r1, [r1, #24]
 8011b7e:	9102      	str	r1, [sp, #8]
 8011b80:	9201      	str	r2, [sp, #4]
 8011b82:	9300      	str	r3, [sp, #0]
 8011b84:	462b      	mov	r3, r5
 8011b86:	4622      	mov	r2, r4
 8011b88:	4601      	mov	r1, r0
 8011b8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b8c:	f004 feac 	bl	80168e8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b92:	691b      	ldr	r3, [r3, #16]
 8011b94:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b98:	7d1b      	ldrb	r3, [r3, #20]
 8011b9a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ba2:	68db      	ldr	r3, [r3, #12]
 8011ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011ba6:	6838      	ldr	r0, [r7, #0]
 8011ba8:	f7fe fff0 	bl	8010b8c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011bac:	4b31      	ldr	r3, [pc, #196]	; (8011c74 <tcp_slowtmr+0x5a4>)
 8011bae:	2200      	movs	r2, #0
 8011bb0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d004      	beq.n	8011bc2 <tcp_slowtmr+0x4f2>
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	f06f 010c 	mvn.w	r1, #12
 8011bbe:	68b8      	ldr	r0, [r7, #8]
 8011bc0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011bc2:	4b2c      	ldr	r3, [pc, #176]	; (8011c74 <tcp_slowtmr+0x5a4>)
 8011bc4:	781b      	ldrb	r3, [r3, #0]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d037      	beq.n	8011c3a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8011bca:	e592      	b.n	80116f2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd2:	68db      	ldr	r3, [r3, #12]
 8011bd4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bd8:	7f1b      	ldrb	r3, [r3, #28]
 8011bda:	3301      	adds	r3, #1
 8011bdc:	b2da      	uxtb	r2, r3
 8011bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011be0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011be4:	7f1a      	ldrb	r2, [r3, #28]
 8011be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011be8:	7f5b      	ldrb	r3, [r3, #29]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d325      	bcc.n	8011c3a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8011bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011bf4:	4b1f      	ldr	r3, [pc, #124]	; (8011c74 <tcp_slowtmr+0x5a4>)
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d00b      	beq.n	8011c1c <tcp_slowtmr+0x54c>
 8011c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c0c:	6912      	ldr	r2, [r2, #16]
 8011c0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011c10:	4610      	mov	r0, r2
 8011c12:	4798      	blx	r3
 8011c14:	4603      	mov	r3, r0
 8011c16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011c1a:	e002      	b.n	8011c22 <tcp_slowtmr+0x552>
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011c22:	4b14      	ldr	r3, [pc, #80]	; (8011c74 <tcp_slowtmr+0x5a4>)
 8011c24:	781b      	ldrb	r3, [r3, #0]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d000      	beq.n	8011c2c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8011c2a:	e562      	b.n	80116f2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011c2c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d102      	bne.n	8011c3a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8011c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c36:	f004 f8a3 	bl	8015d80 <tcp_output>
  while (pcb != NULL) {
 8011c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	f47f ad5e 	bne.w	80116fe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011c42:	2300      	movs	r3, #0
 8011c44:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011c46:	4b0c      	ldr	r3, [pc, #48]	; (8011c78 <tcp_slowtmr+0x5a8>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011c4c:	e069      	b.n	8011d22 <tcp_slowtmr+0x652>
 8011c4e:	bf00      	nop
 8011c50:	2000dba8 	.word	0x2000dba8
 8011c54:	000a4cb8 	.word	0x000a4cb8
 8011c58:	10624dd3 	.word	0x10624dd3
 8011c5c:	000124f8 	.word	0x000124f8
 8011c60:	2000dba4 	.word	0x2000dba4
 8011c64:	0801c6f4 	.word	0x0801c6f4
 8011c68:	0801cb2c 	.word	0x0801cb2c
 8011c6c:	0801c738 	.word	0x0801c738
 8011c70:	0801cb58 	.word	0x0801cb58
 8011c74:	2000dba0 	.word	0x2000dba0
 8011c78:	2000dbb4 	.word	0x2000dbb4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c7e:	7d1b      	ldrb	r3, [r3, #20]
 8011c80:	2b0a      	cmp	r3, #10
 8011c82:	d006      	beq.n	8011c92 <tcp_slowtmr+0x5c2>
 8011c84:	4b2b      	ldr	r3, [pc, #172]	; (8011d34 <tcp_slowtmr+0x664>)
 8011c86:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011c8a:	492b      	ldr	r1, [pc, #172]	; (8011d38 <tcp_slowtmr+0x668>)
 8011c8c:	482b      	ldr	r0, [pc, #172]	; (8011d3c <tcp_slowtmr+0x66c>)
 8011c8e:	f008 fa79 	bl	801a184 <iprintf>
    pcb_remove = 0;
 8011c92:	2300      	movs	r3, #0
 8011c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011c98:	4b29      	ldr	r3, [pc, #164]	; (8011d40 <tcp_slowtmr+0x670>)
 8011c9a:	681a      	ldr	r2, [r3, #0]
 8011c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9e:	6a1b      	ldr	r3, [r3, #32]
 8011ca0:	1ad3      	subs	r3, r2, r3
 8011ca2:	2bf0      	cmp	r3, #240	; 0xf0
 8011ca4:	d904      	bls.n	8011cb0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011caa:	3301      	adds	r3, #1
 8011cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d02f      	beq.n	8011d18 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011cb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cba:	f000 fbf9 	bl	80124b0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d010      	beq.n	8011ce6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011cc4:	4b1f      	ldr	r3, [pc, #124]	; (8011d44 <tcp_slowtmr+0x674>)
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d106      	bne.n	8011cdc <tcp_slowtmr+0x60c>
 8011cce:	4b19      	ldr	r3, [pc, #100]	; (8011d34 <tcp_slowtmr+0x664>)
 8011cd0:	f240 52af 	movw	r2, #1455	; 0x5af
 8011cd4:	491c      	ldr	r1, [pc, #112]	; (8011d48 <tcp_slowtmr+0x678>)
 8011cd6:	4819      	ldr	r0, [pc, #100]	; (8011d3c <tcp_slowtmr+0x66c>)
 8011cd8:	f008 fa54 	bl	801a184 <iprintf>
        prev->next = pcb->next;
 8011cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cde:	68da      	ldr	r2, [r3, #12]
 8011ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce2:	60da      	str	r2, [r3, #12]
 8011ce4:	e00f      	b.n	8011d06 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011ce6:	4b17      	ldr	r3, [pc, #92]	; (8011d44 <tcp_slowtmr+0x674>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011cec:	429a      	cmp	r2, r3
 8011cee:	d006      	beq.n	8011cfe <tcp_slowtmr+0x62e>
 8011cf0:	4b10      	ldr	r3, [pc, #64]	; (8011d34 <tcp_slowtmr+0x664>)
 8011cf2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011cf6:	4915      	ldr	r1, [pc, #84]	; (8011d4c <tcp_slowtmr+0x67c>)
 8011cf8:	4810      	ldr	r0, [pc, #64]	; (8011d3c <tcp_slowtmr+0x66c>)
 8011cfa:	f008 fa43 	bl	801a184 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	4a10      	ldr	r2, [pc, #64]	; (8011d44 <tcp_slowtmr+0x674>)
 8011d04:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d08:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d0c:	68db      	ldr	r3, [r3, #12]
 8011d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011d10:	69f8      	ldr	r0, [r7, #28]
 8011d12:	f7fe ff3b 	bl	8010b8c <tcp_free>
 8011d16:	e004      	b.n	8011d22 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d1a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d1e:	68db      	ldr	r3, [r3, #12]
 8011d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d1a9      	bne.n	8011c7c <tcp_slowtmr+0x5ac>
    }
  }
}
 8011d28:	bf00      	nop
 8011d2a:	bf00      	nop
 8011d2c:	3730      	adds	r7, #48	; 0x30
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bdb0      	pop	{r4, r5, r7, pc}
 8011d32:	bf00      	nop
 8011d34:	0801c6f4 	.word	0x0801c6f4
 8011d38:	0801cb84 	.word	0x0801cb84
 8011d3c:	0801c738 	.word	0x0801c738
 8011d40:	2000dba8 	.word	0x2000dba8
 8011d44:	2000dbb4 	.word	0x2000dbb4
 8011d48:	0801cbb4 	.word	0x0801cbb4
 8011d4c:	0801cbdc 	.word	0x0801cbdc

08011d50 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b082      	sub	sp, #8
 8011d54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011d56:	4b2d      	ldr	r3, [pc, #180]	; (8011e0c <tcp_fasttmr+0xbc>)
 8011d58:	781b      	ldrb	r3, [r3, #0]
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	b2da      	uxtb	r2, r3
 8011d5e:	4b2b      	ldr	r3, [pc, #172]	; (8011e0c <tcp_fasttmr+0xbc>)
 8011d60:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011d62:	4b2b      	ldr	r3, [pc, #172]	; (8011e10 <tcp_fasttmr+0xc0>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011d68:	e048      	b.n	8011dfc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	7f9a      	ldrb	r2, [r3, #30]
 8011d6e:	4b27      	ldr	r3, [pc, #156]	; (8011e0c <tcp_fasttmr+0xbc>)
 8011d70:	781b      	ldrb	r3, [r3, #0]
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d03f      	beq.n	8011df6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011d76:	4b25      	ldr	r3, [pc, #148]	; (8011e0c <tcp_fasttmr+0xbc>)
 8011d78:	781a      	ldrb	r2, [r3, #0]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	8b5b      	ldrh	r3, [r3, #26]
 8011d82:	f003 0301 	and.w	r3, r3, #1
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d010      	beq.n	8011dac <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	8b5b      	ldrh	r3, [r3, #26]
 8011d8e:	f043 0302 	orr.w	r3, r3, #2
 8011d92:	b29a      	uxth	r2, r3
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f003 fff1 	bl	8015d80 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	8b5b      	ldrh	r3, [r3, #26]
 8011da2:	f023 0303 	bic.w	r3, r3, #3
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	8b5b      	ldrh	r3, [r3, #26]
 8011db0:	f003 0308 	and.w	r3, r3, #8
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d009      	beq.n	8011dcc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	8b5b      	ldrh	r3, [r3, #26]
 8011dbc:	f023 0308 	bic.w	r3, r3, #8
 8011dc0:	b29a      	uxth	r2, r3
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f7ff f874 	bl	8010eb4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	68db      	ldr	r3, [r3, #12]
 8011dd0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d00a      	beq.n	8011df0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011dda:	4b0e      	ldr	r3, [pc, #56]	; (8011e14 <tcp_fasttmr+0xc4>)
 8011ddc:	2200      	movs	r2, #0
 8011dde:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f000 f819 	bl	8011e18 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011de6:	4b0b      	ldr	r3, [pc, #44]	; (8011e14 <tcp_fasttmr+0xc4>)
 8011de8:	781b      	ldrb	r3, [r3, #0]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d000      	beq.n	8011df0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011dee:	e7b8      	b.n	8011d62 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	607b      	str	r3, [r7, #4]
 8011df4:	e002      	b.n	8011dfc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	68db      	ldr	r3, [r3, #12]
 8011dfa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d1b3      	bne.n	8011d6a <tcp_fasttmr+0x1a>
    }
  }
}
 8011e02:	bf00      	nop
 8011e04:	bf00      	nop
 8011e06:	3708      	adds	r7, #8
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}
 8011e0c:	20004ac6 	.word	0x20004ac6
 8011e10:	2000dba4 	.word	0x2000dba4
 8011e14:	2000dba0 	.word	0x2000dba0

08011e18 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011e18:	b590      	push	{r4, r7, lr}
 8011e1a:	b085      	sub	sp, #20
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d109      	bne.n	8011e3a <tcp_process_refused_data+0x22>
 8011e26:	4b37      	ldr	r3, [pc, #220]	; (8011f04 <tcp_process_refused_data+0xec>)
 8011e28:	f240 6209 	movw	r2, #1545	; 0x609
 8011e2c:	4936      	ldr	r1, [pc, #216]	; (8011f08 <tcp_process_refused_data+0xf0>)
 8011e2e:	4837      	ldr	r0, [pc, #220]	; (8011f0c <tcp_process_refused_data+0xf4>)
 8011e30:	f008 f9a8 	bl	801a184 <iprintf>
 8011e34:	f06f 030f 	mvn.w	r3, #15
 8011e38:	e060      	b.n	8011efc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e3e:	7b5b      	ldrb	r3, [r3, #13]
 8011e40:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e46:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d00b      	beq.n	8011e70 <tcp_process_refused_data+0x58>
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	6918      	ldr	r0, [r3, #16]
 8011e62:	2300      	movs	r3, #0
 8011e64:	68ba      	ldr	r2, [r7, #8]
 8011e66:	6879      	ldr	r1, [r7, #4]
 8011e68:	47a0      	blx	r4
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	73fb      	strb	r3, [r7, #15]
 8011e6e:	e007      	b.n	8011e80 <tcp_process_refused_data+0x68>
 8011e70:	2300      	movs	r3, #0
 8011e72:	68ba      	ldr	r2, [r7, #8]
 8011e74:	6879      	ldr	r1, [r7, #4]
 8011e76:	2000      	movs	r0, #0
 8011e78:	f000 f8a4 	bl	8011fc4 <tcp_recv_null>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d12a      	bne.n	8011ede <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011e88:	7bbb      	ldrb	r3, [r7, #14]
 8011e8a:	f003 0320 	and.w	r3, r3, #32
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d033      	beq.n	8011efa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011e96:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011e9a:	d005      	beq.n	8011ea8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011ea0:	3301      	adds	r3, #1
 8011ea2:	b29a      	uxth	r2, r3
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d00b      	beq.n	8011eca <tcp_process_refused_data+0xb2>
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	6918      	ldr	r0, [r3, #16]
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	6879      	ldr	r1, [r7, #4]
 8011ec2:	47a0      	blx	r4
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	73fb      	strb	r3, [r7, #15]
 8011ec8:	e001      	b.n	8011ece <tcp_process_refused_data+0xb6>
 8011eca:	2300      	movs	r3, #0
 8011ecc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ed2:	f113 0f0d 	cmn.w	r3, #13
 8011ed6:	d110      	bne.n	8011efa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011ed8:	f06f 030c 	mvn.w	r3, #12
 8011edc:	e00e      	b.n	8011efc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ee2:	f113 0f0d 	cmn.w	r3, #13
 8011ee6:	d102      	bne.n	8011eee <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011ee8:	f06f 030c 	mvn.w	r3, #12
 8011eec:	e006      	b.n	8011efc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	68ba      	ldr	r2, [r7, #8]
 8011ef2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011ef4:	f06f 0304 	mvn.w	r3, #4
 8011ef8:	e000      	b.n	8011efc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011efa:	2300      	movs	r3, #0
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3714      	adds	r7, #20
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd90      	pop	{r4, r7, pc}
 8011f04:	0801c6f4 	.word	0x0801c6f4
 8011f08:	0801cc04 	.word	0x0801cc04
 8011f0c:	0801c738 	.word	0x0801c738

08011f10 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b084      	sub	sp, #16
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011f18:	e007      	b.n	8011f2a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f000 f80a 	bl	8011f3a <tcp_seg_free>
    seg = next;
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d1f4      	bne.n	8011f1a <tcp_segs_free+0xa>
  }
}
 8011f30:	bf00      	nop
 8011f32:	bf00      	nop
 8011f34:	3710      	adds	r7, #16
 8011f36:	46bd      	mov	sp, r7
 8011f38:	bd80      	pop	{r7, pc}

08011f3a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011f3a:	b580      	push	{r7, lr}
 8011f3c:	b082      	sub	sp, #8
 8011f3e:	af00      	add	r7, sp, #0
 8011f40:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d00c      	beq.n	8011f62 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	685b      	ldr	r3, [r3, #4]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d004      	beq.n	8011f5a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	685b      	ldr	r3, [r3, #4]
 8011f54:	4618      	mov	r0, r3
 8011f56:	f7fe fb6d 	bl	8010634 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011f5a:	6879      	ldr	r1, [r7, #4]
 8011f5c:	2003      	movs	r0, #3
 8011f5e:	f7fd fcc5 	bl	800f8ec <memp_free>
  }
}
 8011f62:	bf00      	nop
 8011f64:	3708      	adds	r7, #8
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd80      	pop	{r7, pc}
	...

08011f6c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b084      	sub	sp, #16
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d106      	bne.n	8011f88 <tcp_seg_copy+0x1c>
 8011f7a:	4b0f      	ldr	r3, [pc, #60]	; (8011fb8 <tcp_seg_copy+0x4c>)
 8011f7c:	f240 6282 	movw	r2, #1666	; 0x682
 8011f80:	490e      	ldr	r1, [pc, #56]	; (8011fbc <tcp_seg_copy+0x50>)
 8011f82:	480f      	ldr	r0, [pc, #60]	; (8011fc0 <tcp_seg_copy+0x54>)
 8011f84:	f008 f8fe 	bl	801a184 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011f88:	2003      	movs	r0, #3
 8011f8a:	f7fd fc5d 	bl	800f848 <memp_malloc>
 8011f8e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d101      	bne.n	8011f9a <tcp_seg_copy+0x2e>
    return NULL;
 8011f96:	2300      	movs	r3, #0
 8011f98:	e00a      	b.n	8011fb0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011f9a:	2210      	movs	r2, #16
 8011f9c:	6879      	ldr	r1, [r7, #4]
 8011f9e:	68f8      	ldr	r0, [r7, #12]
 8011fa0:	f008 f87f 	bl	801a0a2 <memcpy>
  pbuf_ref(cseg->p);
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	685b      	ldr	r3, [r3, #4]
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7fe fbe9 	bl	8010780 <pbuf_ref>
  return cseg;
 8011fae:	68fb      	ldr	r3, [r7, #12]
}
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	3710      	adds	r7, #16
 8011fb4:	46bd      	mov	sp, r7
 8011fb6:	bd80      	pop	{r7, pc}
 8011fb8:	0801c6f4 	.word	0x0801c6f4
 8011fbc:	0801cc48 	.word	0x0801cc48
 8011fc0:	0801c738 	.word	0x0801c738

08011fc4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b084      	sub	sp, #16
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	60f8      	str	r0, [r7, #12]
 8011fcc:	60b9      	str	r1, [r7, #8]
 8011fce:	607a      	str	r2, [r7, #4]
 8011fd0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d109      	bne.n	8011fec <tcp_recv_null+0x28>
 8011fd8:	4b12      	ldr	r3, [pc, #72]	; (8012024 <tcp_recv_null+0x60>)
 8011fda:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011fde:	4912      	ldr	r1, [pc, #72]	; (8012028 <tcp_recv_null+0x64>)
 8011fe0:	4812      	ldr	r0, [pc, #72]	; (801202c <tcp_recv_null+0x68>)
 8011fe2:	f008 f8cf 	bl	801a184 <iprintf>
 8011fe6:	f06f 030f 	mvn.w	r3, #15
 8011fea:	e016      	b.n	801201a <tcp_recv_null+0x56>

  if (p != NULL) {
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d009      	beq.n	8012006 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	891b      	ldrh	r3, [r3, #8]
 8011ff6:	4619      	mov	r1, r3
 8011ff8:	68b8      	ldr	r0, [r7, #8]
 8011ffa:	f7ff fad3 	bl	80115a4 <tcp_recved>
    pbuf_free(p);
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f7fe fb18 	bl	8010634 <pbuf_free>
 8012004:	e008      	b.n	8012018 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d104      	bne.n	8012018 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801200e:	68b8      	ldr	r0, [r7, #8]
 8012010:	f7fe ffba 	bl	8010f88 <tcp_close>
 8012014:	4603      	mov	r3, r0
 8012016:	e000      	b.n	801201a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012018:	2300      	movs	r3, #0
}
 801201a:	4618      	mov	r0, r3
 801201c:	3710      	adds	r7, #16
 801201e:	46bd      	mov	sp, r7
 8012020:	bd80      	pop	{r7, pc}
 8012022:	bf00      	nop
 8012024:	0801c6f4 	.word	0x0801c6f4
 8012028:	0801cc64 	.word	0x0801cc64
 801202c:	0801c738 	.word	0x0801c738

08012030 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b086      	sub	sp, #24
 8012034:	af00      	add	r7, sp, #0
 8012036:	4603      	mov	r3, r0
 8012038:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801203e:	2b00      	cmp	r3, #0
 8012040:	db01      	blt.n	8012046 <tcp_kill_prio+0x16>
 8012042:	79fb      	ldrb	r3, [r7, #7]
 8012044:	e000      	b.n	8012048 <tcp_kill_prio+0x18>
 8012046:	237f      	movs	r3, #127	; 0x7f
 8012048:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801204a:	7afb      	ldrb	r3, [r7, #11]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d034      	beq.n	80120ba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012050:	7afb      	ldrb	r3, [r7, #11]
 8012052:	3b01      	subs	r3, #1
 8012054:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012056:	2300      	movs	r3, #0
 8012058:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801205a:	2300      	movs	r3, #0
 801205c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801205e:	4b19      	ldr	r3, [pc, #100]	; (80120c4 <tcp_kill_prio+0x94>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	617b      	str	r3, [r7, #20]
 8012064:	e01f      	b.n	80120a6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012066:	697b      	ldr	r3, [r7, #20]
 8012068:	7d5b      	ldrb	r3, [r3, #21]
 801206a:	7afa      	ldrb	r2, [r7, #11]
 801206c:	429a      	cmp	r2, r3
 801206e:	d80c      	bhi.n	801208a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012074:	7afa      	ldrb	r2, [r7, #11]
 8012076:	429a      	cmp	r2, r3
 8012078:	d112      	bne.n	80120a0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801207a:	4b13      	ldr	r3, [pc, #76]	; (80120c8 <tcp_kill_prio+0x98>)
 801207c:	681a      	ldr	r2, [r3, #0]
 801207e:	697b      	ldr	r3, [r7, #20]
 8012080:	6a1b      	ldr	r3, [r3, #32]
 8012082:	1ad3      	subs	r3, r2, r3
 8012084:	68fa      	ldr	r2, [r7, #12]
 8012086:	429a      	cmp	r2, r3
 8012088:	d80a      	bhi.n	80120a0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801208a:	4b0f      	ldr	r3, [pc, #60]	; (80120c8 <tcp_kill_prio+0x98>)
 801208c:	681a      	ldr	r2, [r3, #0]
 801208e:	697b      	ldr	r3, [r7, #20]
 8012090:	6a1b      	ldr	r3, [r3, #32]
 8012092:	1ad3      	subs	r3, r2, r3
 8012094:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	7d5b      	ldrb	r3, [r3, #21]
 801209e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80120a0:	697b      	ldr	r3, [r7, #20]
 80120a2:	68db      	ldr	r3, [r3, #12]
 80120a4:	617b      	str	r3, [r7, #20]
 80120a6:	697b      	ldr	r3, [r7, #20]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d1dc      	bne.n	8012066 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d004      	beq.n	80120bc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80120b2:	6938      	ldr	r0, [r7, #16]
 80120b4:	f7ff f8ae 	bl	8011214 <tcp_abort>
 80120b8:	e000      	b.n	80120bc <tcp_kill_prio+0x8c>
    return;
 80120ba:	bf00      	nop
  }
}
 80120bc:	3718      	adds	r7, #24
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}
 80120c2:	bf00      	nop
 80120c4:	2000dba4 	.word	0x2000dba4
 80120c8:	2000dba8 	.word	0x2000dba8

080120cc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b086      	sub	sp, #24
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	4603      	mov	r3, r0
 80120d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80120d6:	79fb      	ldrb	r3, [r7, #7]
 80120d8:	2b08      	cmp	r3, #8
 80120da:	d009      	beq.n	80120f0 <tcp_kill_state+0x24>
 80120dc:	79fb      	ldrb	r3, [r7, #7]
 80120de:	2b09      	cmp	r3, #9
 80120e0:	d006      	beq.n	80120f0 <tcp_kill_state+0x24>
 80120e2:	4b1a      	ldr	r3, [pc, #104]	; (801214c <tcp_kill_state+0x80>)
 80120e4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80120e8:	4919      	ldr	r1, [pc, #100]	; (8012150 <tcp_kill_state+0x84>)
 80120ea:	481a      	ldr	r0, [pc, #104]	; (8012154 <tcp_kill_state+0x88>)
 80120ec:	f008 f84a 	bl	801a184 <iprintf>

  inactivity = 0;
 80120f0:	2300      	movs	r3, #0
 80120f2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80120f4:	2300      	movs	r3, #0
 80120f6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80120f8:	4b17      	ldr	r3, [pc, #92]	; (8012158 <tcp_kill_state+0x8c>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	617b      	str	r3, [r7, #20]
 80120fe:	e017      	b.n	8012130 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012100:	697b      	ldr	r3, [r7, #20]
 8012102:	7d1b      	ldrb	r3, [r3, #20]
 8012104:	79fa      	ldrb	r2, [r7, #7]
 8012106:	429a      	cmp	r2, r3
 8012108:	d10f      	bne.n	801212a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801210a:	4b14      	ldr	r3, [pc, #80]	; (801215c <tcp_kill_state+0x90>)
 801210c:	681a      	ldr	r2, [r3, #0]
 801210e:	697b      	ldr	r3, [r7, #20]
 8012110:	6a1b      	ldr	r3, [r3, #32]
 8012112:	1ad3      	subs	r3, r2, r3
 8012114:	68fa      	ldr	r2, [r7, #12]
 8012116:	429a      	cmp	r2, r3
 8012118:	d807      	bhi.n	801212a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801211a:	4b10      	ldr	r3, [pc, #64]	; (801215c <tcp_kill_state+0x90>)
 801211c:	681a      	ldr	r2, [r3, #0]
 801211e:	697b      	ldr	r3, [r7, #20]
 8012120:	6a1b      	ldr	r3, [r3, #32]
 8012122:	1ad3      	subs	r3, r2, r3
 8012124:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801212a:	697b      	ldr	r3, [r7, #20]
 801212c:	68db      	ldr	r3, [r3, #12]
 801212e:	617b      	str	r3, [r7, #20]
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d1e4      	bne.n	8012100 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012136:	693b      	ldr	r3, [r7, #16]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d003      	beq.n	8012144 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801213c:	2100      	movs	r1, #0
 801213e:	6938      	ldr	r0, [r7, #16]
 8012140:	f7fe ffaa 	bl	8011098 <tcp_abandon>
  }
}
 8012144:	bf00      	nop
 8012146:	3718      	adds	r7, #24
 8012148:	46bd      	mov	sp, r7
 801214a:	bd80      	pop	{r7, pc}
 801214c:	0801c6f4 	.word	0x0801c6f4
 8012150:	0801cc80 	.word	0x0801cc80
 8012154:	0801c738 	.word	0x0801c738
 8012158:	2000dba4 	.word	0x2000dba4
 801215c:	2000dba8 	.word	0x2000dba8

08012160 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b084      	sub	sp, #16
 8012164:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012166:	2300      	movs	r3, #0
 8012168:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801216a:	2300      	movs	r3, #0
 801216c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801216e:	4b12      	ldr	r3, [pc, #72]	; (80121b8 <tcp_kill_timewait+0x58>)
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	60fb      	str	r3, [r7, #12]
 8012174:	e012      	b.n	801219c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012176:	4b11      	ldr	r3, [pc, #68]	; (80121bc <tcp_kill_timewait+0x5c>)
 8012178:	681a      	ldr	r2, [r3, #0]
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	6a1b      	ldr	r3, [r3, #32]
 801217e:	1ad3      	subs	r3, r2, r3
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	429a      	cmp	r2, r3
 8012184:	d807      	bhi.n	8012196 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012186:	4b0d      	ldr	r3, [pc, #52]	; (80121bc <tcp_kill_timewait+0x5c>)
 8012188:	681a      	ldr	r2, [r3, #0]
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	6a1b      	ldr	r3, [r3, #32]
 801218e:	1ad3      	subs	r3, r2, r3
 8012190:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	68db      	ldr	r3, [r3, #12]
 801219a:	60fb      	str	r3, [r7, #12]
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d1e9      	bne.n	8012176 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d002      	beq.n	80121ae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80121a8:	68b8      	ldr	r0, [r7, #8]
 80121aa:	f7ff f833 	bl	8011214 <tcp_abort>
  }
}
 80121ae:	bf00      	nop
 80121b0:	3710      	adds	r7, #16
 80121b2:	46bd      	mov	sp, r7
 80121b4:	bd80      	pop	{r7, pc}
 80121b6:	bf00      	nop
 80121b8:	2000dbb4 	.word	0x2000dbb4
 80121bc:	2000dba8 	.word	0x2000dba8

080121c0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80121c6:	4b10      	ldr	r3, [pc, #64]	; (8012208 <tcp_handle_closepend+0x48>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80121cc:	e014      	b.n	80121f8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	68db      	ldr	r3, [r3, #12]
 80121d2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	8b5b      	ldrh	r3, [r3, #26]
 80121d8:	f003 0308 	and.w	r3, r3, #8
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d009      	beq.n	80121f4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	8b5b      	ldrh	r3, [r3, #26]
 80121e4:	f023 0308 	bic.w	r3, r3, #8
 80121e8:	b29a      	uxth	r2, r3
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f7fe fe60 	bl	8010eb4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80121f4:	683b      	ldr	r3, [r7, #0]
 80121f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d1e7      	bne.n	80121ce <tcp_handle_closepend+0xe>
  }
}
 80121fe:	bf00      	nop
 8012200:	bf00      	nop
 8012202:	3708      	adds	r7, #8
 8012204:	46bd      	mov	sp, r7
 8012206:	bd80      	pop	{r7, pc}
 8012208:	2000dba4 	.word	0x2000dba4

0801220c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b084      	sub	sp, #16
 8012210:	af00      	add	r7, sp, #0
 8012212:	4603      	mov	r3, r0
 8012214:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012216:	2001      	movs	r0, #1
 8012218:	f7fd fb16 	bl	800f848 <memp_malloc>
 801221c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d126      	bne.n	8012272 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012224:	f7ff ffcc 	bl	80121c0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012228:	f7ff ff9a 	bl	8012160 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801222c:	2001      	movs	r0, #1
 801222e:	f7fd fb0b 	bl	800f848 <memp_malloc>
 8012232:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d11b      	bne.n	8012272 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801223a:	2009      	movs	r0, #9
 801223c:	f7ff ff46 	bl	80120cc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012240:	2001      	movs	r0, #1
 8012242:	f7fd fb01 	bl	800f848 <memp_malloc>
 8012246:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d111      	bne.n	8012272 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801224e:	2008      	movs	r0, #8
 8012250:	f7ff ff3c 	bl	80120cc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012254:	2001      	movs	r0, #1
 8012256:	f7fd faf7 	bl	800f848 <memp_malloc>
 801225a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d107      	bne.n	8012272 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012262:	79fb      	ldrb	r3, [r7, #7]
 8012264:	4618      	mov	r0, r3
 8012266:	f7ff fee3 	bl	8012030 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801226a:	2001      	movs	r0, #1
 801226c:	f7fd faec 	bl	800f848 <memp_malloc>
 8012270:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d03f      	beq.n	80122f8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012278:	229c      	movs	r2, #156	; 0x9c
 801227a:	2100      	movs	r1, #0
 801227c:	68f8      	ldr	r0, [r7, #12]
 801227e:	f007 ff1e 	bl	801a0be <memset>
    pcb->prio = prio;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	79fa      	ldrb	r2, [r7, #7]
 8012286:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801228e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012298:	855a      	strh	r2, [r3, #42]	; 0x2a
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	22ff      	movs	r2, #255	; 0xff
 80122a6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80122ae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	2206      	movs	r2, #6
 80122b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	2206      	movs	r2, #6
 80122bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122c4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	2201      	movs	r2, #1
 80122ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80122ce:	4b0d      	ldr	r3, [pc, #52]	; (8012304 <tcp_alloc+0xf8>)
 80122d0:	681a      	ldr	r2, [r3, #0]
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80122d6:	4b0c      	ldr	r3, [pc, #48]	; (8012308 <tcp_alloc+0xfc>)
 80122d8:	781a      	ldrb	r2, [r3, #0]
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80122e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	4a08      	ldr	r2, [pc, #32]	; (801230c <tcp_alloc+0x100>)
 80122ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	4a07      	ldr	r2, [pc, #28]	; (8012310 <tcp_alloc+0x104>)
 80122f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80122f8:	68fb      	ldr	r3, [r7, #12]
}
 80122fa:	4618      	mov	r0, r3
 80122fc:	3710      	adds	r7, #16
 80122fe:	46bd      	mov	sp, r7
 8012300:	bd80      	pop	{r7, pc}
 8012302:	bf00      	nop
 8012304:	2000dba8 	.word	0x2000dba8
 8012308:	20004ac6 	.word	0x20004ac6
 801230c:	08011fc5 	.word	0x08011fc5
 8012310:	006ddd00 	.word	0x006ddd00

08012314 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b084      	sub	sp, #16
 8012318:	af00      	add	r7, sp, #0
 801231a:	4603      	mov	r3, r0
 801231c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801231e:	2040      	movs	r0, #64	; 0x40
 8012320:	f7ff ff74 	bl	801220c <tcp_alloc>
 8012324:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012326:	68fb      	ldr	r3, [r7, #12]
}
 8012328:	4618      	mov	r0, r3
 801232a:	3710      	adds	r7, #16
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}

08012330 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012330:	b480      	push	{r7}
 8012332:	b083      	sub	sp, #12
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
 8012338:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d002      	beq.n	8012346 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	683a      	ldr	r2, [r7, #0]
 8012344:	611a      	str	r2, [r3, #16]
  }
}
 8012346:	bf00      	nop
 8012348:	370c      	adds	r7, #12
 801234a:	46bd      	mov	sp, r7
 801234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012350:	4770      	bx	lr
	...

08012354 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b082      	sub	sp, #8
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d00e      	beq.n	8012382 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	7d1b      	ldrb	r3, [r3, #20]
 8012368:	2b01      	cmp	r3, #1
 801236a:	d106      	bne.n	801237a <tcp_recv+0x26>
 801236c:	4b07      	ldr	r3, [pc, #28]	; (801238c <tcp_recv+0x38>)
 801236e:	f240 72df 	movw	r2, #2015	; 0x7df
 8012372:	4907      	ldr	r1, [pc, #28]	; (8012390 <tcp_recv+0x3c>)
 8012374:	4807      	ldr	r0, [pc, #28]	; (8012394 <tcp_recv+0x40>)
 8012376:	f007 ff05 	bl	801a184 <iprintf>
    pcb->recv = recv;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	683a      	ldr	r2, [r7, #0]
 801237e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8012382:	bf00      	nop
 8012384:	3708      	adds	r7, #8
 8012386:	46bd      	mov	sp, r7
 8012388:	bd80      	pop	{r7, pc}
 801238a:	bf00      	nop
 801238c:	0801c6f4 	.word	0x0801c6f4
 8012390:	0801cc90 	.word	0x0801cc90
 8012394:	0801c738 	.word	0x0801c738

08012398 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b082      	sub	sp, #8
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
 80123a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d00e      	beq.n	80123c6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	7d1b      	ldrb	r3, [r3, #20]
 80123ac:	2b01      	cmp	r3, #1
 80123ae:	d106      	bne.n	80123be <tcp_sent+0x26>
 80123b0:	4b07      	ldr	r3, [pc, #28]	; (80123d0 <tcp_sent+0x38>)
 80123b2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80123b6:	4907      	ldr	r1, [pc, #28]	; (80123d4 <tcp_sent+0x3c>)
 80123b8:	4807      	ldr	r0, [pc, #28]	; (80123d8 <tcp_sent+0x40>)
 80123ba:	f007 fee3 	bl	801a184 <iprintf>
    pcb->sent = sent;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	683a      	ldr	r2, [r7, #0]
 80123c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80123c6:	bf00      	nop
 80123c8:	3708      	adds	r7, #8
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}
 80123ce:	bf00      	nop
 80123d0:	0801c6f4 	.word	0x0801c6f4
 80123d4:	0801ccb8 	.word	0x0801ccb8
 80123d8:	0801c738 	.word	0x0801c738

080123dc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b082      	sub	sp, #8
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d00e      	beq.n	801240a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	7d1b      	ldrb	r3, [r3, #20]
 80123f0:	2b01      	cmp	r3, #1
 80123f2:	d106      	bne.n	8012402 <tcp_err+0x26>
 80123f4:	4b07      	ldr	r3, [pc, #28]	; (8012414 <tcp_err+0x38>)
 80123f6:	f640 020d 	movw	r2, #2061	; 0x80d
 80123fa:	4907      	ldr	r1, [pc, #28]	; (8012418 <tcp_err+0x3c>)
 80123fc:	4807      	ldr	r0, [pc, #28]	; (801241c <tcp_err+0x40>)
 80123fe:	f007 fec1 	bl	801a184 <iprintf>
    pcb->errf = err;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	683a      	ldr	r2, [r7, #0]
 8012406:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801240a:	bf00      	nop
 801240c:	3708      	adds	r7, #8
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}
 8012412:	bf00      	nop
 8012414:	0801c6f4 	.word	0x0801c6f4
 8012418:	0801cce0 	.word	0x0801cce0
 801241c:	0801c738 	.word	0x0801c738

08012420 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8012420:	b480      	push	{r7}
 8012422:	b085      	sub	sp, #20
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
 8012428:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d008      	beq.n	8012442 <tcp_accept+0x22>
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	7d1b      	ldrb	r3, [r3, #20]
 8012434:	2b01      	cmp	r3, #1
 8012436:	d104      	bne.n	8012442 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	683a      	ldr	r2, [r7, #0]
 8012440:	619a      	str	r2, [r3, #24]
  }
}
 8012442:	bf00      	nop
 8012444:	3714      	adds	r7, #20
 8012446:	46bd      	mov	sp, r7
 8012448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244c:	4770      	bx	lr
	...

08012450 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b084      	sub	sp, #16
 8012454:	af00      	add	r7, sp, #0
 8012456:	60f8      	str	r0, [r7, #12]
 8012458:	60b9      	str	r1, [r7, #8]
 801245a:	4613      	mov	r3, r2
 801245c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d107      	bne.n	8012474 <tcp_poll+0x24>
 8012464:	4b0e      	ldr	r3, [pc, #56]	; (80124a0 <tcp_poll+0x50>)
 8012466:	f640 023d 	movw	r2, #2109	; 0x83d
 801246a:	490e      	ldr	r1, [pc, #56]	; (80124a4 <tcp_poll+0x54>)
 801246c:	480e      	ldr	r0, [pc, #56]	; (80124a8 <tcp_poll+0x58>)
 801246e:	f007 fe89 	bl	801a184 <iprintf>
 8012472:	e011      	b.n	8012498 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	7d1b      	ldrb	r3, [r3, #20]
 8012478:	2b01      	cmp	r3, #1
 801247a:	d106      	bne.n	801248a <tcp_poll+0x3a>
 801247c:	4b08      	ldr	r3, [pc, #32]	; (80124a0 <tcp_poll+0x50>)
 801247e:	f640 023e 	movw	r2, #2110	; 0x83e
 8012482:	490a      	ldr	r1, [pc, #40]	; (80124ac <tcp_poll+0x5c>)
 8012484:	4808      	ldr	r0, [pc, #32]	; (80124a8 <tcp_poll+0x58>)
 8012486:	f007 fe7d 	bl	801a184 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	68ba      	ldr	r2, [r7, #8]
 801248e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	79fa      	ldrb	r2, [r7, #7]
 8012496:	775a      	strb	r2, [r3, #29]
}
 8012498:	3710      	adds	r7, #16
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}
 801249e:	bf00      	nop
 80124a0:	0801c6f4 	.word	0x0801c6f4
 80124a4:	0801cd08 	.word	0x0801cd08
 80124a8:	0801c738 	.word	0x0801c738
 80124ac:	0801cd20 	.word	0x0801cd20

080124b0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b082      	sub	sp, #8
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d107      	bne.n	80124ce <tcp_pcb_purge+0x1e>
 80124be:	4b21      	ldr	r3, [pc, #132]	; (8012544 <tcp_pcb_purge+0x94>)
 80124c0:	f640 0251 	movw	r2, #2129	; 0x851
 80124c4:	4920      	ldr	r1, [pc, #128]	; (8012548 <tcp_pcb_purge+0x98>)
 80124c6:	4821      	ldr	r0, [pc, #132]	; (801254c <tcp_pcb_purge+0x9c>)
 80124c8:	f007 fe5c 	bl	801a184 <iprintf>
 80124cc:	e037      	b.n	801253e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	7d1b      	ldrb	r3, [r3, #20]
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d033      	beq.n	801253e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80124da:	2b0a      	cmp	r3, #10
 80124dc:	d02f      	beq.n	801253e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80124e2:	2b01      	cmp	r3, #1
 80124e4:	d02b      	beq.n	801253e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d007      	beq.n	80124fe <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80124f2:	4618      	mov	r0, r3
 80124f4:	f7fe f89e 	bl	8010634 <pbuf_free>
      pcb->refused_data = NULL;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2200      	movs	r2, #0
 80124fc:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012502:	2b00      	cmp	r3, #0
 8012504:	d002      	beq.n	801250c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f000 f986 	bl	8012818 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012512:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012518:	4618      	mov	r0, r3
 801251a:	f7ff fcf9 	bl	8011f10 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012522:	4618      	mov	r0, r3
 8012524:	f7ff fcf4 	bl	8011f10 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2200      	movs	r2, #0
 801252c:	66da      	str	r2, [r3, #108]	; 0x6c
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2200      	movs	r2, #0
 801253a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801253e:	3708      	adds	r7, #8
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}
 8012544:	0801c6f4 	.word	0x0801c6f4
 8012548:	0801cd40 	.word	0x0801cd40
 801254c:	0801c738 	.word	0x0801c738

08012550 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b084      	sub	sp, #16
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
 8012558:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d106      	bne.n	801256e <tcp_pcb_remove+0x1e>
 8012560:	4b3e      	ldr	r3, [pc, #248]	; (801265c <tcp_pcb_remove+0x10c>)
 8012562:	f640 0283 	movw	r2, #2179	; 0x883
 8012566:	493e      	ldr	r1, [pc, #248]	; (8012660 <tcp_pcb_remove+0x110>)
 8012568:	483e      	ldr	r0, [pc, #248]	; (8012664 <tcp_pcb_remove+0x114>)
 801256a:	f007 fe0b 	bl	801a184 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d106      	bne.n	8012582 <tcp_pcb_remove+0x32>
 8012574:	4b39      	ldr	r3, [pc, #228]	; (801265c <tcp_pcb_remove+0x10c>)
 8012576:	f640 0284 	movw	r2, #2180	; 0x884
 801257a:	493b      	ldr	r1, [pc, #236]	; (8012668 <tcp_pcb_remove+0x118>)
 801257c:	4839      	ldr	r0, [pc, #228]	; (8012664 <tcp_pcb_remove+0x114>)
 801257e:	f007 fe01 	bl	801a184 <iprintf>

  TCP_RMV(pcblist, pcb);
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	683a      	ldr	r2, [r7, #0]
 8012588:	429a      	cmp	r2, r3
 801258a:	d105      	bne.n	8012598 <tcp_pcb_remove+0x48>
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	68da      	ldr	r2, [r3, #12]
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	601a      	str	r2, [r3, #0]
 8012596:	e013      	b.n	80125c0 <tcp_pcb_remove+0x70>
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	60fb      	str	r3, [r7, #12]
 801259e:	e00c      	b.n	80125ba <tcp_pcb_remove+0x6a>
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	68db      	ldr	r3, [r3, #12]
 80125a4:	683a      	ldr	r2, [r7, #0]
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d104      	bne.n	80125b4 <tcp_pcb_remove+0x64>
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	68da      	ldr	r2, [r3, #12]
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	60da      	str	r2, [r3, #12]
 80125b2:	e005      	b.n	80125c0 <tcp_pcb_remove+0x70>
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	68db      	ldr	r3, [r3, #12]
 80125b8:	60fb      	str	r3, [r7, #12]
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d1ef      	bne.n	80125a0 <tcp_pcb_remove+0x50>
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	2200      	movs	r2, #0
 80125c4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80125c6:	6838      	ldr	r0, [r7, #0]
 80125c8:	f7ff ff72 	bl	80124b0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	7d1b      	ldrb	r3, [r3, #20]
 80125d0:	2b0a      	cmp	r3, #10
 80125d2:	d013      	beq.n	80125fc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80125d8:	2b01      	cmp	r3, #1
 80125da:	d00f      	beq.n	80125fc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	8b5b      	ldrh	r3, [r3, #26]
 80125e0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d009      	beq.n	80125fc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	8b5b      	ldrh	r3, [r3, #26]
 80125ec:	f043 0302 	orr.w	r3, r3, #2
 80125f0:	b29a      	uxth	r2, r3
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80125f6:	6838      	ldr	r0, [r7, #0]
 80125f8:	f003 fbc2 	bl	8015d80 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	7d1b      	ldrb	r3, [r3, #20]
 8012600:	2b01      	cmp	r3, #1
 8012602:	d020      	beq.n	8012646 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012604:	683b      	ldr	r3, [r7, #0]
 8012606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012608:	2b00      	cmp	r3, #0
 801260a:	d006      	beq.n	801261a <tcp_pcb_remove+0xca>
 801260c:	4b13      	ldr	r3, [pc, #76]	; (801265c <tcp_pcb_remove+0x10c>)
 801260e:	f640 0293 	movw	r2, #2195	; 0x893
 8012612:	4916      	ldr	r1, [pc, #88]	; (801266c <tcp_pcb_remove+0x11c>)
 8012614:	4813      	ldr	r0, [pc, #76]	; (8012664 <tcp_pcb_remove+0x114>)
 8012616:	f007 fdb5 	bl	801a184 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801261e:	2b00      	cmp	r3, #0
 8012620:	d006      	beq.n	8012630 <tcp_pcb_remove+0xe0>
 8012622:	4b0e      	ldr	r3, [pc, #56]	; (801265c <tcp_pcb_remove+0x10c>)
 8012624:	f640 0294 	movw	r2, #2196	; 0x894
 8012628:	4911      	ldr	r1, [pc, #68]	; (8012670 <tcp_pcb_remove+0x120>)
 801262a:	480e      	ldr	r0, [pc, #56]	; (8012664 <tcp_pcb_remove+0x114>)
 801262c:	f007 fdaa 	bl	801a184 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012634:	2b00      	cmp	r3, #0
 8012636:	d006      	beq.n	8012646 <tcp_pcb_remove+0xf6>
 8012638:	4b08      	ldr	r3, [pc, #32]	; (801265c <tcp_pcb_remove+0x10c>)
 801263a:	f640 0296 	movw	r2, #2198	; 0x896
 801263e:	490d      	ldr	r1, [pc, #52]	; (8012674 <tcp_pcb_remove+0x124>)
 8012640:	4808      	ldr	r0, [pc, #32]	; (8012664 <tcp_pcb_remove+0x114>)
 8012642:	f007 fd9f 	bl	801a184 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	2200      	movs	r2, #0
 801264a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	2200      	movs	r2, #0
 8012650:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8012652:	bf00      	nop
 8012654:	3710      	adds	r7, #16
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}
 801265a:	bf00      	nop
 801265c:	0801c6f4 	.word	0x0801c6f4
 8012660:	0801cd5c 	.word	0x0801cd5c
 8012664:	0801c738 	.word	0x0801c738
 8012668:	0801cd78 	.word	0x0801cd78
 801266c:	0801cd98 	.word	0x0801cd98
 8012670:	0801cdb0 	.word	0x0801cdb0
 8012674:	0801cdcc 	.word	0x0801cdcc

08012678 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b082      	sub	sp, #8
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d106      	bne.n	8012694 <tcp_next_iss+0x1c>
 8012686:	4b0a      	ldr	r3, [pc, #40]	; (80126b0 <tcp_next_iss+0x38>)
 8012688:	f640 02af 	movw	r2, #2223	; 0x8af
 801268c:	4909      	ldr	r1, [pc, #36]	; (80126b4 <tcp_next_iss+0x3c>)
 801268e:	480a      	ldr	r0, [pc, #40]	; (80126b8 <tcp_next_iss+0x40>)
 8012690:	f007 fd78 	bl	801a184 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012694:	4b09      	ldr	r3, [pc, #36]	; (80126bc <tcp_next_iss+0x44>)
 8012696:	681a      	ldr	r2, [r3, #0]
 8012698:	4b09      	ldr	r3, [pc, #36]	; (80126c0 <tcp_next_iss+0x48>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	4413      	add	r3, r2
 801269e:	4a07      	ldr	r2, [pc, #28]	; (80126bc <tcp_next_iss+0x44>)
 80126a0:	6013      	str	r3, [r2, #0]
  return iss;
 80126a2:	4b06      	ldr	r3, [pc, #24]	; (80126bc <tcp_next_iss+0x44>)
 80126a4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	3708      	adds	r7, #8
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}
 80126ae:	bf00      	nop
 80126b0:	0801c6f4 	.word	0x0801c6f4
 80126b4:	0801cde4 	.word	0x0801cde4
 80126b8:	0801c738 	.word	0x0801c738
 80126bc:	20000014 	.word	0x20000014
 80126c0:	2000dba8 	.word	0x2000dba8

080126c4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b086      	sub	sp, #24
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	4603      	mov	r3, r0
 80126cc:	60b9      	str	r1, [r7, #8]
 80126ce:	607a      	str	r2, [r7, #4]
 80126d0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d106      	bne.n	80126e6 <tcp_eff_send_mss_netif+0x22>
 80126d8:	4b14      	ldr	r3, [pc, #80]	; (801272c <tcp_eff_send_mss_netif+0x68>)
 80126da:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80126de:	4914      	ldr	r1, [pc, #80]	; (8012730 <tcp_eff_send_mss_netif+0x6c>)
 80126e0:	4814      	ldr	r0, [pc, #80]	; (8012734 <tcp_eff_send_mss_netif+0x70>)
 80126e2:	f007 fd4f 	bl	801a184 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80126e6:	68bb      	ldr	r3, [r7, #8]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d101      	bne.n	80126f0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80126ec:	89fb      	ldrh	r3, [r7, #14]
 80126ee:	e019      	b.n	8012724 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80126f4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80126f6:	8afb      	ldrh	r3, [r7, #22]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d012      	beq.n	8012722 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80126fc:	2328      	movs	r3, #40	; 0x28
 80126fe:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012700:	8afa      	ldrh	r2, [r7, #22]
 8012702:	8abb      	ldrh	r3, [r7, #20]
 8012704:	429a      	cmp	r2, r3
 8012706:	d904      	bls.n	8012712 <tcp_eff_send_mss_netif+0x4e>
 8012708:	8afa      	ldrh	r2, [r7, #22]
 801270a:	8abb      	ldrh	r3, [r7, #20]
 801270c:	1ad3      	subs	r3, r2, r3
 801270e:	b29b      	uxth	r3, r3
 8012710:	e000      	b.n	8012714 <tcp_eff_send_mss_netif+0x50>
 8012712:	2300      	movs	r3, #0
 8012714:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012716:	8a7a      	ldrh	r2, [r7, #18]
 8012718:	89fb      	ldrh	r3, [r7, #14]
 801271a:	4293      	cmp	r3, r2
 801271c:	bf28      	it	cs
 801271e:	4613      	movcs	r3, r2
 8012720:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012722:	89fb      	ldrh	r3, [r7, #14]
}
 8012724:	4618      	mov	r0, r3
 8012726:	3718      	adds	r7, #24
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}
 801272c:	0801c6f4 	.word	0x0801c6f4
 8012730:	0801ce00 	.word	0x0801ce00
 8012734:	0801c738 	.word	0x0801c738

08012738 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b084      	sub	sp, #16
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d119      	bne.n	8012780 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801274c:	4b10      	ldr	r3, [pc, #64]	; (8012790 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801274e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8012752:	4910      	ldr	r1, [pc, #64]	; (8012794 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012754:	4810      	ldr	r0, [pc, #64]	; (8012798 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012756:	f007 fd15 	bl	801a184 <iprintf>

  while (pcb != NULL) {
 801275a:	e011      	b.n	8012780 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	681a      	ldr	r2, [r3, #0]
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	429a      	cmp	r2, r3
 8012766:	d108      	bne.n	801277a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	68db      	ldr	r3, [r3, #12]
 801276c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801276e:	68f8      	ldr	r0, [r7, #12]
 8012770:	f7fe fd50 	bl	8011214 <tcp_abort>
      pcb = next;
 8012774:	68bb      	ldr	r3, [r7, #8]
 8012776:	60fb      	str	r3, [r7, #12]
 8012778:	e002      	b.n	8012780 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	68db      	ldr	r3, [r3, #12]
 801277e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d1ea      	bne.n	801275c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012786:	bf00      	nop
 8012788:	bf00      	nop
 801278a:	3710      	adds	r7, #16
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}
 8012790:	0801c6f4 	.word	0x0801c6f4
 8012794:	0801ce28 	.word	0x0801ce28
 8012798:	0801c738 	.word	0x0801c738

0801279c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b084      	sub	sp, #16
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
 80127a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d02a      	beq.n	8012802 <tcp_netif_ip_addr_changed+0x66>
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d026      	beq.n	8012802 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80127b4:	4b15      	ldr	r3, [pc, #84]	; (801280c <tcp_netif_ip_addr_changed+0x70>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	4619      	mov	r1, r3
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	f7ff ffbc 	bl	8012738 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80127c0:	4b13      	ldr	r3, [pc, #76]	; (8012810 <tcp_netif_ip_addr_changed+0x74>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	4619      	mov	r1, r3
 80127c6:	6878      	ldr	r0, [r7, #4]
 80127c8:	f7ff ffb6 	bl	8012738 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d017      	beq.n	8012802 <tcp_netif_ip_addr_changed+0x66>
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d013      	beq.n	8012802 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80127da:	4b0e      	ldr	r3, [pc, #56]	; (8012814 <tcp_netif_ip_addr_changed+0x78>)
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	60fb      	str	r3, [r7, #12]
 80127e0:	e00c      	b.n	80127fc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	681a      	ldr	r2, [r3, #0]
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d103      	bne.n	80127f6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	681a      	ldr	r2, [r3, #0]
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	68db      	ldr	r3, [r3, #12]
 80127fa:	60fb      	str	r3, [r7, #12]
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d1ef      	bne.n	80127e2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012802:	bf00      	nop
 8012804:	3710      	adds	r7, #16
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}
 801280a:	bf00      	nop
 801280c:	2000dba4 	.word	0x2000dba4
 8012810:	2000dbb0 	.word	0x2000dbb0
 8012814:	2000dbac 	.word	0x2000dbac

08012818 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b082      	sub	sp, #8
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012824:	2b00      	cmp	r3, #0
 8012826:	d007      	beq.n	8012838 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801282c:	4618      	mov	r0, r3
 801282e:	f7ff fb6f 	bl	8011f10 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	2200      	movs	r2, #0
 8012836:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012838:	bf00      	nop
 801283a:	3708      	adds	r7, #8
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}

08012840 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012840:	b590      	push	{r4, r7, lr}
 8012842:	b08d      	sub	sp, #52	; 0x34
 8012844:	af04      	add	r7, sp, #16
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d105      	bne.n	801285c <tcp_input+0x1c>
 8012850:	4b9b      	ldr	r3, [pc, #620]	; (8012ac0 <tcp_input+0x280>)
 8012852:	2283      	movs	r2, #131	; 0x83
 8012854:	499b      	ldr	r1, [pc, #620]	; (8012ac4 <tcp_input+0x284>)
 8012856:	489c      	ldr	r0, [pc, #624]	; (8012ac8 <tcp_input+0x288>)
 8012858:	f007 fc94 	bl	801a184 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	685b      	ldr	r3, [r3, #4]
 8012860:	4a9a      	ldr	r2, [pc, #616]	; (8012acc <tcp_input+0x28c>)
 8012862:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	895b      	ldrh	r3, [r3, #10]
 8012868:	2b13      	cmp	r3, #19
 801286a:	f240 83c4 	bls.w	8012ff6 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801286e:	4b98      	ldr	r3, [pc, #608]	; (8012ad0 <tcp_input+0x290>)
 8012870:	695b      	ldr	r3, [r3, #20]
 8012872:	4a97      	ldr	r2, [pc, #604]	; (8012ad0 <tcp_input+0x290>)
 8012874:	6812      	ldr	r2, [r2, #0]
 8012876:	4611      	mov	r1, r2
 8012878:	4618      	mov	r0, r3
 801287a:	f006 f9e1 	bl	8018c40 <ip4_addr_isbroadcast_u32>
 801287e:	4603      	mov	r3, r0
 8012880:	2b00      	cmp	r3, #0
 8012882:	f040 83ba 	bne.w	8012ffa <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012886:	4b92      	ldr	r3, [pc, #584]	; (8012ad0 <tcp_input+0x290>)
 8012888:	695b      	ldr	r3, [r3, #20]
 801288a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801288e:	2be0      	cmp	r3, #224	; 0xe0
 8012890:	f000 83b3 	beq.w	8012ffa <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012894:	4b8d      	ldr	r3, [pc, #564]	; (8012acc <tcp_input+0x28c>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	899b      	ldrh	r3, [r3, #12]
 801289a:	b29b      	uxth	r3, r3
 801289c:	4618      	mov	r0, r3
 801289e:	f7fc fb1d 	bl	800eedc <lwip_htons>
 80128a2:	4603      	mov	r3, r0
 80128a4:	0b1b      	lsrs	r3, r3, #12
 80128a6:	b29b      	uxth	r3, r3
 80128a8:	b2db      	uxtb	r3, r3
 80128aa:	009b      	lsls	r3, r3, #2
 80128ac:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80128ae:	7cbb      	ldrb	r3, [r7, #18]
 80128b0:	2b13      	cmp	r3, #19
 80128b2:	f240 83a4 	bls.w	8012ffe <tcp_input+0x7be>
 80128b6:	7cbb      	ldrb	r3, [r7, #18]
 80128b8:	b29a      	uxth	r2, r3
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	891b      	ldrh	r3, [r3, #8]
 80128be:	429a      	cmp	r2, r3
 80128c0:	f200 839d 	bhi.w	8012ffe <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80128c4:	7cbb      	ldrb	r3, [r7, #18]
 80128c6:	b29b      	uxth	r3, r3
 80128c8:	3b14      	subs	r3, #20
 80128ca:	b29a      	uxth	r2, r3
 80128cc:	4b81      	ldr	r3, [pc, #516]	; (8012ad4 <tcp_input+0x294>)
 80128ce:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80128d0:	4b81      	ldr	r3, [pc, #516]	; (8012ad8 <tcp_input+0x298>)
 80128d2:	2200      	movs	r2, #0
 80128d4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	895a      	ldrh	r2, [r3, #10]
 80128da:	7cbb      	ldrb	r3, [r7, #18]
 80128dc:	b29b      	uxth	r3, r3
 80128de:	429a      	cmp	r2, r3
 80128e0:	d309      	bcc.n	80128f6 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80128e2:	4b7c      	ldr	r3, [pc, #496]	; (8012ad4 <tcp_input+0x294>)
 80128e4:	881a      	ldrh	r2, [r3, #0]
 80128e6:	4b7d      	ldr	r3, [pc, #500]	; (8012adc <tcp_input+0x29c>)
 80128e8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80128ea:	7cbb      	ldrb	r3, [r7, #18]
 80128ec:	4619      	mov	r1, r3
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	f7fd fe1a 	bl	8010528 <pbuf_remove_header>
 80128f4:	e04e      	b.n	8012994 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d105      	bne.n	801290a <tcp_input+0xca>
 80128fe:	4b70      	ldr	r3, [pc, #448]	; (8012ac0 <tcp_input+0x280>)
 8012900:	22c2      	movs	r2, #194	; 0xc2
 8012902:	4977      	ldr	r1, [pc, #476]	; (8012ae0 <tcp_input+0x2a0>)
 8012904:	4870      	ldr	r0, [pc, #448]	; (8012ac8 <tcp_input+0x288>)
 8012906:	f007 fc3d 	bl	801a184 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801290a:	2114      	movs	r1, #20
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f7fd fe0b 	bl	8010528 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	895a      	ldrh	r2, [r3, #10]
 8012916:	4b71      	ldr	r3, [pc, #452]	; (8012adc <tcp_input+0x29c>)
 8012918:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801291a:	4b6e      	ldr	r3, [pc, #440]	; (8012ad4 <tcp_input+0x294>)
 801291c:	881a      	ldrh	r2, [r3, #0]
 801291e:	4b6f      	ldr	r3, [pc, #444]	; (8012adc <tcp_input+0x29c>)
 8012920:	881b      	ldrh	r3, [r3, #0]
 8012922:	1ad3      	subs	r3, r2, r3
 8012924:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012926:	4b6d      	ldr	r3, [pc, #436]	; (8012adc <tcp_input+0x29c>)
 8012928:	881b      	ldrh	r3, [r3, #0]
 801292a:	4619      	mov	r1, r3
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	f7fd fdfb 	bl	8010528 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	895b      	ldrh	r3, [r3, #10]
 8012938:	8a3a      	ldrh	r2, [r7, #16]
 801293a:	429a      	cmp	r2, r3
 801293c:	f200 8361 	bhi.w	8013002 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	4a64      	ldr	r2, [pc, #400]	; (8012ad8 <tcp_input+0x298>)
 8012948:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	8a3a      	ldrh	r2, [r7, #16]
 8012950:	4611      	mov	r1, r2
 8012952:	4618      	mov	r0, r3
 8012954:	f7fd fde8 	bl	8010528 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	891a      	ldrh	r2, [r3, #8]
 801295c:	8a3b      	ldrh	r3, [r7, #16]
 801295e:	1ad3      	subs	r3, r2, r3
 8012960:	b29a      	uxth	r2, r3
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	895b      	ldrh	r3, [r3, #10]
 801296a:	2b00      	cmp	r3, #0
 801296c:	d005      	beq.n	801297a <tcp_input+0x13a>
 801296e:	4b54      	ldr	r3, [pc, #336]	; (8012ac0 <tcp_input+0x280>)
 8012970:	22df      	movs	r2, #223	; 0xdf
 8012972:	495c      	ldr	r1, [pc, #368]	; (8012ae4 <tcp_input+0x2a4>)
 8012974:	4854      	ldr	r0, [pc, #336]	; (8012ac8 <tcp_input+0x288>)
 8012976:	f007 fc05 	bl	801a184 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	891a      	ldrh	r2, [r3, #8]
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	891b      	ldrh	r3, [r3, #8]
 8012984:	429a      	cmp	r2, r3
 8012986:	d005      	beq.n	8012994 <tcp_input+0x154>
 8012988:	4b4d      	ldr	r3, [pc, #308]	; (8012ac0 <tcp_input+0x280>)
 801298a:	22e0      	movs	r2, #224	; 0xe0
 801298c:	4956      	ldr	r1, [pc, #344]	; (8012ae8 <tcp_input+0x2a8>)
 801298e:	484e      	ldr	r0, [pc, #312]	; (8012ac8 <tcp_input+0x288>)
 8012990:	f007 fbf8 	bl	801a184 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012994:	4b4d      	ldr	r3, [pc, #308]	; (8012acc <tcp_input+0x28c>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	881b      	ldrh	r3, [r3, #0]
 801299a:	b29b      	uxth	r3, r3
 801299c:	4a4b      	ldr	r2, [pc, #300]	; (8012acc <tcp_input+0x28c>)
 801299e:	6814      	ldr	r4, [r2, #0]
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7fc fa9b 	bl	800eedc <lwip_htons>
 80129a6:	4603      	mov	r3, r0
 80129a8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80129aa:	4b48      	ldr	r3, [pc, #288]	; (8012acc <tcp_input+0x28c>)
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	885b      	ldrh	r3, [r3, #2]
 80129b0:	b29b      	uxth	r3, r3
 80129b2:	4a46      	ldr	r2, [pc, #280]	; (8012acc <tcp_input+0x28c>)
 80129b4:	6814      	ldr	r4, [r2, #0]
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7fc fa90 	bl	800eedc <lwip_htons>
 80129bc:	4603      	mov	r3, r0
 80129be:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80129c0:	4b42      	ldr	r3, [pc, #264]	; (8012acc <tcp_input+0x28c>)
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	685b      	ldr	r3, [r3, #4]
 80129c6:	4a41      	ldr	r2, [pc, #260]	; (8012acc <tcp_input+0x28c>)
 80129c8:	6814      	ldr	r4, [r2, #0]
 80129ca:	4618      	mov	r0, r3
 80129cc:	f7fc fa9b 	bl	800ef06 <lwip_htonl>
 80129d0:	4603      	mov	r3, r0
 80129d2:	6063      	str	r3, [r4, #4]
 80129d4:	6863      	ldr	r3, [r4, #4]
 80129d6:	4a45      	ldr	r2, [pc, #276]	; (8012aec <tcp_input+0x2ac>)
 80129d8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80129da:	4b3c      	ldr	r3, [pc, #240]	; (8012acc <tcp_input+0x28c>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	689b      	ldr	r3, [r3, #8]
 80129e0:	4a3a      	ldr	r2, [pc, #232]	; (8012acc <tcp_input+0x28c>)
 80129e2:	6814      	ldr	r4, [r2, #0]
 80129e4:	4618      	mov	r0, r3
 80129e6:	f7fc fa8e 	bl	800ef06 <lwip_htonl>
 80129ea:	4603      	mov	r3, r0
 80129ec:	60a3      	str	r3, [r4, #8]
 80129ee:	68a3      	ldr	r3, [r4, #8]
 80129f0:	4a3f      	ldr	r2, [pc, #252]	; (8012af0 <tcp_input+0x2b0>)
 80129f2:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80129f4:	4b35      	ldr	r3, [pc, #212]	; (8012acc <tcp_input+0x28c>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	89db      	ldrh	r3, [r3, #14]
 80129fa:	b29b      	uxth	r3, r3
 80129fc:	4a33      	ldr	r2, [pc, #204]	; (8012acc <tcp_input+0x28c>)
 80129fe:	6814      	ldr	r4, [r2, #0]
 8012a00:	4618      	mov	r0, r3
 8012a02:	f7fc fa6b 	bl	800eedc <lwip_htons>
 8012a06:	4603      	mov	r3, r0
 8012a08:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012a0a:	4b30      	ldr	r3, [pc, #192]	; (8012acc <tcp_input+0x28c>)
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	899b      	ldrh	r3, [r3, #12]
 8012a10:	b29b      	uxth	r3, r3
 8012a12:	4618      	mov	r0, r3
 8012a14:	f7fc fa62 	bl	800eedc <lwip_htons>
 8012a18:	4603      	mov	r3, r0
 8012a1a:	b2db      	uxtb	r3, r3
 8012a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a20:	b2da      	uxtb	r2, r3
 8012a22:	4b34      	ldr	r3, [pc, #208]	; (8012af4 <tcp_input+0x2b4>)
 8012a24:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	891a      	ldrh	r2, [r3, #8]
 8012a2a:	4b33      	ldr	r3, [pc, #204]	; (8012af8 <tcp_input+0x2b8>)
 8012a2c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012a2e:	4b31      	ldr	r3, [pc, #196]	; (8012af4 <tcp_input+0x2b4>)
 8012a30:	781b      	ldrb	r3, [r3, #0]
 8012a32:	f003 0303 	and.w	r3, r3, #3
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d00c      	beq.n	8012a54 <tcp_input+0x214>
    tcplen++;
 8012a3a:	4b2f      	ldr	r3, [pc, #188]	; (8012af8 <tcp_input+0x2b8>)
 8012a3c:	881b      	ldrh	r3, [r3, #0]
 8012a3e:	3301      	adds	r3, #1
 8012a40:	b29a      	uxth	r2, r3
 8012a42:	4b2d      	ldr	r3, [pc, #180]	; (8012af8 <tcp_input+0x2b8>)
 8012a44:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	891a      	ldrh	r2, [r3, #8]
 8012a4a:	4b2b      	ldr	r3, [pc, #172]	; (8012af8 <tcp_input+0x2b8>)
 8012a4c:	881b      	ldrh	r3, [r3, #0]
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	f200 82d9 	bhi.w	8013006 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012a54:	2300      	movs	r3, #0
 8012a56:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a58:	4b28      	ldr	r3, [pc, #160]	; (8012afc <tcp_input+0x2bc>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	61fb      	str	r3, [r7, #28]
 8012a5e:	e09d      	b.n	8012b9c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012a60:	69fb      	ldr	r3, [r7, #28]
 8012a62:	7d1b      	ldrb	r3, [r3, #20]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d105      	bne.n	8012a74 <tcp_input+0x234>
 8012a68:	4b15      	ldr	r3, [pc, #84]	; (8012ac0 <tcp_input+0x280>)
 8012a6a:	22fb      	movs	r2, #251	; 0xfb
 8012a6c:	4924      	ldr	r1, [pc, #144]	; (8012b00 <tcp_input+0x2c0>)
 8012a6e:	4816      	ldr	r0, [pc, #88]	; (8012ac8 <tcp_input+0x288>)
 8012a70:	f007 fb88 	bl	801a184 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012a74:	69fb      	ldr	r3, [r7, #28]
 8012a76:	7d1b      	ldrb	r3, [r3, #20]
 8012a78:	2b0a      	cmp	r3, #10
 8012a7a:	d105      	bne.n	8012a88 <tcp_input+0x248>
 8012a7c:	4b10      	ldr	r3, [pc, #64]	; (8012ac0 <tcp_input+0x280>)
 8012a7e:	22fc      	movs	r2, #252	; 0xfc
 8012a80:	4920      	ldr	r1, [pc, #128]	; (8012b04 <tcp_input+0x2c4>)
 8012a82:	4811      	ldr	r0, [pc, #68]	; (8012ac8 <tcp_input+0x288>)
 8012a84:	f007 fb7e 	bl	801a184 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012a88:	69fb      	ldr	r3, [r7, #28]
 8012a8a:	7d1b      	ldrb	r3, [r3, #20]
 8012a8c:	2b01      	cmp	r3, #1
 8012a8e:	d105      	bne.n	8012a9c <tcp_input+0x25c>
 8012a90:	4b0b      	ldr	r3, [pc, #44]	; (8012ac0 <tcp_input+0x280>)
 8012a92:	22fd      	movs	r2, #253	; 0xfd
 8012a94:	491c      	ldr	r1, [pc, #112]	; (8012b08 <tcp_input+0x2c8>)
 8012a96:	480c      	ldr	r0, [pc, #48]	; (8012ac8 <tcp_input+0x288>)
 8012a98:	f007 fb74 	bl	801a184 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012a9c:	69fb      	ldr	r3, [r7, #28]
 8012a9e:	7a1b      	ldrb	r3, [r3, #8]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d033      	beq.n	8012b0c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012aa4:	69fb      	ldr	r3, [r7, #28]
 8012aa6:	7a1a      	ldrb	r2, [r3, #8]
 8012aa8:	4b09      	ldr	r3, [pc, #36]	; (8012ad0 <tcp_input+0x290>)
 8012aaa:	685b      	ldr	r3, [r3, #4]
 8012aac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012ab0:	3301      	adds	r3, #1
 8012ab2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	d029      	beq.n	8012b0c <tcp_input+0x2cc>
      prev = pcb;
 8012ab8:	69fb      	ldr	r3, [r7, #28]
 8012aba:	61bb      	str	r3, [r7, #24]
      continue;
 8012abc:	e06b      	b.n	8012b96 <tcp_input+0x356>
 8012abe:	bf00      	nop
 8012ac0:	0801ce5c 	.word	0x0801ce5c
 8012ac4:	0801ce90 	.word	0x0801ce90
 8012ac8:	0801cea8 	.word	0x0801cea8
 8012acc:	20004ad8 	.word	0x20004ad8
 8012ad0:	20008290 	.word	0x20008290
 8012ad4:	20004adc 	.word	0x20004adc
 8012ad8:	20004ae0 	.word	0x20004ae0
 8012adc:	20004ade 	.word	0x20004ade
 8012ae0:	0801ced0 	.word	0x0801ced0
 8012ae4:	0801cee0 	.word	0x0801cee0
 8012ae8:	0801ceec 	.word	0x0801ceec
 8012aec:	20004ae8 	.word	0x20004ae8
 8012af0:	20004aec 	.word	0x20004aec
 8012af4:	20004af4 	.word	0x20004af4
 8012af8:	20004af2 	.word	0x20004af2
 8012afc:	2000dba4 	.word	0x2000dba4
 8012b00:	0801cf0c 	.word	0x0801cf0c
 8012b04:	0801cf34 	.word	0x0801cf34
 8012b08:	0801cf60 	.word	0x0801cf60
    }

    if (pcb->remote_port == tcphdr->src &&
 8012b0c:	69fb      	ldr	r3, [r7, #28]
 8012b0e:	8b1a      	ldrh	r2, [r3, #24]
 8012b10:	4b94      	ldr	r3, [pc, #592]	; (8012d64 <tcp_input+0x524>)
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	881b      	ldrh	r3, [r3, #0]
 8012b16:	b29b      	uxth	r3, r3
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	d13a      	bne.n	8012b92 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012b1c:	69fb      	ldr	r3, [r7, #28]
 8012b1e:	8ada      	ldrh	r2, [r3, #22]
 8012b20:	4b90      	ldr	r3, [pc, #576]	; (8012d64 <tcp_input+0x524>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	885b      	ldrh	r3, [r3, #2]
 8012b26:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012b28:	429a      	cmp	r2, r3
 8012b2a:	d132      	bne.n	8012b92 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012b2c:	69fb      	ldr	r3, [r7, #28]
 8012b2e:	685a      	ldr	r2, [r3, #4]
 8012b30:	4b8d      	ldr	r3, [pc, #564]	; (8012d68 <tcp_input+0x528>)
 8012b32:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012b34:	429a      	cmp	r2, r3
 8012b36:	d12c      	bne.n	8012b92 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012b38:	69fb      	ldr	r3, [r7, #28]
 8012b3a:	681a      	ldr	r2, [r3, #0]
 8012b3c:	4b8a      	ldr	r3, [pc, #552]	; (8012d68 <tcp_input+0x528>)
 8012b3e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012b40:	429a      	cmp	r2, r3
 8012b42:	d126      	bne.n	8012b92 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012b44:	69fb      	ldr	r3, [r7, #28]
 8012b46:	68db      	ldr	r3, [r3, #12]
 8012b48:	69fa      	ldr	r2, [r7, #28]
 8012b4a:	429a      	cmp	r2, r3
 8012b4c:	d106      	bne.n	8012b5c <tcp_input+0x31c>
 8012b4e:	4b87      	ldr	r3, [pc, #540]	; (8012d6c <tcp_input+0x52c>)
 8012b50:	f240 120d 	movw	r2, #269	; 0x10d
 8012b54:	4986      	ldr	r1, [pc, #536]	; (8012d70 <tcp_input+0x530>)
 8012b56:	4887      	ldr	r0, [pc, #540]	; (8012d74 <tcp_input+0x534>)
 8012b58:	f007 fb14 	bl	801a184 <iprintf>
      if (prev != NULL) {
 8012b5c:	69bb      	ldr	r3, [r7, #24]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d00a      	beq.n	8012b78 <tcp_input+0x338>
        prev->next = pcb->next;
 8012b62:	69fb      	ldr	r3, [r7, #28]
 8012b64:	68da      	ldr	r2, [r3, #12]
 8012b66:	69bb      	ldr	r3, [r7, #24]
 8012b68:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012b6a:	4b83      	ldr	r3, [pc, #524]	; (8012d78 <tcp_input+0x538>)
 8012b6c:	681a      	ldr	r2, [r3, #0]
 8012b6e:	69fb      	ldr	r3, [r7, #28]
 8012b70:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012b72:	4a81      	ldr	r2, [pc, #516]	; (8012d78 <tcp_input+0x538>)
 8012b74:	69fb      	ldr	r3, [r7, #28]
 8012b76:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012b78:	69fb      	ldr	r3, [r7, #28]
 8012b7a:	68db      	ldr	r3, [r3, #12]
 8012b7c:	69fa      	ldr	r2, [r7, #28]
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d111      	bne.n	8012ba6 <tcp_input+0x366>
 8012b82:	4b7a      	ldr	r3, [pc, #488]	; (8012d6c <tcp_input+0x52c>)
 8012b84:	f240 1215 	movw	r2, #277	; 0x115
 8012b88:	497c      	ldr	r1, [pc, #496]	; (8012d7c <tcp_input+0x53c>)
 8012b8a:	487a      	ldr	r0, [pc, #488]	; (8012d74 <tcp_input+0x534>)
 8012b8c:	f007 fafa 	bl	801a184 <iprintf>
      break;
 8012b90:	e009      	b.n	8012ba6 <tcp_input+0x366>
    }
    prev = pcb;
 8012b92:	69fb      	ldr	r3, [r7, #28]
 8012b94:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b96:	69fb      	ldr	r3, [r7, #28]
 8012b98:	68db      	ldr	r3, [r3, #12]
 8012b9a:	61fb      	str	r3, [r7, #28]
 8012b9c:	69fb      	ldr	r3, [r7, #28]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	f47f af5e 	bne.w	8012a60 <tcp_input+0x220>
 8012ba4:	e000      	b.n	8012ba8 <tcp_input+0x368>
      break;
 8012ba6:	bf00      	nop
  }

  if (pcb == NULL) {
 8012ba8:	69fb      	ldr	r3, [r7, #28]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	f040 8095 	bne.w	8012cda <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bb0:	4b73      	ldr	r3, [pc, #460]	; (8012d80 <tcp_input+0x540>)
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	61fb      	str	r3, [r7, #28]
 8012bb6:	e03f      	b.n	8012c38 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012bb8:	69fb      	ldr	r3, [r7, #28]
 8012bba:	7d1b      	ldrb	r3, [r3, #20]
 8012bbc:	2b0a      	cmp	r3, #10
 8012bbe:	d006      	beq.n	8012bce <tcp_input+0x38e>
 8012bc0:	4b6a      	ldr	r3, [pc, #424]	; (8012d6c <tcp_input+0x52c>)
 8012bc2:	f240 121f 	movw	r2, #287	; 0x11f
 8012bc6:	496f      	ldr	r1, [pc, #444]	; (8012d84 <tcp_input+0x544>)
 8012bc8:	486a      	ldr	r0, [pc, #424]	; (8012d74 <tcp_input+0x534>)
 8012bca:	f007 fadb 	bl	801a184 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012bce:	69fb      	ldr	r3, [r7, #28]
 8012bd0:	7a1b      	ldrb	r3, [r3, #8]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d009      	beq.n	8012bea <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012bd6:	69fb      	ldr	r3, [r7, #28]
 8012bd8:	7a1a      	ldrb	r2, [r3, #8]
 8012bda:	4b63      	ldr	r3, [pc, #396]	; (8012d68 <tcp_input+0x528>)
 8012bdc:	685b      	ldr	r3, [r3, #4]
 8012bde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012be2:	3301      	adds	r3, #1
 8012be4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d122      	bne.n	8012c30 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012bea:	69fb      	ldr	r3, [r7, #28]
 8012bec:	8b1a      	ldrh	r2, [r3, #24]
 8012bee:	4b5d      	ldr	r3, [pc, #372]	; (8012d64 <tcp_input+0x524>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	881b      	ldrh	r3, [r3, #0]
 8012bf4:	b29b      	uxth	r3, r3
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d11b      	bne.n	8012c32 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012bfa:	69fb      	ldr	r3, [r7, #28]
 8012bfc:	8ada      	ldrh	r2, [r3, #22]
 8012bfe:	4b59      	ldr	r3, [pc, #356]	; (8012d64 <tcp_input+0x524>)
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	885b      	ldrh	r3, [r3, #2]
 8012c04:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012c06:	429a      	cmp	r2, r3
 8012c08:	d113      	bne.n	8012c32 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012c0a:	69fb      	ldr	r3, [r7, #28]
 8012c0c:	685a      	ldr	r2, [r3, #4]
 8012c0e:	4b56      	ldr	r3, [pc, #344]	; (8012d68 <tcp_input+0x528>)
 8012c10:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012c12:	429a      	cmp	r2, r3
 8012c14:	d10d      	bne.n	8012c32 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012c16:	69fb      	ldr	r3, [r7, #28]
 8012c18:	681a      	ldr	r2, [r3, #0]
 8012c1a:	4b53      	ldr	r3, [pc, #332]	; (8012d68 <tcp_input+0x528>)
 8012c1c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012c1e:	429a      	cmp	r2, r3
 8012c20:	d107      	bne.n	8012c32 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012c22:	69f8      	ldr	r0, [r7, #28]
 8012c24:	f000 fb54 	bl	80132d0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f7fd fd03 	bl	8010634 <pbuf_free>
        return;
 8012c2e:	e1f0      	b.n	8013012 <tcp_input+0x7d2>
        continue;
 8012c30:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c32:	69fb      	ldr	r3, [r7, #28]
 8012c34:	68db      	ldr	r3, [r3, #12]
 8012c36:	61fb      	str	r3, [r7, #28]
 8012c38:	69fb      	ldr	r3, [r7, #28]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d1bc      	bne.n	8012bb8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012c42:	4b51      	ldr	r3, [pc, #324]	; (8012d88 <tcp_input+0x548>)
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	617b      	str	r3, [r7, #20]
 8012c48:	e02a      	b.n	8012ca0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	7a1b      	ldrb	r3, [r3, #8]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d00c      	beq.n	8012c6c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012c52:	697b      	ldr	r3, [r7, #20]
 8012c54:	7a1a      	ldrb	r2, [r3, #8]
 8012c56:	4b44      	ldr	r3, [pc, #272]	; (8012d68 <tcp_input+0x528>)
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c5e:	3301      	adds	r3, #1
 8012c60:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012c62:	429a      	cmp	r2, r3
 8012c64:	d002      	beq.n	8012c6c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012c66:	697b      	ldr	r3, [r7, #20]
 8012c68:	61bb      	str	r3, [r7, #24]
        continue;
 8012c6a:	e016      	b.n	8012c9a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	8ada      	ldrh	r2, [r3, #22]
 8012c70:	4b3c      	ldr	r3, [pc, #240]	; (8012d64 <tcp_input+0x524>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	885b      	ldrh	r3, [r3, #2]
 8012c76:	b29b      	uxth	r3, r3
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	d10c      	bne.n	8012c96 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012c7c:	697b      	ldr	r3, [r7, #20]
 8012c7e:	681a      	ldr	r2, [r3, #0]
 8012c80:	4b39      	ldr	r3, [pc, #228]	; (8012d68 <tcp_input+0x528>)
 8012c82:	695b      	ldr	r3, [r3, #20]
 8012c84:	429a      	cmp	r2, r3
 8012c86:	d00f      	beq.n	8012ca8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012c88:	697b      	ldr	r3, [r7, #20]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d00d      	beq.n	8012caa <tcp_input+0x46a>
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d009      	beq.n	8012caa <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012c96:	697b      	ldr	r3, [r7, #20]
 8012c98:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	68db      	ldr	r3, [r3, #12]
 8012c9e:	617b      	str	r3, [r7, #20]
 8012ca0:	697b      	ldr	r3, [r7, #20]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d1d1      	bne.n	8012c4a <tcp_input+0x40a>
 8012ca6:	e000      	b.n	8012caa <tcp_input+0x46a>
            break;
 8012ca8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d014      	beq.n	8012cda <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012cb0:	69bb      	ldr	r3, [r7, #24]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d00a      	beq.n	8012ccc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012cb6:	697b      	ldr	r3, [r7, #20]
 8012cb8:	68da      	ldr	r2, [r3, #12]
 8012cba:	69bb      	ldr	r3, [r7, #24]
 8012cbc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012cbe:	4b32      	ldr	r3, [pc, #200]	; (8012d88 <tcp_input+0x548>)
 8012cc0:	681a      	ldr	r2, [r3, #0]
 8012cc2:	697b      	ldr	r3, [r7, #20]
 8012cc4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012cc6:	4a30      	ldr	r2, [pc, #192]	; (8012d88 <tcp_input+0x548>)
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012ccc:	6978      	ldr	r0, [r7, #20]
 8012cce:	f000 fa01 	bl	80130d4 <tcp_listen_input>
      }
      pbuf_free(p);
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	f7fd fcae 	bl	8010634 <pbuf_free>
      return;
 8012cd8:	e19b      	b.n	8013012 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012cda:	69fb      	ldr	r3, [r7, #28]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	f000 8160 	beq.w	8012fa2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012ce2:	4b2a      	ldr	r3, [pc, #168]	; (8012d8c <tcp_input+0x54c>)
 8012ce4:	2200      	movs	r2, #0
 8012ce6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	891a      	ldrh	r2, [r3, #8]
 8012cec:	4b27      	ldr	r3, [pc, #156]	; (8012d8c <tcp_input+0x54c>)
 8012cee:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012cf0:	4a26      	ldr	r2, [pc, #152]	; (8012d8c <tcp_input+0x54c>)
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012cf6:	4b1b      	ldr	r3, [pc, #108]	; (8012d64 <tcp_input+0x524>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	4a24      	ldr	r2, [pc, #144]	; (8012d8c <tcp_input+0x54c>)
 8012cfc:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012cfe:	4b24      	ldr	r3, [pc, #144]	; (8012d90 <tcp_input+0x550>)
 8012d00:	2200      	movs	r2, #0
 8012d02:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012d04:	4b23      	ldr	r3, [pc, #140]	; (8012d94 <tcp_input+0x554>)
 8012d06:	2200      	movs	r2, #0
 8012d08:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012d0a:	4b23      	ldr	r3, [pc, #140]	; (8012d98 <tcp_input+0x558>)
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012d10:	4b22      	ldr	r3, [pc, #136]	; (8012d9c <tcp_input+0x55c>)
 8012d12:	781b      	ldrb	r3, [r3, #0]
 8012d14:	f003 0308 	and.w	r3, r3, #8
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d006      	beq.n	8012d2a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	7b5b      	ldrb	r3, [r3, #13]
 8012d20:	f043 0301 	orr.w	r3, r3, #1
 8012d24:	b2da      	uxtb	r2, r3
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012d2a:	69fb      	ldr	r3, [r7, #28]
 8012d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d038      	beq.n	8012da4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012d32:	69f8      	ldr	r0, [r7, #28]
 8012d34:	f7ff f870 	bl	8011e18 <tcp_process_refused_data>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	f113 0f0d 	cmn.w	r3, #13
 8012d3e:	d007      	beq.n	8012d50 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d02d      	beq.n	8012da4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012d48:	4b15      	ldr	r3, [pc, #84]	; (8012da0 <tcp_input+0x560>)
 8012d4a:	881b      	ldrh	r3, [r3, #0]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d029      	beq.n	8012da4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012d50:	69fb      	ldr	r3, [r7, #28]
 8012d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	f040 8104 	bne.w	8012f62 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012d5a:	69f8      	ldr	r0, [r7, #28]
 8012d5c:	f003 fe16 	bl	801698c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012d60:	e0ff      	b.n	8012f62 <tcp_input+0x722>
 8012d62:	bf00      	nop
 8012d64:	20004ad8 	.word	0x20004ad8
 8012d68:	20008290 	.word	0x20008290
 8012d6c:	0801ce5c 	.word	0x0801ce5c
 8012d70:	0801cf88 	.word	0x0801cf88
 8012d74:	0801cea8 	.word	0x0801cea8
 8012d78:	2000dba4 	.word	0x2000dba4
 8012d7c:	0801cfb4 	.word	0x0801cfb4
 8012d80:	2000dbb4 	.word	0x2000dbb4
 8012d84:	0801cfe0 	.word	0x0801cfe0
 8012d88:	2000dbac 	.word	0x2000dbac
 8012d8c:	20004ac8 	.word	0x20004ac8
 8012d90:	20004af8 	.word	0x20004af8
 8012d94:	20004af5 	.word	0x20004af5
 8012d98:	20004af0 	.word	0x20004af0
 8012d9c:	20004af4 	.word	0x20004af4
 8012da0:	20004af2 	.word	0x20004af2
      }
    }
    tcp_input_pcb = pcb;
 8012da4:	4a9c      	ldr	r2, [pc, #624]	; (8013018 <tcp_input+0x7d8>)
 8012da6:	69fb      	ldr	r3, [r7, #28]
 8012da8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012daa:	69f8      	ldr	r0, [r7, #28]
 8012dac:	f000 fb0a 	bl	80133c4 <tcp_process>
 8012db0:	4603      	mov	r3, r0
 8012db2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012db4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012db8:	f113 0f0d 	cmn.w	r3, #13
 8012dbc:	f000 80d3 	beq.w	8012f66 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8012dc0:	4b96      	ldr	r3, [pc, #600]	; (801301c <tcp_input+0x7dc>)
 8012dc2:	781b      	ldrb	r3, [r3, #0]
 8012dc4:	f003 0308 	and.w	r3, r3, #8
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d015      	beq.n	8012df8 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012dcc:	69fb      	ldr	r3, [r7, #28]
 8012dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d008      	beq.n	8012de8 <tcp_input+0x5a8>
 8012dd6:	69fb      	ldr	r3, [r7, #28]
 8012dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ddc:	69fa      	ldr	r2, [r7, #28]
 8012dde:	6912      	ldr	r2, [r2, #16]
 8012de0:	f06f 010d 	mvn.w	r1, #13
 8012de4:	4610      	mov	r0, r2
 8012de6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012de8:	69f9      	ldr	r1, [r7, #28]
 8012dea:	488d      	ldr	r0, [pc, #564]	; (8013020 <tcp_input+0x7e0>)
 8012dec:	f7ff fbb0 	bl	8012550 <tcp_pcb_remove>
        tcp_free(pcb);
 8012df0:	69f8      	ldr	r0, [r7, #28]
 8012df2:	f7fd fecb 	bl	8010b8c <tcp_free>
 8012df6:	e0c1      	b.n	8012f7c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8012df8:	2300      	movs	r3, #0
 8012dfa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012dfc:	4b89      	ldr	r3, [pc, #548]	; (8013024 <tcp_input+0x7e4>)
 8012dfe:	881b      	ldrh	r3, [r3, #0]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d01d      	beq.n	8012e40 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012e04:	4b87      	ldr	r3, [pc, #540]	; (8013024 <tcp_input+0x7e4>)
 8012e06:	881b      	ldrh	r3, [r3, #0]
 8012e08:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012e0a:	69fb      	ldr	r3, [r7, #28]
 8012e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d00a      	beq.n	8012e2a <tcp_input+0x5ea>
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012e1a:	69fa      	ldr	r2, [r7, #28]
 8012e1c:	6910      	ldr	r0, [r2, #16]
 8012e1e:	89fa      	ldrh	r2, [r7, #14]
 8012e20:	69f9      	ldr	r1, [r7, #28]
 8012e22:	4798      	blx	r3
 8012e24:	4603      	mov	r3, r0
 8012e26:	74fb      	strb	r3, [r7, #19]
 8012e28:	e001      	b.n	8012e2e <tcp_input+0x5ee>
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012e2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e32:	f113 0f0d 	cmn.w	r3, #13
 8012e36:	f000 8098 	beq.w	8012f6a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012e3a:	4b7a      	ldr	r3, [pc, #488]	; (8013024 <tcp_input+0x7e4>)
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012e40:	69f8      	ldr	r0, [r7, #28]
 8012e42:	f000 f907 	bl	8013054 <tcp_input_delayed_close>
 8012e46:	4603      	mov	r3, r0
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	f040 8090 	bne.w	8012f6e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012e4e:	4b76      	ldr	r3, [pc, #472]	; (8013028 <tcp_input+0x7e8>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d041      	beq.n	8012eda <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012e56:	69fb      	ldr	r3, [r7, #28]
 8012e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d006      	beq.n	8012e6c <tcp_input+0x62c>
 8012e5e:	4b73      	ldr	r3, [pc, #460]	; (801302c <tcp_input+0x7ec>)
 8012e60:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012e64:	4972      	ldr	r1, [pc, #456]	; (8013030 <tcp_input+0x7f0>)
 8012e66:	4873      	ldr	r0, [pc, #460]	; (8013034 <tcp_input+0x7f4>)
 8012e68:	f007 f98c 	bl	801a184 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012e6c:	69fb      	ldr	r3, [r7, #28]
 8012e6e:	8b5b      	ldrh	r3, [r3, #26]
 8012e70:	f003 0310 	and.w	r3, r3, #16
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d008      	beq.n	8012e8a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012e78:	4b6b      	ldr	r3, [pc, #428]	; (8013028 <tcp_input+0x7e8>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7fd fbd9 	bl	8010634 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012e82:	69f8      	ldr	r0, [r7, #28]
 8012e84:	f7fe f9c6 	bl	8011214 <tcp_abort>
            goto aborted;
 8012e88:	e078      	b.n	8012f7c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012e8a:	69fb      	ldr	r3, [r7, #28]
 8012e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d00c      	beq.n	8012eae <tcp_input+0x66e>
 8012e94:	69fb      	ldr	r3, [r7, #28]
 8012e96:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012e9a:	69fb      	ldr	r3, [r7, #28]
 8012e9c:	6918      	ldr	r0, [r3, #16]
 8012e9e:	4b62      	ldr	r3, [pc, #392]	; (8013028 <tcp_input+0x7e8>)
 8012ea0:	681a      	ldr	r2, [r3, #0]
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	69f9      	ldr	r1, [r7, #28]
 8012ea6:	47a0      	blx	r4
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	74fb      	strb	r3, [r7, #19]
 8012eac:	e008      	b.n	8012ec0 <tcp_input+0x680>
 8012eae:	4b5e      	ldr	r3, [pc, #376]	; (8013028 <tcp_input+0x7e8>)
 8012eb0:	681a      	ldr	r2, [r3, #0]
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	69f9      	ldr	r1, [r7, #28]
 8012eb6:	2000      	movs	r0, #0
 8012eb8:	f7ff f884 	bl	8011fc4 <tcp_recv_null>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012ec0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012ec4:	f113 0f0d 	cmn.w	r3, #13
 8012ec8:	d053      	beq.n	8012f72 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012eca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d003      	beq.n	8012eda <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012ed2:	4b55      	ldr	r3, [pc, #340]	; (8013028 <tcp_input+0x7e8>)
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	69fb      	ldr	r3, [r7, #28]
 8012ed8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012eda:	4b50      	ldr	r3, [pc, #320]	; (801301c <tcp_input+0x7dc>)
 8012edc:	781b      	ldrb	r3, [r3, #0]
 8012ede:	f003 0320 	and.w	r3, r3, #32
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d030      	beq.n	8012f48 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8012ee6:	69fb      	ldr	r3, [r7, #28]
 8012ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d009      	beq.n	8012f02 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012eee:	69fb      	ldr	r3, [r7, #28]
 8012ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ef2:	7b5a      	ldrb	r2, [r3, #13]
 8012ef4:	69fb      	ldr	r3, [r7, #28]
 8012ef6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ef8:	f042 0220 	orr.w	r2, r2, #32
 8012efc:	b2d2      	uxtb	r2, r2
 8012efe:	735a      	strb	r2, [r3, #13]
 8012f00:	e022      	b.n	8012f48 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012f02:	69fb      	ldr	r3, [r7, #28]
 8012f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012f0a:	d005      	beq.n	8012f18 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8012f0c:	69fb      	ldr	r3, [r7, #28]
 8012f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f10:	3301      	adds	r3, #1
 8012f12:	b29a      	uxth	r2, r3
 8012f14:	69fb      	ldr	r3, [r7, #28]
 8012f16:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012f18:	69fb      	ldr	r3, [r7, #28]
 8012f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d00b      	beq.n	8012f3a <tcp_input+0x6fa>
 8012f22:	69fb      	ldr	r3, [r7, #28]
 8012f24:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012f28:	69fb      	ldr	r3, [r7, #28]
 8012f2a:	6918      	ldr	r0, [r3, #16]
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	2200      	movs	r2, #0
 8012f30:	69f9      	ldr	r1, [r7, #28]
 8012f32:	47a0      	blx	r4
 8012f34:	4603      	mov	r3, r0
 8012f36:	74fb      	strb	r3, [r7, #19]
 8012f38:	e001      	b.n	8012f3e <tcp_input+0x6fe>
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012f3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f42:	f113 0f0d 	cmn.w	r3, #13
 8012f46:	d016      	beq.n	8012f76 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012f48:	4b33      	ldr	r3, [pc, #204]	; (8013018 <tcp_input+0x7d8>)
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012f4e:	69f8      	ldr	r0, [r7, #28]
 8012f50:	f000 f880 	bl	8013054 <tcp_input_delayed_close>
 8012f54:	4603      	mov	r3, r0
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d10f      	bne.n	8012f7a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012f5a:	69f8      	ldr	r0, [r7, #28]
 8012f5c:	f002 ff10 	bl	8015d80 <tcp_output>
 8012f60:	e00c      	b.n	8012f7c <tcp_input+0x73c>
        goto aborted;
 8012f62:	bf00      	nop
 8012f64:	e00a      	b.n	8012f7c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012f66:	bf00      	nop
 8012f68:	e008      	b.n	8012f7c <tcp_input+0x73c>
              goto aborted;
 8012f6a:	bf00      	nop
 8012f6c:	e006      	b.n	8012f7c <tcp_input+0x73c>
          goto aborted;
 8012f6e:	bf00      	nop
 8012f70:	e004      	b.n	8012f7c <tcp_input+0x73c>
            goto aborted;
 8012f72:	bf00      	nop
 8012f74:	e002      	b.n	8012f7c <tcp_input+0x73c>
              goto aborted;
 8012f76:	bf00      	nop
 8012f78:	e000      	b.n	8012f7c <tcp_input+0x73c>
          goto aborted;
 8012f7a:	bf00      	nop
    tcp_input_pcb = NULL;
 8012f7c:	4b26      	ldr	r3, [pc, #152]	; (8013018 <tcp_input+0x7d8>)
 8012f7e:	2200      	movs	r2, #0
 8012f80:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012f82:	4b29      	ldr	r3, [pc, #164]	; (8013028 <tcp_input+0x7e8>)
 8012f84:	2200      	movs	r2, #0
 8012f86:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012f88:	4b2b      	ldr	r3, [pc, #172]	; (8013038 <tcp_input+0x7f8>)
 8012f8a:	685b      	ldr	r3, [r3, #4]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d03f      	beq.n	8013010 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8012f90:	4b29      	ldr	r3, [pc, #164]	; (8013038 <tcp_input+0x7f8>)
 8012f92:	685b      	ldr	r3, [r3, #4]
 8012f94:	4618      	mov	r0, r3
 8012f96:	f7fd fb4d 	bl	8010634 <pbuf_free>
      inseg.p = NULL;
 8012f9a:	4b27      	ldr	r3, [pc, #156]	; (8013038 <tcp_input+0x7f8>)
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012fa0:	e036      	b.n	8013010 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012fa2:	4b26      	ldr	r3, [pc, #152]	; (801303c <tcp_input+0x7fc>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	899b      	ldrh	r3, [r3, #12]
 8012fa8:	b29b      	uxth	r3, r3
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7fb ff96 	bl	800eedc <lwip_htons>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	b2db      	uxtb	r3, r3
 8012fb4:	f003 0304 	and.w	r3, r3, #4
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d118      	bne.n	8012fee <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012fbc:	4b20      	ldr	r3, [pc, #128]	; (8013040 <tcp_input+0x800>)
 8012fbe:	6819      	ldr	r1, [r3, #0]
 8012fc0:	4b20      	ldr	r3, [pc, #128]	; (8013044 <tcp_input+0x804>)
 8012fc2:	881b      	ldrh	r3, [r3, #0]
 8012fc4:	461a      	mov	r2, r3
 8012fc6:	4b20      	ldr	r3, [pc, #128]	; (8013048 <tcp_input+0x808>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012fcc:	4b1b      	ldr	r3, [pc, #108]	; (801303c <tcp_input+0x7fc>)
 8012fce:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012fd0:	885b      	ldrh	r3, [r3, #2]
 8012fd2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012fd4:	4a19      	ldr	r2, [pc, #100]	; (801303c <tcp_input+0x7fc>)
 8012fd6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012fd8:	8812      	ldrh	r2, [r2, #0]
 8012fda:	b292      	uxth	r2, r2
 8012fdc:	9202      	str	r2, [sp, #8]
 8012fde:	9301      	str	r3, [sp, #4]
 8012fe0:	4b1a      	ldr	r3, [pc, #104]	; (801304c <tcp_input+0x80c>)
 8012fe2:	9300      	str	r3, [sp, #0]
 8012fe4:	4b1a      	ldr	r3, [pc, #104]	; (8013050 <tcp_input+0x810>)
 8012fe6:	4602      	mov	r2, r0
 8012fe8:	2000      	movs	r0, #0
 8012fea:	f003 fc7d 	bl	80168e8 <tcp_rst>
    pbuf_free(p);
 8012fee:	6878      	ldr	r0, [r7, #4]
 8012ff0:	f7fd fb20 	bl	8010634 <pbuf_free>
  return;
 8012ff4:	e00c      	b.n	8013010 <tcp_input+0x7d0>
    goto dropped;
 8012ff6:	bf00      	nop
 8012ff8:	e006      	b.n	8013008 <tcp_input+0x7c8>
    goto dropped;
 8012ffa:	bf00      	nop
 8012ffc:	e004      	b.n	8013008 <tcp_input+0x7c8>
    goto dropped;
 8012ffe:	bf00      	nop
 8013000:	e002      	b.n	8013008 <tcp_input+0x7c8>
      goto dropped;
 8013002:	bf00      	nop
 8013004:	e000      	b.n	8013008 <tcp_input+0x7c8>
      goto dropped;
 8013006:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	f7fd fb13 	bl	8010634 <pbuf_free>
 801300e:	e000      	b.n	8013012 <tcp_input+0x7d2>
  return;
 8013010:	bf00      	nop
}
 8013012:	3724      	adds	r7, #36	; 0x24
 8013014:	46bd      	mov	sp, r7
 8013016:	bd90      	pop	{r4, r7, pc}
 8013018:	2000dbb8 	.word	0x2000dbb8
 801301c:	20004af5 	.word	0x20004af5
 8013020:	2000dba4 	.word	0x2000dba4
 8013024:	20004af0 	.word	0x20004af0
 8013028:	20004af8 	.word	0x20004af8
 801302c:	0801ce5c 	.word	0x0801ce5c
 8013030:	0801d010 	.word	0x0801d010
 8013034:	0801cea8 	.word	0x0801cea8
 8013038:	20004ac8 	.word	0x20004ac8
 801303c:	20004ad8 	.word	0x20004ad8
 8013040:	20004aec 	.word	0x20004aec
 8013044:	20004af2 	.word	0x20004af2
 8013048:	20004ae8 	.word	0x20004ae8
 801304c:	200082a0 	.word	0x200082a0
 8013050:	200082a4 	.word	0x200082a4

08013054 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b082      	sub	sp, #8
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d106      	bne.n	8013070 <tcp_input_delayed_close+0x1c>
 8013062:	4b17      	ldr	r3, [pc, #92]	; (80130c0 <tcp_input_delayed_close+0x6c>)
 8013064:	f240 225a 	movw	r2, #602	; 0x25a
 8013068:	4916      	ldr	r1, [pc, #88]	; (80130c4 <tcp_input_delayed_close+0x70>)
 801306a:	4817      	ldr	r0, [pc, #92]	; (80130c8 <tcp_input_delayed_close+0x74>)
 801306c:	f007 f88a 	bl	801a184 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013070:	4b16      	ldr	r3, [pc, #88]	; (80130cc <tcp_input_delayed_close+0x78>)
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	f003 0310 	and.w	r3, r3, #16
 8013078:	2b00      	cmp	r3, #0
 801307a:	d01c      	beq.n	80130b6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	8b5b      	ldrh	r3, [r3, #26]
 8013080:	f003 0310 	and.w	r3, r3, #16
 8013084:	2b00      	cmp	r3, #0
 8013086:	d10d      	bne.n	80130a4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801308e:	2b00      	cmp	r3, #0
 8013090:	d008      	beq.n	80130a4 <tcp_input_delayed_close+0x50>
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013098:	687a      	ldr	r2, [r7, #4]
 801309a:	6912      	ldr	r2, [r2, #16]
 801309c:	f06f 010e 	mvn.w	r1, #14
 80130a0:	4610      	mov	r0, r2
 80130a2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80130a4:	6879      	ldr	r1, [r7, #4]
 80130a6:	480a      	ldr	r0, [pc, #40]	; (80130d0 <tcp_input_delayed_close+0x7c>)
 80130a8:	f7ff fa52 	bl	8012550 <tcp_pcb_remove>
    tcp_free(pcb);
 80130ac:	6878      	ldr	r0, [r7, #4]
 80130ae:	f7fd fd6d 	bl	8010b8c <tcp_free>
    return 1;
 80130b2:	2301      	movs	r3, #1
 80130b4:	e000      	b.n	80130b8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80130b6:	2300      	movs	r3, #0
}
 80130b8:	4618      	mov	r0, r3
 80130ba:	3708      	adds	r7, #8
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}
 80130c0:	0801ce5c 	.word	0x0801ce5c
 80130c4:	0801d02c 	.word	0x0801d02c
 80130c8:	0801cea8 	.word	0x0801cea8
 80130cc:	20004af5 	.word	0x20004af5
 80130d0:	2000dba4 	.word	0x2000dba4

080130d4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80130d4:	b590      	push	{r4, r7, lr}
 80130d6:	b08b      	sub	sp, #44	; 0x2c
 80130d8:	af04      	add	r7, sp, #16
 80130da:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80130dc:	4b6f      	ldr	r3, [pc, #444]	; (801329c <tcp_listen_input+0x1c8>)
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	f003 0304 	and.w	r3, r3, #4
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	f040 80d2 	bne.w	801328e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d106      	bne.n	80130fe <tcp_listen_input+0x2a>
 80130f0:	4b6b      	ldr	r3, [pc, #428]	; (80132a0 <tcp_listen_input+0x1cc>)
 80130f2:	f240 2281 	movw	r2, #641	; 0x281
 80130f6:	496b      	ldr	r1, [pc, #428]	; (80132a4 <tcp_listen_input+0x1d0>)
 80130f8:	486b      	ldr	r0, [pc, #428]	; (80132a8 <tcp_listen_input+0x1d4>)
 80130fa:	f007 f843 	bl	801a184 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80130fe:	4b67      	ldr	r3, [pc, #412]	; (801329c <tcp_listen_input+0x1c8>)
 8013100:	781b      	ldrb	r3, [r3, #0]
 8013102:	f003 0310 	and.w	r3, r3, #16
 8013106:	2b00      	cmp	r3, #0
 8013108:	d019      	beq.n	801313e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801310a:	4b68      	ldr	r3, [pc, #416]	; (80132ac <tcp_listen_input+0x1d8>)
 801310c:	6819      	ldr	r1, [r3, #0]
 801310e:	4b68      	ldr	r3, [pc, #416]	; (80132b0 <tcp_listen_input+0x1dc>)
 8013110:	881b      	ldrh	r3, [r3, #0]
 8013112:	461a      	mov	r2, r3
 8013114:	4b67      	ldr	r3, [pc, #412]	; (80132b4 <tcp_listen_input+0x1e0>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801311a:	4b67      	ldr	r3, [pc, #412]	; (80132b8 <tcp_listen_input+0x1e4>)
 801311c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801311e:	885b      	ldrh	r3, [r3, #2]
 8013120:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013122:	4a65      	ldr	r2, [pc, #404]	; (80132b8 <tcp_listen_input+0x1e4>)
 8013124:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013126:	8812      	ldrh	r2, [r2, #0]
 8013128:	b292      	uxth	r2, r2
 801312a:	9202      	str	r2, [sp, #8]
 801312c:	9301      	str	r3, [sp, #4]
 801312e:	4b63      	ldr	r3, [pc, #396]	; (80132bc <tcp_listen_input+0x1e8>)
 8013130:	9300      	str	r3, [sp, #0]
 8013132:	4b63      	ldr	r3, [pc, #396]	; (80132c0 <tcp_listen_input+0x1ec>)
 8013134:	4602      	mov	r2, r0
 8013136:	6878      	ldr	r0, [r7, #4]
 8013138:	f003 fbd6 	bl	80168e8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801313c:	e0a9      	b.n	8013292 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801313e:	4b57      	ldr	r3, [pc, #348]	; (801329c <tcp_listen_input+0x1c8>)
 8013140:	781b      	ldrb	r3, [r3, #0]
 8013142:	f003 0302 	and.w	r3, r3, #2
 8013146:	2b00      	cmp	r3, #0
 8013148:	f000 80a3 	beq.w	8013292 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	7d5b      	ldrb	r3, [r3, #21]
 8013150:	4618      	mov	r0, r3
 8013152:	f7ff f85b 	bl	801220c <tcp_alloc>
 8013156:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013158:	697b      	ldr	r3, [r7, #20]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d111      	bne.n	8013182 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	699b      	ldr	r3, [r3, #24]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d00a      	beq.n	801317c <tcp_listen_input+0xa8>
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	699b      	ldr	r3, [r3, #24]
 801316a:	687a      	ldr	r2, [r7, #4]
 801316c:	6910      	ldr	r0, [r2, #16]
 801316e:	f04f 32ff 	mov.w	r2, #4294967295
 8013172:	2100      	movs	r1, #0
 8013174:	4798      	blx	r3
 8013176:	4603      	mov	r3, r0
 8013178:	73bb      	strb	r3, [r7, #14]
      return;
 801317a:	e08b      	b.n	8013294 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801317c:	23f0      	movs	r3, #240	; 0xf0
 801317e:	73bb      	strb	r3, [r7, #14]
      return;
 8013180:	e088      	b.n	8013294 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013182:	4b50      	ldr	r3, [pc, #320]	; (80132c4 <tcp_listen_input+0x1f0>)
 8013184:	695a      	ldr	r2, [r3, #20]
 8013186:	697b      	ldr	r3, [r7, #20]
 8013188:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801318a:	4b4e      	ldr	r3, [pc, #312]	; (80132c4 <tcp_listen_input+0x1f0>)
 801318c:	691a      	ldr	r2, [r3, #16]
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	8ada      	ldrh	r2, [r3, #22]
 8013196:	697b      	ldr	r3, [r7, #20]
 8013198:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801319a:	4b47      	ldr	r3, [pc, #284]	; (80132b8 <tcp_listen_input+0x1e4>)
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	881b      	ldrh	r3, [r3, #0]
 80131a0:	b29a      	uxth	r2, r3
 80131a2:	697b      	ldr	r3, [r7, #20]
 80131a4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	2203      	movs	r2, #3
 80131aa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80131ac:	4b41      	ldr	r3, [pc, #260]	; (80132b4 <tcp_listen_input+0x1e0>)
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	1c5a      	adds	r2, r3, #1
 80131b2:	697b      	ldr	r3, [r7, #20]
 80131b4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80131b6:	697b      	ldr	r3, [r7, #20]
 80131b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80131ba:	697b      	ldr	r3, [r7, #20]
 80131bc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80131be:	6978      	ldr	r0, [r7, #20]
 80131c0:	f7ff fa5a 	bl	8012678 <tcp_next_iss>
 80131c4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	693a      	ldr	r2, [r7, #16]
 80131ca:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	693a      	ldr	r2, [r7, #16]
 80131d0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80131d2:	697b      	ldr	r3, [r7, #20]
 80131d4:	693a      	ldr	r2, [r7, #16]
 80131d6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80131d8:	697b      	ldr	r3, [r7, #20]
 80131da:	693a      	ldr	r2, [r7, #16]
 80131dc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80131de:	4b35      	ldr	r3, [pc, #212]	; (80132b4 <tcp_listen_input+0x1e0>)
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	1e5a      	subs	r2, r3, #1
 80131e4:	697b      	ldr	r3, [r7, #20]
 80131e6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	691a      	ldr	r2, [r3, #16]
 80131ec:	697b      	ldr	r3, [r7, #20]
 80131ee:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80131f0:	697b      	ldr	r3, [r7, #20]
 80131f2:	687a      	ldr	r2, [r7, #4]
 80131f4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	7a5b      	ldrb	r3, [r3, #9]
 80131fa:	f003 030c 	and.w	r3, r3, #12
 80131fe:	b2da      	uxtb	r2, r3
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	7a1a      	ldrb	r2, [r3, #8]
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801320c:	4b2e      	ldr	r3, [pc, #184]	; (80132c8 <tcp_listen_input+0x1f4>)
 801320e:	681a      	ldr	r2, [r3, #0]
 8013210:	697b      	ldr	r3, [r7, #20]
 8013212:	60da      	str	r2, [r3, #12]
 8013214:	4a2c      	ldr	r2, [pc, #176]	; (80132c8 <tcp_listen_input+0x1f4>)
 8013216:	697b      	ldr	r3, [r7, #20]
 8013218:	6013      	str	r3, [r2, #0]
 801321a:	f003 fd27 	bl	8016c6c <tcp_timer_needed>
 801321e:	4b2b      	ldr	r3, [pc, #172]	; (80132cc <tcp_listen_input+0x1f8>)
 8013220:	2201      	movs	r2, #1
 8013222:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013224:	6978      	ldr	r0, [r7, #20]
 8013226:	f001 fd8d 	bl	8014d44 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801322a:	4b23      	ldr	r3, [pc, #140]	; (80132b8 <tcp_listen_input+0x1e4>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	89db      	ldrh	r3, [r3, #14]
 8013230:	b29a      	uxth	r2, r3
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801323e:	697b      	ldr	r3, [r7, #20]
 8013240:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013244:	697b      	ldr	r3, [r7, #20]
 8013246:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	3304      	adds	r3, #4
 801324c:	4618      	mov	r0, r3
 801324e:	f005 fa61 	bl	8018714 <ip4_route>
 8013252:	4601      	mov	r1, r0
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	3304      	adds	r3, #4
 8013258:	461a      	mov	r2, r3
 801325a:	4620      	mov	r0, r4
 801325c:	f7ff fa32 	bl	80126c4 <tcp_eff_send_mss_netif>
 8013260:	4603      	mov	r3, r0
 8013262:	461a      	mov	r2, r3
 8013264:	697b      	ldr	r3, [r7, #20]
 8013266:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013268:	2112      	movs	r1, #18
 801326a:	6978      	ldr	r0, [r7, #20]
 801326c:	f002 fc9a 	bl	8015ba4 <tcp_enqueue_flags>
 8013270:	4603      	mov	r3, r0
 8013272:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013274:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d004      	beq.n	8013286 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801327c:	2100      	movs	r1, #0
 801327e:	6978      	ldr	r0, [r7, #20]
 8013280:	f7fd ff0a 	bl	8011098 <tcp_abandon>
      return;
 8013284:	e006      	b.n	8013294 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013286:	6978      	ldr	r0, [r7, #20]
 8013288:	f002 fd7a 	bl	8015d80 <tcp_output>
  return;
 801328c:	e001      	b.n	8013292 <tcp_listen_input+0x1be>
    return;
 801328e:	bf00      	nop
 8013290:	e000      	b.n	8013294 <tcp_listen_input+0x1c0>
  return;
 8013292:	bf00      	nop
}
 8013294:	371c      	adds	r7, #28
 8013296:	46bd      	mov	sp, r7
 8013298:	bd90      	pop	{r4, r7, pc}
 801329a:	bf00      	nop
 801329c:	20004af4 	.word	0x20004af4
 80132a0:	0801ce5c 	.word	0x0801ce5c
 80132a4:	0801d054 	.word	0x0801d054
 80132a8:	0801cea8 	.word	0x0801cea8
 80132ac:	20004aec 	.word	0x20004aec
 80132b0:	20004af2 	.word	0x20004af2
 80132b4:	20004ae8 	.word	0x20004ae8
 80132b8:	20004ad8 	.word	0x20004ad8
 80132bc:	200082a0 	.word	0x200082a0
 80132c0:	200082a4 	.word	0x200082a4
 80132c4:	20008290 	.word	0x20008290
 80132c8:	2000dba4 	.word	0x2000dba4
 80132cc:	2000dba0 	.word	0x2000dba0

080132d0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b086      	sub	sp, #24
 80132d4:	af04      	add	r7, sp, #16
 80132d6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80132d8:	4b2f      	ldr	r3, [pc, #188]	; (8013398 <tcp_timewait_input+0xc8>)
 80132da:	781b      	ldrb	r3, [r3, #0]
 80132dc:	f003 0304 	and.w	r3, r3, #4
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d153      	bne.n	801338c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d106      	bne.n	80132f8 <tcp_timewait_input+0x28>
 80132ea:	4b2c      	ldr	r3, [pc, #176]	; (801339c <tcp_timewait_input+0xcc>)
 80132ec:	f240 22ee 	movw	r2, #750	; 0x2ee
 80132f0:	492b      	ldr	r1, [pc, #172]	; (80133a0 <tcp_timewait_input+0xd0>)
 80132f2:	482c      	ldr	r0, [pc, #176]	; (80133a4 <tcp_timewait_input+0xd4>)
 80132f4:	f006 ff46 	bl	801a184 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80132f8:	4b27      	ldr	r3, [pc, #156]	; (8013398 <tcp_timewait_input+0xc8>)
 80132fa:	781b      	ldrb	r3, [r3, #0]
 80132fc:	f003 0302 	and.w	r3, r3, #2
 8013300:	2b00      	cmp	r3, #0
 8013302:	d02a      	beq.n	801335a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013304:	4b28      	ldr	r3, [pc, #160]	; (80133a8 <tcp_timewait_input+0xd8>)
 8013306:	681a      	ldr	r2, [r3, #0]
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801330c:	1ad3      	subs	r3, r2, r3
 801330e:	2b00      	cmp	r3, #0
 8013310:	db2d      	blt.n	801336e <tcp_timewait_input+0x9e>
 8013312:	4b25      	ldr	r3, [pc, #148]	; (80133a8 <tcp_timewait_input+0xd8>)
 8013314:	681a      	ldr	r2, [r3, #0]
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801331a:	6879      	ldr	r1, [r7, #4]
 801331c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801331e:	440b      	add	r3, r1
 8013320:	1ad3      	subs	r3, r2, r3
 8013322:	2b00      	cmp	r3, #0
 8013324:	dc23      	bgt.n	801336e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013326:	4b21      	ldr	r3, [pc, #132]	; (80133ac <tcp_timewait_input+0xdc>)
 8013328:	6819      	ldr	r1, [r3, #0]
 801332a:	4b21      	ldr	r3, [pc, #132]	; (80133b0 <tcp_timewait_input+0xe0>)
 801332c:	881b      	ldrh	r3, [r3, #0]
 801332e:	461a      	mov	r2, r3
 8013330:	4b1d      	ldr	r3, [pc, #116]	; (80133a8 <tcp_timewait_input+0xd8>)
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013336:	4b1f      	ldr	r3, [pc, #124]	; (80133b4 <tcp_timewait_input+0xe4>)
 8013338:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801333a:	885b      	ldrh	r3, [r3, #2]
 801333c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801333e:	4a1d      	ldr	r2, [pc, #116]	; (80133b4 <tcp_timewait_input+0xe4>)
 8013340:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013342:	8812      	ldrh	r2, [r2, #0]
 8013344:	b292      	uxth	r2, r2
 8013346:	9202      	str	r2, [sp, #8]
 8013348:	9301      	str	r3, [sp, #4]
 801334a:	4b1b      	ldr	r3, [pc, #108]	; (80133b8 <tcp_timewait_input+0xe8>)
 801334c:	9300      	str	r3, [sp, #0]
 801334e:	4b1b      	ldr	r3, [pc, #108]	; (80133bc <tcp_timewait_input+0xec>)
 8013350:	4602      	mov	r2, r0
 8013352:	6878      	ldr	r0, [r7, #4]
 8013354:	f003 fac8 	bl	80168e8 <tcp_rst>
      return;
 8013358:	e01b      	b.n	8013392 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801335a:	4b0f      	ldr	r3, [pc, #60]	; (8013398 <tcp_timewait_input+0xc8>)
 801335c:	781b      	ldrb	r3, [r3, #0]
 801335e:	f003 0301 	and.w	r3, r3, #1
 8013362:	2b00      	cmp	r3, #0
 8013364:	d003      	beq.n	801336e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013366:	4b16      	ldr	r3, [pc, #88]	; (80133c0 <tcp_timewait_input+0xf0>)
 8013368:	681a      	ldr	r2, [r3, #0]
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801336e:	4b10      	ldr	r3, [pc, #64]	; (80133b0 <tcp_timewait_input+0xe0>)
 8013370:	881b      	ldrh	r3, [r3, #0]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d00c      	beq.n	8013390 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	8b5b      	ldrh	r3, [r3, #26]
 801337a:	f043 0302 	orr.w	r3, r3, #2
 801337e:	b29a      	uxth	r2, r3
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f002 fcfb 	bl	8015d80 <tcp_output>
  }
  return;
 801338a:	e001      	b.n	8013390 <tcp_timewait_input+0xc0>
    return;
 801338c:	bf00      	nop
 801338e:	e000      	b.n	8013392 <tcp_timewait_input+0xc2>
  return;
 8013390:	bf00      	nop
}
 8013392:	3708      	adds	r7, #8
 8013394:	46bd      	mov	sp, r7
 8013396:	bd80      	pop	{r7, pc}
 8013398:	20004af4 	.word	0x20004af4
 801339c:	0801ce5c 	.word	0x0801ce5c
 80133a0:	0801d074 	.word	0x0801d074
 80133a4:	0801cea8 	.word	0x0801cea8
 80133a8:	20004ae8 	.word	0x20004ae8
 80133ac:	20004aec 	.word	0x20004aec
 80133b0:	20004af2 	.word	0x20004af2
 80133b4:	20004ad8 	.word	0x20004ad8
 80133b8:	200082a0 	.word	0x200082a0
 80133bc:	200082a4 	.word	0x200082a4
 80133c0:	2000dba8 	.word	0x2000dba8

080133c4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80133c4:	b590      	push	{r4, r7, lr}
 80133c6:	b08d      	sub	sp, #52	; 0x34
 80133c8:	af04      	add	r7, sp, #16
 80133ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80133cc:	2300      	movs	r3, #0
 80133ce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80133d0:	2300      	movs	r3, #0
 80133d2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d106      	bne.n	80133e8 <tcp_process+0x24>
 80133da:	4ba5      	ldr	r3, [pc, #660]	; (8013670 <tcp_process+0x2ac>)
 80133dc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80133e0:	49a4      	ldr	r1, [pc, #656]	; (8013674 <tcp_process+0x2b0>)
 80133e2:	48a5      	ldr	r0, [pc, #660]	; (8013678 <tcp_process+0x2b4>)
 80133e4:	f006 fece 	bl	801a184 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80133e8:	4ba4      	ldr	r3, [pc, #656]	; (801367c <tcp_process+0x2b8>)
 80133ea:	781b      	ldrb	r3, [r3, #0]
 80133ec:	f003 0304 	and.w	r3, r3, #4
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d04e      	beq.n	8013492 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	7d1b      	ldrb	r3, [r3, #20]
 80133f8:	2b02      	cmp	r3, #2
 80133fa:	d108      	bne.n	801340e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013400:	4b9f      	ldr	r3, [pc, #636]	; (8013680 <tcp_process+0x2bc>)
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	429a      	cmp	r2, r3
 8013406:	d123      	bne.n	8013450 <tcp_process+0x8c>
        acceptable = 1;
 8013408:	2301      	movs	r3, #1
 801340a:	76fb      	strb	r3, [r7, #27]
 801340c:	e020      	b.n	8013450 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013412:	4b9c      	ldr	r3, [pc, #624]	; (8013684 <tcp_process+0x2c0>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	429a      	cmp	r2, r3
 8013418:	d102      	bne.n	8013420 <tcp_process+0x5c>
        acceptable = 1;
 801341a:	2301      	movs	r3, #1
 801341c:	76fb      	strb	r3, [r7, #27]
 801341e:	e017      	b.n	8013450 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013420:	4b98      	ldr	r3, [pc, #608]	; (8013684 <tcp_process+0x2c0>)
 8013422:	681a      	ldr	r2, [r3, #0]
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013428:	1ad3      	subs	r3, r2, r3
 801342a:	2b00      	cmp	r3, #0
 801342c:	db10      	blt.n	8013450 <tcp_process+0x8c>
 801342e:	4b95      	ldr	r3, [pc, #596]	; (8013684 <tcp_process+0x2c0>)
 8013430:	681a      	ldr	r2, [r3, #0]
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013436:	6879      	ldr	r1, [r7, #4]
 8013438:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801343a:	440b      	add	r3, r1
 801343c:	1ad3      	subs	r3, r2, r3
 801343e:	2b00      	cmp	r3, #0
 8013440:	dc06      	bgt.n	8013450 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	8b5b      	ldrh	r3, [r3, #26]
 8013446:	f043 0302 	orr.w	r3, r3, #2
 801344a:	b29a      	uxth	r2, r3
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013450:	7efb      	ldrb	r3, [r7, #27]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d01b      	beq.n	801348e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	7d1b      	ldrb	r3, [r3, #20]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d106      	bne.n	801346c <tcp_process+0xa8>
 801345e:	4b84      	ldr	r3, [pc, #528]	; (8013670 <tcp_process+0x2ac>)
 8013460:	f44f 724e 	mov.w	r2, #824	; 0x338
 8013464:	4988      	ldr	r1, [pc, #544]	; (8013688 <tcp_process+0x2c4>)
 8013466:	4884      	ldr	r0, [pc, #528]	; (8013678 <tcp_process+0x2b4>)
 8013468:	f006 fe8c 	bl	801a184 <iprintf>
      recv_flags |= TF_RESET;
 801346c:	4b87      	ldr	r3, [pc, #540]	; (801368c <tcp_process+0x2c8>)
 801346e:	781b      	ldrb	r3, [r3, #0]
 8013470:	f043 0308 	orr.w	r3, r3, #8
 8013474:	b2da      	uxtb	r2, r3
 8013476:	4b85      	ldr	r3, [pc, #532]	; (801368c <tcp_process+0x2c8>)
 8013478:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	8b5b      	ldrh	r3, [r3, #26]
 801347e:	f023 0301 	bic.w	r3, r3, #1
 8013482:	b29a      	uxth	r2, r3
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013488:	f06f 030d 	mvn.w	r3, #13
 801348c:	e37a      	b.n	8013b84 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801348e:	2300      	movs	r3, #0
 8013490:	e378      	b.n	8013b84 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013492:	4b7a      	ldr	r3, [pc, #488]	; (801367c <tcp_process+0x2b8>)
 8013494:	781b      	ldrb	r3, [r3, #0]
 8013496:	f003 0302 	and.w	r3, r3, #2
 801349a:	2b00      	cmp	r3, #0
 801349c:	d010      	beq.n	80134c0 <tcp_process+0xfc>
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	7d1b      	ldrb	r3, [r3, #20]
 80134a2:	2b02      	cmp	r3, #2
 80134a4:	d00c      	beq.n	80134c0 <tcp_process+0xfc>
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	7d1b      	ldrb	r3, [r3, #20]
 80134aa:	2b03      	cmp	r3, #3
 80134ac:	d008      	beq.n	80134c0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	8b5b      	ldrh	r3, [r3, #26]
 80134b2:	f043 0302 	orr.w	r3, r3, #2
 80134b6:	b29a      	uxth	r2, r3
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80134bc:	2300      	movs	r3, #0
 80134be:	e361      	b.n	8013b84 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	8b5b      	ldrh	r3, [r3, #26]
 80134c4:	f003 0310 	and.w	r3, r3, #16
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d103      	bne.n	80134d4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80134cc:	4b70      	ldr	r3, [pc, #448]	; (8013690 <tcp_process+0x2cc>)
 80134ce:	681a      	ldr	r2, [r3, #0]
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2200      	movs	r2, #0
 80134d8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	2200      	movs	r2, #0
 80134e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80134e4:	6878      	ldr	r0, [r7, #4]
 80134e6:	f001 fc2d 	bl	8014d44 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	7d1b      	ldrb	r3, [r3, #20]
 80134ee:	3b02      	subs	r3, #2
 80134f0:	2b07      	cmp	r3, #7
 80134f2:	f200 8337 	bhi.w	8013b64 <tcp_process+0x7a0>
 80134f6:	a201      	add	r2, pc, #4	; (adr r2, 80134fc <tcp_process+0x138>)
 80134f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134fc:	0801351d 	.word	0x0801351d
 8013500:	0801374d 	.word	0x0801374d
 8013504:	080138c5 	.word	0x080138c5
 8013508:	080138ef 	.word	0x080138ef
 801350c:	08013a13 	.word	0x08013a13
 8013510:	080138c5 	.word	0x080138c5
 8013514:	08013a9f 	.word	0x08013a9f
 8013518:	08013b2f 	.word	0x08013b2f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801351c:	4b57      	ldr	r3, [pc, #348]	; (801367c <tcp_process+0x2b8>)
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	f003 0310 	and.w	r3, r3, #16
 8013524:	2b00      	cmp	r3, #0
 8013526:	f000 80e4 	beq.w	80136f2 <tcp_process+0x32e>
 801352a:	4b54      	ldr	r3, [pc, #336]	; (801367c <tcp_process+0x2b8>)
 801352c:	781b      	ldrb	r3, [r3, #0]
 801352e:	f003 0302 	and.w	r3, r3, #2
 8013532:	2b00      	cmp	r3, #0
 8013534:	f000 80dd 	beq.w	80136f2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801353c:	1c5a      	adds	r2, r3, #1
 801353e:	4b50      	ldr	r3, [pc, #320]	; (8013680 <tcp_process+0x2bc>)
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	429a      	cmp	r2, r3
 8013544:	f040 80d5 	bne.w	80136f2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013548:	4b4e      	ldr	r3, [pc, #312]	; (8013684 <tcp_process+0x2c0>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	1c5a      	adds	r2, r3, #1
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801355a:	4b49      	ldr	r3, [pc, #292]	; (8013680 <tcp_process+0x2bc>)
 801355c:	681a      	ldr	r2, [r3, #0]
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8013562:	4b4c      	ldr	r3, [pc, #304]	; (8013694 <tcp_process+0x2d0>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	89db      	ldrh	r3, [r3, #14]
 8013568:	b29a      	uxth	r2, r3
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801357c:	4b41      	ldr	r3, [pc, #260]	; (8013684 <tcp_process+0x2c0>)
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	1e5a      	subs	r2, r3, #1
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2204      	movs	r2, #4
 801358a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	3304      	adds	r3, #4
 8013594:	4618      	mov	r0, r3
 8013596:	f005 f8bd 	bl	8018714 <ip4_route>
 801359a:	4601      	mov	r1, r0
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	3304      	adds	r3, #4
 80135a0:	461a      	mov	r2, r3
 80135a2:	4620      	mov	r0, r4
 80135a4:	f7ff f88e 	bl	80126c4 <tcp_eff_send_mss_netif>
 80135a8:	4603      	mov	r3, r0
 80135aa:	461a      	mov	r2, r3
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135b4:	009a      	lsls	r2, r3, #2
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135ba:	005b      	lsls	r3, r3, #1
 80135bc:	f241 111c 	movw	r1, #4380	; 0x111c
 80135c0:	428b      	cmp	r3, r1
 80135c2:	bf38      	it	cc
 80135c4:	460b      	movcc	r3, r1
 80135c6:	429a      	cmp	r2, r3
 80135c8:	d204      	bcs.n	80135d4 <tcp_process+0x210>
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135ce:	009b      	lsls	r3, r3, #2
 80135d0:	b29b      	uxth	r3, r3
 80135d2:	e00d      	b.n	80135f0 <tcp_process+0x22c>
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135d8:	005b      	lsls	r3, r3, #1
 80135da:	f241 121c 	movw	r2, #4380	; 0x111c
 80135de:	4293      	cmp	r3, r2
 80135e0:	d904      	bls.n	80135ec <tcp_process+0x228>
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135e6:	005b      	lsls	r3, r3, #1
 80135e8:	b29b      	uxth	r3, r3
 80135ea:	e001      	b.n	80135f0 <tcp_process+0x22c>
 80135ec:	f241 131c 	movw	r3, #4380	; 0x111c
 80135f0:	687a      	ldr	r2, [r7, #4]
 80135f2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d106      	bne.n	801360e <tcp_process+0x24a>
 8013600:	4b1b      	ldr	r3, [pc, #108]	; (8013670 <tcp_process+0x2ac>)
 8013602:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8013606:	4924      	ldr	r1, [pc, #144]	; (8013698 <tcp_process+0x2d4>)
 8013608:	481b      	ldr	r0, [pc, #108]	; (8013678 <tcp_process+0x2b4>)
 801360a:	f006 fdbb 	bl	801a184 <iprintf>
        --pcb->snd_queuelen;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013614:	3b01      	subs	r3, #1
 8013616:	b29a      	uxth	r2, r3
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013622:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013624:	69fb      	ldr	r3, [r7, #28]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d111      	bne.n	801364e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801362e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013630:	69fb      	ldr	r3, [r7, #28]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d106      	bne.n	8013644 <tcp_process+0x280>
 8013636:	4b0e      	ldr	r3, [pc, #56]	; (8013670 <tcp_process+0x2ac>)
 8013638:	f44f 725d 	mov.w	r2, #884	; 0x374
 801363c:	4917      	ldr	r1, [pc, #92]	; (801369c <tcp_process+0x2d8>)
 801363e:	480e      	ldr	r0, [pc, #56]	; (8013678 <tcp_process+0x2b4>)
 8013640:	f006 fda0 	bl	801a184 <iprintf>
          pcb->unsent = rseg->next;
 8013644:	69fb      	ldr	r3, [r7, #28]
 8013646:	681a      	ldr	r2, [r3, #0]
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	66da      	str	r2, [r3, #108]	; 0x6c
 801364c:	e003      	b.n	8013656 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801364e:	69fb      	ldr	r3, [r7, #28]
 8013650:	681a      	ldr	r2, [r3, #0]
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013656:	69f8      	ldr	r0, [r7, #28]
 8013658:	f7fe fc6f 	bl	8011f3a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013660:	2b00      	cmp	r3, #0
 8013662:	d11d      	bne.n	80136a0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801366a:	861a      	strh	r2, [r3, #48]	; 0x30
 801366c:	e01f      	b.n	80136ae <tcp_process+0x2ea>
 801366e:	bf00      	nop
 8013670:	0801ce5c 	.word	0x0801ce5c
 8013674:	0801d094 	.word	0x0801d094
 8013678:	0801cea8 	.word	0x0801cea8
 801367c:	20004af4 	.word	0x20004af4
 8013680:	20004aec 	.word	0x20004aec
 8013684:	20004ae8 	.word	0x20004ae8
 8013688:	0801d0b0 	.word	0x0801d0b0
 801368c:	20004af5 	.word	0x20004af5
 8013690:	2000dba8 	.word	0x2000dba8
 8013694:	20004ad8 	.word	0x20004ad8
 8013698:	0801d0d0 	.word	0x0801d0d0
 801369c:	0801d0e8 	.word	0x0801d0e8
        } else {
          pcb->rtime = 0;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2200      	movs	r2, #0
 80136a4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	2200      	movs	r2, #0
 80136aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d00a      	beq.n	80136ce <tcp_process+0x30a>
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80136be:	687a      	ldr	r2, [r7, #4]
 80136c0:	6910      	ldr	r0, [r2, #16]
 80136c2:	2200      	movs	r2, #0
 80136c4:	6879      	ldr	r1, [r7, #4]
 80136c6:	4798      	blx	r3
 80136c8:	4603      	mov	r3, r0
 80136ca:	76bb      	strb	r3, [r7, #26]
 80136cc:	e001      	b.n	80136d2 <tcp_process+0x30e>
 80136ce:	2300      	movs	r3, #0
 80136d0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80136d2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80136d6:	f113 0f0d 	cmn.w	r3, #13
 80136da:	d102      	bne.n	80136e2 <tcp_process+0x31e>
          return ERR_ABRT;
 80136dc:	f06f 030c 	mvn.w	r3, #12
 80136e0:	e250      	b.n	8013b84 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	8b5b      	ldrh	r3, [r3, #26]
 80136e6:	f043 0302 	orr.w	r3, r3, #2
 80136ea:	b29a      	uxth	r2, r3
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80136f0:	e23a      	b.n	8013b68 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80136f2:	4b9d      	ldr	r3, [pc, #628]	; (8013968 <tcp_process+0x5a4>)
 80136f4:	781b      	ldrb	r3, [r3, #0]
 80136f6:	f003 0310 	and.w	r3, r3, #16
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	f000 8234 	beq.w	8013b68 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013700:	4b9a      	ldr	r3, [pc, #616]	; (801396c <tcp_process+0x5a8>)
 8013702:	6819      	ldr	r1, [r3, #0]
 8013704:	4b9a      	ldr	r3, [pc, #616]	; (8013970 <tcp_process+0x5ac>)
 8013706:	881b      	ldrh	r3, [r3, #0]
 8013708:	461a      	mov	r2, r3
 801370a:	4b9a      	ldr	r3, [pc, #616]	; (8013974 <tcp_process+0x5b0>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013710:	4b99      	ldr	r3, [pc, #612]	; (8013978 <tcp_process+0x5b4>)
 8013712:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013714:	885b      	ldrh	r3, [r3, #2]
 8013716:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013718:	4a97      	ldr	r2, [pc, #604]	; (8013978 <tcp_process+0x5b4>)
 801371a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801371c:	8812      	ldrh	r2, [r2, #0]
 801371e:	b292      	uxth	r2, r2
 8013720:	9202      	str	r2, [sp, #8]
 8013722:	9301      	str	r3, [sp, #4]
 8013724:	4b95      	ldr	r3, [pc, #596]	; (801397c <tcp_process+0x5b8>)
 8013726:	9300      	str	r3, [sp, #0]
 8013728:	4b95      	ldr	r3, [pc, #596]	; (8013980 <tcp_process+0x5bc>)
 801372a:	4602      	mov	r2, r0
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f003 f8db 	bl	80168e8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013738:	2b05      	cmp	r3, #5
 801373a:	f200 8215 	bhi.w	8013b68 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	2200      	movs	r2, #0
 8013742:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013744:	6878      	ldr	r0, [r7, #4]
 8013746:	f002 fea5 	bl	8016494 <tcp_rexmit_rto>
      break;
 801374a:	e20d      	b.n	8013b68 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801374c:	4b86      	ldr	r3, [pc, #536]	; (8013968 <tcp_process+0x5a4>)
 801374e:	781b      	ldrb	r3, [r3, #0]
 8013750:	f003 0310 	and.w	r3, r3, #16
 8013754:	2b00      	cmp	r3, #0
 8013756:	f000 80a1 	beq.w	801389c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801375a:	4b84      	ldr	r3, [pc, #528]	; (801396c <tcp_process+0x5a8>)
 801375c:	681a      	ldr	r2, [r3, #0]
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013762:	1ad3      	subs	r3, r2, r3
 8013764:	3b01      	subs	r3, #1
 8013766:	2b00      	cmp	r3, #0
 8013768:	db7e      	blt.n	8013868 <tcp_process+0x4a4>
 801376a:	4b80      	ldr	r3, [pc, #512]	; (801396c <tcp_process+0x5a8>)
 801376c:	681a      	ldr	r2, [r3, #0]
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013772:	1ad3      	subs	r3, r2, r3
 8013774:	2b00      	cmp	r3, #0
 8013776:	dc77      	bgt.n	8013868 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	2204      	movs	r2, #4
 801377c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013782:	2b00      	cmp	r3, #0
 8013784:	d102      	bne.n	801378c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013786:	23fa      	movs	r3, #250	; 0xfa
 8013788:	76bb      	strb	r3, [r7, #26]
 801378a:	e01d      	b.n	80137c8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013790:	699b      	ldr	r3, [r3, #24]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d106      	bne.n	80137a4 <tcp_process+0x3e0>
 8013796:	4b7b      	ldr	r3, [pc, #492]	; (8013984 <tcp_process+0x5c0>)
 8013798:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801379c:	497a      	ldr	r1, [pc, #488]	; (8013988 <tcp_process+0x5c4>)
 801379e:	487b      	ldr	r0, [pc, #492]	; (801398c <tcp_process+0x5c8>)
 80137a0:	f006 fcf0 	bl	801a184 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137a8:	699b      	ldr	r3, [r3, #24]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d00a      	beq.n	80137c4 <tcp_process+0x400>
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137b2:	699b      	ldr	r3, [r3, #24]
 80137b4:	687a      	ldr	r2, [r7, #4]
 80137b6:	6910      	ldr	r0, [r2, #16]
 80137b8:	2200      	movs	r2, #0
 80137ba:	6879      	ldr	r1, [r7, #4]
 80137bc:	4798      	blx	r3
 80137be:	4603      	mov	r3, r0
 80137c0:	76bb      	strb	r3, [r7, #26]
 80137c2:	e001      	b.n	80137c8 <tcp_process+0x404>
 80137c4:	23f0      	movs	r3, #240	; 0xf0
 80137c6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80137c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d00a      	beq.n	80137e6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80137d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80137d4:	f113 0f0d 	cmn.w	r3, #13
 80137d8:	d002      	beq.n	80137e0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80137da:	6878      	ldr	r0, [r7, #4]
 80137dc:	f7fd fd1a 	bl	8011214 <tcp_abort>
            }
            return ERR_ABRT;
 80137e0:	f06f 030c 	mvn.w	r3, #12
 80137e4:	e1ce      	b.n	8013b84 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80137e6:	6878      	ldr	r0, [r7, #4]
 80137e8:	f000 fae0 	bl	8013dac <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80137ec:	4b68      	ldr	r3, [pc, #416]	; (8013990 <tcp_process+0x5cc>)
 80137ee:	881b      	ldrh	r3, [r3, #0]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d005      	beq.n	8013800 <tcp_process+0x43c>
            recv_acked--;
 80137f4:	4b66      	ldr	r3, [pc, #408]	; (8013990 <tcp_process+0x5cc>)
 80137f6:	881b      	ldrh	r3, [r3, #0]
 80137f8:	3b01      	subs	r3, #1
 80137fa:	b29a      	uxth	r2, r3
 80137fc:	4b64      	ldr	r3, [pc, #400]	; (8013990 <tcp_process+0x5cc>)
 80137fe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013804:	009a      	lsls	r2, r3, #2
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801380a:	005b      	lsls	r3, r3, #1
 801380c:	f241 111c 	movw	r1, #4380	; 0x111c
 8013810:	428b      	cmp	r3, r1
 8013812:	bf38      	it	cc
 8013814:	460b      	movcc	r3, r1
 8013816:	429a      	cmp	r2, r3
 8013818:	d204      	bcs.n	8013824 <tcp_process+0x460>
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801381e:	009b      	lsls	r3, r3, #2
 8013820:	b29b      	uxth	r3, r3
 8013822:	e00d      	b.n	8013840 <tcp_process+0x47c>
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013828:	005b      	lsls	r3, r3, #1
 801382a:	f241 121c 	movw	r2, #4380	; 0x111c
 801382e:	4293      	cmp	r3, r2
 8013830:	d904      	bls.n	801383c <tcp_process+0x478>
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013836:	005b      	lsls	r3, r3, #1
 8013838:	b29b      	uxth	r3, r3
 801383a:	e001      	b.n	8013840 <tcp_process+0x47c>
 801383c:	f241 131c 	movw	r3, #4380	; 0x111c
 8013840:	687a      	ldr	r2, [r7, #4]
 8013842:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013846:	4b53      	ldr	r3, [pc, #332]	; (8013994 <tcp_process+0x5d0>)
 8013848:	781b      	ldrb	r3, [r3, #0]
 801384a:	f003 0320 	and.w	r3, r3, #32
 801384e:	2b00      	cmp	r3, #0
 8013850:	d037      	beq.n	80138c2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	8b5b      	ldrh	r3, [r3, #26]
 8013856:	f043 0302 	orr.w	r3, r3, #2
 801385a:	b29a      	uxth	r2, r3
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	2207      	movs	r2, #7
 8013864:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013866:	e02c      	b.n	80138c2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013868:	4b40      	ldr	r3, [pc, #256]	; (801396c <tcp_process+0x5a8>)
 801386a:	6819      	ldr	r1, [r3, #0]
 801386c:	4b40      	ldr	r3, [pc, #256]	; (8013970 <tcp_process+0x5ac>)
 801386e:	881b      	ldrh	r3, [r3, #0]
 8013870:	461a      	mov	r2, r3
 8013872:	4b40      	ldr	r3, [pc, #256]	; (8013974 <tcp_process+0x5b0>)
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013878:	4b3f      	ldr	r3, [pc, #252]	; (8013978 <tcp_process+0x5b4>)
 801387a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801387c:	885b      	ldrh	r3, [r3, #2]
 801387e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013880:	4a3d      	ldr	r2, [pc, #244]	; (8013978 <tcp_process+0x5b4>)
 8013882:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013884:	8812      	ldrh	r2, [r2, #0]
 8013886:	b292      	uxth	r2, r2
 8013888:	9202      	str	r2, [sp, #8]
 801388a:	9301      	str	r3, [sp, #4]
 801388c:	4b3b      	ldr	r3, [pc, #236]	; (801397c <tcp_process+0x5b8>)
 801388e:	9300      	str	r3, [sp, #0]
 8013890:	4b3b      	ldr	r3, [pc, #236]	; (8013980 <tcp_process+0x5bc>)
 8013892:	4602      	mov	r2, r0
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f003 f827 	bl	80168e8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801389a:	e167      	b.n	8013b6c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801389c:	4b32      	ldr	r3, [pc, #200]	; (8013968 <tcp_process+0x5a4>)
 801389e:	781b      	ldrb	r3, [r3, #0]
 80138a0:	f003 0302 	and.w	r3, r3, #2
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	f000 8161 	beq.w	8013b6c <tcp_process+0x7a8>
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ae:	1e5a      	subs	r2, r3, #1
 80138b0:	4b30      	ldr	r3, [pc, #192]	; (8013974 <tcp_process+0x5b0>)
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	429a      	cmp	r2, r3
 80138b6:	f040 8159 	bne.w	8013b6c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	f002 fe0c 	bl	80164d8 <tcp_rexmit>
      break;
 80138c0:	e154      	b.n	8013b6c <tcp_process+0x7a8>
 80138c2:	e153      	b.n	8013b6c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80138c4:	6878      	ldr	r0, [r7, #4]
 80138c6:	f000 fa71 	bl	8013dac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80138ca:	4b32      	ldr	r3, [pc, #200]	; (8013994 <tcp_process+0x5d0>)
 80138cc:	781b      	ldrb	r3, [r3, #0]
 80138ce:	f003 0320 	and.w	r3, r3, #32
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	f000 814c 	beq.w	8013b70 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	8b5b      	ldrh	r3, [r3, #26]
 80138dc:	f043 0302 	orr.w	r3, r3, #2
 80138e0:	b29a      	uxth	r2, r3
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	2207      	movs	r2, #7
 80138ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 80138ec:	e140      	b.n	8013b70 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80138ee:	6878      	ldr	r0, [r7, #4]
 80138f0:	f000 fa5c 	bl	8013dac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80138f4:	4b27      	ldr	r3, [pc, #156]	; (8013994 <tcp_process+0x5d0>)
 80138f6:	781b      	ldrb	r3, [r3, #0]
 80138f8:	f003 0320 	and.w	r3, r3, #32
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d071      	beq.n	80139e4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013900:	4b19      	ldr	r3, [pc, #100]	; (8013968 <tcp_process+0x5a4>)
 8013902:	781b      	ldrb	r3, [r3, #0]
 8013904:	f003 0310 	and.w	r3, r3, #16
 8013908:	2b00      	cmp	r3, #0
 801390a:	d060      	beq.n	80139ce <tcp_process+0x60a>
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013910:	4b16      	ldr	r3, [pc, #88]	; (801396c <tcp_process+0x5a8>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	429a      	cmp	r2, r3
 8013916:	d15a      	bne.n	80139ce <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801391c:	2b00      	cmp	r3, #0
 801391e:	d156      	bne.n	80139ce <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	8b5b      	ldrh	r3, [r3, #26]
 8013924:	f043 0302 	orr.w	r3, r3, #2
 8013928:	b29a      	uxth	r2, r3
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801392e:	6878      	ldr	r0, [r7, #4]
 8013930:	f7fe fdbe 	bl	80124b0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013934:	4b18      	ldr	r3, [pc, #96]	; (8013998 <tcp_process+0x5d4>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	687a      	ldr	r2, [r7, #4]
 801393a:	429a      	cmp	r2, r3
 801393c:	d105      	bne.n	801394a <tcp_process+0x586>
 801393e:	4b16      	ldr	r3, [pc, #88]	; (8013998 <tcp_process+0x5d4>)
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	68db      	ldr	r3, [r3, #12]
 8013944:	4a14      	ldr	r2, [pc, #80]	; (8013998 <tcp_process+0x5d4>)
 8013946:	6013      	str	r3, [r2, #0]
 8013948:	e02e      	b.n	80139a8 <tcp_process+0x5e4>
 801394a:	4b13      	ldr	r3, [pc, #76]	; (8013998 <tcp_process+0x5d4>)
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	617b      	str	r3, [r7, #20]
 8013950:	e027      	b.n	80139a2 <tcp_process+0x5de>
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	68db      	ldr	r3, [r3, #12]
 8013956:	687a      	ldr	r2, [r7, #4]
 8013958:	429a      	cmp	r2, r3
 801395a:	d11f      	bne.n	801399c <tcp_process+0x5d8>
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	68da      	ldr	r2, [r3, #12]
 8013960:	697b      	ldr	r3, [r7, #20]
 8013962:	60da      	str	r2, [r3, #12]
 8013964:	e020      	b.n	80139a8 <tcp_process+0x5e4>
 8013966:	bf00      	nop
 8013968:	20004af4 	.word	0x20004af4
 801396c:	20004aec 	.word	0x20004aec
 8013970:	20004af2 	.word	0x20004af2
 8013974:	20004ae8 	.word	0x20004ae8
 8013978:	20004ad8 	.word	0x20004ad8
 801397c:	200082a0 	.word	0x200082a0
 8013980:	200082a4 	.word	0x200082a4
 8013984:	0801ce5c 	.word	0x0801ce5c
 8013988:	0801d0fc 	.word	0x0801d0fc
 801398c:	0801cea8 	.word	0x0801cea8
 8013990:	20004af0 	.word	0x20004af0
 8013994:	20004af5 	.word	0x20004af5
 8013998:	2000dba4 	.word	0x2000dba4
 801399c:	697b      	ldr	r3, [r7, #20]
 801399e:	68db      	ldr	r3, [r3, #12]
 80139a0:	617b      	str	r3, [r7, #20]
 80139a2:	697b      	ldr	r3, [r7, #20]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d1d4      	bne.n	8013952 <tcp_process+0x58e>
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2200      	movs	r2, #0
 80139ac:	60da      	str	r2, [r3, #12]
 80139ae:	4b77      	ldr	r3, [pc, #476]	; (8013b8c <tcp_process+0x7c8>)
 80139b0:	2201      	movs	r2, #1
 80139b2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	220a      	movs	r2, #10
 80139b8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80139ba:	4b75      	ldr	r3, [pc, #468]	; (8013b90 <tcp_process+0x7cc>)
 80139bc:	681a      	ldr	r2, [r3, #0]
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	60da      	str	r2, [r3, #12]
 80139c2:	4a73      	ldr	r2, [pc, #460]	; (8013b90 <tcp_process+0x7cc>)
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	6013      	str	r3, [r2, #0]
 80139c8:	f003 f950 	bl	8016c6c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80139cc:	e0d2      	b.n	8013b74 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	8b5b      	ldrh	r3, [r3, #26]
 80139d2:	f043 0302 	orr.w	r3, r3, #2
 80139d6:	b29a      	uxth	r2, r3
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2208      	movs	r2, #8
 80139e0:	751a      	strb	r2, [r3, #20]
      break;
 80139e2:	e0c7      	b.n	8013b74 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80139e4:	4b6b      	ldr	r3, [pc, #428]	; (8013b94 <tcp_process+0x7d0>)
 80139e6:	781b      	ldrb	r3, [r3, #0]
 80139e8:	f003 0310 	and.w	r3, r3, #16
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	f000 80c1 	beq.w	8013b74 <tcp_process+0x7b0>
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80139f6:	4b68      	ldr	r3, [pc, #416]	; (8013b98 <tcp_process+0x7d4>)
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	429a      	cmp	r2, r3
 80139fc:	f040 80ba 	bne.w	8013b74 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	f040 80b5 	bne.w	8013b74 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	2206      	movs	r2, #6
 8013a0e:	751a      	strb	r2, [r3, #20]
      break;
 8013a10:	e0b0      	b.n	8013b74 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013a12:	6878      	ldr	r0, [r7, #4]
 8013a14:	f000 f9ca 	bl	8013dac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013a18:	4b60      	ldr	r3, [pc, #384]	; (8013b9c <tcp_process+0x7d8>)
 8013a1a:	781b      	ldrb	r3, [r3, #0]
 8013a1c:	f003 0320 	and.w	r3, r3, #32
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	f000 80a9 	beq.w	8013b78 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	8b5b      	ldrh	r3, [r3, #26]
 8013a2a:	f043 0302 	orr.w	r3, r3, #2
 8013a2e:	b29a      	uxth	r2, r3
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013a34:	6878      	ldr	r0, [r7, #4]
 8013a36:	f7fe fd3b 	bl	80124b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013a3a:	4b59      	ldr	r3, [pc, #356]	; (8013ba0 <tcp_process+0x7dc>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	687a      	ldr	r2, [r7, #4]
 8013a40:	429a      	cmp	r2, r3
 8013a42:	d105      	bne.n	8013a50 <tcp_process+0x68c>
 8013a44:	4b56      	ldr	r3, [pc, #344]	; (8013ba0 <tcp_process+0x7dc>)
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	68db      	ldr	r3, [r3, #12]
 8013a4a:	4a55      	ldr	r2, [pc, #340]	; (8013ba0 <tcp_process+0x7dc>)
 8013a4c:	6013      	str	r3, [r2, #0]
 8013a4e:	e013      	b.n	8013a78 <tcp_process+0x6b4>
 8013a50:	4b53      	ldr	r3, [pc, #332]	; (8013ba0 <tcp_process+0x7dc>)
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	613b      	str	r3, [r7, #16]
 8013a56:	e00c      	b.n	8013a72 <tcp_process+0x6ae>
 8013a58:	693b      	ldr	r3, [r7, #16]
 8013a5a:	68db      	ldr	r3, [r3, #12]
 8013a5c:	687a      	ldr	r2, [r7, #4]
 8013a5e:	429a      	cmp	r2, r3
 8013a60:	d104      	bne.n	8013a6c <tcp_process+0x6a8>
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	68da      	ldr	r2, [r3, #12]
 8013a66:	693b      	ldr	r3, [r7, #16]
 8013a68:	60da      	str	r2, [r3, #12]
 8013a6a:	e005      	b.n	8013a78 <tcp_process+0x6b4>
 8013a6c:	693b      	ldr	r3, [r7, #16]
 8013a6e:	68db      	ldr	r3, [r3, #12]
 8013a70:	613b      	str	r3, [r7, #16]
 8013a72:	693b      	ldr	r3, [r7, #16]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d1ef      	bne.n	8013a58 <tcp_process+0x694>
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2200      	movs	r2, #0
 8013a7c:	60da      	str	r2, [r3, #12]
 8013a7e:	4b43      	ldr	r3, [pc, #268]	; (8013b8c <tcp_process+0x7c8>)
 8013a80:	2201      	movs	r2, #1
 8013a82:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	220a      	movs	r2, #10
 8013a88:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013a8a:	4b41      	ldr	r3, [pc, #260]	; (8013b90 <tcp_process+0x7cc>)
 8013a8c:	681a      	ldr	r2, [r3, #0]
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	60da      	str	r2, [r3, #12]
 8013a92:	4a3f      	ldr	r2, [pc, #252]	; (8013b90 <tcp_process+0x7cc>)
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	6013      	str	r3, [r2, #0]
 8013a98:	f003 f8e8 	bl	8016c6c <tcp_timer_needed>
      }
      break;
 8013a9c:	e06c      	b.n	8013b78 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013a9e:	6878      	ldr	r0, [r7, #4]
 8013aa0:	f000 f984 	bl	8013dac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013aa4:	4b3b      	ldr	r3, [pc, #236]	; (8013b94 <tcp_process+0x7d0>)
 8013aa6:	781b      	ldrb	r3, [r3, #0]
 8013aa8:	f003 0310 	and.w	r3, r3, #16
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d065      	beq.n	8013b7c <tcp_process+0x7b8>
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013ab4:	4b38      	ldr	r3, [pc, #224]	; (8013b98 <tcp_process+0x7d4>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d15f      	bne.n	8013b7c <tcp_process+0x7b8>
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d15b      	bne.n	8013b7c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013ac4:	6878      	ldr	r0, [r7, #4]
 8013ac6:	f7fe fcf3 	bl	80124b0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013aca:	4b35      	ldr	r3, [pc, #212]	; (8013ba0 <tcp_process+0x7dc>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	687a      	ldr	r2, [r7, #4]
 8013ad0:	429a      	cmp	r2, r3
 8013ad2:	d105      	bne.n	8013ae0 <tcp_process+0x71c>
 8013ad4:	4b32      	ldr	r3, [pc, #200]	; (8013ba0 <tcp_process+0x7dc>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	68db      	ldr	r3, [r3, #12]
 8013ada:	4a31      	ldr	r2, [pc, #196]	; (8013ba0 <tcp_process+0x7dc>)
 8013adc:	6013      	str	r3, [r2, #0]
 8013ade:	e013      	b.n	8013b08 <tcp_process+0x744>
 8013ae0:	4b2f      	ldr	r3, [pc, #188]	; (8013ba0 <tcp_process+0x7dc>)
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	60fb      	str	r3, [r7, #12]
 8013ae6:	e00c      	b.n	8013b02 <tcp_process+0x73e>
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	68db      	ldr	r3, [r3, #12]
 8013aec:	687a      	ldr	r2, [r7, #4]
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d104      	bne.n	8013afc <tcp_process+0x738>
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	68da      	ldr	r2, [r3, #12]
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	60da      	str	r2, [r3, #12]
 8013afa:	e005      	b.n	8013b08 <tcp_process+0x744>
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	68db      	ldr	r3, [r3, #12]
 8013b00:	60fb      	str	r3, [r7, #12]
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d1ef      	bne.n	8013ae8 <tcp_process+0x724>
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	60da      	str	r2, [r3, #12]
 8013b0e:	4b1f      	ldr	r3, [pc, #124]	; (8013b8c <tcp_process+0x7c8>)
 8013b10:	2201      	movs	r2, #1
 8013b12:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	220a      	movs	r2, #10
 8013b18:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013b1a:	4b1d      	ldr	r3, [pc, #116]	; (8013b90 <tcp_process+0x7cc>)
 8013b1c:	681a      	ldr	r2, [r3, #0]
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	60da      	str	r2, [r3, #12]
 8013b22:	4a1b      	ldr	r2, [pc, #108]	; (8013b90 <tcp_process+0x7cc>)
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	6013      	str	r3, [r2, #0]
 8013b28:	f003 f8a0 	bl	8016c6c <tcp_timer_needed>
      }
      break;
 8013b2c:	e026      	b.n	8013b7c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013b2e:	6878      	ldr	r0, [r7, #4]
 8013b30:	f000 f93c 	bl	8013dac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013b34:	4b17      	ldr	r3, [pc, #92]	; (8013b94 <tcp_process+0x7d0>)
 8013b36:	781b      	ldrb	r3, [r3, #0]
 8013b38:	f003 0310 	and.w	r3, r3, #16
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d01f      	beq.n	8013b80 <tcp_process+0x7bc>
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013b44:	4b14      	ldr	r3, [pc, #80]	; (8013b98 <tcp_process+0x7d4>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	429a      	cmp	r2, r3
 8013b4a:	d119      	bne.n	8013b80 <tcp_process+0x7bc>
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d115      	bne.n	8013b80 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013b54:	4b11      	ldr	r3, [pc, #68]	; (8013b9c <tcp_process+0x7d8>)
 8013b56:	781b      	ldrb	r3, [r3, #0]
 8013b58:	f043 0310 	orr.w	r3, r3, #16
 8013b5c:	b2da      	uxtb	r2, r3
 8013b5e:	4b0f      	ldr	r3, [pc, #60]	; (8013b9c <tcp_process+0x7d8>)
 8013b60:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013b62:	e00d      	b.n	8013b80 <tcp_process+0x7bc>
    default:
      break;
 8013b64:	bf00      	nop
 8013b66:	e00c      	b.n	8013b82 <tcp_process+0x7be>
      break;
 8013b68:	bf00      	nop
 8013b6a:	e00a      	b.n	8013b82 <tcp_process+0x7be>
      break;
 8013b6c:	bf00      	nop
 8013b6e:	e008      	b.n	8013b82 <tcp_process+0x7be>
      break;
 8013b70:	bf00      	nop
 8013b72:	e006      	b.n	8013b82 <tcp_process+0x7be>
      break;
 8013b74:	bf00      	nop
 8013b76:	e004      	b.n	8013b82 <tcp_process+0x7be>
      break;
 8013b78:	bf00      	nop
 8013b7a:	e002      	b.n	8013b82 <tcp_process+0x7be>
      break;
 8013b7c:	bf00      	nop
 8013b7e:	e000      	b.n	8013b82 <tcp_process+0x7be>
      break;
 8013b80:	bf00      	nop
  }
  return ERR_OK;
 8013b82:	2300      	movs	r3, #0
}
 8013b84:	4618      	mov	r0, r3
 8013b86:	3724      	adds	r7, #36	; 0x24
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd90      	pop	{r4, r7, pc}
 8013b8c:	2000dba0 	.word	0x2000dba0
 8013b90:	2000dbb4 	.word	0x2000dbb4
 8013b94:	20004af4 	.word	0x20004af4
 8013b98:	20004aec 	.word	0x20004aec
 8013b9c:	20004af5 	.word	0x20004af5
 8013ba0:	2000dba4 	.word	0x2000dba4

08013ba4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013ba4:	b590      	push	{r4, r7, lr}
 8013ba6:	b085      	sub	sp, #20
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d106      	bne.n	8013bc2 <tcp_oos_insert_segment+0x1e>
 8013bb4:	4b3b      	ldr	r3, [pc, #236]	; (8013ca4 <tcp_oos_insert_segment+0x100>)
 8013bb6:	f240 421f 	movw	r2, #1055	; 0x41f
 8013bba:	493b      	ldr	r1, [pc, #236]	; (8013ca8 <tcp_oos_insert_segment+0x104>)
 8013bbc:	483b      	ldr	r0, [pc, #236]	; (8013cac <tcp_oos_insert_segment+0x108>)
 8013bbe:	f006 fae1 	bl	801a184 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	68db      	ldr	r3, [r3, #12]
 8013bc6:	899b      	ldrh	r3, [r3, #12]
 8013bc8:	b29b      	uxth	r3, r3
 8013bca:	4618      	mov	r0, r3
 8013bcc:	f7fb f986 	bl	800eedc <lwip_htons>
 8013bd0:	4603      	mov	r3, r0
 8013bd2:	b2db      	uxtb	r3, r3
 8013bd4:	f003 0301 	and.w	r3, r3, #1
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d028      	beq.n	8013c2e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013bdc:	6838      	ldr	r0, [r7, #0]
 8013bde:	f7fe f997 	bl	8011f10 <tcp_segs_free>
    next = NULL;
 8013be2:	2300      	movs	r3, #0
 8013be4:	603b      	str	r3, [r7, #0]
 8013be6:	e056      	b.n	8013c96 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013be8:	683b      	ldr	r3, [r7, #0]
 8013bea:	68db      	ldr	r3, [r3, #12]
 8013bec:	899b      	ldrh	r3, [r3, #12]
 8013bee:	b29b      	uxth	r3, r3
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f7fb f973 	bl	800eedc <lwip_htons>
 8013bf6:	4603      	mov	r3, r0
 8013bf8:	b2db      	uxtb	r3, r3
 8013bfa:	f003 0301 	and.w	r3, r3, #1
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d00d      	beq.n	8013c1e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	68db      	ldr	r3, [r3, #12]
 8013c06:	899b      	ldrh	r3, [r3, #12]
 8013c08:	b29c      	uxth	r4, r3
 8013c0a:	2001      	movs	r0, #1
 8013c0c:	f7fb f966 	bl	800eedc <lwip_htons>
 8013c10:	4603      	mov	r3, r0
 8013c12:	461a      	mov	r2, r3
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	68db      	ldr	r3, [r3, #12]
 8013c18:	4322      	orrs	r2, r4
 8013c1a:	b292      	uxth	r2, r2
 8013c1c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013c28:	68f8      	ldr	r0, [r7, #12]
 8013c2a:	f7fe f986 	bl	8011f3a <tcp_seg_free>
    while (next &&
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d00e      	beq.n	8013c52 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	891b      	ldrh	r3, [r3, #8]
 8013c38:	461a      	mov	r2, r3
 8013c3a:	4b1d      	ldr	r3, [pc, #116]	; (8013cb0 <tcp_oos_insert_segment+0x10c>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	441a      	add	r2, r3
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	68db      	ldr	r3, [r3, #12]
 8013c44:	685b      	ldr	r3, [r3, #4]
 8013c46:	6839      	ldr	r1, [r7, #0]
 8013c48:	8909      	ldrh	r1, [r1, #8]
 8013c4a:	440b      	add	r3, r1
 8013c4c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	daca      	bge.n	8013be8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013c52:	683b      	ldr	r3, [r7, #0]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d01e      	beq.n	8013c96 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	891b      	ldrh	r3, [r3, #8]
 8013c5c:	461a      	mov	r2, r3
 8013c5e:	4b14      	ldr	r3, [pc, #80]	; (8013cb0 <tcp_oos_insert_segment+0x10c>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	441a      	add	r2, r3
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	68db      	ldr	r3, [r3, #12]
 8013c68:	685b      	ldr	r3, [r3, #4]
 8013c6a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	dd12      	ble.n	8013c96 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013c70:	683b      	ldr	r3, [r7, #0]
 8013c72:	68db      	ldr	r3, [r3, #12]
 8013c74:	685b      	ldr	r3, [r3, #4]
 8013c76:	b29a      	uxth	r2, r3
 8013c78:	4b0d      	ldr	r3, [pc, #52]	; (8013cb0 <tcp_oos_insert_segment+0x10c>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	b29b      	uxth	r3, r3
 8013c7e:	1ad3      	subs	r3, r2, r3
 8013c80:	b29a      	uxth	r2, r3
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	685a      	ldr	r2, [r3, #4]
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	891b      	ldrh	r3, [r3, #8]
 8013c8e:	4619      	mov	r1, r3
 8013c90:	4610      	mov	r0, r2
 8013c92:	f7fc fb49 	bl	8010328 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	683a      	ldr	r2, [r7, #0]
 8013c9a:	601a      	str	r2, [r3, #0]
}
 8013c9c:	bf00      	nop
 8013c9e:	3714      	adds	r7, #20
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd90      	pop	{r4, r7, pc}
 8013ca4:	0801ce5c 	.word	0x0801ce5c
 8013ca8:	0801d11c 	.word	0x0801d11c
 8013cac:	0801cea8 	.word	0x0801cea8
 8013cb0:	20004ae8 	.word	0x20004ae8

08013cb4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013cb4:	b5b0      	push	{r4, r5, r7, lr}
 8013cb6:	b086      	sub	sp, #24
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	60f8      	str	r0, [r7, #12]
 8013cbc:	60b9      	str	r1, [r7, #8]
 8013cbe:	607a      	str	r2, [r7, #4]
 8013cc0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013cc2:	e03e      	b.n	8013d42 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013cc4:	68bb      	ldr	r3, [r7, #8]
 8013cc6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013cc8:	68bb      	ldr	r3, [r7, #8]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013cce:	697b      	ldr	r3, [r7, #20]
 8013cd0:	685b      	ldr	r3, [r3, #4]
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	f7fc fd3c 	bl	8010750 <pbuf_clen>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ce2:	8a7a      	ldrh	r2, [r7, #18]
 8013ce4:	429a      	cmp	r2, r3
 8013ce6:	d906      	bls.n	8013cf6 <tcp_free_acked_segments+0x42>
 8013ce8:	4b2a      	ldr	r3, [pc, #168]	; (8013d94 <tcp_free_acked_segments+0xe0>)
 8013cea:	f240 4257 	movw	r2, #1111	; 0x457
 8013cee:	492a      	ldr	r1, [pc, #168]	; (8013d98 <tcp_free_acked_segments+0xe4>)
 8013cf0:	482a      	ldr	r0, [pc, #168]	; (8013d9c <tcp_free_acked_segments+0xe8>)
 8013cf2:	f006 fa47 	bl	801a184 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013cfc:	8a7b      	ldrh	r3, [r7, #18]
 8013cfe:	1ad3      	subs	r3, r2, r3
 8013d00:	b29a      	uxth	r2, r3
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013d08:	697b      	ldr	r3, [r7, #20]
 8013d0a:	891a      	ldrh	r2, [r3, #8]
 8013d0c:	4b24      	ldr	r3, [pc, #144]	; (8013da0 <tcp_free_acked_segments+0xec>)
 8013d0e:	881b      	ldrh	r3, [r3, #0]
 8013d10:	4413      	add	r3, r2
 8013d12:	b29a      	uxth	r2, r3
 8013d14:	4b22      	ldr	r3, [pc, #136]	; (8013da0 <tcp_free_acked_segments+0xec>)
 8013d16:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013d18:	6978      	ldr	r0, [r7, #20]
 8013d1a:	f7fe f90e 	bl	8011f3a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d00c      	beq.n	8013d42 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d109      	bne.n	8013d42 <tcp_free_acked_segments+0x8e>
 8013d2e:	683b      	ldr	r3, [r7, #0]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d106      	bne.n	8013d42 <tcp_free_acked_segments+0x8e>
 8013d34:	4b17      	ldr	r3, [pc, #92]	; (8013d94 <tcp_free_acked_segments+0xe0>)
 8013d36:	f240 4261 	movw	r2, #1121	; 0x461
 8013d3a:	491a      	ldr	r1, [pc, #104]	; (8013da4 <tcp_free_acked_segments+0xf0>)
 8013d3c:	4817      	ldr	r0, [pc, #92]	; (8013d9c <tcp_free_acked_segments+0xe8>)
 8013d3e:	f006 fa21 	bl	801a184 <iprintf>
  while (seg_list != NULL &&
 8013d42:	68bb      	ldr	r3, [r7, #8]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d020      	beq.n	8013d8a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013d48:	68bb      	ldr	r3, [r7, #8]
 8013d4a:	68db      	ldr	r3, [r3, #12]
 8013d4c:	685b      	ldr	r3, [r3, #4]
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7fb f8d9 	bl	800ef06 <lwip_htonl>
 8013d54:	4604      	mov	r4, r0
 8013d56:	68bb      	ldr	r3, [r7, #8]
 8013d58:	891b      	ldrh	r3, [r3, #8]
 8013d5a:	461d      	mov	r5, r3
 8013d5c:	68bb      	ldr	r3, [r7, #8]
 8013d5e:	68db      	ldr	r3, [r3, #12]
 8013d60:	899b      	ldrh	r3, [r3, #12]
 8013d62:	b29b      	uxth	r3, r3
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7fb f8b9 	bl	800eedc <lwip_htons>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	b2db      	uxtb	r3, r3
 8013d6e:	f003 0303 	and.w	r3, r3, #3
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d001      	beq.n	8013d7a <tcp_free_acked_segments+0xc6>
 8013d76:	2301      	movs	r3, #1
 8013d78:	e000      	b.n	8013d7c <tcp_free_acked_segments+0xc8>
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	442b      	add	r3, r5
 8013d7e:	18e2      	adds	r2, r4, r3
 8013d80:	4b09      	ldr	r3, [pc, #36]	; (8013da8 <tcp_free_acked_segments+0xf4>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	dd9c      	ble.n	8013cc4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013d8a:	68bb      	ldr	r3, [r7, #8]
}
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	3718      	adds	r7, #24
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bdb0      	pop	{r4, r5, r7, pc}
 8013d94:	0801ce5c 	.word	0x0801ce5c
 8013d98:	0801d144 	.word	0x0801d144
 8013d9c:	0801cea8 	.word	0x0801cea8
 8013da0:	20004af0 	.word	0x20004af0
 8013da4:	0801d16c 	.word	0x0801d16c
 8013da8:	20004aec 	.word	0x20004aec

08013dac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013dac:	b5b0      	push	{r4, r5, r7, lr}
 8013dae:	b094      	sub	sp, #80	; 0x50
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013db4:	2300      	movs	r3, #0
 8013db6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d106      	bne.n	8013dcc <tcp_receive+0x20>
 8013dbe:	4ba6      	ldr	r3, [pc, #664]	; (8014058 <tcp_receive+0x2ac>)
 8013dc0:	f240 427b 	movw	r2, #1147	; 0x47b
 8013dc4:	49a5      	ldr	r1, [pc, #660]	; (801405c <tcp_receive+0x2b0>)
 8013dc6:	48a6      	ldr	r0, [pc, #664]	; (8014060 <tcp_receive+0x2b4>)
 8013dc8:	f006 f9dc 	bl	801a184 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	7d1b      	ldrb	r3, [r3, #20]
 8013dd0:	2b03      	cmp	r3, #3
 8013dd2:	d806      	bhi.n	8013de2 <tcp_receive+0x36>
 8013dd4:	4ba0      	ldr	r3, [pc, #640]	; (8014058 <tcp_receive+0x2ac>)
 8013dd6:	f240 427c 	movw	r2, #1148	; 0x47c
 8013dda:	49a2      	ldr	r1, [pc, #648]	; (8014064 <tcp_receive+0x2b8>)
 8013ddc:	48a0      	ldr	r0, [pc, #640]	; (8014060 <tcp_receive+0x2b4>)
 8013dde:	f006 f9d1 	bl	801a184 <iprintf>

  if (flags & TCP_ACK) {
 8013de2:	4ba1      	ldr	r3, [pc, #644]	; (8014068 <tcp_receive+0x2bc>)
 8013de4:	781b      	ldrb	r3, [r3, #0]
 8013de6:	f003 0310 	and.w	r3, r3, #16
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	f000 8263 	beq.w	80142b6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013df6:	461a      	mov	r2, r3
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013dfc:	4413      	add	r3, r2
 8013dfe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013e04:	4b99      	ldr	r3, [pc, #612]	; (801406c <tcp_receive+0x2c0>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	1ad3      	subs	r3, r2, r3
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	db1b      	blt.n	8013e46 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013e12:	4b96      	ldr	r3, [pc, #600]	; (801406c <tcp_receive+0x2c0>)
 8013e14:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d106      	bne.n	8013e28 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013e1e:	4b94      	ldr	r3, [pc, #592]	; (8014070 <tcp_receive+0x2c4>)
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	1ad3      	subs	r3, r2, r3
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	db0e      	blt.n	8013e46 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013e2c:	4b90      	ldr	r3, [pc, #576]	; (8014070 <tcp_receive+0x2c4>)
 8013e2e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013e30:	429a      	cmp	r2, r3
 8013e32:	d125      	bne.n	8013e80 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013e34:	4b8f      	ldr	r3, [pc, #572]	; (8014074 <tcp_receive+0x2c8>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	89db      	ldrh	r3, [r3, #14]
 8013e3a:	b29a      	uxth	r2, r3
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d91c      	bls.n	8013e80 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013e46:	4b8b      	ldr	r3, [pc, #556]	; (8014074 <tcp_receive+0x2c8>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	89db      	ldrh	r3, [r3, #14]
 8013e4c:	b29a      	uxth	r2, r3
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d205      	bcs.n	8013e70 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013e70:	4b7e      	ldr	r3, [pc, #504]	; (801406c <tcp_receive+0x2c0>)
 8013e72:	681a      	ldr	r2, [r3, #0]
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013e78:	4b7d      	ldr	r3, [pc, #500]	; (8014070 <tcp_receive+0x2c4>)
 8013e7a:	681a      	ldr	r2, [r3, #0]
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013e80:	4b7b      	ldr	r3, [pc, #492]	; (8014070 <tcp_receive+0x2c4>)
 8013e82:	681a      	ldr	r2, [r3, #0]
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e88:	1ad3      	subs	r3, r2, r3
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	dc58      	bgt.n	8013f40 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013e8e:	4b7a      	ldr	r3, [pc, #488]	; (8014078 <tcp_receive+0x2cc>)
 8013e90:	881b      	ldrh	r3, [r3, #0]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d14b      	bne.n	8013f2e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e9a:	687a      	ldr	r2, [r7, #4]
 8013e9c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013ea0:	4413      	add	r3, r2
 8013ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ea4:	429a      	cmp	r2, r3
 8013ea6:	d142      	bne.n	8013f2e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	db3d      	blt.n	8013f2e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013eb6:	4b6e      	ldr	r3, [pc, #440]	; (8014070 <tcp_receive+0x2c4>)
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	d137      	bne.n	8013f2e <tcp_receive+0x182>
              found_dupack = 1;
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013ec8:	2bff      	cmp	r3, #255	; 0xff
 8013eca:	d007      	beq.n	8013edc <tcp_receive+0x130>
                ++pcb->dupacks;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013ed2:	3301      	adds	r3, #1
 8013ed4:	b2da      	uxtb	r2, r3
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013ee2:	2b03      	cmp	r3, #3
 8013ee4:	d91b      	bls.n	8013f1e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ef0:	4413      	add	r3, r2
 8013ef2:	b29a      	uxth	r2, r3
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013efa:	429a      	cmp	r2, r3
 8013efc:	d30a      	bcc.n	8013f14 <tcp_receive+0x168>
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f08:	4413      	add	r3, r2
 8013f0a:	b29a      	uxth	r2, r3
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013f12:	e004      	b.n	8013f1e <tcp_receive+0x172>
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013f24:	2b02      	cmp	r3, #2
 8013f26:	d902      	bls.n	8013f2e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013f28:	6878      	ldr	r0, [r7, #4]
 8013f2a:	f002 fb41 	bl	80165b0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	f040 8160 	bne.w	80141f6 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2200      	movs	r2, #0
 8013f3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013f3e:	e15a      	b.n	80141f6 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013f40:	4b4b      	ldr	r3, [pc, #300]	; (8014070 <tcp_receive+0x2c4>)
 8013f42:	681a      	ldr	r2, [r3, #0]
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f48:	1ad3      	subs	r3, r2, r3
 8013f4a:	3b01      	subs	r3, #1
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	f2c0 814d 	blt.w	80141ec <tcp_receive+0x440>
 8013f52:	4b47      	ldr	r3, [pc, #284]	; (8014070 <tcp_receive+0x2c4>)
 8013f54:	681a      	ldr	r2, [r3, #0]
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f5a:	1ad3      	subs	r3, r2, r3
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	f300 8145 	bgt.w	80141ec <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	8b5b      	ldrh	r3, [r3, #26]
 8013f66:	f003 0304 	and.w	r3, r3, #4
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d010      	beq.n	8013f90 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	8b5b      	ldrh	r3, [r3, #26]
 8013f72:	f023 0304 	bic.w	r3, r3, #4
 8013f76:	b29a      	uxth	r2, r3
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	2200      	movs	r2, #0
 8013f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013f9e:	10db      	asrs	r3, r3, #3
 8013fa0:	b21b      	sxth	r3, r3
 8013fa2:	b29a      	uxth	r2, r3
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013faa:	b29b      	uxth	r3, r3
 8013fac:	4413      	add	r3, r2
 8013fae:	b29b      	uxth	r3, r3
 8013fb0:	b21a      	sxth	r2, r3
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013fb8:	4b2d      	ldr	r3, [pc, #180]	; (8014070 <tcp_receive+0x2c4>)
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	b29a      	uxth	r2, r3
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013fc2:	b29b      	uxth	r3, r3
 8013fc4:	1ad3      	subs	r3, r2, r3
 8013fc6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	2200      	movs	r2, #0
 8013fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013fd0:	4b27      	ldr	r3, [pc, #156]	; (8014070 <tcp_receive+0x2c4>)
 8013fd2:	681a      	ldr	r2, [r3, #0]
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	7d1b      	ldrb	r3, [r3, #20]
 8013fdc:	2b03      	cmp	r3, #3
 8013fde:	f240 8096 	bls.w	801410e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013fee:	429a      	cmp	r2, r3
 8013ff0:	d244      	bcs.n	801407c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	8b5b      	ldrh	r3, [r3, #26]
 8013ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d001      	beq.n	8014002 <tcp_receive+0x256>
 8013ffe:	2301      	movs	r3, #1
 8014000:	e000      	b.n	8014004 <tcp_receive+0x258>
 8014002:	2302      	movs	r3, #2
 8014004:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014008:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801400c:	b29a      	uxth	r2, r3
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014012:	fb12 f303 	smulbb	r3, r2, r3
 8014016:	b29b      	uxth	r3, r3
 8014018:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801401a:	4293      	cmp	r3, r2
 801401c:	bf28      	it	cs
 801401e:	4613      	movcs	r3, r2
 8014020:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014028:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801402a:	4413      	add	r3, r2
 801402c:	b29a      	uxth	r2, r3
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014034:	429a      	cmp	r2, r3
 8014036:	d309      	bcc.n	801404c <tcp_receive+0x2a0>
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801403e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014040:	4413      	add	r3, r2
 8014042:	b29a      	uxth	r2, r3
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801404a:	e060      	b.n	801410e <tcp_receive+0x362>
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014052:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014056:	e05a      	b.n	801410e <tcp_receive+0x362>
 8014058:	0801ce5c 	.word	0x0801ce5c
 801405c:	0801d18c 	.word	0x0801d18c
 8014060:	0801cea8 	.word	0x0801cea8
 8014064:	0801d1a8 	.word	0x0801d1a8
 8014068:	20004af4 	.word	0x20004af4
 801406c:	20004ae8 	.word	0x20004ae8
 8014070:	20004aec 	.word	0x20004aec
 8014074:	20004ad8 	.word	0x20004ad8
 8014078:	20004af2 	.word	0x20004af2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014082:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014084:	4413      	add	r3, r2
 8014086:	b29a      	uxth	r2, r3
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801408e:	429a      	cmp	r2, r3
 8014090:	d309      	bcc.n	80140a6 <tcp_receive+0x2fa>
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014098:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801409a:	4413      	add	r3, r2
 801409c:	b29a      	uxth	r2, r3
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80140a4:	e004      	b.n	80140b0 <tcp_receive+0x304>
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80140ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80140bc:	429a      	cmp	r2, r3
 80140be:	d326      	bcc.n	801410e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80140cc:	1ad3      	subs	r3, r2, r3
 80140ce:	b29a      	uxth	r2, r3
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140e0:	4413      	add	r3, r2
 80140e2:	b29a      	uxth	r2, r3
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80140ea:	429a      	cmp	r2, r3
 80140ec:	d30a      	bcc.n	8014104 <tcp_receive+0x358>
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140f8:	4413      	add	r3, r2
 80140fa:	b29a      	uxth	r2, r3
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014102:	e004      	b.n	801410e <tcp_receive+0x362>
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801410a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014116:	4a98      	ldr	r2, [pc, #608]	; (8014378 <tcp_receive+0x5cc>)
 8014118:	6878      	ldr	r0, [r7, #4]
 801411a:	f7ff fdcb 	bl	8013cb4 <tcp_free_acked_segments>
 801411e:	4602      	mov	r2, r0
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801412c:	4a93      	ldr	r2, [pc, #588]	; (801437c <tcp_receive+0x5d0>)
 801412e:	6878      	ldr	r0, [r7, #4]
 8014130:	f7ff fdc0 	bl	8013cb4 <tcp_free_acked_segments>
 8014134:	4602      	mov	r2, r0
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801413e:	2b00      	cmp	r3, #0
 8014140:	d104      	bne.n	801414c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014148:	861a      	strh	r2, [r3, #48]	; 0x30
 801414a:	e002      	b.n	8014152 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	2200      	movs	r2, #0
 8014150:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2200      	movs	r2, #0
 8014156:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801415c:	2b00      	cmp	r3, #0
 801415e:	d103      	bne.n	8014168 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	2200      	movs	r2, #0
 8014164:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801416e:	4b84      	ldr	r3, [pc, #528]	; (8014380 <tcp_receive+0x5d4>)
 8014170:	881b      	ldrh	r3, [r3, #0]
 8014172:	4413      	add	r3, r2
 8014174:	b29a      	uxth	r2, r3
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	8b5b      	ldrh	r3, [r3, #26]
 8014180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014184:	2b00      	cmp	r3, #0
 8014186:	d035      	beq.n	80141f4 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801418c:	2b00      	cmp	r3, #0
 801418e:	d118      	bne.n	80141c2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014194:	2b00      	cmp	r3, #0
 8014196:	d00c      	beq.n	80141b2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141a0:	68db      	ldr	r3, [r3, #12]
 80141a2:	685b      	ldr	r3, [r3, #4]
 80141a4:	4618      	mov	r0, r3
 80141a6:	f7fa feae 	bl	800ef06 <lwip_htonl>
 80141aa:	4603      	mov	r3, r0
 80141ac:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	dc20      	bgt.n	80141f4 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	8b5b      	ldrh	r3, [r3, #26]
 80141b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80141ba:	b29a      	uxth	r2, r3
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80141c0:	e018      	b.n	80141f4 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141ca:	68db      	ldr	r3, [r3, #12]
 80141cc:	685b      	ldr	r3, [r3, #4]
 80141ce:	4618      	mov	r0, r3
 80141d0:	f7fa fe99 	bl	800ef06 <lwip_htonl>
 80141d4:	4603      	mov	r3, r0
 80141d6:	1ae3      	subs	r3, r4, r3
 80141d8:	2b00      	cmp	r3, #0
 80141da:	dc0b      	bgt.n	80141f4 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	8b5b      	ldrh	r3, [r3, #26]
 80141e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80141e4:	b29a      	uxth	r2, r3
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80141ea:	e003      	b.n	80141f4 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80141ec:	6878      	ldr	r0, [r7, #4]
 80141ee:	f002 fbcd 	bl	801698c <tcp_send_empty_ack>
 80141f2:	e000      	b.n	80141f6 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80141f4:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d05b      	beq.n	80142b6 <tcp_receive+0x50a>
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014202:	4b60      	ldr	r3, [pc, #384]	; (8014384 <tcp_receive+0x5d8>)
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	1ad3      	subs	r3, r2, r3
 8014208:	2b00      	cmp	r3, #0
 801420a:	da54      	bge.n	80142b6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801420c:	4b5e      	ldr	r3, [pc, #376]	; (8014388 <tcp_receive+0x5dc>)
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	b29a      	uxth	r2, r3
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014216:	b29b      	uxth	r3, r3
 8014218:	1ad3      	subs	r3, r2, r3
 801421a:	b29b      	uxth	r3, r3
 801421c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014220:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801422a:	10db      	asrs	r3, r3, #3
 801422c:	b21b      	sxth	r3, r3
 801422e:	b29b      	uxth	r3, r3
 8014230:	1ad3      	subs	r3, r2, r3
 8014232:	b29b      	uxth	r3, r3
 8014234:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801423e:	b29a      	uxth	r2, r3
 8014240:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014244:	4413      	add	r3, r2
 8014246:	b29b      	uxth	r3, r3
 8014248:	b21a      	sxth	r2, r3
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801424e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8014252:	2b00      	cmp	r3, #0
 8014254:	da05      	bge.n	8014262 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8014256:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801425a:	425b      	negs	r3, r3
 801425c:	b29b      	uxth	r3, r3
 801425e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014262:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801426c:	109b      	asrs	r3, r3, #2
 801426e:	b21b      	sxth	r3, r3
 8014270:	b29b      	uxth	r3, r3
 8014272:	1ad3      	subs	r3, r2, r3
 8014274:	b29b      	uxth	r3, r3
 8014276:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014280:	b29a      	uxth	r2, r3
 8014282:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014286:	4413      	add	r3, r2
 8014288:	b29b      	uxth	r3, r3
 801428a:	b21a      	sxth	r2, r3
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014296:	10db      	asrs	r3, r3, #3
 8014298:	b21b      	sxth	r3, r3
 801429a:	b29a      	uxth	r2, r3
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80142a2:	b29b      	uxth	r3, r3
 80142a4:	4413      	add	r3, r2
 80142a6:	b29b      	uxth	r3, r3
 80142a8:	b21a      	sxth	r2, r3
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	2200      	movs	r2, #0
 80142b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80142b6:	4b35      	ldr	r3, [pc, #212]	; (801438c <tcp_receive+0x5e0>)
 80142b8:	881b      	ldrh	r3, [r3, #0]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	f000 84e1 	beq.w	8014c82 <tcp_receive+0xed6>
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	7d1b      	ldrb	r3, [r3, #20]
 80142c4:	2b06      	cmp	r3, #6
 80142c6:	f200 84dc 	bhi.w	8014c82 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80142ce:	4b30      	ldr	r3, [pc, #192]	; (8014390 <tcp_receive+0x5e4>)
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	1ad3      	subs	r3, r2, r3
 80142d4:	3b01      	subs	r3, #1
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	f2c0 808e 	blt.w	80143f8 <tcp_receive+0x64c>
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80142e0:	4b2a      	ldr	r3, [pc, #168]	; (801438c <tcp_receive+0x5e0>)
 80142e2:	881b      	ldrh	r3, [r3, #0]
 80142e4:	4619      	mov	r1, r3
 80142e6:	4b2a      	ldr	r3, [pc, #168]	; (8014390 <tcp_receive+0x5e4>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	440b      	add	r3, r1
 80142ec:	1ad3      	subs	r3, r2, r3
 80142ee:	3301      	adds	r3, #1
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	f300 8081 	bgt.w	80143f8 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80142f6:	4b27      	ldr	r3, [pc, #156]	; (8014394 <tcp_receive+0x5e8>)
 80142f8:	685b      	ldr	r3, [r3, #4]
 80142fa:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014300:	4b23      	ldr	r3, [pc, #140]	; (8014390 <tcp_receive+0x5e4>)
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	1ad3      	subs	r3, r2, r3
 8014306:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014308:	4b22      	ldr	r3, [pc, #136]	; (8014394 <tcp_receive+0x5e8>)
 801430a:	685b      	ldr	r3, [r3, #4]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d106      	bne.n	801431e <tcp_receive+0x572>
 8014310:	4b21      	ldr	r3, [pc, #132]	; (8014398 <tcp_receive+0x5ec>)
 8014312:	f240 5294 	movw	r2, #1428	; 0x594
 8014316:	4921      	ldr	r1, [pc, #132]	; (801439c <tcp_receive+0x5f0>)
 8014318:	4821      	ldr	r0, [pc, #132]	; (80143a0 <tcp_receive+0x5f4>)
 801431a:	f005 ff33 	bl	801a184 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014320:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014324:	4293      	cmp	r3, r2
 8014326:	d906      	bls.n	8014336 <tcp_receive+0x58a>
 8014328:	4b1b      	ldr	r3, [pc, #108]	; (8014398 <tcp_receive+0x5ec>)
 801432a:	f240 5295 	movw	r2, #1429	; 0x595
 801432e:	491d      	ldr	r1, [pc, #116]	; (80143a4 <tcp_receive+0x5f8>)
 8014330:	481b      	ldr	r0, [pc, #108]	; (80143a0 <tcp_receive+0x5f4>)
 8014332:	f005 ff27 	bl	801a184 <iprintf>
      off = (u16_t)off32;
 8014336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014338:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801433c:	4b15      	ldr	r3, [pc, #84]	; (8014394 <tcp_receive+0x5e8>)
 801433e:	685b      	ldr	r3, [r3, #4]
 8014340:	891b      	ldrh	r3, [r3, #8]
 8014342:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014346:	429a      	cmp	r2, r3
 8014348:	d906      	bls.n	8014358 <tcp_receive+0x5ac>
 801434a:	4b13      	ldr	r3, [pc, #76]	; (8014398 <tcp_receive+0x5ec>)
 801434c:	f240 5297 	movw	r2, #1431	; 0x597
 8014350:	4915      	ldr	r1, [pc, #84]	; (80143a8 <tcp_receive+0x5fc>)
 8014352:	4813      	ldr	r0, [pc, #76]	; (80143a0 <tcp_receive+0x5f4>)
 8014354:	f005 ff16 	bl	801a184 <iprintf>
      inseg.len -= off;
 8014358:	4b0e      	ldr	r3, [pc, #56]	; (8014394 <tcp_receive+0x5e8>)
 801435a:	891a      	ldrh	r2, [r3, #8]
 801435c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014360:	1ad3      	subs	r3, r2, r3
 8014362:	b29a      	uxth	r2, r3
 8014364:	4b0b      	ldr	r3, [pc, #44]	; (8014394 <tcp_receive+0x5e8>)
 8014366:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014368:	4b0a      	ldr	r3, [pc, #40]	; (8014394 <tcp_receive+0x5e8>)
 801436a:	685b      	ldr	r3, [r3, #4]
 801436c:	891a      	ldrh	r2, [r3, #8]
 801436e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014372:	1ad3      	subs	r3, r2, r3
 8014374:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8014376:	e029      	b.n	80143cc <tcp_receive+0x620>
 8014378:	0801d1c4 	.word	0x0801d1c4
 801437c:	0801d1cc 	.word	0x0801d1cc
 8014380:	20004af0 	.word	0x20004af0
 8014384:	20004aec 	.word	0x20004aec
 8014388:	2000dba8 	.word	0x2000dba8
 801438c:	20004af2 	.word	0x20004af2
 8014390:	20004ae8 	.word	0x20004ae8
 8014394:	20004ac8 	.word	0x20004ac8
 8014398:	0801ce5c 	.word	0x0801ce5c
 801439c:	0801d1d4 	.word	0x0801d1d4
 80143a0:	0801cea8 	.word	0x0801cea8
 80143a4:	0801d1e4 	.word	0x0801d1e4
 80143a8:	0801d1f4 	.word	0x0801d1f4
        off -= p->len;
 80143ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143ae:	895b      	ldrh	r3, [r3, #10]
 80143b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80143b4:	1ad3      	subs	r3, r2, r3
 80143b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80143ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80143be:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80143c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143c2:	2200      	movs	r2, #0
 80143c4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80143c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80143cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143ce:	895b      	ldrh	r3, [r3, #10]
 80143d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80143d4:	429a      	cmp	r2, r3
 80143d6:	d8e9      	bhi.n	80143ac <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80143d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80143dc:	4619      	mov	r1, r3
 80143de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80143e0:	f7fc f8a2 	bl	8010528 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143e8:	4a91      	ldr	r2, [pc, #580]	; (8014630 <tcp_receive+0x884>)
 80143ea:	6013      	str	r3, [r2, #0]
 80143ec:	4b91      	ldr	r3, [pc, #580]	; (8014634 <tcp_receive+0x888>)
 80143ee:	68db      	ldr	r3, [r3, #12]
 80143f0:	4a8f      	ldr	r2, [pc, #572]	; (8014630 <tcp_receive+0x884>)
 80143f2:	6812      	ldr	r2, [r2, #0]
 80143f4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80143f6:	e00d      	b.n	8014414 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80143f8:	4b8d      	ldr	r3, [pc, #564]	; (8014630 <tcp_receive+0x884>)
 80143fa:	681a      	ldr	r2, [r3, #0]
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014400:	1ad3      	subs	r3, r2, r3
 8014402:	2b00      	cmp	r3, #0
 8014404:	da06      	bge.n	8014414 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	8b5b      	ldrh	r3, [r3, #26]
 801440a:	f043 0302 	orr.w	r3, r3, #2
 801440e:	b29a      	uxth	r2, r3
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014414:	4b86      	ldr	r3, [pc, #536]	; (8014630 <tcp_receive+0x884>)
 8014416:	681a      	ldr	r2, [r3, #0]
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801441c:	1ad3      	subs	r3, r2, r3
 801441e:	2b00      	cmp	r3, #0
 8014420:	f2c0 842a 	blt.w	8014c78 <tcp_receive+0xecc>
 8014424:	4b82      	ldr	r3, [pc, #520]	; (8014630 <tcp_receive+0x884>)
 8014426:	681a      	ldr	r2, [r3, #0]
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801442c:	6879      	ldr	r1, [r7, #4]
 801442e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014430:	440b      	add	r3, r1
 8014432:	1ad3      	subs	r3, r2, r3
 8014434:	3301      	adds	r3, #1
 8014436:	2b00      	cmp	r3, #0
 8014438:	f300 841e 	bgt.w	8014c78 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014440:	4b7b      	ldr	r3, [pc, #492]	; (8014630 <tcp_receive+0x884>)
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	429a      	cmp	r2, r3
 8014446:	f040 829a 	bne.w	801497e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801444a:	4b7a      	ldr	r3, [pc, #488]	; (8014634 <tcp_receive+0x888>)
 801444c:	891c      	ldrh	r4, [r3, #8]
 801444e:	4b79      	ldr	r3, [pc, #484]	; (8014634 <tcp_receive+0x888>)
 8014450:	68db      	ldr	r3, [r3, #12]
 8014452:	899b      	ldrh	r3, [r3, #12]
 8014454:	b29b      	uxth	r3, r3
 8014456:	4618      	mov	r0, r3
 8014458:	f7fa fd40 	bl	800eedc <lwip_htons>
 801445c:	4603      	mov	r3, r0
 801445e:	b2db      	uxtb	r3, r3
 8014460:	f003 0303 	and.w	r3, r3, #3
 8014464:	2b00      	cmp	r3, #0
 8014466:	d001      	beq.n	801446c <tcp_receive+0x6c0>
 8014468:	2301      	movs	r3, #1
 801446a:	e000      	b.n	801446e <tcp_receive+0x6c2>
 801446c:	2300      	movs	r3, #0
 801446e:	4423      	add	r3, r4
 8014470:	b29a      	uxth	r2, r3
 8014472:	4b71      	ldr	r3, [pc, #452]	; (8014638 <tcp_receive+0x88c>)
 8014474:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801447a:	4b6f      	ldr	r3, [pc, #444]	; (8014638 <tcp_receive+0x88c>)
 801447c:	881b      	ldrh	r3, [r3, #0]
 801447e:	429a      	cmp	r2, r3
 8014480:	d275      	bcs.n	801456e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014482:	4b6c      	ldr	r3, [pc, #432]	; (8014634 <tcp_receive+0x888>)
 8014484:	68db      	ldr	r3, [r3, #12]
 8014486:	899b      	ldrh	r3, [r3, #12]
 8014488:	b29b      	uxth	r3, r3
 801448a:	4618      	mov	r0, r3
 801448c:	f7fa fd26 	bl	800eedc <lwip_htons>
 8014490:	4603      	mov	r3, r0
 8014492:	b2db      	uxtb	r3, r3
 8014494:	f003 0301 	and.w	r3, r3, #1
 8014498:	2b00      	cmp	r3, #0
 801449a:	d01f      	beq.n	80144dc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801449c:	4b65      	ldr	r3, [pc, #404]	; (8014634 <tcp_receive+0x888>)
 801449e:	68db      	ldr	r3, [r3, #12]
 80144a0:	899b      	ldrh	r3, [r3, #12]
 80144a2:	b29b      	uxth	r3, r3
 80144a4:	b21b      	sxth	r3, r3
 80144a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80144aa:	b21c      	sxth	r4, r3
 80144ac:	4b61      	ldr	r3, [pc, #388]	; (8014634 <tcp_receive+0x888>)
 80144ae:	68db      	ldr	r3, [r3, #12]
 80144b0:	899b      	ldrh	r3, [r3, #12]
 80144b2:	b29b      	uxth	r3, r3
 80144b4:	4618      	mov	r0, r3
 80144b6:	f7fa fd11 	bl	800eedc <lwip_htons>
 80144ba:	4603      	mov	r3, r0
 80144bc:	b2db      	uxtb	r3, r3
 80144be:	b29b      	uxth	r3, r3
 80144c0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	4618      	mov	r0, r3
 80144c8:	f7fa fd08 	bl	800eedc <lwip_htons>
 80144cc:	4603      	mov	r3, r0
 80144ce:	b21b      	sxth	r3, r3
 80144d0:	4323      	orrs	r3, r4
 80144d2:	b21a      	sxth	r2, r3
 80144d4:	4b57      	ldr	r3, [pc, #348]	; (8014634 <tcp_receive+0x888>)
 80144d6:	68db      	ldr	r3, [r3, #12]
 80144d8:	b292      	uxth	r2, r2
 80144da:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80144e0:	4b54      	ldr	r3, [pc, #336]	; (8014634 <tcp_receive+0x888>)
 80144e2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80144e4:	4b53      	ldr	r3, [pc, #332]	; (8014634 <tcp_receive+0x888>)
 80144e6:	68db      	ldr	r3, [r3, #12]
 80144e8:	899b      	ldrh	r3, [r3, #12]
 80144ea:	b29b      	uxth	r3, r3
 80144ec:	4618      	mov	r0, r3
 80144ee:	f7fa fcf5 	bl	800eedc <lwip_htons>
 80144f2:	4603      	mov	r3, r0
 80144f4:	b2db      	uxtb	r3, r3
 80144f6:	f003 0302 	and.w	r3, r3, #2
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d005      	beq.n	801450a <tcp_receive+0x75e>
            inseg.len -= 1;
 80144fe:	4b4d      	ldr	r3, [pc, #308]	; (8014634 <tcp_receive+0x888>)
 8014500:	891b      	ldrh	r3, [r3, #8]
 8014502:	3b01      	subs	r3, #1
 8014504:	b29a      	uxth	r2, r3
 8014506:	4b4b      	ldr	r3, [pc, #300]	; (8014634 <tcp_receive+0x888>)
 8014508:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801450a:	4b4a      	ldr	r3, [pc, #296]	; (8014634 <tcp_receive+0x888>)
 801450c:	685b      	ldr	r3, [r3, #4]
 801450e:	4a49      	ldr	r2, [pc, #292]	; (8014634 <tcp_receive+0x888>)
 8014510:	8912      	ldrh	r2, [r2, #8]
 8014512:	4611      	mov	r1, r2
 8014514:	4618      	mov	r0, r3
 8014516:	f7fb ff07 	bl	8010328 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801451a:	4b46      	ldr	r3, [pc, #280]	; (8014634 <tcp_receive+0x888>)
 801451c:	891c      	ldrh	r4, [r3, #8]
 801451e:	4b45      	ldr	r3, [pc, #276]	; (8014634 <tcp_receive+0x888>)
 8014520:	68db      	ldr	r3, [r3, #12]
 8014522:	899b      	ldrh	r3, [r3, #12]
 8014524:	b29b      	uxth	r3, r3
 8014526:	4618      	mov	r0, r3
 8014528:	f7fa fcd8 	bl	800eedc <lwip_htons>
 801452c:	4603      	mov	r3, r0
 801452e:	b2db      	uxtb	r3, r3
 8014530:	f003 0303 	and.w	r3, r3, #3
 8014534:	2b00      	cmp	r3, #0
 8014536:	d001      	beq.n	801453c <tcp_receive+0x790>
 8014538:	2301      	movs	r3, #1
 801453a:	e000      	b.n	801453e <tcp_receive+0x792>
 801453c:	2300      	movs	r3, #0
 801453e:	4423      	add	r3, r4
 8014540:	b29a      	uxth	r2, r3
 8014542:	4b3d      	ldr	r3, [pc, #244]	; (8014638 <tcp_receive+0x88c>)
 8014544:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014546:	4b3c      	ldr	r3, [pc, #240]	; (8014638 <tcp_receive+0x88c>)
 8014548:	881b      	ldrh	r3, [r3, #0]
 801454a:	461a      	mov	r2, r3
 801454c:	4b38      	ldr	r3, [pc, #224]	; (8014630 <tcp_receive+0x884>)
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	441a      	add	r2, r3
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014556:	6879      	ldr	r1, [r7, #4]
 8014558:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801455a:	440b      	add	r3, r1
 801455c:	429a      	cmp	r2, r3
 801455e:	d006      	beq.n	801456e <tcp_receive+0x7c2>
 8014560:	4b36      	ldr	r3, [pc, #216]	; (801463c <tcp_receive+0x890>)
 8014562:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8014566:	4936      	ldr	r1, [pc, #216]	; (8014640 <tcp_receive+0x894>)
 8014568:	4836      	ldr	r0, [pc, #216]	; (8014644 <tcp_receive+0x898>)
 801456a:	f005 fe0b 	bl	801a184 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014572:	2b00      	cmp	r3, #0
 8014574:	f000 80e7 	beq.w	8014746 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014578:	4b2e      	ldr	r3, [pc, #184]	; (8014634 <tcp_receive+0x888>)
 801457a:	68db      	ldr	r3, [r3, #12]
 801457c:	899b      	ldrh	r3, [r3, #12]
 801457e:	b29b      	uxth	r3, r3
 8014580:	4618      	mov	r0, r3
 8014582:	f7fa fcab 	bl	800eedc <lwip_htons>
 8014586:	4603      	mov	r3, r0
 8014588:	b2db      	uxtb	r3, r3
 801458a:	f003 0301 	and.w	r3, r3, #1
 801458e:	2b00      	cmp	r3, #0
 8014590:	d010      	beq.n	80145b4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014592:	e00a      	b.n	80145aa <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014598:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801459e:	681a      	ldr	r2, [r3, #0]
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80145a4:	68f8      	ldr	r0, [r7, #12]
 80145a6:	f7fd fcc8 	bl	8011f3a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d1f0      	bne.n	8014594 <tcp_receive+0x7e8>
 80145b2:	e0c8      	b.n	8014746 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145b8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80145ba:	e052      	b.n	8014662 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80145bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145be:	68db      	ldr	r3, [r3, #12]
 80145c0:	899b      	ldrh	r3, [r3, #12]
 80145c2:	b29b      	uxth	r3, r3
 80145c4:	4618      	mov	r0, r3
 80145c6:	f7fa fc89 	bl	800eedc <lwip_htons>
 80145ca:	4603      	mov	r3, r0
 80145cc:	b2db      	uxtb	r3, r3
 80145ce:	f003 0301 	and.w	r3, r3, #1
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d03d      	beq.n	8014652 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80145d6:	4b17      	ldr	r3, [pc, #92]	; (8014634 <tcp_receive+0x888>)
 80145d8:	68db      	ldr	r3, [r3, #12]
 80145da:	899b      	ldrh	r3, [r3, #12]
 80145dc:	b29b      	uxth	r3, r3
 80145de:	4618      	mov	r0, r3
 80145e0:	f7fa fc7c 	bl	800eedc <lwip_htons>
 80145e4:	4603      	mov	r3, r0
 80145e6:	b2db      	uxtb	r3, r3
 80145e8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d130      	bne.n	8014652 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80145f0:	4b10      	ldr	r3, [pc, #64]	; (8014634 <tcp_receive+0x888>)
 80145f2:	68db      	ldr	r3, [r3, #12]
 80145f4:	899b      	ldrh	r3, [r3, #12]
 80145f6:	b29c      	uxth	r4, r3
 80145f8:	2001      	movs	r0, #1
 80145fa:	f7fa fc6f 	bl	800eedc <lwip_htons>
 80145fe:	4603      	mov	r3, r0
 8014600:	461a      	mov	r2, r3
 8014602:	4b0c      	ldr	r3, [pc, #48]	; (8014634 <tcp_receive+0x888>)
 8014604:	68db      	ldr	r3, [r3, #12]
 8014606:	4322      	orrs	r2, r4
 8014608:	b292      	uxth	r2, r2
 801460a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801460c:	4b09      	ldr	r3, [pc, #36]	; (8014634 <tcp_receive+0x888>)
 801460e:	891c      	ldrh	r4, [r3, #8]
 8014610:	4b08      	ldr	r3, [pc, #32]	; (8014634 <tcp_receive+0x888>)
 8014612:	68db      	ldr	r3, [r3, #12]
 8014614:	899b      	ldrh	r3, [r3, #12]
 8014616:	b29b      	uxth	r3, r3
 8014618:	4618      	mov	r0, r3
 801461a:	f7fa fc5f 	bl	800eedc <lwip_htons>
 801461e:	4603      	mov	r3, r0
 8014620:	b2db      	uxtb	r3, r3
 8014622:	f003 0303 	and.w	r3, r3, #3
 8014626:	2b00      	cmp	r3, #0
 8014628:	d00e      	beq.n	8014648 <tcp_receive+0x89c>
 801462a:	2301      	movs	r3, #1
 801462c:	e00d      	b.n	801464a <tcp_receive+0x89e>
 801462e:	bf00      	nop
 8014630:	20004ae8 	.word	0x20004ae8
 8014634:	20004ac8 	.word	0x20004ac8
 8014638:	20004af2 	.word	0x20004af2
 801463c:	0801ce5c 	.word	0x0801ce5c
 8014640:	0801d204 	.word	0x0801d204
 8014644:	0801cea8 	.word	0x0801cea8
 8014648:	2300      	movs	r3, #0
 801464a:	4423      	add	r3, r4
 801464c:	b29a      	uxth	r2, r3
 801464e:	4b98      	ldr	r3, [pc, #608]	; (80148b0 <tcp_receive+0xb04>)
 8014650:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014654:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801465c:	6938      	ldr	r0, [r7, #16]
 801465e:	f7fd fc6c 	bl	8011f3a <tcp_seg_free>
            while (next &&
 8014662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014664:	2b00      	cmp	r3, #0
 8014666:	d00e      	beq.n	8014686 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014668:	4b91      	ldr	r3, [pc, #580]	; (80148b0 <tcp_receive+0xb04>)
 801466a:	881b      	ldrh	r3, [r3, #0]
 801466c:	461a      	mov	r2, r3
 801466e:	4b91      	ldr	r3, [pc, #580]	; (80148b4 <tcp_receive+0xb08>)
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	441a      	add	r2, r3
 8014674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014676:	68db      	ldr	r3, [r3, #12]
 8014678:	685b      	ldr	r3, [r3, #4]
 801467a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801467c:	8909      	ldrh	r1, [r1, #8]
 801467e:	440b      	add	r3, r1
 8014680:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014682:	2b00      	cmp	r3, #0
 8014684:	da9a      	bge.n	80145bc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014688:	2b00      	cmp	r3, #0
 801468a:	d059      	beq.n	8014740 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801468c:	4b88      	ldr	r3, [pc, #544]	; (80148b0 <tcp_receive+0xb04>)
 801468e:	881b      	ldrh	r3, [r3, #0]
 8014690:	461a      	mov	r2, r3
 8014692:	4b88      	ldr	r3, [pc, #544]	; (80148b4 <tcp_receive+0xb08>)
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	441a      	add	r2, r3
 8014698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801469a:	68db      	ldr	r3, [r3, #12]
 801469c:	685b      	ldr	r3, [r3, #4]
 801469e:	1ad3      	subs	r3, r2, r3
            if (next &&
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	dd4d      	ble.n	8014740 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80146a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146a6:	68db      	ldr	r3, [r3, #12]
 80146a8:	685b      	ldr	r3, [r3, #4]
 80146aa:	b29a      	uxth	r2, r3
 80146ac:	4b81      	ldr	r3, [pc, #516]	; (80148b4 <tcp_receive+0xb08>)
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	b29b      	uxth	r3, r3
 80146b2:	1ad3      	subs	r3, r2, r3
 80146b4:	b29a      	uxth	r2, r3
 80146b6:	4b80      	ldr	r3, [pc, #512]	; (80148b8 <tcp_receive+0xb0c>)
 80146b8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80146ba:	4b7f      	ldr	r3, [pc, #508]	; (80148b8 <tcp_receive+0xb0c>)
 80146bc:	68db      	ldr	r3, [r3, #12]
 80146be:	899b      	ldrh	r3, [r3, #12]
 80146c0:	b29b      	uxth	r3, r3
 80146c2:	4618      	mov	r0, r3
 80146c4:	f7fa fc0a 	bl	800eedc <lwip_htons>
 80146c8:	4603      	mov	r3, r0
 80146ca:	b2db      	uxtb	r3, r3
 80146cc:	f003 0302 	and.w	r3, r3, #2
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d005      	beq.n	80146e0 <tcp_receive+0x934>
                inseg.len -= 1;
 80146d4:	4b78      	ldr	r3, [pc, #480]	; (80148b8 <tcp_receive+0xb0c>)
 80146d6:	891b      	ldrh	r3, [r3, #8]
 80146d8:	3b01      	subs	r3, #1
 80146da:	b29a      	uxth	r2, r3
 80146dc:	4b76      	ldr	r3, [pc, #472]	; (80148b8 <tcp_receive+0xb0c>)
 80146de:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80146e0:	4b75      	ldr	r3, [pc, #468]	; (80148b8 <tcp_receive+0xb0c>)
 80146e2:	685b      	ldr	r3, [r3, #4]
 80146e4:	4a74      	ldr	r2, [pc, #464]	; (80148b8 <tcp_receive+0xb0c>)
 80146e6:	8912      	ldrh	r2, [r2, #8]
 80146e8:	4611      	mov	r1, r2
 80146ea:	4618      	mov	r0, r3
 80146ec:	f7fb fe1c 	bl	8010328 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80146f0:	4b71      	ldr	r3, [pc, #452]	; (80148b8 <tcp_receive+0xb0c>)
 80146f2:	891c      	ldrh	r4, [r3, #8]
 80146f4:	4b70      	ldr	r3, [pc, #448]	; (80148b8 <tcp_receive+0xb0c>)
 80146f6:	68db      	ldr	r3, [r3, #12]
 80146f8:	899b      	ldrh	r3, [r3, #12]
 80146fa:	b29b      	uxth	r3, r3
 80146fc:	4618      	mov	r0, r3
 80146fe:	f7fa fbed 	bl	800eedc <lwip_htons>
 8014702:	4603      	mov	r3, r0
 8014704:	b2db      	uxtb	r3, r3
 8014706:	f003 0303 	and.w	r3, r3, #3
 801470a:	2b00      	cmp	r3, #0
 801470c:	d001      	beq.n	8014712 <tcp_receive+0x966>
 801470e:	2301      	movs	r3, #1
 8014710:	e000      	b.n	8014714 <tcp_receive+0x968>
 8014712:	2300      	movs	r3, #0
 8014714:	4423      	add	r3, r4
 8014716:	b29a      	uxth	r2, r3
 8014718:	4b65      	ldr	r3, [pc, #404]	; (80148b0 <tcp_receive+0xb04>)
 801471a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801471c:	4b64      	ldr	r3, [pc, #400]	; (80148b0 <tcp_receive+0xb04>)
 801471e:	881b      	ldrh	r3, [r3, #0]
 8014720:	461a      	mov	r2, r3
 8014722:	4b64      	ldr	r3, [pc, #400]	; (80148b4 <tcp_receive+0xb08>)
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	441a      	add	r2, r3
 8014728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801472a:	68db      	ldr	r3, [r3, #12]
 801472c:	685b      	ldr	r3, [r3, #4]
 801472e:	429a      	cmp	r2, r3
 8014730:	d006      	beq.n	8014740 <tcp_receive+0x994>
 8014732:	4b62      	ldr	r3, [pc, #392]	; (80148bc <tcp_receive+0xb10>)
 8014734:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014738:	4961      	ldr	r1, [pc, #388]	; (80148c0 <tcp_receive+0xb14>)
 801473a:	4862      	ldr	r0, [pc, #392]	; (80148c4 <tcp_receive+0xb18>)
 801473c:	f005 fd22 	bl	801a184 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014744:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014746:	4b5a      	ldr	r3, [pc, #360]	; (80148b0 <tcp_receive+0xb04>)
 8014748:	881b      	ldrh	r3, [r3, #0]
 801474a:	461a      	mov	r2, r3
 801474c:	4b59      	ldr	r3, [pc, #356]	; (80148b4 <tcp_receive+0xb08>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	441a      	add	r2, r3
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801475a:	4b55      	ldr	r3, [pc, #340]	; (80148b0 <tcp_receive+0xb04>)
 801475c:	881b      	ldrh	r3, [r3, #0]
 801475e:	429a      	cmp	r2, r3
 8014760:	d206      	bcs.n	8014770 <tcp_receive+0x9c4>
 8014762:	4b56      	ldr	r3, [pc, #344]	; (80148bc <tcp_receive+0xb10>)
 8014764:	f240 6207 	movw	r2, #1543	; 0x607
 8014768:	4957      	ldr	r1, [pc, #348]	; (80148c8 <tcp_receive+0xb1c>)
 801476a:	4856      	ldr	r0, [pc, #344]	; (80148c4 <tcp_receive+0xb18>)
 801476c:	f005 fd0a 	bl	801a184 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014774:	4b4e      	ldr	r3, [pc, #312]	; (80148b0 <tcp_receive+0xb04>)
 8014776:	881b      	ldrh	r3, [r3, #0]
 8014778:	1ad3      	subs	r3, r2, r3
 801477a:	b29a      	uxth	r2, r3
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014780:	6878      	ldr	r0, [r7, #4]
 8014782:	f7fc feb5 	bl	80114f0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014786:	4b4c      	ldr	r3, [pc, #304]	; (80148b8 <tcp_receive+0xb0c>)
 8014788:	685b      	ldr	r3, [r3, #4]
 801478a:	891b      	ldrh	r3, [r3, #8]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d006      	beq.n	801479e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8014790:	4b49      	ldr	r3, [pc, #292]	; (80148b8 <tcp_receive+0xb0c>)
 8014792:	685b      	ldr	r3, [r3, #4]
 8014794:	4a4d      	ldr	r2, [pc, #308]	; (80148cc <tcp_receive+0xb20>)
 8014796:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014798:	4b47      	ldr	r3, [pc, #284]	; (80148b8 <tcp_receive+0xb0c>)
 801479a:	2200      	movs	r2, #0
 801479c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801479e:	4b46      	ldr	r3, [pc, #280]	; (80148b8 <tcp_receive+0xb0c>)
 80147a0:	68db      	ldr	r3, [r3, #12]
 80147a2:	899b      	ldrh	r3, [r3, #12]
 80147a4:	b29b      	uxth	r3, r3
 80147a6:	4618      	mov	r0, r3
 80147a8:	f7fa fb98 	bl	800eedc <lwip_htons>
 80147ac:	4603      	mov	r3, r0
 80147ae:	b2db      	uxtb	r3, r3
 80147b0:	f003 0301 	and.w	r3, r3, #1
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	f000 80b8 	beq.w	801492a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80147ba:	4b45      	ldr	r3, [pc, #276]	; (80148d0 <tcp_receive+0xb24>)
 80147bc:	781b      	ldrb	r3, [r3, #0]
 80147be:	f043 0320 	orr.w	r3, r3, #32
 80147c2:	b2da      	uxtb	r2, r3
 80147c4:	4b42      	ldr	r3, [pc, #264]	; (80148d0 <tcp_receive+0xb24>)
 80147c6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80147c8:	e0af      	b.n	801492a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147ce:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147d4:	68db      	ldr	r3, [r3, #12]
 80147d6:	685b      	ldr	r3, [r3, #4]
 80147d8:	4a36      	ldr	r2, [pc, #216]	; (80148b4 <tcp_receive+0xb08>)
 80147da:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80147dc:	68bb      	ldr	r3, [r7, #8]
 80147de:	891b      	ldrh	r3, [r3, #8]
 80147e0:	461c      	mov	r4, r3
 80147e2:	68bb      	ldr	r3, [r7, #8]
 80147e4:	68db      	ldr	r3, [r3, #12]
 80147e6:	899b      	ldrh	r3, [r3, #12]
 80147e8:	b29b      	uxth	r3, r3
 80147ea:	4618      	mov	r0, r3
 80147ec:	f7fa fb76 	bl	800eedc <lwip_htons>
 80147f0:	4603      	mov	r3, r0
 80147f2:	b2db      	uxtb	r3, r3
 80147f4:	f003 0303 	and.w	r3, r3, #3
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d001      	beq.n	8014800 <tcp_receive+0xa54>
 80147fc:	2301      	movs	r3, #1
 80147fe:	e000      	b.n	8014802 <tcp_receive+0xa56>
 8014800:	2300      	movs	r3, #0
 8014802:	191a      	adds	r2, r3, r4
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014808:	441a      	add	r2, r3
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014812:	461c      	mov	r4, r3
 8014814:	68bb      	ldr	r3, [r7, #8]
 8014816:	891b      	ldrh	r3, [r3, #8]
 8014818:	461d      	mov	r5, r3
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	68db      	ldr	r3, [r3, #12]
 801481e:	899b      	ldrh	r3, [r3, #12]
 8014820:	b29b      	uxth	r3, r3
 8014822:	4618      	mov	r0, r3
 8014824:	f7fa fb5a 	bl	800eedc <lwip_htons>
 8014828:	4603      	mov	r3, r0
 801482a:	b2db      	uxtb	r3, r3
 801482c:	f003 0303 	and.w	r3, r3, #3
 8014830:	2b00      	cmp	r3, #0
 8014832:	d001      	beq.n	8014838 <tcp_receive+0xa8c>
 8014834:	2301      	movs	r3, #1
 8014836:	e000      	b.n	801483a <tcp_receive+0xa8e>
 8014838:	2300      	movs	r3, #0
 801483a:	442b      	add	r3, r5
 801483c:	429c      	cmp	r4, r3
 801483e:	d206      	bcs.n	801484e <tcp_receive+0xaa2>
 8014840:	4b1e      	ldr	r3, [pc, #120]	; (80148bc <tcp_receive+0xb10>)
 8014842:	f240 622b 	movw	r2, #1579	; 0x62b
 8014846:	4923      	ldr	r1, [pc, #140]	; (80148d4 <tcp_receive+0xb28>)
 8014848:	481e      	ldr	r0, [pc, #120]	; (80148c4 <tcp_receive+0xb18>)
 801484a:	f005 fc9b 	bl	801a184 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801484e:	68bb      	ldr	r3, [r7, #8]
 8014850:	891b      	ldrh	r3, [r3, #8]
 8014852:	461c      	mov	r4, r3
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	68db      	ldr	r3, [r3, #12]
 8014858:	899b      	ldrh	r3, [r3, #12]
 801485a:	b29b      	uxth	r3, r3
 801485c:	4618      	mov	r0, r3
 801485e:	f7fa fb3d 	bl	800eedc <lwip_htons>
 8014862:	4603      	mov	r3, r0
 8014864:	b2db      	uxtb	r3, r3
 8014866:	f003 0303 	and.w	r3, r3, #3
 801486a:	2b00      	cmp	r3, #0
 801486c:	d001      	beq.n	8014872 <tcp_receive+0xac6>
 801486e:	2301      	movs	r3, #1
 8014870:	e000      	b.n	8014874 <tcp_receive+0xac8>
 8014872:	2300      	movs	r3, #0
 8014874:	1919      	adds	r1, r3, r4
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801487a:	b28b      	uxth	r3, r1
 801487c:	1ad3      	subs	r3, r2, r3
 801487e:	b29a      	uxth	r2, r3
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014884:	6878      	ldr	r0, [r7, #4]
 8014886:	f7fc fe33 	bl	80114f0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	685b      	ldr	r3, [r3, #4]
 801488e:	891b      	ldrh	r3, [r3, #8]
 8014890:	2b00      	cmp	r3, #0
 8014892:	d028      	beq.n	80148e6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014894:	4b0d      	ldr	r3, [pc, #52]	; (80148cc <tcp_receive+0xb20>)
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d01d      	beq.n	80148d8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801489c:	4b0b      	ldr	r3, [pc, #44]	; (80148cc <tcp_receive+0xb20>)
 801489e:	681a      	ldr	r2, [r3, #0]
 80148a0:	68bb      	ldr	r3, [r7, #8]
 80148a2:	685b      	ldr	r3, [r3, #4]
 80148a4:	4619      	mov	r1, r3
 80148a6:	4610      	mov	r0, r2
 80148a8:	f7fb ff92 	bl	80107d0 <pbuf_cat>
 80148ac:	e018      	b.n	80148e0 <tcp_receive+0xb34>
 80148ae:	bf00      	nop
 80148b0:	20004af2 	.word	0x20004af2
 80148b4:	20004ae8 	.word	0x20004ae8
 80148b8:	20004ac8 	.word	0x20004ac8
 80148bc:	0801ce5c 	.word	0x0801ce5c
 80148c0:	0801d23c 	.word	0x0801d23c
 80148c4:	0801cea8 	.word	0x0801cea8
 80148c8:	0801d278 	.word	0x0801d278
 80148cc:	20004af8 	.word	0x20004af8
 80148d0:	20004af5 	.word	0x20004af5
 80148d4:	0801d298 	.word	0x0801d298
            } else {
              recv_data = cseg->p;
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	685b      	ldr	r3, [r3, #4]
 80148dc:	4a70      	ldr	r2, [pc, #448]	; (8014aa0 <tcp_receive+0xcf4>)
 80148de:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80148e0:	68bb      	ldr	r3, [r7, #8]
 80148e2:	2200      	movs	r2, #0
 80148e4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80148e6:	68bb      	ldr	r3, [r7, #8]
 80148e8:	68db      	ldr	r3, [r3, #12]
 80148ea:	899b      	ldrh	r3, [r3, #12]
 80148ec:	b29b      	uxth	r3, r3
 80148ee:	4618      	mov	r0, r3
 80148f0:	f7fa faf4 	bl	800eedc <lwip_htons>
 80148f4:	4603      	mov	r3, r0
 80148f6:	b2db      	uxtb	r3, r3
 80148f8:	f003 0301 	and.w	r3, r3, #1
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d00d      	beq.n	801491c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014900:	4b68      	ldr	r3, [pc, #416]	; (8014aa4 <tcp_receive+0xcf8>)
 8014902:	781b      	ldrb	r3, [r3, #0]
 8014904:	f043 0320 	orr.w	r3, r3, #32
 8014908:	b2da      	uxtb	r2, r3
 801490a:	4b66      	ldr	r3, [pc, #408]	; (8014aa4 <tcp_receive+0xcf8>)
 801490c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	7d1b      	ldrb	r3, [r3, #20]
 8014912:	2b04      	cmp	r3, #4
 8014914:	d102      	bne.n	801491c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	2207      	movs	r2, #7
 801491a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	681a      	ldr	r2, [r3, #0]
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014924:	68b8      	ldr	r0, [r7, #8]
 8014926:	f7fd fb08 	bl	8011f3a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801492e:	2b00      	cmp	r3, #0
 8014930:	d008      	beq.n	8014944 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014936:	68db      	ldr	r3, [r3, #12]
 8014938:	685a      	ldr	r2, [r3, #4]
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801493e:	429a      	cmp	r2, r3
 8014940:	f43f af43 	beq.w	80147ca <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014944:	687b      	ldr	r3, [r7, #4]
 8014946:	8b5b      	ldrh	r3, [r3, #26]
 8014948:	f003 0301 	and.w	r3, r3, #1
 801494c:	2b00      	cmp	r3, #0
 801494e:	d00e      	beq.n	801496e <tcp_receive+0xbc2>
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	8b5b      	ldrh	r3, [r3, #26]
 8014954:	f023 0301 	bic.w	r3, r3, #1
 8014958:	b29a      	uxth	r2, r3
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	835a      	strh	r2, [r3, #26]
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	8b5b      	ldrh	r3, [r3, #26]
 8014962:	f043 0302 	orr.w	r3, r3, #2
 8014966:	b29a      	uxth	r2, r3
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801496c:	e188      	b.n	8014c80 <tcp_receive+0xed4>
        tcp_ack(pcb);
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	8b5b      	ldrh	r3, [r3, #26]
 8014972:	f043 0301 	orr.w	r3, r3, #1
 8014976:	b29a      	uxth	r2, r3
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801497c:	e180      	b.n	8014c80 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014982:	2b00      	cmp	r3, #0
 8014984:	d106      	bne.n	8014994 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014986:	4848      	ldr	r0, [pc, #288]	; (8014aa8 <tcp_receive+0xcfc>)
 8014988:	f7fd faf0 	bl	8011f6c <tcp_seg_copy>
 801498c:	4602      	mov	r2, r0
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	675a      	str	r2, [r3, #116]	; 0x74
 8014992:	e16d      	b.n	8014c70 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014994:	2300      	movs	r3, #0
 8014996:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801499c:	63bb      	str	r3, [r7, #56]	; 0x38
 801499e:	e157      	b.n	8014c50 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80149a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149a2:	68db      	ldr	r3, [r3, #12]
 80149a4:	685a      	ldr	r2, [r3, #4]
 80149a6:	4b41      	ldr	r3, [pc, #260]	; (8014aac <tcp_receive+0xd00>)
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	429a      	cmp	r2, r3
 80149ac:	d11d      	bne.n	80149ea <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80149ae:	4b3e      	ldr	r3, [pc, #248]	; (8014aa8 <tcp_receive+0xcfc>)
 80149b0:	891a      	ldrh	r2, [r3, #8]
 80149b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149b4:	891b      	ldrh	r3, [r3, #8]
 80149b6:	429a      	cmp	r2, r3
 80149b8:	f240 814f 	bls.w	8014c5a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80149bc:	483a      	ldr	r0, [pc, #232]	; (8014aa8 <tcp_receive+0xcfc>)
 80149be:	f7fd fad5 	bl	8011f6c <tcp_seg_copy>
 80149c2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80149c4:	697b      	ldr	r3, [r7, #20]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	f000 8149 	beq.w	8014c5e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80149cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149ce:	2b00      	cmp	r3, #0
 80149d0:	d003      	beq.n	80149da <tcp_receive+0xc2e>
                    prev->next = cseg;
 80149d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149d4:	697a      	ldr	r2, [r7, #20]
 80149d6:	601a      	str	r2, [r3, #0]
 80149d8:	e002      	b.n	80149e0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	697a      	ldr	r2, [r7, #20]
 80149de:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80149e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80149e2:	6978      	ldr	r0, [r7, #20]
 80149e4:	f7ff f8de 	bl	8013ba4 <tcp_oos_insert_segment>
                }
                break;
 80149e8:	e139      	b.n	8014c5e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80149ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d117      	bne.n	8014a20 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80149f0:	4b2e      	ldr	r3, [pc, #184]	; (8014aac <tcp_receive+0xd00>)
 80149f2:	681a      	ldr	r2, [r3, #0]
 80149f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f6:	68db      	ldr	r3, [r3, #12]
 80149f8:	685b      	ldr	r3, [r3, #4]
 80149fa:	1ad3      	subs	r3, r2, r3
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	da57      	bge.n	8014ab0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014a00:	4829      	ldr	r0, [pc, #164]	; (8014aa8 <tcp_receive+0xcfc>)
 8014a02:	f7fd fab3 	bl	8011f6c <tcp_seg_copy>
 8014a06:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014a08:	69bb      	ldr	r3, [r7, #24]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	f000 8129 	beq.w	8014c62 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	69ba      	ldr	r2, [r7, #24]
 8014a14:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014a16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a18:	69b8      	ldr	r0, [r7, #24]
 8014a1a:	f7ff f8c3 	bl	8013ba4 <tcp_oos_insert_segment>
                  }
                  break;
 8014a1e:	e120      	b.n	8014c62 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014a20:	4b22      	ldr	r3, [pc, #136]	; (8014aac <tcp_receive+0xd00>)
 8014a22:	681a      	ldr	r2, [r3, #0]
 8014a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a26:	68db      	ldr	r3, [r3, #12]
 8014a28:	685b      	ldr	r3, [r3, #4]
 8014a2a:	1ad3      	subs	r3, r2, r3
 8014a2c:	3b01      	subs	r3, #1
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	db3e      	blt.n	8014ab0 <tcp_receive+0xd04>
 8014a32:	4b1e      	ldr	r3, [pc, #120]	; (8014aac <tcp_receive+0xd00>)
 8014a34:	681a      	ldr	r2, [r3, #0]
 8014a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a38:	68db      	ldr	r3, [r3, #12]
 8014a3a:	685b      	ldr	r3, [r3, #4]
 8014a3c:	1ad3      	subs	r3, r2, r3
 8014a3e:	3301      	adds	r3, #1
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	dc35      	bgt.n	8014ab0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014a44:	4818      	ldr	r0, [pc, #96]	; (8014aa8 <tcp_receive+0xcfc>)
 8014a46:	f7fd fa91 	bl	8011f6c <tcp_seg_copy>
 8014a4a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014a4c:	69fb      	ldr	r3, [r7, #28]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	f000 8109 	beq.w	8014c66 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a56:	68db      	ldr	r3, [r3, #12]
 8014a58:	685b      	ldr	r3, [r3, #4]
 8014a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a5c:	8912      	ldrh	r2, [r2, #8]
 8014a5e:	441a      	add	r2, r3
 8014a60:	4b12      	ldr	r3, [pc, #72]	; (8014aac <tcp_receive+0xd00>)
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	1ad3      	subs	r3, r2, r3
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	dd12      	ble.n	8014a90 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014a6a:	4b10      	ldr	r3, [pc, #64]	; (8014aac <tcp_receive+0xd00>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a72:	68db      	ldr	r3, [r3, #12]
 8014a74:	685b      	ldr	r3, [r3, #4]
 8014a76:	b29b      	uxth	r3, r3
 8014a78:	1ad3      	subs	r3, r2, r3
 8014a7a:	b29a      	uxth	r2, r3
 8014a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a7e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a82:	685a      	ldr	r2, [r3, #4]
 8014a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a86:	891b      	ldrh	r3, [r3, #8]
 8014a88:	4619      	mov	r1, r3
 8014a8a:	4610      	mov	r0, r2
 8014a8c:	f7fb fc4c 	bl	8010328 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a92:	69fa      	ldr	r2, [r7, #28]
 8014a94:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014a96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a98:	69f8      	ldr	r0, [r7, #28]
 8014a9a:	f7ff f883 	bl	8013ba4 <tcp_oos_insert_segment>
                  }
                  break;
 8014a9e:	e0e2      	b.n	8014c66 <tcp_receive+0xeba>
 8014aa0:	20004af8 	.word	0x20004af8
 8014aa4:	20004af5 	.word	0x20004af5
 8014aa8:	20004ac8 	.word	0x20004ac8
 8014aac:	20004ae8 	.word	0x20004ae8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ab2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	f040 80c6 	bne.w	8014c4a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014abe:	4b80      	ldr	r3, [pc, #512]	; (8014cc0 <tcp_receive+0xf14>)
 8014ac0:	681a      	ldr	r2, [r3, #0]
 8014ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ac4:	68db      	ldr	r3, [r3, #12]
 8014ac6:	685b      	ldr	r3, [r3, #4]
 8014ac8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	f340 80bd 	ble.w	8014c4a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ad2:	68db      	ldr	r3, [r3, #12]
 8014ad4:	899b      	ldrh	r3, [r3, #12]
 8014ad6:	b29b      	uxth	r3, r3
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7fa f9ff 	bl	800eedc <lwip_htons>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	b2db      	uxtb	r3, r3
 8014ae2:	f003 0301 	and.w	r3, r3, #1
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	f040 80bf 	bne.w	8014c6a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014aec:	4875      	ldr	r0, [pc, #468]	; (8014cc4 <tcp_receive+0xf18>)
 8014aee:	f7fd fa3d 	bl	8011f6c <tcp_seg_copy>
 8014af2:	4602      	mov	r2, r0
 8014af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014af6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	f000 80b6 	beq.w	8014c6e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b04:	68db      	ldr	r3, [r3, #12]
 8014b06:	685b      	ldr	r3, [r3, #4]
 8014b08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b0a:	8912      	ldrh	r2, [r2, #8]
 8014b0c:	441a      	add	r2, r3
 8014b0e:	4b6c      	ldr	r3, [pc, #432]	; (8014cc0 <tcp_receive+0xf14>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	1ad3      	subs	r3, r2, r3
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	dd12      	ble.n	8014b3e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014b18:	4b69      	ldr	r3, [pc, #420]	; (8014cc0 <tcp_receive+0xf14>)
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	b29a      	uxth	r2, r3
 8014b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b20:	68db      	ldr	r3, [r3, #12]
 8014b22:	685b      	ldr	r3, [r3, #4]
 8014b24:	b29b      	uxth	r3, r3
 8014b26:	1ad3      	subs	r3, r2, r3
 8014b28:	b29a      	uxth	r2, r3
 8014b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b2c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b30:	685a      	ldr	r2, [r3, #4]
 8014b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b34:	891b      	ldrh	r3, [r3, #8]
 8014b36:	4619      	mov	r1, r3
 8014b38:	4610      	mov	r0, r2
 8014b3a:	f7fb fbf5 	bl	8010328 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014b3e:	4b62      	ldr	r3, [pc, #392]	; (8014cc8 <tcp_receive+0xf1c>)
 8014b40:	881b      	ldrh	r3, [r3, #0]
 8014b42:	461a      	mov	r2, r3
 8014b44:	4b5e      	ldr	r3, [pc, #376]	; (8014cc0 <tcp_receive+0xf14>)
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	441a      	add	r2, r3
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b4e:	6879      	ldr	r1, [r7, #4]
 8014b50:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014b52:	440b      	add	r3, r1
 8014b54:	1ad3      	subs	r3, r2, r3
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	f340 8089 	ble.w	8014c6e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	68db      	ldr	r3, [r3, #12]
 8014b62:	899b      	ldrh	r3, [r3, #12]
 8014b64:	b29b      	uxth	r3, r3
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7fa f9b8 	bl	800eedc <lwip_htons>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	b2db      	uxtb	r3, r3
 8014b70:	f003 0301 	and.w	r3, r3, #1
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d022      	beq.n	8014bbe <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	68db      	ldr	r3, [r3, #12]
 8014b7e:	899b      	ldrh	r3, [r3, #12]
 8014b80:	b29b      	uxth	r3, r3
 8014b82:	b21b      	sxth	r3, r3
 8014b84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014b88:	b21c      	sxth	r4, r3
 8014b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b8c:	681b      	ldr	r3, [r3, #0]
 8014b8e:	68db      	ldr	r3, [r3, #12]
 8014b90:	899b      	ldrh	r3, [r3, #12]
 8014b92:	b29b      	uxth	r3, r3
 8014b94:	4618      	mov	r0, r3
 8014b96:	f7fa f9a1 	bl	800eedc <lwip_htons>
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	b2db      	uxtb	r3, r3
 8014b9e:	b29b      	uxth	r3, r3
 8014ba0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014ba4:	b29b      	uxth	r3, r3
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7fa f998 	bl	800eedc <lwip_htons>
 8014bac:	4603      	mov	r3, r0
 8014bae:	b21b      	sxth	r3, r3
 8014bb0:	4323      	orrs	r3, r4
 8014bb2:	b21a      	sxth	r2, r3
 8014bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	68db      	ldr	r3, [r3, #12]
 8014bba:	b292      	uxth	r2, r2
 8014bbc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bc2:	b29a      	uxth	r2, r3
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014bc8:	4413      	add	r3, r2
 8014bca:	b299      	uxth	r1, r3
 8014bcc:	4b3c      	ldr	r3, [pc, #240]	; (8014cc0 <tcp_receive+0xf14>)
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	b29a      	uxth	r2, r3
 8014bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	1a8a      	subs	r2, r1, r2
 8014bd8:	b292      	uxth	r2, r2
 8014bda:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	685a      	ldr	r2, [r3, #4]
 8014be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	891b      	ldrh	r3, [r3, #8]
 8014be8:	4619      	mov	r1, r3
 8014bea:	4610      	mov	r0, r2
 8014bec:	f7fb fb9c 	bl	8010328 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	891c      	ldrh	r4, [r3, #8]
 8014bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	68db      	ldr	r3, [r3, #12]
 8014bfc:	899b      	ldrh	r3, [r3, #12]
 8014bfe:	b29b      	uxth	r3, r3
 8014c00:	4618      	mov	r0, r3
 8014c02:	f7fa f96b 	bl	800eedc <lwip_htons>
 8014c06:	4603      	mov	r3, r0
 8014c08:	b2db      	uxtb	r3, r3
 8014c0a:	f003 0303 	and.w	r3, r3, #3
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d001      	beq.n	8014c16 <tcp_receive+0xe6a>
 8014c12:	2301      	movs	r3, #1
 8014c14:	e000      	b.n	8014c18 <tcp_receive+0xe6c>
 8014c16:	2300      	movs	r3, #0
 8014c18:	4423      	add	r3, r4
 8014c1a:	b29a      	uxth	r2, r3
 8014c1c:	4b2a      	ldr	r3, [pc, #168]	; (8014cc8 <tcp_receive+0xf1c>)
 8014c1e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014c20:	4b29      	ldr	r3, [pc, #164]	; (8014cc8 <tcp_receive+0xf1c>)
 8014c22:	881b      	ldrh	r3, [r3, #0]
 8014c24:	461a      	mov	r2, r3
 8014c26:	4b26      	ldr	r3, [pc, #152]	; (8014cc0 <tcp_receive+0xf14>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	441a      	add	r2, r3
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c30:	6879      	ldr	r1, [r7, #4]
 8014c32:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014c34:	440b      	add	r3, r1
 8014c36:	429a      	cmp	r2, r3
 8014c38:	d019      	beq.n	8014c6e <tcp_receive+0xec2>
 8014c3a:	4b24      	ldr	r3, [pc, #144]	; (8014ccc <tcp_receive+0xf20>)
 8014c3c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014c40:	4923      	ldr	r1, [pc, #140]	; (8014cd0 <tcp_receive+0xf24>)
 8014c42:	4824      	ldr	r0, [pc, #144]	; (8014cd4 <tcp_receive+0xf28>)
 8014c44:	f005 fa9e 	bl	801a184 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014c48:	e011      	b.n	8014c6e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8014c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	f47f aea4 	bne.w	80149a0 <tcp_receive+0xbf4>
 8014c58:	e00a      	b.n	8014c70 <tcp_receive+0xec4>
                break;
 8014c5a:	bf00      	nop
 8014c5c:	e008      	b.n	8014c70 <tcp_receive+0xec4>
                break;
 8014c5e:	bf00      	nop
 8014c60:	e006      	b.n	8014c70 <tcp_receive+0xec4>
                  break;
 8014c62:	bf00      	nop
 8014c64:	e004      	b.n	8014c70 <tcp_receive+0xec4>
                  break;
 8014c66:	bf00      	nop
 8014c68:	e002      	b.n	8014c70 <tcp_receive+0xec4>
                  break;
 8014c6a:	bf00      	nop
 8014c6c:	e000      	b.n	8014c70 <tcp_receive+0xec4>
                break;
 8014c6e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014c70:	6878      	ldr	r0, [r7, #4]
 8014c72:	f001 fe8b 	bl	801698c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014c76:	e003      	b.n	8014c80 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014c78:	6878      	ldr	r0, [r7, #4]
 8014c7a:	f001 fe87 	bl	801698c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014c7e:	e01a      	b.n	8014cb6 <tcp_receive+0xf0a>
 8014c80:	e019      	b.n	8014cb6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014c82:	4b0f      	ldr	r3, [pc, #60]	; (8014cc0 <tcp_receive+0xf14>)
 8014c84:	681a      	ldr	r2, [r3, #0]
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c8a:	1ad3      	subs	r3, r2, r3
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	db0a      	blt.n	8014ca6 <tcp_receive+0xefa>
 8014c90:	4b0b      	ldr	r3, [pc, #44]	; (8014cc0 <tcp_receive+0xf14>)
 8014c92:	681a      	ldr	r2, [r3, #0]
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c98:	6879      	ldr	r1, [r7, #4]
 8014c9a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014c9c:	440b      	add	r3, r1
 8014c9e:	1ad3      	subs	r3, r2, r3
 8014ca0:	3301      	adds	r3, #1
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	dd07      	ble.n	8014cb6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	8b5b      	ldrh	r3, [r3, #26]
 8014caa:	f043 0302 	orr.w	r3, r3, #2
 8014cae:	b29a      	uxth	r2, r3
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014cb4:	e7ff      	b.n	8014cb6 <tcp_receive+0xf0a>
 8014cb6:	bf00      	nop
 8014cb8:	3750      	adds	r7, #80	; 0x50
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8014cbe:	bf00      	nop
 8014cc0:	20004ae8 	.word	0x20004ae8
 8014cc4:	20004ac8 	.word	0x20004ac8
 8014cc8:	20004af2 	.word	0x20004af2
 8014ccc:	0801ce5c 	.word	0x0801ce5c
 8014cd0:	0801d204 	.word	0x0801d204
 8014cd4:	0801cea8 	.word	0x0801cea8

08014cd8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014cd8:	b480      	push	{r7}
 8014cda:	b083      	sub	sp, #12
 8014cdc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014cde:	4b15      	ldr	r3, [pc, #84]	; (8014d34 <tcp_get_next_optbyte+0x5c>)
 8014ce0:	881b      	ldrh	r3, [r3, #0]
 8014ce2:	1c5a      	adds	r2, r3, #1
 8014ce4:	b291      	uxth	r1, r2
 8014ce6:	4a13      	ldr	r2, [pc, #76]	; (8014d34 <tcp_get_next_optbyte+0x5c>)
 8014ce8:	8011      	strh	r1, [r2, #0]
 8014cea:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014cec:	4b12      	ldr	r3, [pc, #72]	; (8014d38 <tcp_get_next_optbyte+0x60>)
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d004      	beq.n	8014cfe <tcp_get_next_optbyte+0x26>
 8014cf4:	4b11      	ldr	r3, [pc, #68]	; (8014d3c <tcp_get_next_optbyte+0x64>)
 8014cf6:	881b      	ldrh	r3, [r3, #0]
 8014cf8:	88fa      	ldrh	r2, [r7, #6]
 8014cfa:	429a      	cmp	r2, r3
 8014cfc:	d208      	bcs.n	8014d10 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014cfe:	4b10      	ldr	r3, [pc, #64]	; (8014d40 <tcp_get_next_optbyte+0x68>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	3314      	adds	r3, #20
 8014d04:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014d06:	88fb      	ldrh	r3, [r7, #6]
 8014d08:	683a      	ldr	r2, [r7, #0]
 8014d0a:	4413      	add	r3, r2
 8014d0c:	781b      	ldrb	r3, [r3, #0]
 8014d0e:	e00b      	b.n	8014d28 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014d10:	88fb      	ldrh	r3, [r7, #6]
 8014d12:	b2da      	uxtb	r2, r3
 8014d14:	4b09      	ldr	r3, [pc, #36]	; (8014d3c <tcp_get_next_optbyte+0x64>)
 8014d16:	881b      	ldrh	r3, [r3, #0]
 8014d18:	b2db      	uxtb	r3, r3
 8014d1a:	1ad3      	subs	r3, r2, r3
 8014d1c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014d1e:	4b06      	ldr	r3, [pc, #24]	; (8014d38 <tcp_get_next_optbyte+0x60>)
 8014d20:	681a      	ldr	r2, [r3, #0]
 8014d22:	797b      	ldrb	r3, [r7, #5]
 8014d24:	4413      	add	r3, r2
 8014d26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014d28:	4618      	mov	r0, r3
 8014d2a:	370c      	adds	r7, #12
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d32:	4770      	bx	lr
 8014d34:	20004ae4 	.word	0x20004ae4
 8014d38:	20004ae0 	.word	0x20004ae0
 8014d3c:	20004ade 	.word	0x20004ade
 8014d40:	20004ad8 	.word	0x20004ad8

08014d44 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b084      	sub	sp, #16
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d106      	bne.n	8014d60 <tcp_parseopt+0x1c>
 8014d52:	4b32      	ldr	r3, [pc, #200]	; (8014e1c <tcp_parseopt+0xd8>)
 8014d54:	f240 727d 	movw	r2, #1917	; 0x77d
 8014d58:	4931      	ldr	r1, [pc, #196]	; (8014e20 <tcp_parseopt+0xdc>)
 8014d5a:	4832      	ldr	r0, [pc, #200]	; (8014e24 <tcp_parseopt+0xe0>)
 8014d5c:	f005 fa12 	bl	801a184 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014d60:	4b31      	ldr	r3, [pc, #196]	; (8014e28 <tcp_parseopt+0xe4>)
 8014d62:	881b      	ldrh	r3, [r3, #0]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d055      	beq.n	8014e14 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014d68:	4b30      	ldr	r3, [pc, #192]	; (8014e2c <tcp_parseopt+0xe8>)
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	801a      	strh	r2, [r3, #0]
 8014d6e:	e045      	b.n	8014dfc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8014d70:	f7ff ffb2 	bl	8014cd8 <tcp_get_next_optbyte>
 8014d74:	4603      	mov	r3, r0
 8014d76:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014d78:	7bfb      	ldrb	r3, [r7, #15]
 8014d7a:	2b02      	cmp	r3, #2
 8014d7c:	d006      	beq.n	8014d8c <tcp_parseopt+0x48>
 8014d7e:	2b02      	cmp	r3, #2
 8014d80:	dc2b      	bgt.n	8014dda <tcp_parseopt+0x96>
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d041      	beq.n	8014e0a <tcp_parseopt+0xc6>
 8014d86:	2b01      	cmp	r3, #1
 8014d88:	d127      	bne.n	8014dda <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014d8a:	e037      	b.n	8014dfc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014d8c:	f7ff ffa4 	bl	8014cd8 <tcp_get_next_optbyte>
 8014d90:	4603      	mov	r3, r0
 8014d92:	2b04      	cmp	r3, #4
 8014d94:	d13b      	bne.n	8014e0e <tcp_parseopt+0xca>
 8014d96:	4b25      	ldr	r3, [pc, #148]	; (8014e2c <tcp_parseopt+0xe8>)
 8014d98:	881b      	ldrh	r3, [r3, #0]
 8014d9a:	3301      	adds	r3, #1
 8014d9c:	4a22      	ldr	r2, [pc, #136]	; (8014e28 <tcp_parseopt+0xe4>)
 8014d9e:	8812      	ldrh	r2, [r2, #0]
 8014da0:	4293      	cmp	r3, r2
 8014da2:	da34      	bge.n	8014e0e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014da4:	f7ff ff98 	bl	8014cd8 <tcp_get_next_optbyte>
 8014da8:	4603      	mov	r3, r0
 8014daa:	b29b      	uxth	r3, r3
 8014dac:	021b      	lsls	r3, r3, #8
 8014dae:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014db0:	f7ff ff92 	bl	8014cd8 <tcp_get_next_optbyte>
 8014db4:	4603      	mov	r3, r0
 8014db6:	b29a      	uxth	r2, r3
 8014db8:	89bb      	ldrh	r3, [r7, #12]
 8014dba:	4313      	orrs	r3, r2
 8014dbc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014dbe:	89bb      	ldrh	r3, [r7, #12]
 8014dc0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8014dc4:	d804      	bhi.n	8014dd0 <tcp_parseopt+0x8c>
 8014dc6:	89bb      	ldrh	r3, [r7, #12]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d001      	beq.n	8014dd0 <tcp_parseopt+0x8c>
 8014dcc:	89ba      	ldrh	r2, [r7, #12]
 8014dce:	e001      	b.n	8014dd4 <tcp_parseopt+0x90>
 8014dd0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014dd8:	e010      	b.n	8014dfc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014dda:	f7ff ff7d 	bl	8014cd8 <tcp_get_next_optbyte>
 8014dde:	4603      	mov	r3, r0
 8014de0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014de2:	7afb      	ldrb	r3, [r7, #11]
 8014de4:	2b01      	cmp	r3, #1
 8014de6:	d914      	bls.n	8014e12 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014de8:	7afb      	ldrb	r3, [r7, #11]
 8014dea:	b29a      	uxth	r2, r3
 8014dec:	4b0f      	ldr	r3, [pc, #60]	; (8014e2c <tcp_parseopt+0xe8>)
 8014dee:	881b      	ldrh	r3, [r3, #0]
 8014df0:	4413      	add	r3, r2
 8014df2:	b29b      	uxth	r3, r3
 8014df4:	3b02      	subs	r3, #2
 8014df6:	b29a      	uxth	r2, r3
 8014df8:	4b0c      	ldr	r3, [pc, #48]	; (8014e2c <tcp_parseopt+0xe8>)
 8014dfa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014dfc:	4b0b      	ldr	r3, [pc, #44]	; (8014e2c <tcp_parseopt+0xe8>)
 8014dfe:	881a      	ldrh	r2, [r3, #0]
 8014e00:	4b09      	ldr	r3, [pc, #36]	; (8014e28 <tcp_parseopt+0xe4>)
 8014e02:	881b      	ldrh	r3, [r3, #0]
 8014e04:	429a      	cmp	r2, r3
 8014e06:	d3b3      	bcc.n	8014d70 <tcp_parseopt+0x2c>
 8014e08:	e004      	b.n	8014e14 <tcp_parseopt+0xd0>
          return;
 8014e0a:	bf00      	nop
 8014e0c:	e002      	b.n	8014e14 <tcp_parseopt+0xd0>
            return;
 8014e0e:	bf00      	nop
 8014e10:	e000      	b.n	8014e14 <tcp_parseopt+0xd0>
            return;
 8014e12:	bf00      	nop
      }
    }
  }
}
 8014e14:	3710      	adds	r7, #16
 8014e16:	46bd      	mov	sp, r7
 8014e18:	bd80      	pop	{r7, pc}
 8014e1a:	bf00      	nop
 8014e1c:	0801ce5c 	.word	0x0801ce5c
 8014e20:	0801d2c0 	.word	0x0801d2c0
 8014e24:	0801cea8 	.word	0x0801cea8
 8014e28:	20004adc 	.word	0x20004adc
 8014e2c:	20004ae4 	.word	0x20004ae4

08014e30 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014e30:	b480      	push	{r7}
 8014e32:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014e34:	4b05      	ldr	r3, [pc, #20]	; (8014e4c <tcp_trigger_input_pcb_close+0x1c>)
 8014e36:	781b      	ldrb	r3, [r3, #0]
 8014e38:	f043 0310 	orr.w	r3, r3, #16
 8014e3c:	b2da      	uxtb	r2, r3
 8014e3e:	4b03      	ldr	r3, [pc, #12]	; (8014e4c <tcp_trigger_input_pcb_close+0x1c>)
 8014e40:	701a      	strb	r2, [r3, #0]
}
 8014e42:	bf00      	nop
 8014e44:	46bd      	mov	sp, r7
 8014e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e4a:	4770      	bx	lr
 8014e4c:	20004af5 	.word	0x20004af5

08014e50 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	b084      	sub	sp, #16
 8014e54:	af00      	add	r7, sp, #0
 8014e56:	60f8      	str	r0, [r7, #12]
 8014e58:	60b9      	str	r1, [r7, #8]
 8014e5a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d00a      	beq.n	8014e78 <tcp_route+0x28>
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	7a1b      	ldrb	r3, [r3, #8]
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d006      	beq.n	8014e78 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	7a1b      	ldrb	r3, [r3, #8]
 8014e6e:	4618      	mov	r0, r3
 8014e70:	f7fb f852 	bl	800ff18 <netif_get_by_index>
 8014e74:	4603      	mov	r3, r0
 8014e76:	e003      	b.n	8014e80 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014e78:	6878      	ldr	r0, [r7, #4]
 8014e7a:	f003 fc4b 	bl	8018714 <ip4_route>
 8014e7e:	4603      	mov	r3, r0
  }
}
 8014e80:	4618      	mov	r0, r3
 8014e82:	3710      	adds	r7, #16
 8014e84:	46bd      	mov	sp, r7
 8014e86:	bd80      	pop	{r7, pc}

08014e88 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014e88:	b590      	push	{r4, r7, lr}
 8014e8a:	b087      	sub	sp, #28
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	60f8      	str	r0, [r7, #12]
 8014e90:	60b9      	str	r1, [r7, #8]
 8014e92:	603b      	str	r3, [r7, #0]
 8014e94:	4613      	mov	r3, r2
 8014e96:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d105      	bne.n	8014eaa <tcp_create_segment+0x22>
 8014e9e:	4b44      	ldr	r3, [pc, #272]	; (8014fb0 <tcp_create_segment+0x128>)
 8014ea0:	22a3      	movs	r2, #163	; 0xa3
 8014ea2:	4944      	ldr	r1, [pc, #272]	; (8014fb4 <tcp_create_segment+0x12c>)
 8014ea4:	4844      	ldr	r0, [pc, #272]	; (8014fb8 <tcp_create_segment+0x130>)
 8014ea6:	f005 f96d 	bl	801a184 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014eaa:	68bb      	ldr	r3, [r7, #8]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d105      	bne.n	8014ebc <tcp_create_segment+0x34>
 8014eb0:	4b3f      	ldr	r3, [pc, #252]	; (8014fb0 <tcp_create_segment+0x128>)
 8014eb2:	22a4      	movs	r2, #164	; 0xa4
 8014eb4:	4941      	ldr	r1, [pc, #260]	; (8014fbc <tcp_create_segment+0x134>)
 8014eb6:	4840      	ldr	r0, [pc, #256]	; (8014fb8 <tcp_create_segment+0x130>)
 8014eb8:	f005 f964 	bl	801a184 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014ebc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014ec0:	009b      	lsls	r3, r3, #2
 8014ec2:	b2db      	uxtb	r3, r3
 8014ec4:	f003 0304 	and.w	r3, r3, #4
 8014ec8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014eca:	2003      	movs	r0, #3
 8014ecc:	f7fa fcbc 	bl	800f848 <memp_malloc>
 8014ed0:	6138      	str	r0, [r7, #16]
 8014ed2:	693b      	ldr	r3, [r7, #16]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d104      	bne.n	8014ee2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014ed8:	68b8      	ldr	r0, [r7, #8]
 8014eda:	f7fb fbab 	bl	8010634 <pbuf_free>
    return NULL;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	e061      	b.n	8014fa6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8014ee2:	693b      	ldr	r3, [r7, #16]
 8014ee4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014ee8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014eea:	693b      	ldr	r3, [r7, #16]
 8014eec:	2200      	movs	r2, #0
 8014eee:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014ef0:	693b      	ldr	r3, [r7, #16]
 8014ef2:	68ba      	ldr	r2, [r7, #8]
 8014ef4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014ef6:	68bb      	ldr	r3, [r7, #8]
 8014ef8:	891a      	ldrh	r2, [r3, #8]
 8014efa:	7dfb      	ldrb	r3, [r7, #23]
 8014efc:	b29b      	uxth	r3, r3
 8014efe:	429a      	cmp	r2, r3
 8014f00:	d205      	bcs.n	8014f0e <tcp_create_segment+0x86>
 8014f02:	4b2b      	ldr	r3, [pc, #172]	; (8014fb0 <tcp_create_segment+0x128>)
 8014f04:	22b0      	movs	r2, #176	; 0xb0
 8014f06:	492e      	ldr	r1, [pc, #184]	; (8014fc0 <tcp_create_segment+0x138>)
 8014f08:	482b      	ldr	r0, [pc, #172]	; (8014fb8 <tcp_create_segment+0x130>)
 8014f0a:	f005 f93b 	bl	801a184 <iprintf>
  seg->len = p->tot_len - optlen;
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	891a      	ldrh	r2, [r3, #8]
 8014f12:	7dfb      	ldrb	r3, [r7, #23]
 8014f14:	b29b      	uxth	r3, r3
 8014f16:	1ad3      	subs	r3, r2, r3
 8014f18:	b29a      	uxth	r2, r3
 8014f1a:	693b      	ldr	r3, [r7, #16]
 8014f1c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014f1e:	2114      	movs	r1, #20
 8014f20:	68b8      	ldr	r0, [r7, #8]
 8014f22:	f7fb faf1 	bl	8010508 <pbuf_add_header>
 8014f26:	4603      	mov	r3, r0
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d004      	beq.n	8014f36 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014f2c:	6938      	ldr	r0, [r7, #16]
 8014f2e:	f7fd f804 	bl	8011f3a <tcp_seg_free>
    return NULL;
 8014f32:	2300      	movs	r3, #0
 8014f34:	e037      	b.n	8014fa6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014f36:	693b      	ldr	r3, [r7, #16]
 8014f38:	685b      	ldr	r3, [r3, #4]
 8014f3a:	685a      	ldr	r2, [r3, #4]
 8014f3c:	693b      	ldr	r3, [r7, #16]
 8014f3e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	8ada      	ldrh	r2, [r3, #22]
 8014f44:	693b      	ldr	r3, [r7, #16]
 8014f46:	68dc      	ldr	r4, [r3, #12]
 8014f48:	4610      	mov	r0, r2
 8014f4a:	f7f9 ffc7 	bl	800eedc <lwip_htons>
 8014f4e:	4603      	mov	r3, r0
 8014f50:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	8b1a      	ldrh	r2, [r3, #24]
 8014f56:	693b      	ldr	r3, [r7, #16]
 8014f58:	68dc      	ldr	r4, [r3, #12]
 8014f5a:	4610      	mov	r0, r2
 8014f5c:	f7f9 ffbe 	bl	800eedc <lwip_htons>
 8014f60:	4603      	mov	r3, r0
 8014f62:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014f64:	693b      	ldr	r3, [r7, #16]
 8014f66:	68dc      	ldr	r4, [r3, #12]
 8014f68:	6838      	ldr	r0, [r7, #0]
 8014f6a:	f7f9 ffcc 	bl	800ef06 <lwip_htonl>
 8014f6e:	4603      	mov	r3, r0
 8014f70:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014f72:	7dfb      	ldrb	r3, [r7, #23]
 8014f74:	089b      	lsrs	r3, r3, #2
 8014f76:	b2db      	uxtb	r3, r3
 8014f78:	b29b      	uxth	r3, r3
 8014f7a:	3305      	adds	r3, #5
 8014f7c:	b29b      	uxth	r3, r3
 8014f7e:	031b      	lsls	r3, r3, #12
 8014f80:	b29a      	uxth	r2, r3
 8014f82:	79fb      	ldrb	r3, [r7, #7]
 8014f84:	b29b      	uxth	r3, r3
 8014f86:	4313      	orrs	r3, r2
 8014f88:	b29a      	uxth	r2, r3
 8014f8a:	693b      	ldr	r3, [r7, #16]
 8014f8c:	68dc      	ldr	r4, [r3, #12]
 8014f8e:	4610      	mov	r0, r2
 8014f90:	f7f9 ffa4 	bl	800eedc <lwip_htons>
 8014f94:	4603      	mov	r3, r0
 8014f96:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	68db      	ldr	r3, [r3, #12]
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	749a      	strb	r2, [r3, #18]
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	74da      	strb	r2, [r3, #19]
  return seg;
 8014fa4:	693b      	ldr	r3, [r7, #16]
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	371c      	adds	r7, #28
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd90      	pop	{r4, r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	0801d2dc 	.word	0x0801d2dc
 8014fb4:	0801d310 	.word	0x0801d310
 8014fb8:	0801d330 	.word	0x0801d330
 8014fbc:	0801d358 	.word	0x0801d358
 8014fc0:	0801d37c 	.word	0x0801d37c

08014fc4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b086      	sub	sp, #24
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	607b      	str	r3, [r7, #4]
 8014fcc:	4603      	mov	r3, r0
 8014fce:	73fb      	strb	r3, [r7, #15]
 8014fd0:	460b      	mov	r3, r1
 8014fd2:	81bb      	strh	r3, [r7, #12]
 8014fd4:	4613      	mov	r3, r2
 8014fd6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8014fd8:	89bb      	ldrh	r3, [r7, #12]
 8014fda:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d105      	bne.n	8014fee <tcp_pbuf_prealloc+0x2a>
 8014fe2:	4b30      	ldr	r3, [pc, #192]	; (80150a4 <tcp_pbuf_prealloc+0xe0>)
 8014fe4:	22e8      	movs	r2, #232	; 0xe8
 8014fe6:	4930      	ldr	r1, [pc, #192]	; (80150a8 <tcp_pbuf_prealloc+0xe4>)
 8014fe8:	4830      	ldr	r0, [pc, #192]	; (80150ac <tcp_pbuf_prealloc+0xe8>)
 8014fea:	f005 f8cb 	bl	801a184 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8014fee:	6a3b      	ldr	r3, [r7, #32]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d105      	bne.n	8015000 <tcp_pbuf_prealloc+0x3c>
 8014ff4:	4b2b      	ldr	r3, [pc, #172]	; (80150a4 <tcp_pbuf_prealloc+0xe0>)
 8014ff6:	22e9      	movs	r2, #233	; 0xe9
 8014ff8:	492d      	ldr	r1, [pc, #180]	; (80150b0 <tcp_pbuf_prealloc+0xec>)
 8014ffa:	482c      	ldr	r0, [pc, #176]	; (80150ac <tcp_pbuf_prealloc+0xe8>)
 8014ffc:	f005 f8c2 	bl	801a184 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015000:	89ba      	ldrh	r2, [r7, #12]
 8015002:	897b      	ldrh	r3, [r7, #10]
 8015004:	429a      	cmp	r2, r3
 8015006:	d221      	bcs.n	801504c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015008:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801500c:	f003 0302 	and.w	r3, r3, #2
 8015010:	2b00      	cmp	r3, #0
 8015012:	d111      	bne.n	8015038 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015014:	6a3b      	ldr	r3, [r7, #32]
 8015016:	8b5b      	ldrh	r3, [r3, #26]
 8015018:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801501c:	2b00      	cmp	r3, #0
 801501e:	d115      	bne.n	801504c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015020:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015024:	2b00      	cmp	r3, #0
 8015026:	d007      	beq.n	8015038 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015028:	6a3b      	ldr	r3, [r7, #32]
 801502a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801502c:	2b00      	cmp	r3, #0
 801502e:	d103      	bne.n	8015038 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015030:	6a3b      	ldr	r3, [r7, #32]
 8015032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015034:	2b00      	cmp	r3, #0
 8015036:	d009      	beq.n	801504c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015038:	89bb      	ldrh	r3, [r7, #12]
 801503a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801503e:	f023 0203 	bic.w	r2, r3, #3
 8015042:	897b      	ldrh	r3, [r7, #10]
 8015044:	4293      	cmp	r3, r2
 8015046:	bf28      	it	cs
 8015048:	4613      	movcs	r3, r2
 801504a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801504c:	8af9      	ldrh	r1, [r7, #22]
 801504e:	7bfb      	ldrb	r3, [r7, #15]
 8015050:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015054:	4618      	mov	r0, r3
 8015056:	f7fb f809 	bl	801006c <pbuf_alloc>
 801505a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801505c:	693b      	ldr	r3, [r7, #16]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d101      	bne.n	8015066 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015062:	2300      	movs	r3, #0
 8015064:	e019      	b.n	801509a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015066:	693b      	ldr	r3, [r7, #16]
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d006      	beq.n	801507c <tcp_pbuf_prealloc+0xb8>
 801506e:	4b0d      	ldr	r3, [pc, #52]	; (80150a4 <tcp_pbuf_prealloc+0xe0>)
 8015070:	f240 120b 	movw	r2, #267	; 0x10b
 8015074:	490f      	ldr	r1, [pc, #60]	; (80150b4 <tcp_pbuf_prealloc+0xf0>)
 8015076:	480d      	ldr	r0, [pc, #52]	; (80150ac <tcp_pbuf_prealloc+0xe8>)
 8015078:	f005 f884 	bl	801a184 <iprintf>
  *oversize = p->len - length;
 801507c:	693b      	ldr	r3, [r7, #16]
 801507e:	895a      	ldrh	r2, [r3, #10]
 8015080:	89bb      	ldrh	r3, [r7, #12]
 8015082:	1ad3      	subs	r3, r2, r3
 8015084:	b29a      	uxth	r2, r3
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801508a:	693b      	ldr	r3, [r7, #16]
 801508c:	89ba      	ldrh	r2, [r7, #12]
 801508e:	811a      	strh	r2, [r3, #8]
 8015090:	693b      	ldr	r3, [r7, #16]
 8015092:	891a      	ldrh	r2, [r3, #8]
 8015094:	693b      	ldr	r3, [r7, #16]
 8015096:	815a      	strh	r2, [r3, #10]
  return p;
 8015098:	693b      	ldr	r3, [r7, #16]
}
 801509a:	4618      	mov	r0, r3
 801509c:	3718      	adds	r7, #24
 801509e:	46bd      	mov	sp, r7
 80150a0:	bd80      	pop	{r7, pc}
 80150a2:	bf00      	nop
 80150a4:	0801d2dc 	.word	0x0801d2dc
 80150a8:	0801d394 	.word	0x0801d394
 80150ac:	0801d330 	.word	0x0801d330
 80150b0:	0801d3b8 	.word	0x0801d3b8
 80150b4:	0801d3d8 	.word	0x0801d3d8

080150b8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b082      	sub	sp, #8
 80150bc:	af00      	add	r7, sp, #0
 80150be:	6078      	str	r0, [r7, #4]
 80150c0:	460b      	mov	r3, r1
 80150c2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d106      	bne.n	80150d8 <tcp_write_checks+0x20>
 80150ca:	4b33      	ldr	r3, [pc, #204]	; (8015198 <tcp_write_checks+0xe0>)
 80150cc:	f240 1233 	movw	r2, #307	; 0x133
 80150d0:	4932      	ldr	r1, [pc, #200]	; (801519c <tcp_write_checks+0xe4>)
 80150d2:	4833      	ldr	r0, [pc, #204]	; (80151a0 <tcp_write_checks+0xe8>)
 80150d4:	f005 f856 	bl	801a184 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	7d1b      	ldrb	r3, [r3, #20]
 80150dc:	2b04      	cmp	r3, #4
 80150de:	d00e      	beq.n	80150fe <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80150e4:	2b07      	cmp	r3, #7
 80150e6:	d00a      	beq.n	80150fe <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80150ec:	2b02      	cmp	r3, #2
 80150ee:	d006      	beq.n	80150fe <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80150f4:	2b03      	cmp	r3, #3
 80150f6:	d002      	beq.n	80150fe <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80150f8:	f06f 030a 	mvn.w	r3, #10
 80150fc:	e048      	b.n	8015190 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80150fe:	887b      	ldrh	r3, [r7, #2]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d101      	bne.n	8015108 <tcp_write_checks+0x50>
    return ERR_OK;
 8015104:	2300      	movs	r3, #0
 8015106:	e043      	b.n	8015190 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801510e:	887a      	ldrh	r2, [r7, #2]
 8015110:	429a      	cmp	r2, r3
 8015112:	d909      	bls.n	8015128 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	8b5b      	ldrh	r3, [r3, #26]
 8015118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801511c:	b29a      	uxth	r2, r3
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015122:	f04f 33ff 	mov.w	r3, #4294967295
 8015126:	e033      	b.n	8015190 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801512e:	2b08      	cmp	r3, #8
 8015130:	d909      	bls.n	8015146 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	8b5b      	ldrh	r3, [r3, #26]
 8015136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801513a:	b29a      	uxth	r2, r3
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015140:	f04f 33ff 	mov.w	r3, #4294967295
 8015144:	e024      	b.n	8015190 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801514c:	2b00      	cmp	r3, #0
 801514e:	d00f      	beq.n	8015170 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015154:	2b00      	cmp	r3, #0
 8015156:	d11a      	bne.n	801518e <tcp_write_checks+0xd6>
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801515c:	2b00      	cmp	r3, #0
 801515e:	d116      	bne.n	801518e <tcp_write_checks+0xd6>
 8015160:	4b0d      	ldr	r3, [pc, #52]	; (8015198 <tcp_write_checks+0xe0>)
 8015162:	f240 1255 	movw	r2, #341	; 0x155
 8015166:	490f      	ldr	r1, [pc, #60]	; (80151a4 <tcp_write_checks+0xec>)
 8015168:	480d      	ldr	r0, [pc, #52]	; (80151a0 <tcp_write_checks+0xe8>)
 801516a:	f005 f80b 	bl	801a184 <iprintf>
 801516e:	e00e      	b.n	801518e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015174:	2b00      	cmp	r3, #0
 8015176:	d103      	bne.n	8015180 <tcp_write_checks+0xc8>
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801517c:	2b00      	cmp	r3, #0
 801517e:	d006      	beq.n	801518e <tcp_write_checks+0xd6>
 8015180:	4b05      	ldr	r3, [pc, #20]	; (8015198 <tcp_write_checks+0xe0>)
 8015182:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8015186:	4908      	ldr	r1, [pc, #32]	; (80151a8 <tcp_write_checks+0xf0>)
 8015188:	4805      	ldr	r0, [pc, #20]	; (80151a0 <tcp_write_checks+0xe8>)
 801518a:	f004 fffb 	bl	801a184 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801518e:	2300      	movs	r3, #0
}
 8015190:	4618      	mov	r0, r3
 8015192:	3708      	adds	r7, #8
 8015194:	46bd      	mov	sp, r7
 8015196:	bd80      	pop	{r7, pc}
 8015198:	0801d2dc 	.word	0x0801d2dc
 801519c:	0801d3ec 	.word	0x0801d3ec
 80151a0:	0801d330 	.word	0x0801d330
 80151a4:	0801d40c 	.word	0x0801d40c
 80151a8:	0801d448 	.word	0x0801d448

080151ac <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80151ac:	b590      	push	{r4, r7, lr}
 80151ae:	b09b      	sub	sp, #108	; 0x6c
 80151b0:	af04      	add	r7, sp, #16
 80151b2:	60f8      	str	r0, [r7, #12]
 80151b4:	60b9      	str	r1, [r7, #8]
 80151b6:	4611      	mov	r1, r2
 80151b8:	461a      	mov	r2, r3
 80151ba:	460b      	mov	r3, r1
 80151bc:	80fb      	strh	r3, [r7, #6]
 80151be:	4613      	mov	r3, r2
 80151c0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80151c2:	2300      	movs	r3, #0
 80151c4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80151c6:	2300      	movs	r3, #0
 80151c8:	653b      	str	r3, [r7, #80]	; 0x50
 80151ca:	2300      	movs	r3, #0
 80151cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80151ce:	2300      	movs	r3, #0
 80151d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80151d2:	2300      	movs	r3, #0
 80151d4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80151d6:	2300      	movs	r3, #0
 80151d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80151dc:	2300      	movs	r3, #0
 80151de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80151e2:	2300      	movs	r3, #0
 80151e4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80151e6:	2300      	movs	r3, #0
 80151e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80151ea:	2300      	movs	r3, #0
 80151ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d109      	bne.n	8015208 <tcp_write+0x5c>
 80151f4:	4ba4      	ldr	r3, [pc, #656]	; (8015488 <tcp_write+0x2dc>)
 80151f6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80151fa:	49a4      	ldr	r1, [pc, #656]	; (801548c <tcp_write+0x2e0>)
 80151fc:	48a4      	ldr	r0, [pc, #656]	; (8015490 <tcp_write+0x2e4>)
 80151fe:	f004 ffc1 	bl	801a184 <iprintf>
 8015202:	f06f 030f 	mvn.w	r3, #15
 8015206:	e32a      	b.n	801585e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801520e:	085b      	lsrs	r3, r3, #1
 8015210:	b29a      	uxth	r2, r3
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015216:	4293      	cmp	r3, r2
 8015218:	bf28      	it	cs
 801521a:	4613      	movcs	r3, r2
 801521c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801521e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015220:	2b00      	cmp	r3, #0
 8015222:	d102      	bne.n	801522a <tcp_write+0x7e>
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015228:	e000      	b.n	801522c <tcp_write+0x80>
 801522a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801522c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801522e:	68bb      	ldr	r3, [r7, #8]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d109      	bne.n	8015248 <tcp_write+0x9c>
 8015234:	4b94      	ldr	r3, [pc, #592]	; (8015488 <tcp_write+0x2dc>)
 8015236:	f240 12ad 	movw	r2, #429	; 0x1ad
 801523a:	4996      	ldr	r1, [pc, #600]	; (8015494 <tcp_write+0x2e8>)
 801523c:	4894      	ldr	r0, [pc, #592]	; (8015490 <tcp_write+0x2e4>)
 801523e:	f004 ffa1 	bl	801a184 <iprintf>
 8015242:	f06f 030f 	mvn.w	r3, #15
 8015246:	e30a      	b.n	801585e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015248:	88fb      	ldrh	r3, [r7, #6]
 801524a:	4619      	mov	r1, r3
 801524c:	68f8      	ldr	r0, [r7, #12]
 801524e:	f7ff ff33 	bl	80150b8 <tcp_write_checks>
 8015252:	4603      	mov	r3, r0
 8015254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8015258:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801525c:	2b00      	cmp	r3, #0
 801525e:	d002      	beq.n	8015266 <tcp_write+0xba>
    return err;
 8015260:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015264:	e2fb      	b.n	801585e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801526c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015270:	2300      	movs	r3, #0
 8015272:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801527a:	2b00      	cmp	r3, #0
 801527c:	f000 80f6 	beq.w	801546c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015284:	653b      	str	r3, [r7, #80]	; 0x50
 8015286:	e002      	b.n	801528e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8015288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801528e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d1f8      	bne.n	8015288 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8015296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015298:	7a9b      	ldrb	r3, [r3, #10]
 801529a:	009b      	lsls	r3, r3, #2
 801529c:	b29b      	uxth	r3, r3
 801529e:	f003 0304 	and.w	r3, r3, #4
 80152a2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80152a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80152a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152a8:	891b      	ldrh	r3, [r3, #8]
 80152aa:	4619      	mov	r1, r3
 80152ac:	8c3b      	ldrh	r3, [r7, #32]
 80152ae:	440b      	add	r3, r1
 80152b0:	429a      	cmp	r2, r3
 80152b2:	da06      	bge.n	80152c2 <tcp_write+0x116>
 80152b4:	4b74      	ldr	r3, [pc, #464]	; (8015488 <tcp_write+0x2dc>)
 80152b6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80152ba:	4977      	ldr	r1, [pc, #476]	; (8015498 <tcp_write+0x2ec>)
 80152bc:	4874      	ldr	r0, [pc, #464]	; (8015490 <tcp_write+0x2e4>)
 80152be:	f004 ff61 	bl	801a184 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80152c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152c4:	891a      	ldrh	r2, [r3, #8]
 80152c6:	8c3b      	ldrh	r3, [r7, #32]
 80152c8:	4413      	add	r3, r2
 80152ca:	b29b      	uxth	r3, r3
 80152cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80152ce:	1ad3      	subs	r3, r2, r3
 80152d0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80152d8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80152da:	8a7b      	ldrh	r3, [r7, #18]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d026      	beq.n	801532e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80152e0:	8a7b      	ldrh	r3, [r7, #18]
 80152e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d206      	bcs.n	80152f6 <tcp_write+0x14a>
 80152e8:	4b67      	ldr	r3, [pc, #412]	; (8015488 <tcp_write+0x2dc>)
 80152ea:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80152ee:	496b      	ldr	r1, [pc, #428]	; (801549c <tcp_write+0x2f0>)
 80152f0:	4867      	ldr	r0, [pc, #412]	; (8015490 <tcp_write+0x2e4>)
 80152f2:	f004 ff47 	bl	801a184 <iprintf>
      seg = last_unsent;
 80152f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152f8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80152fa:	8a7b      	ldrh	r3, [r7, #18]
 80152fc:	88fa      	ldrh	r2, [r7, #6]
 80152fe:	4293      	cmp	r3, r2
 8015300:	bf28      	it	cs
 8015302:	4613      	movcs	r3, r2
 8015304:	b29b      	uxth	r3, r3
 8015306:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015308:	4293      	cmp	r3, r2
 801530a:	bf28      	it	cs
 801530c:	4613      	movcs	r3, r2
 801530e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8015310:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015314:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015316:	4413      	add	r3, r2
 8015318:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801531c:	8a7a      	ldrh	r2, [r7, #18]
 801531e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015320:	1ad3      	subs	r3, r2, r3
 8015322:	b29b      	uxth	r3, r3
 8015324:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015326:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015328:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801532a:	1ad3      	subs	r3, r2, r3
 801532c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801532e:	8a7b      	ldrh	r3, [r7, #18]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d00b      	beq.n	801534c <tcp_write+0x1a0>
 8015334:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015338:	88fb      	ldrh	r3, [r7, #6]
 801533a:	429a      	cmp	r2, r3
 801533c:	d006      	beq.n	801534c <tcp_write+0x1a0>
 801533e:	4b52      	ldr	r3, [pc, #328]	; (8015488 <tcp_write+0x2dc>)
 8015340:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015344:	4956      	ldr	r1, [pc, #344]	; (80154a0 <tcp_write+0x2f4>)
 8015346:	4852      	ldr	r0, [pc, #328]	; (8015490 <tcp_write+0x2e4>)
 8015348:	f004 ff1c 	bl	801a184 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801534c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015350:	88fb      	ldrh	r3, [r7, #6]
 8015352:	429a      	cmp	r2, r3
 8015354:	f080 8167 	bcs.w	8015626 <tcp_write+0x47a>
 8015358:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801535a:	2b00      	cmp	r3, #0
 801535c:	f000 8163 	beq.w	8015626 <tcp_write+0x47a>
 8015360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015362:	891b      	ldrh	r3, [r3, #8]
 8015364:	2b00      	cmp	r3, #0
 8015366:	f000 815e 	beq.w	8015626 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801536a:	88fa      	ldrh	r2, [r7, #6]
 801536c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015370:	1ad2      	subs	r2, r2, r3
 8015372:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015374:	4293      	cmp	r3, r2
 8015376:	bfa8      	it	ge
 8015378:	4613      	movge	r3, r2
 801537a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801537c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801537e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015380:	797b      	ldrb	r3, [r7, #5]
 8015382:	f003 0301 	and.w	r3, r3, #1
 8015386:	2b00      	cmp	r3, #0
 8015388:	d027      	beq.n	80153da <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801538a:	f107 0012 	add.w	r0, r7, #18
 801538e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015390:	8bf9      	ldrh	r1, [r7, #30]
 8015392:	2301      	movs	r3, #1
 8015394:	9302      	str	r3, [sp, #8]
 8015396:	797b      	ldrb	r3, [r7, #5]
 8015398:	9301      	str	r3, [sp, #4]
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	9300      	str	r3, [sp, #0]
 801539e:	4603      	mov	r3, r0
 80153a0:	2000      	movs	r0, #0
 80153a2:	f7ff fe0f 	bl	8014fc4 <tcp_pbuf_prealloc>
 80153a6:	6578      	str	r0, [r7, #84]	; 0x54
 80153a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	f000 8225 	beq.w	80157fa <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80153b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80153b2:	6858      	ldr	r0, [r3, #4]
 80153b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80153b8:	68ba      	ldr	r2, [r7, #8]
 80153ba:	4413      	add	r3, r2
 80153bc:	8bfa      	ldrh	r2, [r7, #30]
 80153be:	4619      	mov	r1, r3
 80153c0:	f004 fe6f 	bl	801a0a2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80153c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80153c6:	f7fb f9c3 	bl	8010750 <pbuf_clen>
 80153ca:	4603      	mov	r3, r0
 80153cc:	461a      	mov	r2, r3
 80153ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80153d2:	4413      	add	r3, r2
 80153d4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80153d8:	e041      	b.n	801545e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80153da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153dc:	685b      	ldr	r3, [r3, #4]
 80153de:	637b      	str	r3, [r7, #52]	; 0x34
 80153e0:	e002      	b.n	80153e8 <tcp_write+0x23c>
 80153e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	637b      	str	r3, [r7, #52]	; 0x34
 80153e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d1f8      	bne.n	80153e2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80153f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153f2:	7b1b      	ldrb	r3, [r3, #12]
 80153f4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d115      	bne.n	8015428 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80153fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153fe:	685b      	ldr	r3, [r3, #4]
 8015400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015402:	8952      	ldrh	r2, [r2, #10]
 8015404:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015406:	68ba      	ldr	r2, [r7, #8]
 8015408:	429a      	cmp	r2, r3
 801540a:	d10d      	bne.n	8015428 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801540c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015410:	2b00      	cmp	r3, #0
 8015412:	d006      	beq.n	8015422 <tcp_write+0x276>
 8015414:	4b1c      	ldr	r3, [pc, #112]	; (8015488 <tcp_write+0x2dc>)
 8015416:	f240 2231 	movw	r2, #561	; 0x231
 801541a:	4922      	ldr	r1, [pc, #136]	; (80154a4 <tcp_write+0x2f8>)
 801541c:	481c      	ldr	r0, [pc, #112]	; (8015490 <tcp_write+0x2e4>)
 801541e:	f004 feb1 	bl	801a184 <iprintf>
          extendlen = seglen;
 8015422:	8bfb      	ldrh	r3, [r7, #30]
 8015424:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015426:	e01a      	b.n	801545e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8015428:	8bfb      	ldrh	r3, [r7, #30]
 801542a:	2201      	movs	r2, #1
 801542c:	4619      	mov	r1, r3
 801542e:	2000      	movs	r0, #0
 8015430:	f7fa fe1c 	bl	801006c <pbuf_alloc>
 8015434:	6578      	str	r0, [r7, #84]	; 0x54
 8015436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015438:	2b00      	cmp	r3, #0
 801543a:	f000 81e0 	beq.w	80157fe <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801543e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015442:	68ba      	ldr	r2, [r7, #8]
 8015444:	441a      	add	r2, r3
 8015446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015448:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801544a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801544c:	f7fb f980 	bl	8010750 <pbuf_clen>
 8015450:	4603      	mov	r3, r0
 8015452:	461a      	mov	r2, r3
 8015454:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015458:	4413      	add	r3, r2
 801545a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801545e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015462:	8bfb      	ldrh	r3, [r7, #30]
 8015464:	4413      	add	r3, r2
 8015466:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801546a:	e0dc      	b.n	8015626 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015472:	2b00      	cmp	r3, #0
 8015474:	f000 80d7 	beq.w	8015626 <tcp_write+0x47a>
 8015478:	4b03      	ldr	r3, [pc, #12]	; (8015488 <tcp_write+0x2dc>)
 801547a:	f240 224a 	movw	r2, #586	; 0x24a
 801547e:	490a      	ldr	r1, [pc, #40]	; (80154a8 <tcp_write+0x2fc>)
 8015480:	4803      	ldr	r0, [pc, #12]	; (8015490 <tcp_write+0x2e4>)
 8015482:	f004 fe7f 	bl	801a184 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8015486:	e0ce      	b.n	8015626 <tcp_write+0x47a>
 8015488:	0801d2dc 	.word	0x0801d2dc
 801548c:	0801d47c 	.word	0x0801d47c
 8015490:	0801d330 	.word	0x0801d330
 8015494:	0801d494 	.word	0x0801d494
 8015498:	0801d4c8 	.word	0x0801d4c8
 801549c:	0801d4e0 	.word	0x0801d4e0
 80154a0:	0801d500 	.word	0x0801d500
 80154a4:	0801d520 	.word	0x0801d520
 80154a8:	0801d54c 	.word	0x0801d54c
    struct pbuf *p;
    u16_t left = len - pos;
 80154ac:	88fa      	ldrh	r2, [r7, #6]
 80154ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80154b2:	1ad3      	subs	r3, r2, r3
 80154b4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80154b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80154ba:	b29b      	uxth	r3, r3
 80154bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80154be:	1ad3      	subs	r3, r2, r3
 80154c0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80154c2:	8b7a      	ldrh	r2, [r7, #26]
 80154c4:	8bbb      	ldrh	r3, [r7, #28]
 80154c6:	4293      	cmp	r3, r2
 80154c8:	bf28      	it	cs
 80154ca:	4613      	movcs	r3, r2
 80154cc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80154ce:	797b      	ldrb	r3, [r7, #5]
 80154d0:	f003 0301 	and.w	r3, r3, #1
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d036      	beq.n	8015546 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80154d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80154dc:	b29a      	uxth	r2, r3
 80154de:	8b3b      	ldrh	r3, [r7, #24]
 80154e0:	4413      	add	r3, r2
 80154e2:	b299      	uxth	r1, r3
 80154e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	bf0c      	ite	eq
 80154ea:	2301      	moveq	r3, #1
 80154ec:	2300      	movne	r3, #0
 80154ee:	b2db      	uxtb	r3, r3
 80154f0:	f107 0012 	add.w	r0, r7, #18
 80154f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80154f6:	9302      	str	r3, [sp, #8]
 80154f8:	797b      	ldrb	r3, [r7, #5]
 80154fa:	9301      	str	r3, [sp, #4]
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	9300      	str	r3, [sp, #0]
 8015500:	4603      	mov	r3, r0
 8015502:	2036      	movs	r0, #54	; 0x36
 8015504:	f7ff fd5e 	bl	8014fc4 <tcp_pbuf_prealloc>
 8015508:	6338      	str	r0, [r7, #48]	; 0x30
 801550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801550c:	2b00      	cmp	r3, #0
 801550e:	f000 8178 	beq.w	8015802 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8015512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015514:	895b      	ldrh	r3, [r3, #10]
 8015516:	8b3a      	ldrh	r2, [r7, #24]
 8015518:	429a      	cmp	r2, r3
 801551a:	d906      	bls.n	801552a <tcp_write+0x37e>
 801551c:	4b8c      	ldr	r3, [pc, #560]	; (8015750 <tcp_write+0x5a4>)
 801551e:	f240 2266 	movw	r2, #614	; 0x266
 8015522:	498c      	ldr	r1, [pc, #560]	; (8015754 <tcp_write+0x5a8>)
 8015524:	488c      	ldr	r0, [pc, #560]	; (8015758 <tcp_write+0x5ac>)
 8015526:	f004 fe2d 	bl	801a184 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801552c:	685a      	ldr	r2, [r3, #4]
 801552e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015532:	18d0      	adds	r0, r2, r3
 8015534:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015538:	68ba      	ldr	r2, [r7, #8]
 801553a:	4413      	add	r3, r2
 801553c:	8b3a      	ldrh	r2, [r7, #24]
 801553e:	4619      	mov	r1, r3
 8015540:	f004 fdaf 	bl	801a0a2 <memcpy>
 8015544:	e02f      	b.n	80155a6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8015546:	8a7b      	ldrh	r3, [r7, #18]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d006      	beq.n	801555a <tcp_write+0x3ae>
 801554c:	4b80      	ldr	r3, [pc, #512]	; (8015750 <tcp_write+0x5a4>)
 801554e:	f240 2271 	movw	r2, #625	; 0x271
 8015552:	4982      	ldr	r1, [pc, #520]	; (801575c <tcp_write+0x5b0>)
 8015554:	4880      	ldr	r0, [pc, #512]	; (8015758 <tcp_write+0x5ac>)
 8015556:	f004 fe15 	bl	801a184 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801555a:	8b3b      	ldrh	r3, [r7, #24]
 801555c:	2201      	movs	r2, #1
 801555e:	4619      	mov	r1, r3
 8015560:	2036      	movs	r0, #54	; 0x36
 8015562:	f7fa fd83 	bl	801006c <pbuf_alloc>
 8015566:	6178      	str	r0, [r7, #20]
 8015568:	697b      	ldr	r3, [r7, #20]
 801556a:	2b00      	cmp	r3, #0
 801556c:	f000 814b 	beq.w	8015806 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8015570:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015574:	68ba      	ldr	r2, [r7, #8]
 8015576:	441a      	add	r2, r3
 8015578:	697b      	ldr	r3, [r7, #20]
 801557a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801557c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015580:	b29b      	uxth	r3, r3
 8015582:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015586:	4619      	mov	r1, r3
 8015588:	2036      	movs	r0, #54	; 0x36
 801558a:	f7fa fd6f 	bl	801006c <pbuf_alloc>
 801558e:	6338      	str	r0, [r7, #48]	; 0x30
 8015590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015592:	2b00      	cmp	r3, #0
 8015594:	d103      	bne.n	801559e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8015596:	6978      	ldr	r0, [r7, #20]
 8015598:	f7fb f84c 	bl	8010634 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801559c:	e136      	b.n	801580c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801559e:	6979      	ldr	r1, [r7, #20]
 80155a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155a2:	f7fb f915 	bl	80107d0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80155a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155a8:	f7fb f8d2 	bl	8010750 <pbuf_clen>
 80155ac:	4603      	mov	r3, r0
 80155ae:	461a      	mov	r2, r3
 80155b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80155b4:	4413      	add	r3, r2
 80155b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80155ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80155be:	2b09      	cmp	r3, #9
 80155c0:	d903      	bls.n	80155ca <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80155c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155c4:	f7fb f836 	bl	8010634 <pbuf_free>
      goto memerr;
 80155c8:	e120      	b.n	801580c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80155ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80155d2:	441a      	add	r2, r3
 80155d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80155d8:	9300      	str	r3, [sp, #0]
 80155da:	4613      	mov	r3, r2
 80155dc:	2200      	movs	r2, #0
 80155de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80155e0:	68f8      	ldr	r0, [r7, #12]
 80155e2:	f7ff fc51 	bl	8014e88 <tcp_create_segment>
 80155e6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80155e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	f000 810d 	beq.w	801580a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80155f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d102      	bne.n	80155fc <tcp_write+0x450>
      queue = seg;
 80155f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80155f8:	647b      	str	r3, [r7, #68]	; 0x44
 80155fa:	e00c      	b.n	8015616 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80155fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d106      	bne.n	8015610 <tcp_write+0x464>
 8015602:	4b53      	ldr	r3, [pc, #332]	; (8015750 <tcp_write+0x5a4>)
 8015604:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015608:	4955      	ldr	r1, [pc, #340]	; (8015760 <tcp_write+0x5b4>)
 801560a:	4853      	ldr	r0, [pc, #332]	; (8015758 <tcp_write+0x5ac>)
 801560c:	f004 fdba 	bl	801a184 <iprintf>
      prev_seg->next = seg;
 8015610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015614:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8015616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015618:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801561a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801561e:	8b3b      	ldrh	r3, [r7, #24]
 8015620:	4413      	add	r3, r2
 8015622:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8015626:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801562a:	88fb      	ldrh	r3, [r7, #6]
 801562c:	429a      	cmp	r2, r3
 801562e:	f4ff af3d 	bcc.w	80154ac <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8015632:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015634:	2b00      	cmp	r3, #0
 8015636:	d02c      	beq.n	8015692 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8015638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801563a:	685b      	ldr	r3, [r3, #4]
 801563c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801563e:	e01e      	b.n	801567e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8015640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015642:	891a      	ldrh	r2, [r3, #8]
 8015644:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015646:	4413      	add	r3, r2
 8015648:	b29a      	uxth	r2, r3
 801564a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801564c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801564e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d110      	bne.n	8015678 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8015656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015658:	685b      	ldr	r3, [r3, #4]
 801565a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801565c:	8952      	ldrh	r2, [r2, #10]
 801565e:	4413      	add	r3, r2
 8015660:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015662:	68b9      	ldr	r1, [r7, #8]
 8015664:	4618      	mov	r0, r3
 8015666:	f004 fd1c 	bl	801a0a2 <memcpy>
        p->len += oversize_used;
 801566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801566c:	895a      	ldrh	r2, [r3, #10]
 801566e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015670:	4413      	add	r3, r2
 8015672:	b29a      	uxth	r2, r3
 8015674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015676:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8015678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801567e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015680:	2b00      	cmp	r3, #0
 8015682:	d1dd      	bne.n	8015640 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8015684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015686:	891a      	ldrh	r2, [r3, #8]
 8015688:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801568a:	4413      	add	r3, r2
 801568c:	b29a      	uxth	r2, r3
 801568e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015690:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8015692:	8a7a      	ldrh	r2, [r7, #18]
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801569a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801569c:	2b00      	cmp	r3, #0
 801569e:	d018      	beq.n	80156d2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80156a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d106      	bne.n	80156b4 <tcp_write+0x508>
 80156a6:	4b2a      	ldr	r3, [pc, #168]	; (8015750 <tcp_write+0x5a4>)
 80156a8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80156ac:	492d      	ldr	r1, [pc, #180]	; (8015764 <tcp_write+0x5b8>)
 80156ae:	482a      	ldr	r0, [pc, #168]	; (8015758 <tcp_write+0x5ac>)
 80156b0:	f004 fd68 	bl	801a184 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80156b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156b6:	685b      	ldr	r3, [r3, #4]
 80156b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80156ba:	4618      	mov	r0, r3
 80156bc:	f7fb f888 	bl	80107d0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80156c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156c2:	891a      	ldrh	r2, [r3, #8]
 80156c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156c6:	891b      	ldrh	r3, [r3, #8]
 80156c8:	4413      	add	r3, r2
 80156ca:	b29a      	uxth	r2, r3
 80156cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156ce:	811a      	strh	r2, [r3, #8]
 80156d0:	e037      	b.n	8015742 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80156d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d034      	beq.n	8015742 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80156d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d003      	beq.n	80156e6 <tcp_write+0x53a>
 80156de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156e0:	685b      	ldr	r3, [r3, #4]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d106      	bne.n	80156f4 <tcp_write+0x548>
 80156e6:	4b1a      	ldr	r3, [pc, #104]	; (8015750 <tcp_write+0x5a4>)
 80156e8:	f240 22e6 	movw	r2, #742	; 0x2e6
 80156ec:	491e      	ldr	r1, [pc, #120]	; (8015768 <tcp_write+0x5bc>)
 80156ee:	481a      	ldr	r0, [pc, #104]	; (8015758 <tcp_write+0x5ac>)
 80156f0:	f004 fd48 	bl	801a184 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80156f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156f6:	685b      	ldr	r3, [r3, #4]
 80156f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80156fa:	e009      	b.n	8015710 <tcp_write+0x564>
      p->tot_len += extendlen;
 80156fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156fe:	891a      	ldrh	r2, [r3, #8]
 8015700:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015702:	4413      	add	r3, r2
 8015704:	b29a      	uxth	r2, r3
 8015706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015708:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d1f1      	bne.n	80156fc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8015718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801571a:	891a      	ldrh	r2, [r3, #8]
 801571c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801571e:	4413      	add	r3, r2
 8015720:	b29a      	uxth	r2, r3
 8015722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015724:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8015726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015728:	895a      	ldrh	r2, [r3, #10]
 801572a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801572c:	4413      	add	r3, r2
 801572e:	b29a      	uxth	r2, r3
 8015730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015732:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8015734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015736:	891a      	ldrh	r2, [r3, #8]
 8015738:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801573a:	4413      	add	r3, r2
 801573c:	b29a      	uxth	r2, r3
 801573e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015740:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8015742:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015744:	2b00      	cmp	r3, #0
 8015746:	d111      	bne.n	801576c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801574c:	66da      	str	r2, [r3, #108]	; 0x6c
 801574e:	e010      	b.n	8015772 <tcp_write+0x5c6>
 8015750:	0801d2dc 	.word	0x0801d2dc
 8015754:	0801d57c 	.word	0x0801d57c
 8015758:	0801d330 	.word	0x0801d330
 801575c:	0801d5bc 	.word	0x0801d5bc
 8015760:	0801d5cc 	.word	0x0801d5cc
 8015764:	0801d5e0 	.word	0x0801d5e0
 8015768:	0801d618 	.word	0x0801d618
  } else {
    last_unsent->next = queue;
 801576c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801576e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015770:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8015776:	88fb      	ldrh	r3, [r7, #6]
 8015778:	441a      	add	r2, r3
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015784:	88fb      	ldrh	r3, [r7, #6]
 8015786:	1ad3      	subs	r3, r2, r3
 8015788:	b29a      	uxth	r2, r3
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015796:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d00e      	beq.n	80157c2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d10a      	bne.n	80157c2 <tcp_write+0x616>
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d106      	bne.n	80157c2 <tcp_write+0x616>
 80157b4:	4b2c      	ldr	r3, [pc, #176]	; (8015868 <tcp_write+0x6bc>)
 80157b6:	f240 3212 	movw	r2, #786	; 0x312
 80157ba:	492c      	ldr	r1, [pc, #176]	; (801586c <tcp_write+0x6c0>)
 80157bc:	482c      	ldr	r0, [pc, #176]	; (8015870 <tcp_write+0x6c4>)
 80157be:	f004 fce1 	bl	801a184 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80157c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d016      	beq.n	80157f6 <tcp_write+0x64a>
 80157c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157ca:	68db      	ldr	r3, [r3, #12]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d012      	beq.n	80157f6 <tcp_write+0x64a>
 80157d0:	797b      	ldrb	r3, [r7, #5]
 80157d2:	f003 0302 	and.w	r3, r3, #2
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d10d      	bne.n	80157f6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80157da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157dc:	68db      	ldr	r3, [r3, #12]
 80157de:	899b      	ldrh	r3, [r3, #12]
 80157e0:	b29c      	uxth	r4, r3
 80157e2:	2008      	movs	r0, #8
 80157e4:	f7f9 fb7a 	bl	800eedc <lwip_htons>
 80157e8:	4603      	mov	r3, r0
 80157ea:	461a      	mov	r2, r3
 80157ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157ee:	68db      	ldr	r3, [r3, #12]
 80157f0:	4322      	orrs	r2, r4
 80157f2:	b292      	uxth	r2, r2
 80157f4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80157f6:	2300      	movs	r3, #0
 80157f8:	e031      	b.n	801585e <tcp_write+0x6b2>
          goto memerr;
 80157fa:	bf00      	nop
 80157fc:	e006      	b.n	801580c <tcp_write+0x660>
            goto memerr;
 80157fe:	bf00      	nop
 8015800:	e004      	b.n	801580c <tcp_write+0x660>
        goto memerr;
 8015802:	bf00      	nop
 8015804:	e002      	b.n	801580c <tcp_write+0x660>
        goto memerr;
 8015806:	bf00      	nop
 8015808:	e000      	b.n	801580c <tcp_write+0x660>
      goto memerr;
 801580a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	8b5b      	ldrh	r3, [r3, #26]
 8015810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015814:	b29a      	uxth	r2, r3
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801581a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801581c:	2b00      	cmp	r3, #0
 801581e:	d002      	beq.n	8015826 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8015820:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015822:	f7fa ff07 	bl	8010634 <pbuf_free>
  }
  if (queue != NULL) {
 8015826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015828:	2b00      	cmp	r3, #0
 801582a:	d002      	beq.n	8015832 <tcp_write+0x686>
    tcp_segs_free(queue);
 801582c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801582e:	f7fc fb6f 	bl	8011f10 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015838:	2b00      	cmp	r3, #0
 801583a:	d00e      	beq.n	801585a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801583c:	68fb      	ldr	r3, [r7, #12]
 801583e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015840:	2b00      	cmp	r3, #0
 8015842:	d10a      	bne.n	801585a <tcp_write+0x6ae>
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015848:	2b00      	cmp	r3, #0
 801584a:	d106      	bne.n	801585a <tcp_write+0x6ae>
 801584c:	4b06      	ldr	r3, [pc, #24]	; (8015868 <tcp_write+0x6bc>)
 801584e:	f240 3227 	movw	r2, #807	; 0x327
 8015852:	4906      	ldr	r1, [pc, #24]	; (801586c <tcp_write+0x6c0>)
 8015854:	4806      	ldr	r0, [pc, #24]	; (8015870 <tcp_write+0x6c4>)
 8015856:	f004 fc95 	bl	801a184 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801585a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801585e:	4618      	mov	r0, r3
 8015860:	375c      	adds	r7, #92	; 0x5c
 8015862:	46bd      	mov	sp, r7
 8015864:	bd90      	pop	{r4, r7, pc}
 8015866:	bf00      	nop
 8015868:	0801d2dc 	.word	0x0801d2dc
 801586c:	0801d650 	.word	0x0801d650
 8015870:	0801d330 	.word	0x0801d330

08015874 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015874:	b590      	push	{r4, r7, lr}
 8015876:	b08b      	sub	sp, #44	; 0x2c
 8015878:	af02      	add	r7, sp, #8
 801587a:	6078      	str	r0, [r7, #4]
 801587c:	460b      	mov	r3, r1
 801587e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8015880:	2300      	movs	r3, #0
 8015882:	61fb      	str	r3, [r7, #28]
 8015884:	2300      	movs	r3, #0
 8015886:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015888:	2300      	movs	r3, #0
 801588a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d106      	bne.n	80158a0 <tcp_split_unsent_seg+0x2c>
 8015892:	4b95      	ldr	r3, [pc, #596]	; (8015ae8 <tcp_split_unsent_seg+0x274>)
 8015894:	f240 324b 	movw	r2, #843	; 0x34b
 8015898:	4994      	ldr	r1, [pc, #592]	; (8015aec <tcp_split_unsent_seg+0x278>)
 801589a:	4895      	ldr	r0, [pc, #596]	; (8015af0 <tcp_split_unsent_seg+0x27c>)
 801589c:	f004 fc72 	bl	801a184 <iprintf>

  useg = pcb->unsent;
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158a4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80158a6:	697b      	ldr	r3, [r7, #20]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d102      	bne.n	80158b2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80158ac:	f04f 33ff 	mov.w	r3, #4294967295
 80158b0:	e116      	b.n	8015ae0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80158b2:	887b      	ldrh	r3, [r7, #2]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d109      	bne.n	80158cc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80158b8:	4b8b      	ldr	r3, [pc, #556]	; (8015ae8 <tcp_split_unsent_seg+0x274>)
 80158ba:	f240 3253 	movw	r2, #851	; 0x353
 80158be:	498d      	ldr	r1, [pc, #564]	; (8015af4 <tcp_split_unsent_seg+0x280>)
 80158c0:	488b      	ldr	r0, [pc, #556]	; (8015af0 <tcp_split_unsent_seg+0x27c>)
 80158c2:	f004 fc5f 	bl	801a184 <iprintf>
    return ERR_VAL;
 80158c6:	f06f 0305 	mvn.w	r3, #5
 80158ca:	e109      	b.n	8015ae0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80158cc:	697b      	ldr	r3, [r7, #20]
 80158ce:	891b      	ldrh	r3, [r3, #8]
 80158d0:	887a      	ldrh	r2, [r7, #2]
 80158d2:	429a      	cmp	r2, r3
 80158d4:	d301      	bcc.n	80158da <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80158d6:	2300      	movs	r3, #0
 80158d8:	e102      	b.n	8015ae0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80158de:	887a      	ldrh	r2, [r7, #2]
 80158e0:	429a      	cmp	r2, r3
 80158e2:	d906      	bls.n	80158f2 <tcp_split_unsent_seg+0x7e>
 80158e4:	4b80      	ldr	r3, [pc, #512]	; (8015ae8 <tcp_split_unsent_seg+0x274>)
 80158e6:	f240 325b 	movw	r2, #859	; 0x35b
 80158ea:	4983      	ldr	r1, [pc, #524]	; (8015af8 <tcp_split_unsent_seg+0x284>)
 80158ec:	4880      	ldr	r0, [pc, #512]	; (8015af0 <tcp_split_unsent_seg+0x27c>)
 80158ee:	f004 fc49 	bl	801a184 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80158f2:	697b      	ldr	r3, [r7, #20]
 80158f4:	891b      	ldrh	r3, [r3, #8]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d106      	bne.n	8015908 <tcp_split_unsent_seg+0x94>
 80158fa:	4b7b      	ldr	r3, [pc, #492]	; (8015ae8 <tcp_split_unsent_seg+0x274>)
 80158fc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8015900:	497e      	ldr	r1, [pc, #504]	; (8015afc <tcp_split_unsent_seg+0x288>)
 8015902:	487b      	ldr	r0, [pc, #492]	; (8015af0 <tcp_split_unsent_seg+0x27c>)
 8015904:	f004 fc3e 	bl	801a184 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015908:	697b      	ldr	r3, [r7, #20]
 801590a:	7a9b      	ldrb	r3, [r3, #10]
 801590c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801590e:	7bfb      	ldrb	r3, [r7, #15]
 8015910:	009b      	lsls	r3, r3, #2
 8015912:	b2db      	uxtb	r3, r3
 8015914:	f003 0304 	and.w	r3, r3, #4
 8015918:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801591a:	697b      	ldr	r3, [r7, #20]
 801591c:	891a      	ldrh	r2, [r3, #8]
 801591e:	887b      	ldrh	r3, [r7, #2]
 8015920:	1ad3      	subs	r3, r2, r3
 8015922:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015924:	7bbb      	ldrb	r3, [r7, #14]
 8015926:	b29a      	uxth	r2, r3
 8015928:	89bb      	ldrh	r3, [r7, #12]
 801592a:	4413      	add	r3, r2
 801592c:	b29b      	uxth	r3, r3
 801592e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015932:	4619      	mov	r1, r3
 8015934:	2036      	movs	r0, #54	; 0x36
 8015936:	f7fa fb99 	bl	801006c <pbuf_alloc>
 801593a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801593c:	693b      	ldr	r3, [r7, #16]
 801593e:	2b00      	cmp	r3, #0
 8015940:	f000 80b7 	beq.w	8015ab2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	685b      	ldr	r3, [r3, #4]
 8015948:	891a      	ldrh	r2, [r3, #8]
 801594a:	697b      	ldr	r3, [r7, #20]
 801594c:	891b      	ldrh	r3, [r3, #8]
 801594e:	1ad3      	subs	r3, r2, r3
 8015950:	b29a      	uxth	r2, r3
 8015952:	887b      	ldrh	r3, [r7, #2]
 8015954:	4413      	add	r3, r2
 8015956:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015958:	697b      	ldr	r3, [r7, #20]
 801595a:	6858      	ldr	r0, [r3, #4]
 801595c:	693b      	ldr	r3, [r7, #16]
 801595e:	685a      	ldr	r2, [r3, #4]
 8015960:	7bbb      	ldrb	r3, [r7, #14]
 8015962:	18d1      	adds	r1, r2, r3
 8015964:	897b      	ldrh	r3, [r7, #10]
 8015966:	89ba      	ldrh	r2, [r7, #12]
 8015968:	f7fb f85a 	bl	8010a20 <pbuf_copy_partial>
 801596c:	4603      	mov	r3, r0
 801596e:	461a      	mov	r2, r3
 8015970:	89bb      	ldrh	r3, [r7, #12]
 8015972:	4293      	cmp	r3, r2
 8015974:	f040 809f 	bne.w	8015ab6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015978:	697b      	ldr	r3, [r7, #20]
 801597a:	68db      	ldr	r3, [r3, #12]
 801597c:	899b      	ldrh	r3, [r3, #12]
 801597e:	b29b      	uxth	r3, r3
 8015980:	4618      	mov	r0, r3
 8015982:	f7f9 faab 	bl	800eedc <lwip_htons>
 8015986:	4603      	mov	r3, r0
 8015988:	b2db      	uxtb	r3, r3
 801598a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801598e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8015990:	2300      	movs	r3, #0
 8015992:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8015994:	7efb      	ldrb	r3, [r7, #27]
 8015996:	f003 0308 	and.w	r3, r3, #8
 801599a:	2b00      	cmp	r3, #0
 801599c:	d007      	beq.n	80159ae <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801599e:	7efb      	ldrb	r3, [r7, #27]
 80159a0:	f023 0308 	bic.w	r3, r3, #8
 80159a4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80159a6:	7ebb      	ldrb	r3, [r7, #26]
 80159a8:	f043 0308 	orr.w	r3, r3, #8
 80159ac:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80159ae:	7efb      	ldrb	r3, [r7, #27]
 80159b0:	f003 0301 	and.w	r3, r3, #1
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d007      	beq.n	80159c8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80159b8:	7efb      	ldrb	r3, [r7, #27]
 80159ba:	f023 0301 	bic.w	r3, r3, #1
 80159be:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80159c0:	7ebb      	ldrb	r3, [r7, #26]
 80159c2:	f043 0301 	orr.w	r3, r3, #1
 80159c6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80159c8:	697b      	ldr	r3, [r7, #20]
 80159ca:	68db      	ldr	r3, [r3, #12]
 80159cc:	685b      	ldr	r3, [r3, #4]
 80159ce:	4618      	mov	r0, r3
 80159d0:	f7f9 fa99 	bl	800ef06 <lwip_htonl>
 80159d4:	4602      	mov	r2, r0
 80159d6:	887b      	ldrh	r3, [r7, #2]
 80159d8:	18d1      	adds	r1, r2, r3
 80159da:	7eba      	ldrb	r2, [r7, #26]
 80159dc:	7bfb      	ldrb	r3, [r7, #15]
 80159de:	9300      	str	r3, [sp, #0]
 80159e0:	460b      	mov	r3, r1
 80159e2:	6939      	ldr	r1, [r7, #16]
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f7ff fa4f 	bl	8014e88 <tcp_create_segment>
 80159ea:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80159ec:	69fb      	ldr	r3, [r7, #28]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d063      	beq.n	8015aba <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80159f2:	697b      	ldr	r3, [r7, #20]
 80159f4:	685b      	ldr	r3, [r3, #4]
 80159f6:	4618      	mov	r0, r3
 80159f8:	f7fa feaa 	bl	8010750 <pbuf_clen>
 80159fc:	4603      	mov	r3, r0
 80159fe:	461a      	mov	r2, r3
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015a06:	1a9b      	subs	r3, r3, r2
 8015a08:	b29a      	uxth	r2, r3
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015a10:	697b      	ldr	r3, [r7, #20]
 8015a12:	6858      	ldr	r0, [r3, #4]
 8015a14:	697b      	ldr	r3, [r7, #20]
 8015a16:	685b      	ldr	r3, [r3, #4]
 8015a18:	891a      	ldrh	r2, [r3, #8]
 8015a1a:	89bb      	ldrh	r3, [r7, #12]
 8015a1c:	1ad3      	subs	r3, r2, r3
 8015a1e:	b29b      	uxth	r3, r3
 8015a20:	4619      	mov	r1, r3
 8015a22:	f7fa fc81 	bl	8010328 <pbuf_realloc>
  useg->len -= remainder;
 8015a26:	697b      	ldr	r3, [r7, #20]
 8015a28:	891a      	ldrh	r2, [r3, #8]
 8015a2a:	89bb      	ldrh	r3, [r7, #12]
 8015a2c:	1ad3      	subs	r3, r2, r3
 8015a2e:	b29a      	uxth	r2, r3
 8015a30:	697b      	ldr	r3, [r7, #20]
 8015a32:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015a34:	697b      	ldr	r3, [r7, #20]
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	899b      	ldrh	r3, [r3, #12]
 8015a3a:	b29c      	uxth	r4, r3
 8015a3c:	7efb      	ldrb	r3, [r7, #27]
 8015a3e:	b29b      	uxth	r3, r3
 8015a40:	4618      	mov	r0, r3
 8015a42:	f7f9 fa4b 	bl	800eedc <lwip_htons>
 8015a46:	4603      	mov	r3, r0
 8015a48:	461a      	mov	r2, r3
 8015a4a:	697b      	ldr	r3, [r7, #20]
 8015a4c:	68db      	ldr	r3, [r3, #12]
 8015a4e:	4322      	orrs	r2, r4
 8015a50:	b292      	uxth	r2, r2
 8015a52:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015a54:	697b      	ldr	r3, [r7, #20]
 8015a56:	685b      	ldr	r3, [r3, #4]
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f7fa fe79 	bl	8010750 <pbuf_clen>
 8015a5e:	4603      	mov	r3, r0
 8015a60:	461a      	mov	r2, r3
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015a68:	4413      	add	r3, r2
 8015a6a:	b29a      	uxth	r2, r3
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015a72:	69fb      	ldr	r3, [r7, #28]
 8015a74:	685b      	ldr	r3, [r3, #4]
 8015a76:	4618      	mov	r0, r3
 8015a78:	f7fa fe6a 	bl	8010750 <pbuf_clen>
 8015a7c:	4603      	mov	r3, r0
 8015a7e:	461a      	mov	r2, r3
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015a86:	4413      	add	r3, r2
 8015a88:	b29a      	uxth	r2, r3
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015a90:	697b      	ldr	r3, [r7, #20]
 8015a92:	681a      	ldr	r2, [r3, #0]
 8015a94:	69fb      	ldr	r3, [r7, #28]
 8015a96:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015a98:	697b      	ldr	r3, [r7, #20]
 8015a9a:	69fa      	ldr	r2, [r7, #28]
 8015a9c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8015a9e:	69fb      	ldr	r3, [r7, #28]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d103      	bne.n	8015aae <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	2200      	movs	r2, #0
 8015aaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8015aae:	2300      	movs	r3, #0
 8015ab0:	e016      	b.n	8015ae0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8015ab2:	bf00      	nop
 8015ab4:	e002      	b.n	8015abc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015ab6:	bf00      	nop
 8015ab8:	e000      	b.n	8015abc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015aba:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015abc:	69fb      	ldr	r3, [r7, #28]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d006      	beq.n	8015ad0 <tcp_split_unsent_seg+0x25c>
 8015ac2:	4b09      	ldr	r3, [pc, #36]	; (8015ae8 <tcp_split_unsent_seg+0x274>)
 8015ac4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015ac8:	490d      	ldr	r1, [pc, #52]	; (8015b00 <tcp_split_unsent_seg+0x28c>)
 8015aca:	4809      	ldr	r0, [pc, #36]	; (8015af0 <tcp_split_unsent_seg+0x27c>)
 8015acc:	f004 fb5a 	bl	801a184 <iprintf>
  if (p != NULL) {
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d002      	beq.n	8015adc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8015ad6:	6938      	ldr	r0, [r7, #16]
 8015ad8:	f7fa fdac 	bl	8010634 <pbuf_free>
  }

  return ERR_MEM;
 8015adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	3724      	adds	r7, #36	; 0x24
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	bd90      	pop	{r4, r7, pc}
 8015ae8:	0801d2dc 	.word	0x0801d2dc
 8015aec:	0801d670 	.word	0x0801d670
 8015af0:	0801d330 	.word	0x0801d330
 8015af4:	0801d694 	.word	0x0801d694
 8015af8:	0801d6b8 	.word	0x0801d6b8
 8015afc:	0801d6c8 	.word	0x0801d6c8
 8015b00:	0801d6d8 	.word	0x0801d6d8

08015b04 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015b04:	b590      	push	{r4, r7, lr}
 8015b06:	b085      	sub	sp, #20
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d106      	bne.n	8015b20 <tcp_send_fin+0x1c>
 8015b12:	4b21      	ldr	r3, [pc, #132]	; (8015b98 <tcp_send_fin+0x94>)
 8015b14:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015b18:	4920      	ldr	r1, [pc, #128]	; (8015b9c <tcp_send_fin+0x98>)
 8015b1a:	4821      	ldr	r0, [pc, #132]	; (8015ba0 <tcp_send_fin+0x9c>)
 8015b1c:	f004 fb32 	bl	801a184 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d02e      	beq.n	8015b86 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b2c:	60fb      	str	r3, [r7, #12]
 8015b2e:	e002      	b.n	8015b36 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d1f8      	bne.n	8015b30 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	68db      	ldr	r3, [r3, #12]
 8015b42:	899b      	ldrh	r3, [r3, #12]
 8015b44:	b29b      	uxth	r3, r3
 8015b46:	4618      	mov	r0, r3
 8015b48:	f7f9 f9c8 	bl	800eedc <lwip_htons>
 8015b4c:	4603      	mov	r3, r0
 8015b4e:	b2db      	uxtb	r3, r3
 8015b50:	f003 0307 	and.w	r3, r3, #7
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d116      	bne.n	8015b86 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	68db      	ldr	r3, [r3, #12]
 8015b5c:	899b      	ldrh	r3, [r3, #12]
 8015b5e:	b29c      	uxth	r4, r3
 8015b60:	2001      	movs	r0, #1
 8015b62:	f7f9 f9bb 	bl	800eedc <lwip_htons>
 8015b66:	4603      	mov	r3, r0
 8015b68:	461a      	mov	r2, r3
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	68db      	ldr	r3, [r3, #12]
 8015b6e:	4322      	orrs	r2, r4
 8015b70:	b292      	uxth	r2, r2
 8015b72:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	8b5b      	ldrh	r3, [r3, #26]
 8015b78:	f043 0320 	orr.w	r3, r3, #32
 8015b7c:	b29a      	uxth	r2, r3
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8015b82:	2300      	movs	r3, #0
 8015b84:	e004      	b.n	8015b90 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015b86:	2101      	movs	r1, #1
 8015b88:	6878      	ldr	r0, [r7, #4]
 8015b8a:	f000 f80b 	bl	8015ba4 <tcp_enqueue_flags>
 8015b8e:	4603      	mov	r3, r0
}
 8015b90:	4618      	mov	r0, r3
 8015b92:	3714      	adds	r7, #20
 8015b94:	46bd      	mov	sp, r7
 8015b96:	bd90      	pop	{r4, r7, pc}
 8015b98:	0801d2dc 	.word	0x0801d2dc
 8015b9c:	0801d6e4 	.word	0x0801d6e4
 8015ba0:	0801d330 	.word	0x0801d330

08015ba4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	b08a      	sub	sp, #40	; 0x28
 8015ba8:	af02      	add	r7, sp, #8
 8015baa:	6078      	str	r0, [r7, #4]
 8015bac:	460b      	mov	r3, r1
 8015bae:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015bb4:	2300      	movs	r3, #0
 8015bb6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015bb8:	78fb      	ldrb	r3, [r7, #3]
 8015bba:	f003 0303 	and.w	r3, r3, #3
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d106      	bne.n	8015bd0 <tcp_enqueue_flags+0x2c>
 8015bc2:	4b67      	ldr	r3, [pc, #412]	; (8015d60 <tcp_enqueue_flags+0x1bc>)
 8015bc4:	f240 4211 	movw	r2, #1041	; 0x411
 8015bc8:	4966      	ldr	r1, [pc, #408]	; (8015d64 <tcp_enqueue_flags+0x1c0>)
 8015bca:	4867      	ldr	r0, [pc, #412]	; (8015d68 <tcp_enqueue_flags+0x1c4>)
 8015bcc:	f004 fada 	bl	801a184 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d106      	bne.n	8015be4 <tcp_enqueue_flags+0x40>
 8015bd6:	4b62      	ldr	r3, [pc, #392]	; (8015d60 <tcp_enqueue_flags+0x1bc>)
 8015bd8:	f240 4213 	movw	r2, #1043	; 0x413
 8015bdc:	4963      	ldr	r1, [pc, #396]	; (8015d6c <tcp_enqueue_flags+0x1c8>)
 8015bde:	4862      	ldr	r0, [pc, #392]	; (8015d68 <tcp_enqueue_flags+0x1c4>)
 8015be0:	f004 fad0 	bl	801a184 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015be4:	78fb      	ldrb	r3, [r7, #3]
 8015be6:	f003 0302 	and.w	r3, r3, #2
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d001      	beq.n	8015bf2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015bee:	2301      	movs	r3, #1
 8015bf0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015bf2:	7ffb      	ldrb	r3, [r7, #31]
 8015bf4:	009b      	lsls	r3, r3, #2
 8015bf6:	b2db      	uxtb	r3, r3
 8015bf8:	f003 0304 	and.w	r3, r3, #4
 8015bfc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015bfe:	7dfb      	ldrb	r3, [r7, #23]
 8015c00:	b29b      	uxth	r3, r3
 8015c02:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c06:	4619      	mov	r1, r3
 8015c08:	2036      	movs	r0, #54	; 0x36
 8015c0a:	f7fa fa2f 	bl	801006c <pbuf_alloc>
 8015c0e:	6138      	str	r0, [r7, #16]
 8015c10:	693b      	ldr	r3, [r7, #16]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d109      	bne.n	8015c2a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	8b5b      	ldrh	r3, [r3, #26]
 8015c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c1e:	b29a      	uxth	r2, r3
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015c24:	f04f 33ff 	mov.w	r3, #4294967295
 8015c28:	e095      	b.n	8015d56 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015c2a:	693b      	ldr	r3, [r7, #16]
 8015c2c:	895a      	ldrh	r2, [r3, #10]
 8015c2e:	7dfb      	ldrb	r3, [r7, #23]
 8015c30:	b29b      	uxth	r3, r3
 8015c32:	429a      	cmp	r2, r3
 8015c34:	d206      	bcs.n	8015c44 <tcp_enqueue_flags+0xa0>
 8015c36:	4b4a      	ldr	r3, [pc, #296]	; (8015d60 <tcp_enqueue_flags+0x1bc>)
 8015c38:	f240 4239 	movw	r2, #1081	; 0x439
 8015c3c:	494c      	ldr	r1, [pc, #304]	; (8015d70 <tcp_enqueue_flags+0x1cc>)
 8015c3e:	484a      	ldr	r0, [pc, #296]	; (8015d68 <tcp_enqueue_flags+0x1c4>)
 8015c40:	f004 faa0 	bl	801a184 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015c48:	78fa      	ldrb	r2, [r7, #3]
 8015c4a:	7ffb      	ldrb	r3, [r7, #31]
 8015c4c:	9300      	str	r3, [sp, #0]
 8015c4e:	460b      	mov	r3, r1
 8015c50:	6939      	ldr	r1, [r7, #16]
 8015c52:	6878      	ldr	r0, [r7, #4]
 8015c54:	f7ff f918 	bl	8014e88 <tcp_create_segment>
 8015c58:	60f8      	str	r0, [r7, #12]
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d109      	bne.n	8015c74 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	8b5b      	ldrh	r3, [r3, #26]
 8015c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c68:	b29a      	uxth	r2, r3
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8015c72:	e070      	b.n	8015d56 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	68db      	ldr	r3, [r3, #12]
 8015c78:	f003 0303 	and.w	r3, r3, #3
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d006      	beq.n	8015c8e <tcp_enqueue_flags+0xea>
 8015c80:	4b37      	ldr	r3, [pc, #220]	; (8015d60 <tcp_enqueue_flags+0x1bc>)
 8015c82:	f240 4242 	movw	r2, #1090	; 0x442
 8015c86:	493b      	ldr	r1, [pc, #236]	; (8015d74 <tcp_enqueue_flags+0x1d0>)
 8015c88:	4837      	ldr	r0, [pc, #220]	; (8015d68 <tcp_enqueue_flags+0x1c4>)
 8015c8a:	f004 fa7b 	bl	801a184 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	891b      	ldrh	r3, [r3, #8]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d006      	beq.n	8015ca4 <tcp_enqueue_flags+0x100>
 8015c96:	4b32      	ldr	r3, [pc, #200]	; (8015d60 <tcp_enqueue_flags+0x1bc>)
 8015c98:	f240 4243 	movw	r2, #1091	; 0x443
 8015c9c:	4936      	ldr	r1, [pc, #216]	; (8015d78 <tcp_enqueue_flags+0x1d4>)
 8015c9e:	4832      	ldr	r0, [pc, #200]	; (8015d68 <tcp_enqueue_flags+0x1c4>)
 8015ca0:	f004 fa70 	bl	801a184 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d103      	bne.n	8015cb4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	68fa      	ldr	r2, [r7, #12]
 8015cb0:	66da      	str	r2, [r3, #108]	; 0x6c
 8015cb2:	e00d      	b.n	8015cd0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015cb8:	61bb      	str	r3, [r7, #24]
 8015cba:	e002      	b.n	8015cc2 <tcp_enqueue_flags+0x11e>
 8015cbc:	69bb      	ldr	r3, [r7, #24]
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	61bb      	str	r3, [r7, #24]
 8015cc2:	69bb      	ldr	r3, [r7, #24]
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d1f8      	bne.n	8015cbc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015cca:	69bb      	ldr	r3, [r7, #24]
 8015ccc:	68fa      	ldr	r2, [r7, #12]
 8015cce:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015cd8:	78fb      	ldrb	r3, [r7, #3]
 8015cda:	f003 0302 	and.w	r3, r3, #2
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d104      	bne.n	8015cec <tcp_enqueue_flags+0x148>
 8015ce2:	78fb      	ldrb	r3, [r7, #3]
 8015ce4:	f003 0301 	and.w	r3, r3, #1
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d004      	beq.n	8015cf6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015cf0:	1c5a      	adds	r2, r3, #1
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015cf6:	78fb      	ldrb	r3, [r7, #3]
 8015cf8:	f003 0301 	and.w	r3, r3, #1
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d006      	beq.n	8015d0e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	8b5b      	ldrh	r3, [r3, #26]
 8015d04:	f043 0320 	orr.w	r3, r3, #32
 8015d08:	b29a      	uxth	r2, r3
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	685b      	ldr	r3, [r3, #4]
 8015d12:	4618      	mov	r0, r3
 8015d14:	f7fa fd1c 	bl	8010750 <pbuf_clen>
 8015d18:	4603      	mov	r3, r0
 8015d1a:	461a      	mov	r2, r3
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015d22:	4413      	add	r3, r2
 8015d24:	b29a      	uxth	r2, r3
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d00e      	beq.n	8015d54 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d10a      	bne.n	8015d54 <tcp_enqueue_flags+0x1b0>
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d106      	bne.n	8015d54 <tcp_enqueue_flags+0x1b0>
 8015d46:	4b06      	ldr	r3, [pc, #24]	; (8015d60 <tcp_enqueue_flags+0x1bc>)
 8015d48:	f240 4265 	movw	r2, #1125	; 0x465
 8015d4c:	490b      	ldr	r1, [pc, #44]	; (8015d7c <tcp_enqueue_flags+0x1d8>)
 8015d4e:	4806      	ldr	r0, [pc, #24]	; (8015d68 <tcp_enqueue_flags+0x1c4>)
 8015d50:	f004 fa18 	bl	801a184 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015d54:	2300      	movs	r3, #0
}
 8015d56:	4618      	mov	r0, r3
 8015d58:	3720      	adds	r7, #32
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	bd80      	pop	{r7, pc}
 8015d5e:	bf00      	nop
 8015d60:	0801d2dc 	.word	0x0801d2dc
 8015d64:	0801d700 	.word	0x0801d700
 8015d68:	0801d330 	.word	0x0801d330
 8015d6c:	0801d758 	.word	0x0801d758
 8015d70:	0801d778 	.word	0x0801d778
 8015d74:	0801d7b4 	.word	0x0801d7b4
 8015d78:	0801d7cc 	.word	0x0801d7cc
 8015d7c:	0801d7f8 	.word	0x0801d7f8

08015d80 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015d80:	b5b0      	push	{r4, r5, r7, lr}
 8015d82:	b08a      	sub	sp, #40	; 0x28
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d106      	bne.n	8015d9c <tcp_output+0x1c>
 8015d8e:	4b9e      	ldr	r3, [pc, #632]	; (8016008 <tcp_output+0x288>)
 8015d90:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8015d94:	499d      	ldr	r1, [pc, #628]	; (801600c <tcp_output+0x28c>)
 8015d96:	489e      	ldr	r0, [pc, #632]	; (8016010 <tcp_output+0x290>)
 8015d98:	f004 f9f4 	bl	801a184 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	7d1b      	ldrb	r3, [r3, #20]
 8015da0:	2b01      	cmp	r3, #1
 8015da2:	d106      	bne.n	8015db2 <tcp_output+0x32>
 8015da4:	4b98      	ldr	r3, [pc, #608]	; (8016008 <tcp_output+0x288>)
 8015da6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8015daa:	499a      	ldr	r1, [pc, #616]	; (8016014 <tcp_output+0x294>)
 8015dac:	4898      	ldr	r0, [pc, #608]	; (8016010 <tcp_output+0x290>)
 8015dae:	f004 f9e9 	bl	801a184 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015db2:	4b99      	ldr	r3, [pc, #612]	; (8016018 <tcp_output+0x298>)
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	687a      	ldr	r2, [r7, #4]
 8015db8:	429a      	cmp	r2, r3
 8015dba:	d101      	bne.n	8015dc0 <tcp_output+0x40>
    return ERR_OK;
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	e1ce      	b.n	801615e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015dcc:	4293      	cmp	r3, r2
 8015dce:	bf28      	it	cs
 8015dd0:	4613      	movcs	r3, r2
 8015dd2:	b29b      	uxth	r3, r3
 8015dd4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015dda:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8015ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d10b      	bne.n	8015dfa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	8b5b      	ldrh	r3, [r3, #26]
 8015de6:	f003 0302 	and.w	r3, r3, #2
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	f000 81aa 	beq.w	8016144 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015df0:	6878      	ldr	r0, [r7, #4]
 8015df2:	f000 fdcb 	bl	801698c <tcp_send_empty_ack>
 8015df6:	4603      	mov	r3, r0
 8015df8:	e1b1      	b.n	801615e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015dfa:	6879      	ldr	r1, [r7, #4]
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	3304      	adds	r3, #4
 8015e00:	461a      	mov	r2, r3
 8015e02:	6878      	ldr	r0, [r7, #4]
 8015e04:	f7ff f824 	bl	8014e50 <tcp_route>
 8015e08:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015e0a:	697b      	ldr	r3, [r7, #20]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d102      	bne.n	8015e16 <tcp_output+0x96>
    return ERR_RTE;
 8015e10:	f06f 0303 	mvn.w	r3, #3
 8015e14:	e1a3      	b.n	801615e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d003      	beq.n	8015e24 <tcp_output+0xa4>
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d111      	bne.n	8015e48 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015e24:	697b      	ldr	r3, [r7, #20]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d002      	beq.n	8015e30 <tcp_output+0xb0>
 8015e2a:	697b      	ldr	r3, [r7, #20]
 8015e2c:	3304      	adds	r3, #4
 8015e2e:	e000      	b.n	8015e32 <tcp_output+0xb2>
 8015e30:	2300      	movs	r3, #0
 8015e32:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015e34:	693b      	ldr	r3, [r7, #16]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d102      	bne.n	8015e40 <tcp_output+0xc0>
      return ERR_RTE;
 8015e3a:	f06f 0303 	mvn.w	r3, #3
 8015e3e:	e18e      	b.n	801615e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015e40:	693b      	ldr	r3, [r7, #16]
 8015e42:	681a      	ldr	r2, [r3, #0]
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e4a:	68db      	ldr	r3, [r3, #12]
 8015e4c:	685b      	ldr	r3, [r3, #4]
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f7f9 f859 	bl	800ef06 <lwip_htonl>
 8015e54:	4602      	mov	r2, r0
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e5a:	1ad3      	subs	r3, r2, r3
 8015e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e5e:	8912      	ldrh	r2, [r2, #8]
 8015e60:	4413      	add	r3, r2
 8015e62:	69ba      	ldr	r2, [r7, #24]
 8015e64:	429a      	cmp	r2, r3
 8015e66:	d227      	bcs.n	8015eb8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015e6e:	461a      	mov	r2, r3
 8015e70:	69bb      	ldr	r3, [r7, #24]
 8015e72:	4293      	cmp	r3, r2
 8015e74:	d114      	bne.n	8015ea0 <tcp_output+0x120>
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d110      	bne.n	8015ea0 <tcp_output+0x120>
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d10b      	bne.n	8015ea0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	2201      	movs	r2, #1
 8015e94:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	8b5b      	ldrh	r3, [r3, #26]
 8015ea4:	f003 0302 	and.w	r3, r3, #2
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	f000 814d 	beq.w	8016148 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8015eae:	6878      	ldr	r0, [r7, #4]
 8015eb0:	f000 fd6c 	bl	801698c <tcp_send_empty_ack>
 8015eb4:	4603      	mov	r3, r0
 8015eb6:	e152      	b.n	801615e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	2200      	movs	r2, #0
 8015ebc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ec4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015ec6:	6a3b      	ldr	r3, [r7, #32]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	f000 811c 	beq.w	8016106 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8015ece:	e002      	b.n	8015ed6 <tcp_output+0x156>
 8015ed0:	6a3b      	ldr	r3, [r7, #32]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	623b      	str	r3, [r7, #32]
 8015ed6:	6a3b      	ldr	r3, [r7, #32]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d1f8      	bne.n	8015ed0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015ede:	e112      	b.n	8016106 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ee2:	68db      	ldr	r3, [r3, #12]
 8015ee4:	899b      	ldrh	r3, [r3, #12]
 8015ee6:	b29b      	uxth	r3, r3
 8015ee8:	4618      	mov	r0, r3
 8015eea:	f7f8 fff7 	bl	800eedc <lwip_htons>
 8015eee:	4603      	mov	r3, r0
 8015ef0:	b2db      	uxtb	r3, r3
 8015ef2:	f003 0304 	and.w	r3, r3, #4
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d006      	beq.n	8015f08 <tcp_output+0x188>
 8015efa:	4b43      	ldr	r3, [pc, #268]	; (8016008 <tcp_output+0x288>)
 8015efc:	f240 5236 	movw	r2, #1334	; 0x536
 8015f00:	4946      	ldr	r1, [pc, #280]	; (801601c <tcp_output+0x29c>)
 8015f02:	4843      	ldr	r0, [pc, #268]	; (8016010 <tcp_output+0x290>)
 8015f04:	f004 f93e 	bl	801a184 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d01f      	beq.n	8015f50 <tcp_output+0x1d0>
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	8b5b      	ldrh	r3, [r3, #26]
 8015f14:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d119      	bne.n	8015f50 <tcp_output+0x1d0>
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d00b      	beq.n	8015f3c <tcp_output+0x1bc>
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d110      	bne.n	8015f50 <tcp_output+0x1d0>
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f32:	891a      	ldrh	r2, [r3, #8]
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f38:	429a      	cmp	r2, r3
 8015f3a:	d209      	bcs.n	8015f50 <tcp_output+0x1d0>
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d004      	beq.n	8015f50 <tcp_output+0x1d0>
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015f4c:	2b08      	cmp	r3, #8
 8015f4e:	d901      	bls.n	8015f54 <tcp_output+0x1d4>
 8015f50:	2301      	movs	r3, #1
 8015f52:	e000      	b.n	8015f56 <tcp_output+0x1d6>
 8015f54:	2300      	movs	r3, #0
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d106      	bne.n	8015f68 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	8b5b      	ldrh	r3, [r3, #26]
 8015f5e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	f000 80e4 	beq.w	8016130 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	7d1b      	ldrb	r3, [r3, #20]
 8015f6c:	2b02      	cmp	r3, #2
 8015f6e:	d00d      	beq.n	8015f8c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f72:	68db      	ldr	r3, [r3, #12]
 8015f74:	899b      	ldrh	r3, [r3, #12]
 8015f76:	b29c      	uxth	r4, r3
 8015f78:	2010      	movs	r0, #16
 8015f7a:	f7f8 ffaf 	bl	800eedc <lwip_htons>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	461a      	mov	r2, r3
 8015f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f84:	68db      	ldr	r3, [r3, #12]
 8015f86:	4322      	orrs	r2, r4
 8015f88:	b292      	uxth	r2, r2
 8015f8a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015f8c:	697a      	ldr	r2, [r7, #20]
 8015f8e:	6879      	ldr	r1, [r7, #4]
 8015f90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f92:	f000 f909 	bl	80161a8 <tcp_output_segment>
 8015f96:	4603      	mov	r3, r0
 8015f98:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d009      	beq.n	8015fb6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	8b5b      	ldrh	r3, [r3, #26]
 8015fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015faa:	b29a      	uxth	r2, r3
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	835a      	strh	r2, [r3, #26]
      return err;
 8015fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015fb4:	e0d3      	b.n	801615e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fb8:	681a      	ldr	r2, [r3, #0]
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	7d1b      	ldrb	r3, [r3, #20]
 8015fc2:	2b02      	cmp	r3, #2
 8015fc4:	d006      	beq.n	8015fd4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	8b5b      	ldrh	r3, [r3, #26]
 8015fca:	f023 0303 	bic.w	r3, r3, #3
 8015fce:	b29a      	uxth	r2, r3
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fd6:	68db      	ldr	r3, [r3, #12]
 8015fd8:	685b      	ldr	r3, [r3, #4]
 8015fda:	4618      	mov	r0, r3
 8015fdc:	f7f8 ff93 	bl	800ef06 <lwip_htonl>
 8015fe0:	4604      	mov	r4, r0
 8015fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fe4:	891b      	ldrh	r3, [r3, #8]
 8015fe6:	461d      	mov	r5, r3
 8015fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fea:	68db      	ldr	r3, [r3, #12]
 8015fec:	899b      	ldrh	r3, [r3, #12]
 8015fee:	b29b      	uxth	r3, r3
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	f7f8 ff73 	bl	800eedc <lwip_htons>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	b2db      	uxtb	r3, r3
 8015ffa:	f003 0303 	and.w	r3, r3, #3
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d00e      	beq.n	8016020 <tcp_output+0x2a0>
 8016002:	2301      	movs	r3, #1
 8016004:	e00d      	b.n	8016022 <tcp_output+0x2a2>
 8016006:	bf00      	nop
 8016008:	0801d2dc 	.word	0x0801d2dc
 801600c:	0801d820 	.word	0x0801d820
 8016010:	0801d330 	.word	0x0801d330
 8016014:	0801d838 	.word	0x0801d838
 8016018:	2000dbb8 	.word	0x2000dbb8
 801601c:	0801d860 	.word	0x0801d860
 8016020:	2300      	movs	r3, #0
 8016022:	442b      	add	r3, r5
 8016024:	4423      	add	r3, r4
 8016026:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801602c:	68bb      	ldr	r3, [r7, #8]
 801602e:	1ad3      	subs	r3, r2, r3
 8016030:	2b00      	cmp	r3, #0
 8016032:	da02      	bge.n	801603a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	68ba      	ldr	r2, [r7, #8]
 8016038:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801603c:	891b      	ldrh	r3, [r3, #8]
 801603e:	461c      	mov	r4, r3
 8016040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016042:	68db      	ldr	r3, [r3, #12]
 8016044:	899b      	ldrh	r3, [r3, #12]
 8016046:	b29b      	uxth	r3, r3
 8016048:	4618      	mov	r0, r3
 801604a:	f7f8 ff47 	bl	800eedc <lwip_htons>
 801604e:	4603      	mov	r3, r0
 8016050:	b2db      	uxtb	r3, r3
 8016052:	f003 0303 	and.w	r3, r3, #3
 8016056:	2b00      	cmp	r3, #0
 8016058:	d001      	beq.n	801605e <tcp_output+0x2de>
 801605a:	2301      	movs	r3, #1
 801605c:	e000      	b.n	8016060 <tcp_output+0x2e0>
 801605e:	2300      	movs	r3, #0
 8016060:	4423      	add	r3, r4
 8016062:	2b00      	cmp	r3, #0
 8016064:	d049      	beq.n	80160fa <tcp_output+0x37a>
      seg->next = NULL;
 8016066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016068:	2200      	movs	r2, #0
 801606a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016070:	2b00      	cmp	r3, #0
 8016072:	d105      	bne.n	8016080 <tcp_output+0x300>
        pcb->unacked = seg;
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016078:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801607c:	623b      	str	r3, [r7, #32]
 801607e:	e03f      	b.n	8016100 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016082:	68db      	ldr	r3, [r3, #12]
 8016084:	685b      	ldr	r3, [r3, #4]
 8016086:	4618      	mov	r0, r3
 8016088:	f7f8 ff3d 	bl	800ef06 <lwip_htonl>
 801608c:	4604      	mov	r4, r0
 801608e:	6a3b      	ldr	r3, [r7, #32]
 8016090:	68db      	ldr	r3, [r3, #12]
 8016092:	685b      	ldr	r3, [r3, #4]
 8016094:	4618      	mov	r0, r3
 8016096:	f7f8 ff36 	bl	800ef06 <lwip_htonl>
 801609a:	4603      	mov	r3, r0
 801609c:	1ae3      	subs	r3, r4, r3
 801609e:	2b00      	cmp	r3, #0
 80160a0:	da24      	bge.n	80160ec <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	3370      	adds	r3, #112	; 0x70
 80160a6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80160a8:	e002      	b.n	80160b0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80160aa:	69fb      	ldr	r3, [r7, #28]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80160b0:	69fb      	ldr	r3, [r7, #28]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d011      	beq.n	80160dc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80160b8:	69fb      	ldr	r3, [r7, #28]
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	68db      	ldr	r3, [r3, #12]
 80160be:	685b      	ldr	r3, [r3, #4]
 80160c0:	4618      	mov	r0, r3
 80160c2:	f7f8 ff20 	bl	800ef06 <lwip_htonl>
 80160c6:	4604      	mov	r4, r0
 80160c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ca:	68db      	ldr	r3, [r3, #12]
 80160cc:	685b      	ldr	r3, [r3, #4]
 80160ce:	4618      	mov	r0, r3
 80160d0:	f7f8 ff19 	bl	800ef06 <lwip_htonl>
 80160d4:	4603      	mov	r3, r0
 80160d6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80160d8:	2b00      	cmp	r3, #0
 80160da:	dbe6      	blt.n	80160aa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80160dc:	69fb      	ldr	r3, [r7, #28]
 80160de:	681a      	ldr	r2, [r3, #0]
 80160e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160e2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80160e4:	69fb      	ldr	r3, [r7, #28]
 80160e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160e8:	601a      	str	r2, [r3, #0]
 80160ea:	e009      	b.n	8016100 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80160ec:	6a3b      	ldr	r3, [r7, #32]
 80160ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160f0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80160f2:	6a3b      	ldr	r3, [r7, #32]
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	623b      	str	r3, [r7, #32]
 80160f8:	e002      	b.n	8016100 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80160fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80160fc:	f7fb ff1d 	bl	8011f3a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016104:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016108:	2b00      	cmp	r3, #0
 801610a:	d012      	beq.n	8016132 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801610e:	68db      	ldr	r3, [r3, #12]
 8016110:	685b      	ldr	r3, [r3, #4]
 8016112:	4618      	mov	r0, r3
 8016114:	f7f8 fef7 	bl	800ef06 <lwip_htonl>
 8016118:	4602      	mov	r2, r0
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801611e:	1ad3      	subs	r3, r2, r3
 8016120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016122:	8912      	ldrh	r2, [r2, #8]
 8016124:	4413      	add	r3, r2
  while (seg != NULL &&
 8016126:	69ba      	ldr	r2, [r7, #24]
 8016128:	429a      	cmp	r2, r3
 801612a:	f4bf aed9 	bcs.w	8015ee0 <tcp_output+0x160>
 801612e:	e000      	b.n	8016132 <tcp_output+0x3b2>
      break;
 8016130:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016136:	2b00      	cmp	r3, #0
 8016138:	d108      	bne.n	801614c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	2200      	movs	r2, #0
 801613e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016142:	e004      	b.n	801614e <tcp_output+0x3ce>
    goto output_done;
 8016144:	bf00      	nop
 8016146:	e002      	b.n	801614e <tcp_output+0x3ce>
    goto output_done;
 8016148:	bf00      	nop
 801614a:	e000      	b.n	801614e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801614c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	8b5b      	ldrh	r3, [r3, #26]
 8016152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016156:	b29a      	uxth	r2, r3
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801615c:	2300      	movs	r3, #0
}
 801615e:	4618      	mov	r0, r3
 8016160:	3728      	adds	r7, #40	; 0x28
 8016162:	46bd      	mov	sp, r7
 8016164:	bdb0      	pop	{r4, r5, r7, pc}
 8016166:	bf00      	nop

08016168 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b082      	sub	sp, #8
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d106      	bne.n	8016184 <tcp_output_segment_busy+0x1c>
 8016176:	4b09      	ldr	r3, [pc, #36]	; (801619c <tcp_output_segment_busy+0x34>)
 8016178:	f240 529a 	movw	r2, #1434	; 0x59a
 801617c:	4908      	ldr	r1, [pc, #32]	; (80161a0 <tcp_output_segment_busy+0x38>)
 801617e:	4809      	ldr	r0, [pc, #36]	; (80161a4 <tcp_output_segment_busy+0x3c>)
 8016180:	f004 f800 	bl	801a184 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	685b      	ldr	r3, [r3, #4]
 8016188:	7b9b      	ldrb	r3, [r3, #14]
 801618a:	2b01      	cmp	r3, #1
 801618c:	d001      	beq.n	8016192 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801618e:	2301      	movs	r3, #1
 8016190:	e000      	b.n	8016194 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016192:	2300      	movs	r3, #0
}
 8016194:	4618      	mov	r0, r3
 8016196:	3708      	adds	r7, #8
 8016198:	46bd      	mov	sp, r7
 801619a:	bd80      	pop	{r7, pc}
 801619c:	0801d2dc 	.word	0x0801d2dc
 80161a0:	0801d878 	.word	0x0801d878
 80161a4:	0801d330 	.word	0x0801d330

080161a8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80161a8:	b5b0      	push	{r4, r5, r7, lr}
 80161aa:	b08c      	sub	sp, #48	; 0x30
 80161ac:	af04      	add	r7, sp, #16
 80161ae:	60f8      	str	r0, [r7, #12]
 80161b0:	60b9      	str	r1, [r7, #8]
 80161b2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d106      	bne.n	80161c8 <tcp_output_segment+0x20>
 80161ba:	4b63      	ldr	r3, [pc, #396]	; (8016348 <tcp_output_segment+0x1a0>)
 80161bc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80161c0:	4962      	ldr	r1, [pc, #392]	; (801634c <tcp_output_segment+0x1a4>)
 80161c2:	4863      	ldr	r0, [pc, #396]	; (8016350 <tcp_output_segment+0x1a8>)
 80161c4:	f003 ffde 	bl	801a184 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80161c8:	68bb      	ldr	r3, [r7, #8]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d106      	bne.n	80161dc <tcp_output_segment+0x34>
 80161ce:	4b5e      	ldr	r3, [pc, #376]	; (8016348 <tcp_output_segment+0x1a0>)
 80161d0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80161d4:	495f      	ldr	r1, [pc, #380]	; (8016354 <tcp_output_segment+0x1ac>)
 80161d6:	485e      	ldr	r0, [pc, #376]	; (8016350 <tcp_output_segment+0x1a8>)
 80161d8:	f003 ffd4 	bl	801a184 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d106      	bne.n	80161f0 <tcp_output_segment+0x48>
 80161e2:	4b59      	ldr	r3, [pc, #356]	; (8016348 <tcp_output_segment+0x1a0>)
 80161e4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80161e8:	495b      	ldr	r1, [pc, #364]	; (8016358 <tcp_output_segment+0x1b0>)
 80161ea:	4859      	ldr	r0, [pc, #356]	; (8016350 <tcp_output_segment+0x1a8>)
 80161ec:	f003 ffca 	bl	801a184 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80161f0:	68f8      	ldr	r0, [r7, #12]
 80161f2:	f7ff ffb9 	bl	8016168 <tcp_output_segment_busy>
 80161f6:	4603      	mov	r3, r0
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d001      	beq.n	8016200 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80161fc:	2300      	movs	r3, #0
 80161fe:	e09f      	b.n	8016340 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016200:	68bb      	ldr	r3, [r7, #8]
 8016202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	68dc      	ldr	r4, [r3, #12]
 8016208:	4610      	mov	r0, r2
 801620a:	f7f8 fe7c 	bl	800ef06 <lwip_htonl>
 801620e:	4603      	mov	r3, r0
 8016210:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016212:	68bb      	ldr	r3, [r7, #8]
 8016214:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	68dc      	ldr	r4, [r3, #12]
 801621a:	4610      	mov	r0, r2
 801621c:	f7f8 fe5e 	bl	800eedc <lwip_htons>
 8016220:	4603      	mov	r3, r0
 8016222:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016224:	68bb      	ldr	r3, [r7, #8]
 8016226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016228:	68ba      	ldr	r2, [r7, #8]
 801622a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801622c:	441a      	add	r2, r3
 801622e:	68bb      	ldr	r3, [r7, #8]
 8016230:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	68db      	ldr	r3, [r3, #12]
 8016236:	3314      	adds	r3, #20
 8016238:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	7a9b      	ldrb	r3, [r3, #10]
 801623e:	f003 0301 	and.w	r3, r3, #1
 8016242:	2b00      	cmp	r3, #0
 8016244:	d015      	beq.n	8016272 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016246:	68bb      	ldr	r3, [r7, #8]
 8016248:	3304      	adds	r3, #4
 801624a:	461a      	mov	r2, r3
 801624c:	6879      	ldr	r1, [r7, #4]
 801624e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8016252:	f7fc fa37 	bl	80126c4 <tcp_eff_send_mss_netif>
 8016256:	4603      	mov	r3, r0
 8016258:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801625a:	8b7b      	ldrh	r3, [r7, #26]
 801625c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016260:	4618      	mov	r0, r3
 8016262:	f7f8 fe50 	bl	800ef06 <lwip_htonl>
 8016266:	4602      	mov	r2, r0
 8016268:	69fb      	ldr	r3, [r7, #28]
 801626a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801626c:	69fb      	ldr	r3, [r7, #28]
 801626e:	3304      	adds	r3, #4
 8016270:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016272:	68bb      	ldr	r3, [r7, #8]
 8016274:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016278:	2b00      	cmp	r3, #0
 801627a:	da02      	bge.n	8016282 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801627c:	68bb      	ldr	r3, [r7, #8]
 801627e:	2200      	movs	r2, #0
 8016280:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016282:	68bb      	ldr	r3, [r7, #8]
 8016284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016286:	2b00      	cmp	r3, #0
 8016288:	d10c      	bne.n	80162a4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801628a:	4b34      	ldr	r3, [pc, #208]	; (801635c <tcp_output_segment+0x1b4>)
 801628c:	681a      	ldr	r2, [r3, #0]
 801628e:	68bb      	ldr	r3, [r7, #8]
 8016290:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	68db      	ldr	r3, [r3, #12]
 8016296:	685b      	ldr	r3, [r3, #4]
 8016298:	4618      	mov	r0, r3
 801629a:	f7f8 fe34 	bl	800ef06 <lwip_htonl>
 801629e:	4602      	mov	r2, r0
 80162a0:	68bb      	ldr	r3, [r7, #8]
 80162a2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	68da      	ldr	r2, [r3, #12]
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	685b      	ldr	r3, [r3, #4]
 80162ac:	685b      	ldr	r3, [r3, #4]
 80162ae:	1ad3      	subs	r3, r2, r3
 80162b0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	8959      	ldrh	r1, [r3, #10]
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	685b      	ldr	r3, [r3, #4]
 80162bc:	8b3a      	ldrh	r2, [r7, #24]
 80162be:	1a8a      	subs	r2, r1, r2
 80162c0:	b292      	uxth	r2, r2
 80162c2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	685b      	ldr	r3, [r3, #4]
 80162c8:	8919      	ldrh	r1, [r3, #8]
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	685b      	ldr	r3, [r3, #4]
 80162ce:	8b3a      	ldrh	r2, [r7, #24]
 80162d0:	1a8a      	subs	r2, r1, r2
 80162d2:	b292      	uxth	r2, r2
 80162d4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	685b      	ldr	r3, [r3, #4]
 80162da:	68fa      	ldr	r2, [r7, #12]
 80162dc:	68d2      	ldr	r2, [r2, #12]
 80162de:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	68db      	ldr	r3, [r3, #12]
 80162e4:	2200      	movs	r2, #0
 80162e6:	741a      	strb	r2, [r3, #16]
 80162e8:	2200      	movs	r2, #0
 80162ea:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	68db      	ldr	r3, [r3, #12]
 80162f0:	f103 0214 	add.w	r2, r3, #20
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	7a9b      	ldrb	r3, [r3, #10]
 80162f8:	009b      	lsls	r3, r3, #2
 80162fa:	f003 0304 	and.w	r3, r3, #4
 80162fe:	4413      	add	r3, r2
 8016300:	69fa      	ldr	r2, [r7, #28]
 8016302:	429a      	cmp	r2, r3
 8016304:	d006      	beq.n	8016314 <tcp_output_segment+0x16c>
 8016306:	4b10      	ldr	r3, [pc, #64]	; (8016348 <tcp_output_segment+0x1a0>)
 8016308:	f240 621c 	movw	r2, #1564	; 0x61c
 801630c:	4914      	ldr	r1, [pc, #80]	; (8016360 <tcp_output_segment+0x1b8>)
 801630e:	4810      	ldr	r0, [pc, #64]	; (8016350 <tcp_output_segment+0x1a8>)
 8016310:	f003 ff38 	bl	801a184 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	6858      	ldr	r0, [r3, #4]
 8016318:	68b9      	ldr	r1, [r7, #8]
 801631a:	68bb      	ldr	r3, [r7, #8]
 801631c:	1d1c      	adds	r4, r3, #4
 801631e:	68bb      	ldr	r3, [r7, #8]
 8016320:	7add      	ldrb	r5, [r3, #11]
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	7a9b      	ldrb	r3, [r3, #10]
 8016326:	687a      	ldr	r2, [r7, #4]
 8016328:	9202      	str	r2, [sp, #8]
 801632a:	2206      	movs	r2, #6
 801632c:	9201      	str	r2, [sp, #4]
 801632e:	9300      	str	r3, [sp, #0]
 8016330:	462b      	mov	r3, r5
 8016332:	4622      	mov	r2, r4
 8016334:	f002 fbac 	bl	8018a90 <ip4_output_if>
 8016338:	4603      	mov	r3, r0
 801633a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801633c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016340:	4618      	mov	r0, r3
 8016342:	3720      	adds	r7, #32
 8016344:	46bd      	mov	sp, r7
 8016346:	bdb0      	pop	{r4, r5, r7, pc}
 8016348:	0801d2dc 	.word	0x0801d2dc
 801634c:	0801d8a0 	.word	0x0801d8a0
 8016350:	0801d330 	.word	0x0801d330
 8016354:	0801d8c0 	.word	0x0801d8c0
 8016358:	0801d8e0 	.word	0x0801d8e0
 801635c:	2000dba8 	.word	0x2000dba8
 8016360:	0801d904 	.word	0x0801d904

08016364 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016364:	b5b0      	push	{r4, r5, r7, lr}
 8016366:	b084      	sub	sp, #16
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d106      	bne.n	8016380 <tcp_rexmit_rto_prepare+0x1c>
 8016372:	4b31      	ldr	r3, [pc, #196]	; (8016438 <tcp_rexmit_rto_prepare+0xd4>)
 8016374:	f240 6263 	movw	r2, #1635	; 0x663
 8016378:	4930      	ldr	r1, [pc, #192]	; (801643c <tcp_rexmit_rto_prepare+0xd8>)
 801637a:	4831      	ldr	r0, [pc, #196]	; (8016440 <tcp_rexmit_rto_prepare+0xdc>)
 801637c:	f003 ff02 	bl	801a184 <iprintf>

  if (pcb->unacked == NULL) {
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016384:	2b00      	cmp	r3, #0
 8016386:	d102      	bne.n	801638e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016388:	f06f 0305 	mvn.w	r3, #5
 801638c:	e050      	b.n	8016430 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016392:	60fb      	str	r3, [r7, #12]
 8016394:	e00b      	b.n	80163ae <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8016396:	68f8      	ldr	r0, [r7, #12]
 8016398:	f7ff fee6 	bl	8016168 <tcp_output_segment_busy>
 801639c:	4603      	mov	r3, r0
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d002      	beq.n	80163a8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80163a2:	f06f 0305 	mvn.w	r3, #5
 80163a6:	e043      	b.n	8016430 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	60fb      	str	r3, [r7, #12]
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d1ef      	bne.n	8016396 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80163b6:	68f8      	ldr	r0, [r7, #12]
 80163b8:	f7ff fed6 	bl	8016168 <tcp_output_segment_busy>
 80163bc:	4603      	mov	r3, r0
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d002      	beq.n	80163c8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80163c2:	f06f 0305 	mvn.w	r3, #5
 80163c6:	e033      	b.n	8016430 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	2200      	movs	r2, #0
 80163dc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	8b5b      	ldrh	r3, [r3, #26]
 80163e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80163e6:	b29a      	uxth	r2, r3
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	68db      	ldr	r3, [r3, #12]
 80163f0:	685b      	ldr	r3, [r3, #4]
 80163f2:	4618      	mov	r0, r3
 80163f4:	f7f8 fd87 	bl	800ef06 <lwip_htonl>
 80163f8:	4604      	mov	r4, r0
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	891b      	ldrh	r3, [r3, #8]
 80163fe:	461d      	mov	r5, r3
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	68db      	ldr	r3, [r3, #12]
 8016404:	899b      	ldrh	r3, [r3, #12]
 8016406:	b29b      	uxth	r3, r3
 8016408:	4618      	mov	r0, r3
 801640a:	f7f8 fd67 	bl	800eedc <lwip_htons>
 801640e:	4603      	mov	r3, r0
 8016410:	b2db      	uxtb	r3, r3
 8016412:	f003 0303 	and.w	r3, r3, #3
 8016416:	2b00      	cmp	r3, #0
 8016418:	d001      	beq.n	801641e <tcp_rexmit_rto_prepare+0xba>
 801641a:	2301      	movs	r3, #1
 801641c:	e000      	b.n	8016420 <tcp_rexmit_rto_prepare+0xbc>
 801641e:	2300      	movs	r3, #0
 8016420:	442b      	add	r3, r5
 8016422:	18e2      	adds	r2, r4, r3
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	2200      	movs	r2, #0
 801642c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801642e:	2300      	movs	r3, #0
}
 8016430:	4618      	mov	r0, r3
 8016432:	3710      	adds	r7, #16
 8016434:	46bd      	mov	sp, r7
 8016436:	bdb0      	pop	{r4, r5, r7, pc}
 8016438:	0801d2dc 	.word	0x0801d2dc
 801643c:	0801d918 	.word	0x0801d918
 8016440:	0801d330 	.word	0x0801d330

08016444 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b082      	sub	sp, #8
 8016448:	af00      	add	r7, sp, #0
 801644a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d106      	bne.n	8016460 <tcp_rexmit_rto_commit+0x1c>
 8016452:	4b0d      	ldr	r3, [pc, #52]	; (8016488 <tcp_rexmit_rto_commit+0x44>)
 8016454:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016458:	490c      	ldr	r1, [pc, #48]	; (801648c <tcp_rexmit_rto_commit+0x48>)
 801645a:	480d      	ldr	r0, [pc, #52]	; (8016490 <tcp_rexmit_rto_commit+0x4c>)
 801645c:	f003 fe92 	bl	801a184 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016466:	2bff      	cmp	r3, #255	; 0xff
 8016468:	d007      	beq.n	801647a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016470:	3301      	adds	r3, #1
 8016472:	b2da      	uxtb	r2, r3
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	f7ff fc80 	bl	8015d80 <tcp_output>
}
 8016480:	bf00      	nop
 8016482:	3708      	adds	r7, #8
 8016484:	46bd      	mov	sp, r7
 8016486:	bd80      	pop	{r7, pc}
 8016488:	0801d2dc 	.word	0x0801d2dc
 801648c:	0801d93c 	.word	0x0801d93c
 8016490:	0801d330 	.word	0x0801d330

08016494 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b082      	sub	sp, #8
 8016498:	af00      	add	r7, sp, #0
 801649a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d106      	bne.n	80164b0 <tcp_rexmit_rto+0x1c>
 80164a2:	4b0a      	ldr	r3, [pc, #40]	; (80164cc <tcp_rexmit_rto+0x38>)
 80164a4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80164a8:	4909      	ldr	r1, [pc, #36]	; (80164d0 <tcp_rexmit_rto+0x3c>)
 80164aa:	480a      	ldr	r0, [pc, #40]	; (80164d4 <tcp_rexmit_rto+0x40>)
 80164ac:	f003 fe6a 	bl	801a184 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80164b0:	6878      	ldr	r0, [r7, #4]
 80164b2:	f7ff ff57 	bl	8016364 <tcp_rexmit_rto_prepare>
 80164b6:	4603      	mov	r3, r0
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d102      	bne.n	80164c2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80164bc:	6878      	ldr	r0, [r7, #4]
 80164be:	f7ff ffc1 	bl	8016444 <tcp_rexmit_rto_commit>
  }
}
 80164c2:	bf00      	nop
 80164c4:	3708      	adds	r7, #8
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bd80      	pop	{r7, pc}
 80164ca:	bf00      	nop
 80164cc:	0801d2dc 	.word	0x0801d2dc
 80164d0:	0801d960 	.word	0x0801d960
 80164d4:	0801d330 	.word	0x0801d330

080164d8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80164d8:	b590      	push	{r4, r7, lr}
 80164da:	b085      	sub	sp, #20
 80164dc:	af00      	add	r7, sp, #0
 80164de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d106      	bne.n	80164f4 <tcp_rexmit+0x1c>
 80164e6:	4b2f      	ldr	r3, [pc, #188]	; (80165a4 <tcp_rexmit+0xcc>)
 80164e8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80164ec:	492e      	ldr	r1, [pc, #184]	; (80165a8 <tcp_rexmit+0xd0>)
 80164ee:	482f      	ldr	r0, [pc, #188]	; (80165ac <tcp_rexmit+0xd4>)
 80164f0:	f003 fe48 	bl	801a184 <iprintf>

  if (pcb->unacked == NULL) {
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d102      	bne.n	8016502 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80164fc:	f06f 0305 	mvn.w	r3, #5
 8016500:	e04c      	b.n	801659c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016506:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016508:	68b8      	ldr	r0, [r7, #8]
 801650a:	f7ff fe2d 	bl	8016168 <tcp_output_segment_busy>
 801650e:	4603      	mov	r3, r0
 8016510:	2b00      	cmp	r3, #0
 8016512:	d002      	beq.n	801651a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016514:	f06f 0305 	mvn.w	r3, #5
 8016518:	e040      	b.n	801659c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801651a:	68bb      	ldr	r3, [r7, #8]
 801651c:	681a      	ldr	r2, [r3, #0]
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	336c      	adds	r3, #108	; 0x6c
 8016526:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016528:	e002      	b.n	8016530 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801652a:	68fb      	ldr	r3, [r7, #12]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d011      	beq.n	801655c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	68db      	ldr	r3, [r3, #12]
 801653e:	685b      	ldr	r3, [r3, #4]
 8016540:	4618      	mov	r0, r3
 8016542:	f7f8 fce0 	bl	800ef06 <lwip_htonl>
 8016546:	4604      	mov	r4, r0
 8016548:	68bb      	ldr	r3, [r7, #8]
 801654a:	68db      	ldr	r3, [r3, #12]
 801654c:	685b      	ldr	r3, [r3, #4]
 801654e:	4618      	mov	r0, r3
 8016550:	f7f8 fcd9 	bl	800ef06 <lwip_htonl>
 8016554:	4603      	mov	r3, r0
 8016556:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016558:	2b00      	cmp	r3, #0
 801655a:	dbe6      	blt.n	801652a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	681a      	ldr	r2, [r3, #0]
 8016560:	68bb      	ldr	r3, [r7, #8]
 8016562:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016564:	68fb      	ldr	r3, [r7, #12]
 8016566:	68ba      	ldr	r2, [r7, #8]
 8016568:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801656a:	68bb      	ldr	r3, [r7, #8]
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d103      	bne.n	801657a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	2200      	movs	r2, #0
 8016576:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016580:	2bff      	cmp	r3, #255	; 0xff
 8016582:	d007      	beq.n	8016594 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801658a:	3301      	adds	r3, #1
 801658c:	b2da      	uxtb	r2, r3
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	2200      	movs	r2, #0
 8016598:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801659a:	2300      	movs	r3, #0
}
 801659c:	4618      	mov	r0, r3
 801659e:	3714      	adds	r7, #20
 80165a0:	46bd      	mov	sp, r7
 80165a2:	bd90      	pop	{r4, r7, pc}
 80165a4:	0801d2dc 	.word	0x0801d2dc
 80165a8:	0801d97c 	.word	0x0801d97c
 80165ac:	0801d330 	.word	0x0801d330

080165b0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b082      	sub	sp, #8
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d106      	bne.n	80165cc <tcp_rexmit_fast+0x1c>
 80165be:	4b2a      	ldr	r3, [pc, #168]	; (8016668 <tcp_rexmit_fast+0xb8>)
 80165c0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80165c4:	4929      	ldr	r1, [pc, #164]	; (801666c <tcp_rexmit_fast+0xbc>)
 80165c6:	482a      	ldr	r0, [pc, #168]	; (8016670 <tcp_rexmit_fast+0xc0>)
 80165c8:	f003 fddc 	bl	801a184 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d045      	beq.n	8016660 <tcp_rexmit_fast+0xb0>
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	8b5b      	ldrh	r3, [r3, #26]
 80165d8:	f003 0304 	and.w	r3, r3, #4
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d13f      	bne.n	8016660 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80165e0:	6878      	ldr	r0, [r7, #4]
 80165e2:	f7ff ff79 	bl	80164d8 <tcp_rexmit>
 80165e6:	4603      	mov	r3, r0
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d139      	bne.n	8016660 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80165f8:	4293      	cmp	r3, r2
 80165fa:	bf28      	it	cs
 80165fc:	4613      	movcs	r3, r2
 80165fe:	b29b      	uxth	r3, r3
 8016600:	2b00      	cmp	r3, #0
 8016602:	da00      	bge.n	8016606 <tcp_rexmit_fast+0x56>
 8016604:	3301      	adds	r3, #1
 8016606:	105b      	asrs	r3, r3, #1
 8016608:	b29a      	uxth	r2, r3
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016616:	461a      	mov	r2, r3
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801661c:	005b      	lsls	r3, r3, #1
 801661e:	429a      	cmp	r2, r3
 8016620:	d206      	bcs.n	8016630 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016626:	005b      	lsls	r3, r3, #1
 8016628:	b29a      	uxth	r2, r3
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801663a:	4619      	mov	r1, r3
 801663c:	0049      	lsls	r1, r1, #1
 801663e:	440b      	add	r3, r1
 8016640:	b29b      	uxth	r3, r3
 8016642:	4413      	add	r3, r2
 8016644:	b29a      	uxth	r2, r3
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	8b5b      	ldrh	r3, [r3, #26]
 8016650:	f043 0304 	orr.w	r3, r3, #4
 8016654:	b29a      	uxth	r2, r3
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	2200      	movs	r2, #0
 801665e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8016660:	bf00      	nop
 8016662:	3708      	adds	r7, #8
 8016664:	46bd      	mov	sp, r7
 8016666:	bd80      	pop	{r7, pc}
 8016668:	0801d2dc 	.word	0x0801d2dc
 801666c:	0801d994 	.word	0x0801d994
 8016670:	0801d330 	.word	0x0801d330

08016674 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016674:	b580      	push	{r7, lr}
 8016676:	b086      	sub	sp, #24
 8016678:	af00      	add	r7, sp, #0
 801667a:	60f8      	str	r0, [r7, #12]
 801667c:	607b      	str	r3, [r7, #4]
 801667e:	460b      	mov	r3, r1
 8016680:	817b      	strh	r3, [r7, #10]
 8016682:	4613      	mov	r3, r2
 8016684:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8016686:	897a      	ldrh	r2, [r7, #10]
 8016688:	893b      	ldrh	r3, [r7, #8]
 801668a:	4413      	add	r3, r2
 801668c:	b29b      	uxth	r3, r3
 801668e:	3314      	adds	r3, #20
 8016690:	b29b      	uxth	r3, r3
 8016692:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016696:	4619      	mov	r1, r3
 8016698:	2022      	movs	r0, #34	; 0x22
 801669a:	f7f9 fce7 	bl	801006c <pbuf_alloc>
 801669e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80166a0:	697b      	ldr	r3, [r7, #20]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d04d      	beq.n	8016742 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80166a6:	897b      	ldrh	r3, [r7, #10]
 80166a8:	3313      	adds	r3, #19
 80166aa:	697a      	ldr	r2, [r7, #20]
 80166ac:	8952      	ldrh	r2, [r2, #10]
 80166ae:	4293      	cmp	r3, r2
 80166b0:	db06      	blt.n	80166c0 <tcp_output_alloc_header_common+0x4c>
 80166b2:	4b26      	ldr	r3, [pc, #152]	; (801674c <tcp_output_alloc_header_common+0xd8>)
 80166b4:	f240 7223 	movw	r2, #1827	; 0x723
 80166b8:	4925      	ldr	r1, [pc, #148]	; (8016750 <tcp_output_alloc_header_common+0xdc>)
 80166ba:	4826      	ldr	r0, [pc, #152]	; (8016754 <tcp_output_alloc_header_common+0xe0>)
 80166bc:	f003 fd62 	bl	801a184 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80166c0:	697b      	ldr	r3, [r7, #20]
 80166c2:	685b      	ldr	r3, [r3, #4]
 80166c4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80166c6:	8c3b      	ldrh	r3, [r7, #32]
 80166c8:	4618      	mov	r0, r3
 80166ca:	f7f8 fc07 	bl	800eedc <lwip_htons>
 80166ce:	4603      	mov	r3, r0
 80166d0:	461a      	mov	r2, r3
 80166d2:	693b      	ldr	r3, [r7, #16]
 80166d4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80166d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80166d8:	4618      	mov	r0, r3
 80166da:	f7f8 fbff 	bl	800eedc <lwip_htons>
 80166de:	4603      	mov	r3, r0
 80166e0:	461a      	mov	r2, r3
 80166e2:	693b      	ldr	r3, [r7, #16]
 80166e4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80166e6:	693b      	ldr	r3, [r7, #16]
 80166e8:	687a      	ldr	r2, [r7, #4]
 80166ea:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80166ec:	68f8      	ldr	r0, [r7, #12]
 80166ee:	f7f8 fc0a 	bl	800ef06 <lwip_htonl>
 80166f2:	4602      	mov	r2, r0
 80166f4:	693b      	ldr	r3, [r7, #16]
 80166f6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80166f8:	897b      	ldrh	r3, [r7, #10]
 80166fa:	089b      	lsrs	r3, r3, #2
 80166fc:	b29b      	uxth	r3, r3
 80166fe:	3305      	adds	r3, #5
 8016700:	b29b      	uxth	r3, r3
 8016702:	031b      	lsls	r3, r3, #12
 8016704:	b29a      	uxth	r2, r3
 8016706:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801670a:	b29b      	uxth	r3, r3
 801670c:	4313      	orrs	r3, r2
 801670e:	b29b      	uxth	r3, r3
 8016710:	4618      	mov	r0, r3
 8016712:	f7f8 fbe3 	bl	800eedc <lwip_htons>
 8016716:	4603      	mov	r3, r0
 8016718:	461a      	mov	r2, r3
 801671a:	693b      	ldr	r3, [r7, #16]
 801671c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801671e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016720:	4618      	mov	r0, r3
 8016722:	f7f8 fbdb 	bl	800eedc <lwip_htons>
 8016726:	4603      	mov	r3, r0
 8016728:	461a      	mov	r2, r3
 801672a:	693b      	ldr	r3, [r7, #16]
 801672c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801672e:	693b      	ldr	r3, [r7, #16]
 8016730:	2200      	movs	r2, #0
 8016732:	741a      	strb	r2, [r3, #16]
 8016734:	2200      	movs	r2, #0
 8016736:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016738:	693b      	ldr	r3, [r7, #16]
 801673a:	2200      	movs	r2, #0
 801673c:	749a      	strb	r2, [r3, #18]
 801673e:	2200      	movs	r2, #0
 8016740:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016742:	697b      	ldr	r3, [r7, #20]
}
 8016744:	4618      	mov	r0, r3
 8016746:	3718      	adds	r7, #24
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}
 801674c:	0801d2dc 	.word	0x0801d2dc
 8016750:	0801d9b4 	.word	0x0801d9b4
 8016754:	0801d330 	.word	0x0801d330

08016758 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016758:	b5b0      	push	{r4, r5, r7, lr}
 801675a:	b08a      	sub	sp, #40	; 0x28
 801675c:	af04      	add	r7, sp, #16
 801675e:	60f8      	str	r0, [r7, #12]
 8016760:	607b      	str	r3, [r7, #4]
 8016762:	460b      	mov	r3, r1
 8016764:	817b      	strh	r3, [r7, #10]
 8016766:	4613      	mov	r3, r2
 8016768:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801676a:	68fb      	ldr	r3, [r7, #12]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d106      	bne.n	801677e <tcp_output_alloc_header+0x26>
 8016770:	4b15      	ldr	r3, [pc, #84]	; (80167c8 <tcp_output_alloc_header+0x70>)
 8016772:	f240 7242 	movw	r2, #1858	; 0x742
 8016776:	4915      	ldr	r1, [pc, #84]	; (80167cc <tcp_output_alloc_header+0x74>)
 8016778:	4815      	ldr	r0, [pc, #84]	; (80167d0 <tcp_output_alloc_header+0x78>)
 801677a:	f003 fd03 	bl	801a184 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	8adb      	ldrh	r3, [r3, #22]
 8016786:	68fa      	ldr	r2, [r7, #12]
 8016788:	8b12      	ldrh	r2, [r2, #24]
 801678a:	68f9      	ldr	r1, [r7, #12]
 801678c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801678e:	893d      	ldrh	r5, [r7, #8]
 8016790:	897c      	ldrh	r4, [r7, #10]
 8016792:	9103      	str	r1, [sp, #12]
 8016794:	2110      	movs	r1, #16
 8016796:	9102      	str	r1, [sp, #8]
 8016798:	9201      	str	r2, [sp, #4]
 801679a:	9300      	str	r3, [sp, #0]
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	462a      	mov	r2, r5
 80167a0:	4621      	mov	r1, r4
 80167a2:	f7ff ff67 	bl	8016674 <tcp_output_alloc_header_common>
 80167a6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80167a8:	697b      	ldr	r3, [r7, #20]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d006      	beq.n	80167bc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167b2:	68fa      	ldr	r2, [r7, #12]
 80167b4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80167b6:	441a      	add	r2, r3
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80167bc:	697b      	ldr	r3, [r7, #20]
}
 80167be:	4618      	mov	r0, r3
 80167c0:	3718      	adds	r7, #24
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bdb0      	pop	{r4, r5, r7, pc}
 80167c6:	bf00      	nop
 80167c8:	0801d2dc 	.word	0x0801d2dc
 80167cc:	0801d9e4 	.word	0x0801d9e4
 80167d0:	0801d330 	.word	0x0801d330

080167d4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b088      	sub	sp, #32
 80167d8:	af00      	add	r7, sp, #0
 80167da:	60f8      	str	r0, [r7, #12]
 80167dc:	60b9      	str	r1, [r7, #8]
 80167de:	4611      	mov	r1, r2
 80167e0:	461a      	mov	r2, r3
 80167e2:	460b      	mov	r3, r1
 80167e4:	71fb      	strb	r3, [r7, #7]
 80167e6:	4613      	mov	r3, r2
 80167e8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80167ea:	2300      	movs	r3, #0
 80167ec:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80167ee:	68bb      	ldr	r3, [r7, #8]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d106      	bne.n	8016802 <tcp_output_fill_options+0x2e>
 80167f4:	4b13      	ldr	r3, [pc, #76]	; (8016844 <tcp_output_fill_options+0x70>)
 80167f6:	f240 7256 	movw	r2, #1878	; 0x756
 80167fa:	4913      	ldr	r1, [pc, #76]	; (8016848 <tcp_output_fill_options+0x74>)
 80167fc:	4813      	ldr	r0, [pc, #76]	; (801684c <tcp_output_fill_options+0x78>)
 80167fe:	f003 fcc1 	bl	801a184 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8016802:	68bb      	ldr	r3, [r7, #8]
 8016804:	685b      	ldr	r3, [r3, #4]
 8016806:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016808:	69bb      	ldr	r3, [r7, #24]
 801680a:	3314      	adds	r3, #20
 801680c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801680e:	69bb      	ldr	r3, [r7, #24]
 8016810:	f103 0214 	add.w	r2, r3, #20
 8016814:	8bfb      	ldrh	r3, [r7, #30]
 8016816:	009b      	lsls	r3, r3, #2
 8016818:	4619      	mov	r1, r3
 801681a:	79fb      	ldrb	r3, [r7, #7]
 801681c:	009b      	lsls	r3, r3, #2
 801681e:	f003 0304 	and.w	r3, r3, #4
 8016822:	440b      	add	r3, r1
 8016824:	4413      	add	r3, r2
 8016826:	697a      	ldr	r2, [r7, #20]
 8016828:	429a      	cmp	r2, r3
 801682a:	d006      	beq.n	801683a <tcp_output_fill_options+0x66>
 801682c:	4b05      	ldr	r3, [pc, #20]	; (8016844 <tcp_output_fill_options+0x70>)
 801682e:	f240 7275 	movw	r2, #1909	; 0x775
 8016832:	4907      	ldr	r1, [pc, #28]	; (8016850 <tcp_output_fill_options+0x7c>)
 8016834:	4805      	ldr	r0, [pc, #20]	; (801684c <tcp_output_fill_options+0x78>)
 8016836:	f003 fca5 	bl	801a184 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801683a:	bf00      	nop
 801683c:	3720      	adds	r7, #32
 801683e:	46bd      	mov	sp, r7
 8016840:	bd80      	pop	{r7, pc}
 8016842:	bf00      	nop
 8016844:	0801d2dc 	.word	0x0801d2dc
 8016848:	0801da0c 	.word	0x0801da0c
 801684c:	0801d330 	.word	0x0801d330
 8016850:	0801d904 	.word	0x0801d904

08016854 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016854:	b580      	push	{r7, lr}
 8016856:	b08a      	sub	sp, #40	; 0x28
 8016858:	af04      	add	r7, sp, #16
 801685a:	60f8      	str	r0, [r7, #12]
 801685c:	60b9      	str	r1, [r7, #8]
 801685e:	607a      	str	r2, [r7, #4]
 8016860:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8016862:	68bb      	ldr	r3, [r7, #8]
 8016864:	2b00      	cmp	r3, #0
 8016866:	d106      	bne.n	8016876 <tcp_output_control_segment+0x22>
 8016868:	4b1c      	ldr	r3, [pc, #112]	; (80168dc <tcp_output_control_segment+0x88>)
 801686a:	f240 7287 	movw	r2, #1927	; 0x787
 801686e:	491c      	ldr	r1, [pc, #112]	; (80168e0 <tcp_output_control_segment+0x8c>)
 8016870:	481c      	ldr	r0, [pc, #112]	; (80168e4 <tcp_output_control_segment+0x90>)
 8016872:	f003 fc87 	bl	801a184 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016876:	683a      	ldr	r2, [r7, #0]
 8016878:	6879      	ldr	r1, [r7, #4]
 801687a:	68f8      	ldr	r0, [r7, #12]
 801687c:	f7fe fae8 	bl	8014e50 <tcp_route>
 8016880:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8016882:	693b      	ldr	r3, [r7, #16]
 8016884:	2b00      	cmp	r3, #0
 8016886:	d102      	bne.n	801688e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016888:	23fc      	movs	r3, #252	; 0xfc
 801688a:	75fb      	strb	r3, [r7, #23]
 801688c:	e01c      	b.n	80168c8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d006      	beq.n	80168a2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8016894:	68fb      	ldr	r3, [r7, #12]
 8016896:	7adb      	ldrb	r3, [r3, #11]
 8016898:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	7a9b      	ldrb	r3, [r3, #10]
 801689e:	757b      	strb	r3, [r7, #21]
 80168a0:	e003      	b.n	80168aa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80168a2:	23ff      	movs	r3, #255	; 0xff
 80168a4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80168a6:	2300      	movs	r3, #0
 80168a8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80168aa:	7dba      	ldrb	r2, [r7, #22]
 80168ac:	693b      	ldr	r3, [r7, #16]
 80168ae:	9302      	str	r3, [sp, #8]
 80168b0:	2306      	movs	r3, #6
 80168b2:	9301      	str	r3, [sp, #4]
 80168b4:	7d7b      	ldrb	r3, [r7, #21]
 80168b6:	9300      	str	r3, [sp, #0]
 80168b8:	4613      	mov	r3, r2
 80168ba:	683a      	ldr	r2, [r7, #0]
 80168bc:	6879      	ldr	r1, [r7, #4]
 80168be:	68b8      	ldr	r0, [r7, #8]
 80168c0:	f002 f8e6 	bl	8018a90 <ip4_output_if>
 80168c4:	4603      	mov	r3, r0
 80168c6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80168c8:	68b8      	ldr	r0, [r7, #8]
 80168ca:	f7f9 feb3 	bl	8010634 <pbuf_free>
  return err;
 80168ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80168d2:	4618      	mov	r0, r3
 80168d4:	3718      	adds	r7, #24
 80168d6:	46bd      	mov	sp, r7
 80168d8:	bd80      	pop	{r7, pc}
 80168da:	bf00      	nop
 80168dc:	0801d2dc 	.word	0x0801d2dc
 80168e0:	0801da34 	.word	0x0801da34
 80168e4:	0801d330 	.word	0x0801d330

080168e8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80168e8:	b590      	push	{r4, r7, lr}
 80168ea:	b08b      	sub	sp, #44	; 0x2c
 80168ec:	af04      	add	r7, sp, #16
 80168ee:	60f8      	str	r0, [r7, #12]
 80168f0:	60b9      	str	r1, [r7, #8]
 80168f2:	607a      	str	r2, [r7, #4]
 80168f4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80168f6:	683b      	ldr	r3, [r7, #0]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d106      	bne.n	801690a <tcp_rst+0x22>
 80168fc:	4b1f      	ldr	r3, [pc, #124]	; (801697c <tcp_rst+0x94>)
 80168fe:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8016902:	491f      	ldr	r1, [pc, #124]	; (8016980 <tcp_rst+0x98>)
 8016904:	481f      	ldr	r0, [pc, #124]	; (8016984 <tcp_rst+0x9c>)
 8016906:	f003 fc3d 	bl	801a184 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801690c:	2b00      	cmp	r3, #0
 801690e:	d106      	bne.n	801691e <tcp_rst+0x36>
 8016910:	4b1a      	ldr	r3, [pc, #104]	; (801697c <tcp_rst+0x94>)
 8016912:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8016916:	491c      	ldr	r1, [pc, #112]	; (8016988 <tcp_rst+0xa0>)
 8016918:	481a      	ldr	r0, [pc, #104]	; (8016984 <tcp_rst+0x9c>)
 801691a:	f003 fc33 	bl	801a184 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801691e:	2300      	movs	r3, #0
 8016920:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8016922:	f246 0308 	movw	r3, #24584	; 0x6008
 8016926:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016928:	7dfb      	ldrb	r3, [r7, #23]
 801692a:	b29c      	uxth	r4, r3
 801692c:	68b8      	ldr	r0, [r7, #8]
 801692e:	f7f8 faea 	bl	800ef06 <lwip_htonl>
 8016932:	4602      	mov	r2, r0
 8016934:	8abb      	ldrh	r3, [r7, #20]
 8016936:	9303      	str	r3, [sp, #12]
 8016938:	2314      	movs	r3, #20
 801693a:	9302      	str	r3, [sp, #8]
 801693c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801693e:	9301      	str	r3, [sp, #4]
 8016940:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016942:	9300      	str	r3, [sp, #0]
 8016944:	4613      	mov	r3, r2
 8016946:	2200      	movs	r2, #0
 8016948:	4621      	mov	r1, r4
 801694a:	6878      	ldr	r0, [r7, #4]
 801694c:	f7ff fe92 	bl	8016674 <tcp_output_alloc_header_common>
 8016950:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8016952:	693b      	ldr	r3, [r7, #16]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d00c      	beq.n	8016972 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016958:	7dfb      	ldrb	r3, [r7, #23]
 801695a:	2200      	movs	r2, #0
 801695c:	6939      	ldr	r1, [r7, #16]
 801695e:	68f8      	ldr	r0, [r7, #12]
 8016960:	f7ff ff38 	bl	80167d4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016966:	683a      	ldr	r2, [r7, #0]
 8016968:	6939      	ldr	r1, [r7, #16]
 801696a:	68f8      	ldr	r0, [r7, #12]
 801696c:	f7ff ff72 	bl	8016854 <tcp_output_control_segment>
 8016970:	e000      	b.n	8016974 <tcp_rst+0x8c>
    return;
 8016972:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016974:	371c      	adds	r7, #28
 8016976:	46bd      	mov	sp, r7
 8016978:	bd90      	pop	{r4, r7, pc}
 801697a:	bf00      	nop
 801697c:	0801d2dc 	.word	0x0801d2dc
 8016980:	0801da60 	.word	0x0801da60
 8016984:	0801d330 	.word	0x0801d330
 8016988:	0801da7c 	.word	0x0801da7c

0801698c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801698c:	b590      	push	{r4, r7, lr}
 801698e:	b087      	sub	sp, #28
 8016990:	af00      	add	r7, sp, #0
 8016992:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016994:	2300      	movs	r3, #0
 8016996:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016998:	2300      	movs	r3, #0
 801699a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d106      	bne.n	80169b0 <tcp_send_empty_ack+0x24>
 80169a2:	4b28      	ldr	r3, [pc, #160]	; (8016a44 <tcp_send_empty_ack+0xb8>)
 80169a4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80169a8:	4927      	ldr	r1, [pc, #156]	; (8016a48 <tcp_send_empty_ack+0xbc>)
 80169aa:	4828      	ldr	r0, [pc, #160]	; (8016a4c <tcp_send_empty_ack+0xc0>)
 80169ac:	f003 fbea 	bl	801a184 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80169b0:	7dfb      	ldrb	r3, [r7, #23]
 80169b2:	009b      	lsls	r3, r3, #2
 80169b4:	b2db      	uxtb	r3, r3
 80169b6:	f003 0304 	and.w	r3, r3, #4
 80169ba:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80169bc:	7d7b      	ldrb	r3, [r7, #21]
 80169be:	b29c      	uxth	r4, r3
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80169c4:	4618      	mov	r0, r3
 80169c6:	f7f8 fa9e 	bl	800ef06 <lwip_htonl>
 80169ca:	4603      	mov	r3, r0
 80169cc:	2200      	movs	r2, #0
 80169ce:	4621      	mov	r1, r4
 80169d0:	6878      	ldr	r0, [r7, #4]
 80169d2:	f7ff fec1 	bl	8016758 <tcp_output_alloc_header>
 80169d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80169d8:	693b      	ldr	r3, [r7, #16]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d109      	bne.n	80169f2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	8b5b      	ldrh	r3, [r3, #26]
 80169e2:	f043 0303 	orr.w	r3, r3, #3
 80169e6:	b29a      	uxth	r2, r3
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80169ec:	f06f 0301 	mvn.w	r3, #1
 80169f0:	e023      	b.n	8016a3a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80169f2:	7dbb      	ldrb	r3, [r7, #22]
 80169f4:	7dfa      	ldrb	r2, [r7, #23]
 80169f6:	6939      	ldr	r1, [r7, #16]
 80169f8:	6878      	ldr	r0, [r7, #4]
 80169fa:	f7ff feeb 	bl	80167d4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80169fe:	687a      	ldr	r2, [r7, #4]
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	3304      	adds	r3, #4
 8016a04:	6939      	ldr	r1, [r7, #16]
 8016a06:	6878      	ldr	r0, [r7, #4]
 8016a08:	f7ff ff24 	bl	8016854 <tcp_output_control_segment>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d007      	beq.n	8016a28 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	8b5b      	ldrh	r3, [r3, #26]
 8016a1c:	f043 0303 	orr.w	r3, r3, #3
 8016a20:	b29a      	uxth	r2, r3
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	835a      	strh	r2, [r3, #26]
 8016a26:	e006      	b.n	8016a36 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	8b5b      	ldrh	r3, [r3, #26]
 8016a2c:	f023 0303 	bic.w	r3, r3, #3
 8016a30:	b29a      	uxth	r2, r3
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	371c      	adds	r7, #28
 8016a3e:	46bd      	mov	sp, r7
 8016a40:	bd90      	pop	{r4, r7, pc}
 8016a42:	bf00      	nop
 8016a44:	0801d2dc 	.word	0x0801d2dc
 8016a48:	0801da98 	.word	0x0801da98
 8016a4c:	0801d330 	.word	0x0801d330

08016a50 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016a50:	b590      	push	{r4, r7, lr}
 8016a52:	b087      	sub	sp, #28
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016a58:	2300      	movs	r3, #0
 8016a5a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d106      	bne.n	8016a70 <tcp_keepalive+0x20>
 8016a62:	4b18      	ldr	r3, [pc, #96]	; (8016ac4 <tcp_keepalive+0x74>)
 8016a64:	f640 0224 	movw	r2, #2084	; 0x824
 8016a68:	4917      	ldr	r1, [pc, #92]	; (8016ac8 <tcp_keepalive+0x78>)
 8016a6a:	4818      	ldr	r0, [pc, #96]	; (8016acc <tcp_keepalive+0x7c>)
 8016a6c:	f003 fb8a 	bl	801a184 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016a70:	7dfb      	ldrb	r3, [r7, #23]
 8016a72:	b29c      	uxth	r4, r3
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016a78:	3b01      	subs	r3, #1
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	f7f8 fa43 	bl	800ef06 <lwip_htonl>
 8016a80:	4603      	mov	r3, r0
 8016a82:	2200      	movs	r2, #0
 8016a84:	4621      	mov	r1, r4
 8016a86:	6878      	ldr	r0, [r7, #4]
 8016a88:	f7ff fe66 	bl	8016758 <tcp_output_alloc_header>
 8016a8c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016a8e:	693b      	ldr	r3, [r7, #16]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d102      	bne.n	8016a9a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016a94:	f04f 33ff 	mov.w	r3, #4294967295
 8016a98:	e010      	b.n	8016abc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016a9a:	7dfb      	ldrb	r3, [r7, #23]
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	6939      	ldr	r1, [r7, #16]
 8016aa0:	6878      	ldr	r0, [r7, #4]
 8016aa2:	f7ff fe97 	bl	80167d4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016aa6:	687a      	ldr	r2, [r7, #4]
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	3304      	adds	r3, #4
 8016aac:	6939      	ldr	r1, [r7, #16]
 8016aae:	6878      	ldr	r0, [r7, #4]
 8016ab0:	f7ff fed0 	bl	8016854 <tcp_output_control_segment>
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016abc:	4618      	mov	r0, r3
 8016abe:	371c      	adds	r7, #28
 8016ac0:	46bd      	mov	sp, r7
 8016ac2:	bd90      	pop	{r4, r7, pc}
 8016ac4:	0801d2dc 	.word	0x0801d2dc
 8016ac8:	0801dab8 	.word	0x0801dab8
 8016acc:	0801d330 	.word	0x0801d330

08016ad0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016ad0:	b590      	push	{r4, r7, lr}
 8016ad2:	b08b      	sub	sp, #44	; 0x2c
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016ad8:	2300      	movs	r3, #0
 8016ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d106      	bne.n	8016af2 <tcp_zero_window_probe+0x22>
 8016ae4:	4b4c      	ldr	r3, [pc, #304]	; (8016c18 <tcp_zero_window_probe+0x148>)
 8016ae6:	f640 024f 	movw	r2, #2127	; 0x84f
 8016aea:	494c      	ldr	r1, [pc, #304]	; (8016c1c <tcp_zero_window_probe+0x14c>)
 8016aec:	484c      	ldr	r0, [pc, #304]	; (8016c20 <tcp_zero_window_probe+0x150>)
 8016aee:	f003 fb49 	bl	801a184 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016af6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016af8:	6a3b      	ldr	r3, [r7, #32]
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d101      	bne.n	8016b02 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8016afe:	2300      	movs	r3, #0
 8016b00:	e086      	b.n	8016c10 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016b08:	2bff      	cmp	r3, #255	; 0xff
 8016b0a:	d007      	beq.n	8016b1c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016b12:	3301      	adds	r3, #1
 8016b14:	b2da      	uxtb	r2, r3
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016b1c:	6a3b      	ldr	r3, [r7, #32]
 8016b1e:	68db      	ldr	r3, [r3, #12]
 8016b20:	899b      	ldrh	r3, [r3, #12]
 8016b22:	b29b      	uxth	r3, r3
 8016b24:	4618      	mov	r0, r3
 8016b26:	f7f8 f9d9 	bl	800eedc <lwip_htons>
 8016b2a:	4603      	mov	r3, r0
 8016b2c:	b2db      	uxtb	r3, r3
 8016b2e:	f003 0301 	and.w	r3, r3, #1
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d005      	beq.n	8016b42 <tcp_zero_window_probe+0x72>
 8016b36:	6a3b      	ldr	r3, [r7, #32]
 8016b38:	891b      	ldrh	r3, [r3, #8]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d101      	bne.n	8016b42 <tcp_zero_window_probe+0x72>
 8016b3e:	2301      	movs	r3, #1
 8016b40:	e000      	b.n	8016b44 <tcp_zero_window_probe+0x74>
 8016b42:	2300      	movs	r3, #0
 8016b44:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016b46:	7ffb      	ldrb	r3, [r7, #31]
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	bf0c      	ite	eq
 8016b4c:	2301      	moveq	r3, #1
 8016b4e:	2300      	movne	r3, #0
 8016b50:	b2db      	uxtb	r3, r3
 8016b52:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b58:	b299      	uxth	r1, r3
 8016b5a:	6a3b      	ldr	r3, [r7, #32]
 8016b5c:	68db      	ldr	r3, [r3, #12]
 8016b5e:	685b      	ldr	r3, [r3, #4]
 8016b60:	8bba      	ldrh	r2, [r7, #28]
 8016b62:	6878      	ldr	r0, [r7, #4]
 8016b64:	f7ff fdf8 	bl	8016758 <tcp_output_alloc_header>
 8016b68:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016b6a:	69bb      	ldr	r3, [r7, #24]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d102      	bne.n	8016b76 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016b70:	f04f 33ff 	mov.w	r3, #4294967295
 8016b74:	e04c      	b.n	8016c10 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016b76:	69bb      	ldr	r3, [r7, #24]
 8016b78:	685b      	ldr	r3, [r3, #4]
 8016b7a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016b7c:	7ffb      	ldrb	r3, [r7, #31]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d011      	beq.n	8016ba6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016b82:	697b      	ldr	r3, [r7, #20]
 8016b84:	899b      	ldrh	r3, [r3, #12]
 8016b86:	b29b      	uxth	r3, r3
 8016b88:	b21b      	sxth	r3, r3
 8016b8a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016b8e:	b21c      	sxth	r4, r3
 8016b90:	2011      	movs	r0, #17
 8016b92:	f7f8 f9a3 	bl	800eedc <lwip_htons>
 8016b96:	4603      	mov	r3, r0
 8016b98:	b21b      	sxth	r3, r3
 8016b9a:	4323      	orrs	r3, r4
 8016b9c:	b21b      	sxth	r3, r3
 8016b9e:	b29a      	uxth	r2, r3
 8016ba0:	697b      	ldr	r3, [r7, #20]
 8016ba2:	819a      	strh	r2, [r3, #12]
 8016ba4:	e010      	b.n	8016bc8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016ba6:	69bb      	ldr	r3, [r7, #24]
 8016ba8:	685b      	ldr	r3, [r3, #4]
 8016baa:	3314      	adds	r3, #20
 8016bac:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8016bae:	6a3b      	ldr	r3, [r7, #32]
 8016bb0:	6858      	ldr	r0, [r3, #4]
 8016bb2:	6a3b      	ldr	r3, [r7, #32]
 8016bb4:	685b      	ldr	r3, [r3, #4]
 8016bb6:	891a      	ldrh	r2, [r3, #8]
 8016bb8:	6a3b      	ldr	r3, [r7, #32]
 8016bba:	891b      	ldrh	r3, [r3, #8]
 8016bbc:	1ad3      	subs	r3, r2, r3
 8016bbe:	b29b      	uxth	r3, r3
 8016bc0:	2201      	movs	r2, #1
 8016bc2:	6939      	ldr	r1, [r7, #16]
 8016bc4:	f7f9 ff2c 	bl	8010a20 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016bc8:	6a3b      	ldr	r3, [r7, #32]
 8016bca:	68db      	ldr	r3, [r3, #12]
 8016bcc:	685b      	ldr	r3, [r3, #4]
 8016bce:	4618      	mov	r0, r3
 8016bd0:	f7f8 f999 	bl	800ef06 <lwip_htonl>
 8016bd4:	4603      	mov	r3, r0
 8016bd6:	3301      	adds	r3, #1
 8016bd8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	1ad3      	subs	r3, r2, r3
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	da02      	bge.n	8016bec <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	68fa      	ldr	r2, [r7, #12]
 8016bea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bf0:	2200      	movs	r2, #0
 8016bf2:	69b9      	ldr	r1, [r7, #24]
 8016bf4:	6878      	ldr	r0, [r7, #4]
 8016bf6:	f7ff fded 	bl	80167d4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016bfa:	687a      	ldr	r2, [r7, #4]
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	3304      	adds	r3, #4
 8016c00:	69b9      	ldr	r1, [r7, #24]
 8016c02:	6878      	ldr	r0, [r7, #4]
 8016c04:	f7ff fe26 	bl	8016854 <tcp_output_control_segment>
 8016c08:	4603      	mov	r3, r0
 8016c0a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016c0c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016c10:	4618      	mov	r0, r3
 8016c12:	372c      	adds	r7, #44	; 0x2c
 8016c14:	46bd      	mov	sp, r7
 8016c16:	bd90      	pop	{r4, r7, pc}
 8016c18:	0801d2dc 	.word	0x0801d2dc
 8016c1c:	0801dad4 	.word	0x0801dad4
 8016c20:	0801d330 	.word	0x0801d330

08016c24 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016c24:	b580      	push	{r7, lr}
 8016c26:	b082      	sub	sp, #8
 8016c28:	af00      	add	r7, sp, #0
 8016c2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016c2c:	f7f9 ffe6 	bl	8010bfc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016c30:	4b0a      	ldr	r3, [pc, #40]	; (8016c5c <tcpip_tcp_timer+0x38>)
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d103      	bne.n	8016c40 <tcpip_tcp_timer+0x1c>
 8016c38:	4b09      	ldr	r3, [pc, #36]	; (8016c60 <tcpip_tcp_timer+0x3c>)
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d005      	beq.n	8016c4c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016c40:	2200      	movs	r2, #0
 8016c42:	4908      	ldr	r1, [pc, #32]	; (8016c64 <tcpip_tcp_timer+0x40>)
 8016c44:	20fa      	movs	r0, #250	; 0xfa
 8016c46:	f000 f8f3 	bl	8016e30 <sys_timeout>
 8016c4a:	e003      	b.n	8016c54 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016c4c:	4b06      	ldr	r3, [pc, #24]	; (8016c68 <tcpip_tcp_timer+0x44>)
 8016c4e:	2200      	movs	r2, #0
 8016c50:	601a      	str	r2, [r3, #0]
  }
}
 8016c52:	bf00      	nop
 8016c54:	bf00      	nop
 8016c56:	3708      	adds	r7, #8
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	bd80      	pop	{r7, pc}
 8016c5c:	2000dba4 	.word	0x2000dba4
 8016c60:	2000dbb4 	.word	0x2000dbb4
 8016c64:	08016c25 	.word	0x08016c25
 8016c68:	20004b04 	.word	0x20004b04

08016c6c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016c70:	4b0a      	ldr	r3, [pc, #40]	; (8016c9c <tcp_timer_needed+0x30>)
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d10f      	bne.n	8016c98 <tcp_timer_needed+0x2c>
 8016c78:	4b09      	ldr	r3, [pc, #36]	; (8016ca0 <tcp_timer_needed+0x34>)
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d103      	bne.n	8016c88 <tcp_timer_needed+0x1c>
 8016c80:	4b08      	ldr	r3, [pc, #32]	; (8016ca4 <tcp_timer_needed+0x38>)
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d007      	beq.n	8016c98 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016c88:	4b04      	ldr	r3, [pc, #16]	; (8016c9c <tcp_timer_needed+0x30>)
 8016c8a:	2201      	movs	r2, #1
 8016c8c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016c8e:	2200      	movs	r2, #0
 8016c90:	4905      	ldr	r1, [pc, #20]	; (8016ca8 <tcp_timer_needed+0x3c>)
 8016c92:	20fa      	movs	r0, #250	; 0xfa
 8016c94:	f000 f8cc 	bl	8016e30 <sys_timeout>
  }
}
 8016c98:	bf00      	nop
 8016c9a:	bd80      	pop	{r7, pc}
 8016c9c:	20004b04 	.word	0x20004b04
 8016ca0:	2000dba4 	.word	0x2000dba4
 8016ca4:	2000dbb4 	.word	0x2000dbb4
 8016ca8:	08016c25 	.word	0x08016c25

08016cac <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b086      	sub	sp, #24
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	60f8      	str	r0, [r7, #12]
 8016cb4:	60b9      	str	r1, [r7, #8]
 8016cb6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016cb8:	200a      	movs	r0, #10
 8016cba:	f7f8 fdc5 	bl	800f848 <memp_malloc>
 8016cbe:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016cc0:	693b      	ldr	r3, [r7, #16]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d109      	bne.n	8016cda <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016cc6:	693b      	ldr	r3, [r7, #16]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d151      	bne.n	8016d70 <sys_timeout_abs+0xc4>
 8016ccc:	4b2a      	ldr	r3, [pc, #168]	; (8016d78 <sys_timeout_abs+0xcc>)
 8016cce:	22be      	movs	r2, #190	; 0xbe
 8016cd0:	492a      	ldr	r1, [pc, #168]	; (8016d7c <sys_timeout_abs+0xd0>)
 8016cd2:	482b      	ldr	r0, [pc, #172]	; (8016d80 <sys_timeout_abs+0xd4>)
 8016cd4:	f003 fa56 	bl	801a184 <iprintf>
    return;
 8016cd8:	e04a      	b.n	8016d70 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016cda:	693b      	ldr	r3, [r7, #16]
 8016cdc:	2200      	movs	r2, #0
 8016cde:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016ce0:	693b      	ldr	r3, [r7, #16]
 8016ce2:	68ba      	ldr	r2, [r7, #8]
 8016ce4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016ce6:	693b      	ldr	r3, [r7, #16]
 8016ce8:	687a      	ldr	r2, [r7, #4]
 8016cea:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016cec:	693b      	ldr	r3, [r7, #16]
 8016cee:	68fa      	ldr	r2, [r7, #12]
 8016cf0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016cf2:	4b24      	ldr	r3, [pc, #144]	; (8016d84 <sys_timeout_abs+0xd8>)
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d103      	bne.n	8016d02 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016cfa:	4a22      	ldr	r2, [pc, #136]	; (8016d84 <sys_timeout_abs+0xd8>)
 8016cfc:	693b      	ldr	r3, [r7, #16]
 8016cfe:	6013      	str	r3, [r2, #0]
    return;
 8016d00:	e037      	b.n	8016d72 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016d02:	693b      	ldr	r3, [r7, #16]
 8016d04:	685a      	ldr	r2, [r3, #4]
 8016d06:	4b1f      	ldr	r3, [pc, #124]	; (8016d84 <sys_timeout_abs+0xd8>)
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	685b      	ldr	r3, [r3, #4]
 8016d0c:	1ad3      	subs	r3, r2, r3
 8016d0e:	0fdb      	lsrs	r3, r3, #31
 8016d10:	f003 0301 	and.w	r3, r3, #1
 8016d14:	b2db      	uxtb	r3, r3
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d007      	beq.n	8016d2a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016d1a:	4b1a      	ldr	r3, [pc, #104]	; (8016d84 <sys_timeout_abs+0xd8>)
 8016d1c:	681a      	ldr	r2, [r3, #0]
 8016d1e:	693b      	ldr	r3, [r7, #16]
 8016d20:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016d22:	4a18      	ldr	r2, [pc, #96]	; (8016d84 <sys_timeout_abs+0xd8>)
 8016d24:	693b      	ldr	r3, [r7, #16]
 8016d26:	6013      	str	r3, [r2, #0]
 8016d28:	e023      	b.n	8016d72 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016d2a:	4b16      	ldr	r3, [pc, #88]	; (8016d84 <sys_timeout_abs+0xd8>)
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	617b      	str	r3, [r7, #20]
 8016d30:	e01a      	b.n	8016d68 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8016d32:	697b      	ldr	r3, [r7, #20]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d00b      	beq.n	8016d52 <sys_timeout_abs+0xa6>
 8016d3a:	693b      	ldr	r3, [r7, #16]
 8016d3c:	685a      	ldr	r2, [r3, #4]
 8016d3e:	697b      	ldr	r3, [r7, #20]
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	685b      	ldr	r3, [r3, #4]
 8016d44:	1ad3      	subs	r3, r2, r3
 8016d46:	0fdb      	lsrs	r3, r3, #31
 8016d48:	f003 0301 	and.w	r3, r3, #1
 8016d4c:	b2db      	uxtb	r3, r3
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d007      	beq.n	8016d62 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016d52:	697b      	ldr	r3, [r7, #20]
 8016d54:	681a      	ldr	r2, [r3, #0]
 8016d56:	693b      	ldr	r3, [r7, #16]
 8016d58:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016d5a:	697b      	ldr	r3, [r7, #20]
 8016d5c:	693a      	ldr	r2, [r7, #16]
 8016d5e:	601a      	str	r2, [r3, #0]
        break;
 8016d60:	e007      	b.n	8016d72 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016d62:	697b      	ldr	r3, [r7, #20]
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	617b      	str	r3, [r7, #20]
 8016d68:	697b      	ldr	r3, [r7, #20]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d1e1      	bne.n	8016d32 <sys_timeout_abs+0x86>
 8016d6e:	e000      	b.n	8016d72 <sys_timeout_abs+0xc6>
    return;
 8016d70:	bf00      	nop
      }
    }
  }
}
 8016d72:	3718      	adds	r7, #24
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bd80      	pop	{r7, pc}
 8016d78:	0801daf8 	.word	0x0801daf8
 8016d7c:	0801db2c 	.word	0x0801db2c
 8016d80:	0801db6c 	.word	0x0801db6c
 8016d84:	20004afc 	.word	0x20004afc

08016d88 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016d88:	b580      	push	{r7, lr}
 8016d8a:	b086      	sub	sp, #24
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016d94:	697b      	ldr	r3, [r7, #20]
 8016d96:	685b      	ldr	r3, [r3, #4]
 8016d98:	4798      	blx	r3

  now = sys_now();
 8016d9a:	f7ee ffd1 	bl	8005d40 <sys_now>
 8016d9e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016da0:	697b      	ldr	r3, [r7, #20]
 8016da2:	681a      	ldr	r2, [r3, #0]
 8016da4:	4b0f      	ldr	r3, [pc, #60]	; (8016de4 <lwip_cyclic_timer+0x5c>)
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	4413      	add	r3, r2
 8016daa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016dac:	68fa      	ldr	r2, [r7, #12]
 8016dae:	693b      	ldr	r3, [r7, #16]
 8016db0:	1ad3      	subs	r3, r2, r3
 8016db2:	0fdb      	lsrs	r3, r3, #31
 8016db4:	f003 0301 	and.w	r3, r3, #1
 8016db8:	b2db      	uxtb	r3, r3
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d009      	beq.n	8016dd2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016dbe:	697b      	ldr	r3, [r7, #20]
 8016dc0:	681a      	ldr	r2, [r3, #0]
 8016dc2:	693b      	ldr	r3, [r7, #16]
 8016dc4:	4413      	add	r3, r2
 8016dc6:	687a      	ldr	r2, [r7, #4]
 8016dc8:	4907      	ldr	r1, [pc, #28]	; (8016de8 <lwip_cyclic_timer+0x60>)
 8016dca:	4618      	mov	r0, r3
 8016dcc:	f7ff ff6e 	bl	8016cac <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016dd0:	e004      	b.n	8016ddc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016dd2:	687a      	ldr	r2, [r7, #4]
 8016dd4:	4904      	ldr	r1, [pc, #16]	; (8016de8 <lwip_cyclic_timer+0x60>)
 8016dd6:	68f8      	ldr	r0, [r7, #12]
 8016dd8:	f7ff ff68 	bl	8016cac <sys_timeout_abs>
}
 8016ddc:	bf00      	nop
 8016dde:	3718      	adds	r7, #24
 8016de0:	46bd      	mov	sp, r7
 8016de2:	bd80      	pop	{r7, pc}
 8016de4:	20004b00 	.word	0x20004b00
 8016de8:	08016d89 	.word	0x08016d89

08016dec <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016dec:	b580      	push	{r7, lr}
 8016dee:	b082      	sub	sp, #8
 8016df0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016df2:	2301      	movs	r3, #1
 8016df4:	607b      	str	r3, [r7, #4]
 8016df6:	e00e      	b.n	8016e16 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016df8:	4a0b      	ldr	r2, [pc, #44]	; (8016e28 <sys_timeouts_init+0x3c>)
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	00db      	lsls	r3, r3, #3
 8016e04:	4a08      	ldr	r2, [pc, #32]	; (8016e28 <sys_timeouts_init+0x3c>)
 8016e06:	4413      	add	r3, r2
 8016e08:	461a      	mov	r2, r3
 8016e0a:	4908      	ldr	r1, [pc, #32]	; (8016e2c <sys_timeouts_init+0x40>)
 8016e0c:	f000 f810 	bl	8016e30 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	3301      	adds	r3, #1
 8016e14:	607b      	str	r3, [r7, #4]
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	2b02      	cmp	r3, #2
 8016e1a:	d9ed      	bls.n	8016df8 <sys_timeouts_init+0xc>
  }
}
 8016e1c:	bf00      	nop
 8016e1e:	bf00      	nop
 8016e20:	3708      	adds	r7, #8
 8016e22:	46bd      	mov	sp, r7
 8016e24:	bd80      	pop	{r7, pc}
 8016e26:	bf00      	nop
 8016e28:	0801e80c 	.word	0x0801e80c
 8016e2c:	08016d89 	.word	0x08016d89

08016e30 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b086      	sub	sp, #24
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	60f8      	str	r0, [r7, #12]
 8016e38:	60b9      	str	r1, [r7, #8]
 8016e3a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016e42:	d306      	bcc.n	8016e52 <sys_timeout+0x22>
 8016e44:	4b0a      	ldr	r3, [pc, #40]	; (8016e70 <sys_timeout+0x40>)
 8016e46:	f240 1229 	movw	r2, #297	; 0x129
 8016e4a:	490a      	ldr	r1, [pc, #40]	; (8016e74 <sys_timeout+0x44>)
 8016e4c:	480a      	ldr	r0, [pc, #40]	; (8016e78 <sys_timeout+0x48>)
 8016e4e:	f003 f999 	bl	801a184 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8016e52:	f7ee ff75 	bl	8005d40 <sys_now>
 8016e56:	4602      	mov	r2, r0
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	4413      	add	r3, r2
 8016e5c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8016e5e:	687a      	ldr	r2, [r7, #4]
 8016e60:	68b9      	ldr	r1, [r7, #8]
 8016e62:	6978      	ldr	r0, [r7, #20]
 8016e64:	f7ff ff22 	bl	8016cac <sys_timeout_abs>
#endif
}
 8016e68:	bf00      	nop
 8016e6a:	3718      	adds	r7, #24
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	bd80      	pop	{r7, pc}
 8016e70:	0801daf8 	.word	0x0801daf8
 8016e74:	0801db94 	.word	0x0801db94
 8016e78:	0801db6c 	.word	0x0801db6c

08016e7c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016e7c:	b580      	push	{r7, lr}
 8016e7e:	b084      	sub	sp, #16
 8016e80:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8016e82:	f7ee ff5d 	bl	8005d40 <sys_now>
 8016e86:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016e88:	4b17      	ldr	r3, [pc, #92]	; (8016ee8 <sys_check_timeouts+0x6c>)
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8016e8e:	68bb      	ldr	r3, [r7, #8]
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d022      	beq.n	8016eda <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8016e94:	68bb      	ldr	r3, [r7, #8]
 8016e96:	685b      	ldr	r3, [r3, #4]
 8016e98:	68fa      	ldr	r2, [r7, #12]
 8016e9a:	1ad3      	subs	r3, r2, r3
 8016e9c:	0fdb      	lsrs	r3, r3, #31
 8016e9e:	f003 0301 	and.w	r3, r3, #1
 8016ea2:	b2db      	uxtb	r3, r3
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d11a      	bne.n	8016ede <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016ea8:	68bb      	ldr	r3, [r7, #8]
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	4a0e      	ldr	r2, [pc, #56]	; (8016ee8 <sys_check_timeouts+0x6c>)
 8016eae:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016eb0:	68bb      	ldr	r3, [r7, #8]
 8016eb2:	689b      	ldr	r3, [r3, #8]
 8016eb4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8016eb6:	68bb      	ldr	r3, [r7, #8]
 8016eb8:	68db      	ldr	r3, [r3, #12]
 8016eba:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016ebc:	68bb      	ldr	r3, [r7, #8]
 8016ebe:	685b      	ldr	r3, [r3, #4]
 8016ec0:	4a0a      	ldr	r2, [pc, #40]	; (8016eec <sys_check_timeouts+0x70>)
 8016ec2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016ec4:	68b9      	ldr	r1, [r7, #8]
 8016ec6:	200a      	movs	r0, #10
 8016ec8:	f7f8 fd10 	bl	800f8ec <memp_free>
    if (handler != NULL) {
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d0da      	beq.n	8016e88 <sys_check_timeouts+0xc>
      handler(arg);
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	6838      	ldr	r0, [r7, #0]
 8016ed6:	4798      	blx	r3
  do {
 8016ed8:	e7d6      	b.n	8016e88 <sys_check_timeouts+0xc>
      return;
 8016eda:	bf00      	nop
 8016edc:	e000      	b.n	8016ee0 <sys_check_timeouts+0x64>
      return;
 8016ede:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016ee0:	3710      	adds	r7, #16
 8016ee2:	46bd      	mov	sp, r7
 8016ee4:	bd80      	pop	{r7, pc}
 8016ee6:	bf00      	nop
 8016ee8:	20004afc 	.word	0x20004afc
 8016eec:	20004b00 	.word	0x20004b00

08016ef0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016ef0:	b580      	push	{r7, lr}
 8016ef2:	b082      	sub	sp, #8
 8016ef4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016ef6:	4b16      	ldr	r3, [pc, #88]	; (8016f50 <sys_timeouts_sleeptime+0x60>)
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d102      	bne.n	8016f04 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8016efe:	f04f 33ff 	mov.w	r3, #4294967295
 8016f02:	e020      	b.n	8016f46 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016f04:	f7ee ff1c 	bl	8005d40 <sys_now>
 8016f08:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016f0a:	4b11      	ldr	r3, [pc, #68]	; (8016f50 <sys_timeouts_sleeptime+0x60>)
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	685a      	ldr	r2, [r3, #4]
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	1ad3      	subs	r3, r2, r3
 8016f14:	0fdb      	lsrs	r3, r3, #31
 8016f16:	f003 0301 	and.w	r3, r3, #1
 8016f1a:	b2db      	uxtb	r3, r3
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d001      	beq.n	8016f24 <sys_timeouts_sleeptime+0x34>
    return 0;
 8016f20:	2300      	movs	r3, #0
 8016f22:	e010      	b.n	8016f46 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016f24:	4b0a      	ldr	r3, [pc, #40]	; (8016f50 <sys_timeouts_sleeptime+0x60>)
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	685a      	ldr	r2, [r3, #4]
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	1ad3      	subs	r3, r2, r3
 8016f2e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016f30:	683b      	ldr	r3, [r7, #0]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	da06      	bge.n	8016f44 <sys_timeouts_sleeptime+0x54>
 8016f36:	4b07      	ldr	r3, [pc, #28]	; (8016f54 <sys_timeouts_sleeptime+0x64>)
 8016f38:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8016f3c:	4906      	ldr	r1, [pc, #24]	; (8016f58 <sys_timeouts_sleeptime+0x68>)
 8016f3e:	4807      	ldr	r0, [pc, #28]	; (8016f5c <sys_timeouts_sleeptime+0x6c>)
 8016f40:	f003 f920 	bl	801a184 <iprintf>
    return ret;
 8016f44:	683b      	ldr	r3, [r7, #0]
  }
}
 8016f46:	4618      	mov	r0, r3
 8016f48:	3708      	adds	r7, #8
 8016f4a:	46bd      	mov	sp, r7
 8016f4c:	bd80      	pop	{r7, pc}
 8016f4e:	bf00      	nop
 8016f50:	20004afc 	.word	0x20004afc
 8016f54:	0801daf8 	.word	0x0801daf8
 8016f58:	0801dbcc 	.word	0x0801dbcc
 8016f5c:	0801db6c 	.word	0x0801db6c

08016f60 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016f64:	f003 f926 	bl	801a1b4 <rand>
 8016f68:	4603      	mov	r3, r0
 8016f6a:	b29b      	uxth	r3, r3
 8016f6c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016f70:	b29b      	uxth	r3, r3
 8016f72:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016f76:	b29a      	uxth	r2, r3
 8016f78:	4b01      	ldr	r3, [pc, #4]	; (8016f80 <udp_init+0x20>)
 8016f7a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016f7c:	bf00      	nop
 8016f7e:	bd80      	pop	{r7, pc}
 8016f80:	20000018 	.word	0x20000018

08016f84 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016f84:	b480      	push	{r7}
 8016f86:	b083      	sub	sp, #12
 8016f88:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8016f8e:	4b17      	ldr	r3, [pc, #92]	; (8016fec <udp_new_port+0x68>)
 8016f90:	881b      	ldrh	r3, [r3, #0]
 8016f92:	1c5a      	adds	r2, r3, #1
 8016f94:	b291      	uxth	r1, r2
 8016f96:	4a15      	ldr	r2, [pc, #84]	; (8016fec <udp_new_port+0x68>)
 8016f98:	8011      	strh	r1, [r2, #0]
 8016f9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016f9e:	4293      	cmp	r3, r2
 8016fa0:	d103      	bne.n	8016faa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8016fa2:	4b12      	ldr	r3, [pc, #72]	; (8016fec <udp_new_port+0x68>)
 8016fa4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016fa8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016faa:	4b11      	ldr	r3, [pc, #68]	; (8016ff0 <udp_new_port+0x6c>)
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	603b      	str	r3, [r7, #0]
 8016fb0:	e011      	b.n	8016fd6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8016fb2:	683b      	ldr	r3, [r7, #0]
 8016fb4:	8a5a      	ldrh	r2, [r3, #18]
 8016fb6:	4b0d      	ldr	r3, [pc, #52]	; (8016fec <udp_new_port+0x68>)
 8016fb8:	881b      	ldrh	r3, [r3, #0]
 8016fba:	429a      	cmp	r2, r3
 8016fbc:	d108      	bne.n	8016fd0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8016fbe:	88fb      	ldrh	r3, [r7, #6]
 8016fc0:	3301      	adds	r3, #1
 8016fc2:	80fb      	strh	r3, [r7, #6]
 8016fc4:	88fb      	ldrh	r3, [r7, #6]
 8016fc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016fca:	d3e0      	bcc.n	8016f8e <udp_new_port+0xa>
        return 0;
 8016fcc:	2300      	movs	r3, #0
 8016fce:	e007      	b.n	8016fe0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016fd0:	683b      	ldr	r3, [r7, #0]
 8016fd2:	68db      	ldr	r3, [r3, #12]
 8016fd4:	603b      	str	r3, [r7, #0]
 8016fd6:	683b      	ldr	r3, [r7, #0]
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d1ea      	bne.n	8016fb2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8016fdc:	4b03      	ldr	r3, [pc, #12]	; (8016fec <udp_new_port+0x68>)
 8016fde:	881b      	ldrh	r3, [r3, #0]
}
 8016fe0:	4618      	mov	r0, r3
 8016fe2:	370c      	adds	r7, #12
 8016fe4:	46bd      	mov	sp, r7
 8016fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fea:	4770      	bx	lr
 8016fec:	20000018 	.word	0x20000018
 8016ff0:	2000dbbc 	.word	0x2000dbbc

08016ff4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b084      	sub	sp, #16
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	60f8      	str	r0, [r7, #12]
 8016ffc:	60b9      	str	r1, [r7, #8]
 8016ffe:	4613      	mov	r3, r2
 8017000:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	2b00      	cmp	r3, #0
 8017006:	d105      	bne.n	8017014 <udp_input_local_match+0x20>
 8017008:	4b27      	ldr	r3, [pc, #156]	; (80170a8 <udp_input_local_match+0xb4>)
 801700a:	2287      	movs	r2, #135	; 0x87
 801700c:	4927      	ldr	r1, [pc, #156]	; (80170ac <udp_input_local_match+0xb8>)
 801700e:	4828      	ldr	r0, [pc, #160]	; (80170b0 <udp_input_local_match+0xbc>)
 8017010:	f003 f8b8 	bl	801a184 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017014:	68bb      	ldr	r3, [r7, #8]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d105      	bne.n	8017026 <udp_input_local_match+0x32>
 801701a:	4b23      	ldr	r3, [pc, #140]	; (80170a8 <udp_input_local_match+0xb4>)
 801701c:	2288      	movs	r2, #136	; 0x88
 801701e:	4925      	ldr	r1, [pc, #148]	; (80170b4 <udp_input_local_match+0xc0>)
 8017020:	4823      	ldr	r0, [pc, #140]	; (80170b0 <udp_input_local_match+0xbc>)
 8017022:	f003 f8af 	bl	801a184 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	7a1b      	ldrb	r3, [r3, #8]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d00b      	beq.n	8017046 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	7a1a      	ldrb	r2, [r3, #8]
 8017032:	4b21      	ldr	r3, [pc, #132]	; (80170b8 <udp_input_local_match+0xc4>)
 8017034:	685b      	ldr	r3, [r3, #4]
 8017036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801703a:	3301      	adds	r3, #1
 801703c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801703e:	429a      	cmp	r2, r3
 8017040:	d001      	beq.n	8017046 <udp_input_local_match+0x52>
    return 0;
 8017042:	2300      	movs	r3, #0
 8017044:	e02b      	b.n	801709e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017046:	79fb      	ldrb	r3, [r7, #7]
 8017048:	2b00      	cmp	r3, #0
 801704a:	d018      	beq.n	801707e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	2b00      	cmp	r3, #0
 8017050:	d013      	beq.n	801707a <udp_input_local_match+0x86>
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	681b      	ldr	r3, [r3, #0]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d00f      	beq.n	801707a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801705a:	4b17      	ldr	r3, [pc, #92]	; (80170b8 <udp_input_local_match+0xc4>)
 801705c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801705e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017062:	d00a      	beq.n	801707a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	681a      	ldr	r2, [r3, #0]
 8017068:	4b13      	ldr	r3, [pc, #76]	; (80170b8 <udp_input_local_match+0xc4>)
 801706a:	695b      	ldr	r3, [r3, #20]
 801706c:	405a      	eors	r2, r3
 801706e:	68bb      	ldr	r3, [r7, #8]
 8017070:	3308      	adds	r3, #8
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017076:	2b00      	cmp	r3, #0
 8017078:	d110      	bne.n	801709c <udp_input_local_match+0xa8>
          return 1;
 801707a:	2301      	movs	r3, #1
 801707c:	e00f      	b.n	801709e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d009      	beq.n	8017098 <udp_input_local_match+0xa4>
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	2b00      	cmp	r3, #0
 801708a:	d005      	beq.n	8017098 <udp_input_local_match+0xa4>
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	681a      	ldr	r2, [r3, #0]
 8017090:	4b09      	ldr	r3, [pc, #36]	; (80170b8 <udp_input_local_match+0xc4>)
 8017092:	695b      	ldr	r3, [r3, #20]
 8017094:	429a      	cmp	r2, r3
 8017096:	d101      	bne.n	801709c <udp_input_local_match+0xa8>
        return 1;
 8017098:	2301      	movs	r3, #1
 801709a:	e000      	b.n	801709e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801709c:	2300      	movs	r3, #0
}
 801709e:	4618      	mov	r0, r3
 80170a0:	3710      	adds	r7, #16
 80170a2:	46bd      	mov	sp, r7
 80170a4:	bd80      	pop	{r7, pc}
 80170a6:	bf00      	nop
 80170a8:	0801dbe0 	.word	0x0801dbe0
 80170ac:	0801dc10 	.word	0x0801dc10
 80170b0:	0801dc34 	.word	0x0801dc34
 80170b4:	0801dc5c 	.word	0x0801dc5c
 80170b8:	20008290 	.word	0x20008290

080170bc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80170bc:	b590      	push	{r4, r7, lr}
 80170be:	b08d      	sub	sp, #52	; 0x34
 80170c0:	af02      	add	r7, sp, #8
 80170c2:	6078      	str	r0, [r7, #4]
 80170c4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80170c6:	2300      	movs	r3, #0
 80170c8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d105      	bne.n	80170dc <udp_input+0x20>
 80170d0:	4b7c      	ldr	r3, [pc, #496]	; (80172c4 <udp_input+0x208>)
 80170d2:	22cf      	movs	r2, #207	; 0xcf
 80170d4:	497c      	ldr	r1, [pc, #496]	; (80172c8 <udp_input+0x20c>)
 80170d6:	487d      	ldr	r0, [pc, #500]	; (80172cc <udp_input+0x210>)
 80170d8:	f003 f854 	bl	801a184 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80170dc:	683b      	ldr	r3, [r7, #0]
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d105      	bne.n	80170ee <udp_input+0x32>
 80170e2:	4b78      	ldr	r3, [pc, #480]	; (80172c4 <udp_input+0x208>)
 80170e4:	22d0      	movs	r2, #208	; 0xd0
 80170e6:	497a      	ldr	r1, [pc, #488]	; (80172d0 <udp_input+0x214>)
 80170e8:	4878      	ldr	r0, [pc, #480]	; (80172cc <udp_input+0x210>)
 80170ea:	f003 f84b 	bl	801a184 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	895b      	ldrh	r3, [r3, #10]
 80170f2:	2b07      	cmp	r3, #7
 80170f4:	d803      	bhi.n	80170fe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80170f6:	6878      	ldr	r0, [r7, #4]
 80170f8:	f7f9 fa9c 	bl	8010634 <pbuf_free>
    goto end;
 80170fc:	e0de      	b.n	80172bc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	685b      	ldr	r3, [r3, #4]
 8017102:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017104:	4b73      	ldr	r3, [pc, #460]	; (80172d4 <udp_input+0x218>)
 8017106:	695b      	ldr	r3, [r3, #20]
 8017108:	4a72      	ldr	r2, [pc, #456]	; (80172d4 <udp_input+0x218>)
 801710a:	6812      	ldr	r2, [r2, #0]
 801710c:	4611      	mov	r1, r2
 801710e:	4618      	mov	r0, r3
 8017110:	f001 fd96 	bl	8018c40 <ip4_addr_isbroadcast_u32>
 8017114:	4603      	mov	r3, r0
 8017116:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017118:	697b      	ldr	r3, [r7, #20]
 801711a:	881b      	ldrh	r3, [r3, #0]
 801711c:	b29b      	uxth	r3, r3
 801711e:	4618      	mov	r0, r3
 8017120:	f7f7 fedc 	bl	800eedc <lwip_htons>
 8017124:	4603      	mov	r3, r0
 8017126:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017128:	697b      	ldr	r3, [r7, #20]
 801712a:	885b      	ldrh	r3, [r3, #2]
 801712c:	b29b      	uxth	r3, r3
 801712e:	4618      	mov	r0, r3
 8017130:	f7f7 fed4 	bl	800eedc <lwip_htons>
 8017134:	4603      	mov	r3, r0
 8017136:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017138:	2300      	movs	r3, #0
 801713a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801713c:	2300      	movs	r3, #0
 801713e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017140:	2300      	movs	r3, #0
 8017142:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017144:	4b64      	ldr	r3, [pc, #400]	; (80172d8 <udp_input+0x21c>)
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	627b      	str	r3, [r7, #36]	; 0x24
 801714a:	e054      	b.n	80171f6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801714e:	8a5b      	ldrh	r3, [r3, #18]
 8017150:	89fa      	ldrh	r2, [r7, #14]
 8017152:	429a      	cmp	r2, r3
 8017154:	d14a      	bne.n	80171ec <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017156:	7cfb      	ldrb	r3, [r7, #19]
 8017158:	461a      	mov	r2, r3
 801715a:	6839      	ldr	r1, [r7, #0]
 801715c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801715e:	f7ff ff49 	bl	8016ff4 <udp_input_local_match>
 8017162:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017164:	2b00      	cmp	r3, #0
 8017166:	d041      	beq.n	80171ec <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801716a:	7c1b      	ldrb	r3, [r3, #16]
 801716c:	f003 0304 	and.w	r3, r3, #4
 8017170:	2b00      	cmp	r3, #0
 8017172:	d11d      	bne.n	80171b0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017174:	69fb      	ldr	r3, [r7, #28]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d102      	bne.n	8017180 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801717c:	61fb      	str	r3, [r7, #28]
 801717e:	e017      	b.n	80171b0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017180:	7cfb      	ldrb	r3, [r7, #19]
 8017182:	2b00      	cmp	r3, #0
 8017184:	d014      	beq.n	80171b0 <udp_input+0xf4>
 8017186:	4b53      	ldr	r3, [pc, #332]	; (80172d4 <udp_input+0x218>)
 8017188:	695b      	ldr	r3, [r3, #20]
 801718a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801718e:	d10f      	bne.n	80171b0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017190:	69fb      	ldr	r3, [r7, #28]
 8017192:	681a      	ldr	r2, [r3, #0]
 8017194:	683b      	ldr	r3, [r7, #0]
 8017196:	3304      	adds	r3, #4
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	429a      	cmp	r2, r3
 801719c:	d008      	beq.n	80171b0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171a0:	681a      	ldr	r2, [r3, #0]
 80171a2:	683b      	ldr	r3, [r7, #0]
 80171a4:	3304      	adds	r3, #4
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	429a      	cmp	r2, r3
 80171aa:	d101      	bne.n	80171b0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80171ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ae:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80171b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171b2:	8a9b      	ldrh	r3, [r3, #20]
 80171b4:	8a3a      	ldrh	r2, [r7, #16]
 80171b6:	429a      	cmp	r2, r3
 80171b8:	d118      	bne.n	80171ec <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80171ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171bc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d005      	beq.n	80171ce <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80171c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171c4:	685a      	ldr	r2, [r3, #4]
 80171c6:	4b43      	ldr	r3, [pc, #268]	; (80172d4 <udp_input+0x218>)
 80171c8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80171ca:	429a      	cmp	r2, r3
 80171cc:	d10e      	bne.n	80171ec <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80171ce:	6a3b      	ldr	r3, [r7, #32]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d014      	beq.n	80171fe <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80171d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171d6:	68da      	ldr	r2, [r3, #12]
 80171d8:	6a3b      	ldr	r3, [r7, #32]
 80171da:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80171dc:	4b3e      	ldr	r3, [pc, #248]	; (80172d8 <udp_input+0x21c>)
 80171de:	681a      	ldr	r2, [r3, #0]
 80171e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171e2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80171e4:	4a3c      	ldr	r2, [pc, #240]	; (80172d8 <udp_input+0x21c>)
 80171e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171e8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80171ea:	e008      	b.n	80171fe <udp_input+0x142>
      }
    }

    prev = pcb;
 80171ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ee:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80171f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171f2:	68db      	ldr	r3, [r3, #12]
 80171f4:	627b      	str	r3, [r7, #36]	; 0x24
 80171f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d1a7      	bne.n	801714c <udp_input+0x90>
 80171fc:	e000      	b.n	8017200 <udp_input+0x144>
        break;
 80171fe:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017202:	2b00      	cmp	r3, #0
 8017204:	d101      	bne.n	801720a <udp_input+0x14e>
    pcb = uncon_pcb;
 8017206:	69fb      	ldr	r3, [r7, #28]
 8017208:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801720c:	2b00      	cmp	r3, #0
 801720e:	d002      	beq.n	8017216 <udp_input+0x15a>
    for_us = 1;
 8017210:	2301      	movs	r3, #1
 8017212:	76fb      	strb	r3, [r7, #27]
 8017214:	e00a      	b.n	801722c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017216:	683b      	ldr	r3, [r7, #0]
 8017218:	3304      	adds	r3, #4
 801721a:	681a      	ldr	r2, [r3, #0]
 801721c:	4b2d      	ldr	r3, [pc, #180]	; (80172d4 <udp_input+0x218>)
 801721e:	695b      	ldr	r3, [r3, #20]
 8017220:	429a      	cmp	r2, r3
 8017222:	bf0c      	ite	eq
 8017224:	2301      	moveq	r3, #1
 8017226:	2300      	movne	r3, #0
 8017228:	b2db      	uxtb	r3, r3
 801722a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801722c:	7efb      	ldrb	r3, [r7, #27]
 801722e:	2b00      	cmp	r3, #0
 8017230:	d041      	beq.n	80172b6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017232:	2108      	movs	r1, #8
 8017234:	6878      	ldr	r0, [r7, #4]
 8017236:	f7f9 f977 	bl	8010528 <pbuf_remove_header>
 801723a:	4603      	mov	r3, r0
 801723c:	2b00      	cmp	r3, #0
 801723e:	d00a      	beq.n	8017256 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017240:	4b20      	ldr	r3, [pc, #128]	; (80172c4 <udp_input+0x208>)
 8017242:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017246:	4925      	ldr	r1, [pc, #148]	; (80172dc <udp_input+0x220>)
 8017248:	4820      	ldr	r0, [pc, #128]	; (80172cc <udp_input+0x210>)
 801724a:	f002 ff9b 	bl	801a184 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801724e:	6878      	ldr	r0, [r7, #4]
 8017250:	f7f9 f9f0 	bl	8010634 <pbuf_free>
      goto end;
 8017254:	e032      	b.n	80172bc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017258:	2b00      	cmp	r3, #0
 801725a:	d012      	beq.n	8017282 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801725e:	699b      	ldr	r3, [r3, #24]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d00a      	beq.n	801727a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017266:	699c      	ldr	r4, [r3, #24]
 8017268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801726a:	69d8      	ldr	r0, [r3, #28]
 801726c:	8a3b      	ldrh	r3, [r7, #16]
 801726e:	9300      	str	r3, [sp, #0]
 8017270:	4b1b      	ldr	r3, [pc, #108]	; (80172e0 <udp_input+0x224>)
 8017272:	687a      	ldr	r2, [r7, #4]
 8017274:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017276:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017278:	e021      	b.n	80172be <udp_input+0x202>
        pbuf_free(p);
 801727a:	6878      	ldr	r0, [r7, #4]
 801727c:	f7f9 f9da 	bl	8010634 <pbuf_free>
        goto end;
 8017280:	e01c      	b.n	80172bc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017282:	7cfb      	ldrb	r3, [r7, #19]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d112      	bne.n	80172ae <udp_input+0x1f2>
 8017288:	4b12      	ldr	r3, [pc, #72]	; (80172d4 <udp_input+0x218>)
 801728a:	695b      	ldr	r3, [r3, #20]
 801728c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017290:	2be0      	cmp	r3, #224	; 0xe0
 8017292:	d00c      	beq.n	80172ae <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017294:	4b0f      	ldr	r3, [pc, #60]	; (80172d4 <udp_input+0x218>)
 8017296:	899b      	ldrh	r3, [r3, #12]
 8017298:	3308      	adds	r3, #8
 801729a:	b29b      	uxth	r3, r3
 801729c:	b21b      	sxth	r3, r3
 801729e:	4619      	mov	r1, r3
 80172a0:	6878      	ldr	r0, [r7, #4]
 80172a2:	f7f9 f9b4 	bl	801060e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80172a6:	2103      	movs	r1, #3
 80172a8:	6878      	ldr	r0, [r7, #4]
 80172aa:	f001 f9a9 	bl	8018600 <icmp_dest_unreach>
      pbuf_free(p);
 80172ae:	6878      	ldr	r0, [r7, #4]
 80172b0:	f7f9 f9c0 	bl	8010634 <pbuf_free>
  return;
 80172b4:	e003      	b.n	80172be <udp_input+0x202>
    pbuf_free(p);
 80172b6:	6878      	ldr	r0, [r7, #4]
 80172b8:	f7f9 f9bc 	bl	8010634 <pbuf_free>
  return;
 80172bc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80172be:	372c      	adds	r7, #44	; 0x2c
 80172c0:	46bd      	mov	sp, r7
 80172c2:	bd90      	pop	{r4, r7, pc}
 80172c4:	0801dbe0 	.word	0x0801dbe0
 80172c8:	0801dc84 	.word	0x0801dc84
 80172cc:	0801dc34 	.word	0x0801dc34
 80172d0:	0801dc9c 	.word	0x0801dc9c
 80172d4:	20008290 	.word	0x20008290
 80172d8:	2000dbbc 	.word	0x2000dbbc
 80172dc:	0801dcb8 	.word	0x0801dcb8
 80172e0:	200082a0 	.word	0x200082a0

080172e4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b086      	sub	sp, #24
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	60f8      	str	r0, [r7, #12]
 80172ec:	60b9      	str	r1, [r7, #8]
 80172ee:	4613      	mov	r3, r2
 80172f0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80172f2:	68bb      	ldr	r3, [r7, #8]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d101      	bne.n	80172fc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80172f8:	4b39      	ldr	r3, [pc, #228]	; (80173e0 <udp_bind+0xfc>)
 80172fa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d109      	bne.n	8017316 <udp_bind+0x32>
 8017302:	4b38      	ldr	r3, [pc, #224]	; (80173e4 <udp_bind+0x100>)
 8017304:	f240 32b7 	movw	r2, #951	; 0x3b7
 8017308:	4937      	ldr	r1, [pc, #220]	; (80173e8 <udp_bind+0x104>)
 801730a:	4838      	ldr	r0, [pc, #224]	; (80173ec <udp_bind+0x108>)
 801730c:	f002 ff3a 	bl	801a184 <iprintf>
 8017310:	f06f 030f 	mvn.w	r3, #15
 8017314:	e060      	b.n	80173d8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8017316:	2300      	movs	r3, #0
 8017318:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801731a:	4b35      	ldr	r3, [pc, #212]	; (80173f0 <udp_bind+0x10c>)
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	617b      	str	r3, [r7, #20]
 8017320:	e009      	b.n	8017336 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8017322:	68fa      	ldr	r2, [r7, #12]
 8017324:	697b      	ldr	r3, [r7, #20]
 8017326:	429a      	cmp	r2, r3
 8017328:	d102      	bne.n	8017330 <udp_bind+0x4c>
      rebind = 1;
 801732a:	2301      	movs	r3, #1
 801732c:	74fb      	strb	r3, [r7, #19]
      break;
 801732e:	e005      	b.n	801733c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017330:	697b      	ldr	r3, [r7, #20]
 8017332:	68db      	ldr	r3, [r3, #12]
 8017334:	617b      	str	r3, [r7, #20]
 8017336:	697b      	ldr	r3, [r7, #20]
 8017338:	2b00      	cmp	r3, #0
 801733a:	d1f2      	bne.n	8017322 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801733c:	88fb      	ldrh	r3, [r7, #6]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d109      	bne.n	8017356 <udp_bind+0x72>
    port = udp_new_port();
 8017342:	f7ff fe1f 	bl	8016f84 <udp_new_port>
 8017346:	4603      	mov	r3, r0
 8017348:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801734a:	88fb      	ldrh	r3, [r7, #6]
 801734c:	2b00      	cmp	r3, #0
 801734e:	d12c      	bne.n	80173aa <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017350:	f06f 0307 	mvn.w	r3, #7
 8017354:	e040      	b.n	80173d8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017356:	4b26      	ldr	r3, [pc, #152]	; (80173f0 <udp_bind+0x10c>)
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	617b      	str	r3, [r7, #20]
 801735c:	e022      	b.n	80173a4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801735e:	68fa      	ldr	r2, [r7, #12]
 8017360:	697b      	ldr	r3, [r7, #20]
 8017362:	429a      	cmp	r2, r3
 8017364:	d01b      	beq.n	801739e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8017366:	697b      	ldr	r3, [r7, #20]
 8017368:	8a5b      	ldrh	r3, [r3, #18]
 801736a:	88fa      	ldrh	r2, [r7, #6]
 801736c:	429a      	cmp	r2, r3
 801736e:	d116      	bne.n	801739e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017370:	697b      	ldr	r3, [r7, #20]
 8017372:	681a      	ldr	r2, [r3, #0]
 8017374:	68bb      	ldr	r3, [r7, #8]
 8017376:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017378:	429a      	cmp	r2, r3
 801737a:	d00d      	beq.n	8017398 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801737c:	68bb      	ldr	r3, [r7, #8]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d00a      	beq.n	8017398 <udp_bind+0xb4>
 8017382:	68bb      	ldr	r3, [r7, #8]
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	2b00      	cmp	r3, #0
 8017388:	d006      	beq.n	8017398 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801738a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801738c:	2b00      	cmp	r3, #0
 801738e:	d003      	beq.n	8017398 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017390:	697b      	ldr	r3, [r7, #20]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	2b00      	cmp	r3, #0
 8017396:	d102      	bne.n	801739e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017398:	f06f 0307 	mvn.w	r3, #7
 801739c:	e01c      	b.n	80173d8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801739e:	697b      	ldr	r3, [r7, #20]
 80173a0:	68db      	ldr	r3, [r3, #12]
 80173a2:	617b      	str	r3, [r7, #20]
 80173a4:	697b      	ldr	r3, [r7, #20]
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d1d9      	bne.n	801735e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80173aa:	68bb      	ldr	r3, [r7, #8]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d002      	beq.n	80173b6 <udp_bind+0xd2>
 80173b0:	68bb      	ldr	r3, [r7, #8]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	e000      	b.n	80173b8 <udp_bind+0xd4>
 80173b6:	2300      	movs	r3, #0
 80173b8:	68fa      	ldr	r2, [r7, #12]
 80173ba:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	88fa      	ldrh	r2, [r7, #6]
 80173c0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80173c2:	7cfb      	ldrb	r3, [r7, #19]
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d106      	bne.n	80173d6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80173c8:	4b09      	ldr	r3, [pc, #36]	; (80173f0 <udp_bind+0x10c>)
 80173ca:	681a      	ldr	r2, [r3, #0]
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80173d0:	4a07      	ldr	r2, [pc, #28]	; (80173f0 <udp_bind+0x10c>)
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80173d6:	2300      	movs	r3, #0
}
 80173d8:	4618      	mov	r0, r3
 80173da:	3718      	adds	r7, #24
 80173dc:	46bd      	mov	sp, r7
 80173de:	bd80      	pop	{r7, pc}
 80173e0:	0801e824 	.word	0x0801e824
 80173e4:	0801dbe0 	.word	0x0801dbe0
 80173e8:	0801dea8 	.word	0x0801dea8
 80173ec:	0801dc34 	.word	0x0801dc34
 80173f0:	2000dbbc 	.word	0x2000dbbc

080173f4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80173f4:	b580      	push	{r7, lr}
 80173f6:	b084      	sub	sp, #16
 80173f8:	af00      	add	r7, sp, #0
 80173fa:	60f8      	str	r0, [r7, #12]
 80173fc:	60b9      	str	r1, [r7, #8]
 80173fe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d107      	bne.n	8017416 <udp_recv+0x22>
 8017406:	4b08      	ldr	r3, [pc, #32]	; (8017428 <udp_recv+0x34>)
 8017408:	f240 428a 	movw	r2, #1162	; 0x48a
 801740c:	4907      	ldr	r1, [pc, #28]	; (801742c <udp_recv+0x38>)
 801740e:	4808      	ldr	r0, [pc, #32]	; (8017430 <udp_recv+0x3c>)
 8017410:	f002 feb8 	bl	801a184 <iprintf>
 8017414:	e005      	b.n	8017422 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	68ba      	ldr	r2, [r7, #8]
 801741a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	687a      	ldr	r2, [r7, #4]
 8017420:	61da      	str	r2, [r3, #28]
}
 8017422:	3710      	adds	r7, #16
 8017424:	46bd      	mov	sp, r7
 8017426:	bd80      	pop	{r7, pc}
 8017428:	0801dbe0 	.word	0x0801dbe0
 801742c:	0801df14 	.word	0x0801df14
 8017430:	0801dc34 	.word	0x0801dc34

08017434 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b084      	sub	sp, #16
 8017438:	af00      	add	r7, sp, #0
 801743a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d107      	bne.n	8017452 <udp_remove+0x1e>
 8017442:	4b19      	ldr	r3, [pc, #100]	; (80174a8 <udp_remove+0x74>)
 8017444:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8017448:	4918      	ldr	r1, [pc, #96]	; (80174ac <udp_remove+0x78>)
 801744a:	4819      	ldr	r0, [pc, #100]	; (80174b0 <udp_remove+0x7c>)
 801744c:	f002 fe9a 	bl	801a184 <iprintf>
 8017450:	e026      	b.n	80174a0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8017452:	4b18      	ldr	r3, [pc, #96]	; (80174b4 <udp_remove+0x80>)
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	687a      	ldr	r2, [r7, #4]
 8017458:	429a      	cmp	r2, r3
 801745a:	d105      	bne.n	8017468 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801745c:	4b15      	ldr	r3, [pc, #84]	; (80174b4 <udp_remove+0x80>)
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	68db      	ldr	r3, [r3, #12]
 8017462:	4a14      	ldr	r2, [pc, #80]	; (80174b4 <udp_remove+0x80>)
 8017464:	6013      	str	r3, [r2, #0]
 8017466:	e017      	b.n	8017498 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017468:	4b12      	ldr	r3, [pc, #72]	; (80174b4 <udp_remove+0x80>)
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	60fb      	str	r3, [r7, #12]
 801746e:	e010      	b.n	8017492 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	68db      	ldr	r3, [r3, #12]
 8017474:	2b00      	cmp	r3, #0
 8017476:	d009      	beq.n	801748c <udp_remove+0x58>
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	68db      	ldr	r3, [r3, #12]
 801747c:	687a      	ldr	r2, [r7, #4]
 801747e:	429a      	cmp	r2, r3
 8017480:	d104      	bne.n	801748c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	68da      	ldr	r2, [r3, #12]
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	60da      	str	r2, [r3, #12]
        break;
 801748a:	e005      	b.n	8017498 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	68db      	ldr	r3, [r3, #12]
 8017490:	60fb      	str	r3, [r7, #12]
 8017492:	68fb      	ldr	r3, [r7, #12]
 8017494:	2b00      	cmp	r3, #0
 8017496:	d1eb      	bne.n	8017470 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8017498:	6879      	ldr	r1, [r7, #4]
 801749a:	2000      	movs	r0, #0
 801749c:	f7f8 fa26 	bl	800f8ec <memp_free>
}
 80174a0:	3710      	adds	r7, #16
 80174a2:	46bd      	mov	sp, r7
 80174a4:	bd80      	pop	{r7, pc}
 80174a6:	bf00      	nop
 80174a8:	0801dbe0 	.word	0x0801dbe0
 80174ac:	0801df2c 	.word	0x0801df2c
 80174b0:	0801dc34 	.word	0x0801dc34
 80174b4:	2000dbbc 	.word	0x2000dbbc

080174b8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b082      	sub	sp, #8
 80174bc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80174be:	2000      	movs	r0, #0
 80174c0:	f7f8 f9c2 	bl	800f848 <memp_malloc>
 80174c4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d007      	beq.n	80174dc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80174cc:	2220      	movs	r2, #32
 80174ce:	2100      	movs	r1, #0
 80174d0:	6878      	ldr	r0, [r7, #4]
 80174d2:	f002 fdf4 	bl	801a0be <memset>
    pcb->ttl = UDP_TTL;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	22ff      	movs	r2, #255	; 0xff
 80174da:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80174dc:	687b      	ldr	r3, [r7, #4]
}
 80174de:	4618      	mov	r0, r3
 80174e0:	3708      	adds	r7, #8
 80174e2:	46bd      	mov	sp, r7
 80174e4:	bd80      	pop	{r7, pc}

080174e6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80174e6:	b580      	push	{r7, lr}
 80174e8:	b084      	sub	sp, #16
 80174ea:	af00      	add	r7, sp, #0
 80174ec:	4603      	mov	r3, r0
 80174ee:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80174f0:	f7ff ffe2 	bl	80174b8 <udp_new>
 80174f4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80174f6:	68fb      	ldr	r3, [r7, #12]
}
 80174f8:	4618      	mov	r0, r3
 80174fa:	3710      	adds	r7, #16
 80174fc:	46bd      	mov	sp, r7
 80174fe:	bd80      	pop	{r7, pc}

08017500 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017500:	b480      	push	{r7}
 8017502:	b085      	sub	sp, #20
 8017504:	af00      	add	r7, sp, #0
 8017506:	6078      	str	r0, [r7, #4]
 8017508:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	2b00      	cmp	r3, #0
 801750e:	d01e      	beq.n	801754e <udp_netif_ip_addr_changed+0x4e>
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	2b00      	cmp	r3, #0
 8017516:	d01a      	beq.n	801754e <udp_netif_ip_addr_changed+0x4e>
 8017518:	683b      	ldr	r3, [r7, #0]
 801751a:	2b00      	cmp	r3, #0
 801751c:	d017      	beq.n	801754e <udp_netif_ip_addr_changed+0x4e>
 801751e:	683b      	ldr	r3, [r7, #0]
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d013      	beq.n	801754e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017526:	4b0d      	ldr	r3, [pc, #52]	; (801755c <udp_netif_ip_addr_changed+0x5c>)
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	60fb      	str	r3, [r7, #12]
 801752c:	e00c      	b.n	8017548 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	681a      	ldr	r2, [r3, #0]
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	429a      	cmp	r2, r3
 8017538:	d103      	bne.n	8017542 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801753a:	683b      	ldr	r3, [r7, #0]
 801753c:	681a      	ldr	r2, [r3, #0]
 801753e:	68fb      	ldr	r3, [r7, #12]
 8017540:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	68db      	ldr	r3, [r3, #12]
 8017546:	60fb      	str	r3, [r7, #12]
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	2b00      	cmp	r3, #0
 801754c:	d1ef      	bne.n	801752e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801754e:	bf00      	nop
 8017550:	3714      	adds	r7, #20
 8017552:	46bd      	mov	sp, r7
 8017554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017558:	4770      	bx	lr
 801755a:	bf00      	nop
 801755c:	2000dbbc 	.word	0x2000dbbc

08017560 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017560:	b580      	push	{r7, lr}
 8017562:	b082      	sub	sp, #8
 8017564:	af00      	add	r7, sp, #0
 8017566:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017568:	4915      	ldr	r1, [pc, #84]	; (80175c0 <etharp_free_entry+0x60>)
 801756a:	687a      	ldr	r2, [r7, #4]
 801756c:	4613      	mov	r3, r2
 801756e:	005b      	lsls	r3, r3, #1
 8017570:	4413      	add	r3, r2
 8017572:	00db      	lsls	r3, r3, #3
 8017574:	440b      	add	r3, r1
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	2b00      	cmp	r3, #0
 801757a:	d013      	beq.n	80175a4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801757c:	4910      	ldr	r1, [pc, #64]	; (80175c0 <etharp_free_entry+0x60>)
 801757e:	687a      	ldr	r2, [r7, #4]
 8017580:	4613      	mov	r3, r2
 8017582:	005b      	lsls	r3, r3, #1
 8017584:	4413      	add	r3, r2
 8017586:	00db      	lsls	r3, r3, #3
 8017588:	440b      	add	r3, r1
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	4618      	mov	r0, r3
 801758e:	f7f9 f851 	bl	8010634 <pbuf_free>
    arp_table[i].q = NULL;
 8017592:	490b      	ldr	r1, [pc, #44]	; (80175c0 <etharp_free_entry+0x60>)
 8017594:	687a      	ldr	r2, [r7, #4]
 8017596:	4613      	mov	r3, r2
 8017598:	005b      	lsls	r3, r3, #1
 801759a:	4413      	add	r3, r2
 801759c:	00db      	lsls	r3, r3, #3
 801759e:	440b      	add	r3, r1
 80175a0:	2200      	movs	r2, #0
 80175a2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80175a4:	4906      	ldr	r1, [pc, #24]	; (80175c0 <etharp_free_entry+0x60>)
 80175a6:	687a      	ldr	r2, [r7, #4]
 80175a8:	4613      	mov	r3, r2
 80175aa:	005b      	lsls	r3, r3, #1
 80175ac:	4413      	add	r3, r2
 80175ae:	00db      	lsls	r3, r3, #3
 80175b0:	440b      	add	r3, r1
 80175b2:	3314      	adds	r3, #20
 80175b4:	2200      	movs	r2, #0
 80175b6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80175b8:	bf00      	nop
 80175ba:	3708      	adds	r7, #8
 80175bc:	46bd      	mov	sp, r7
 80175be:	bd80      	pop	{r7, pc}
 80175c0:	20004b08 	.word	0x20004b08

080175c4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80175c4:	b580      	push	{r7, lr}
 80175c6:	b082      	sub	sp, #8
 80175c8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80175ca:	2300      	movs	r3, #0
 80175cc:	607b      	str	r3, [r7, #4]
 80175ce:	e096      	b.n	80176fe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80175d0:	494f      	ldr	r1, [pc, #316]	; (8017710 <etharp_tmr+0x14c>)
 80175d2:	687a      	ldr	r2, [r7, #4]
 80175d4:	4613      	mov	r3, r2
 80175d6:	005b      	lsls	r3, r3, #1
 80175d8:	4413      	add	r3, r2
 80175da:	00db      	lsls	r3, r3, #3
 80175dc:	440b      	add	r3, r1
 80175de:	3314      	adds	r3, #20
 80175e0:	781b      	ldrb	r3, [r3, #0]
 80175e2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80175e4:	78fb      	ldrb	r3, [r7, #3]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	f000 8086 	beq.w	80176f8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80175ec:	4948      	ldr	r1, [pc, #288]	; (8017710 <etharp_tmr+0x14c>)
 80175ee:	687a      	ldr	r2, [r7, #4]
 80175f0:	4613      	mov	r3, r2
 80175f2:	005b      	lsls	r3, r3, #1
 80175f4:	4413      	add	r3, r2
 80175f6:	00db      	lsls	r3, r3, #3
 80175f8:	440b      	add	r3, r1
 80175fa:	3312      	adds	r3, #18
 80175fc:	881b      	ldrh	r3, [r3, #0]
 80175fe:	3301      	adds	r3, #1
 8017600:	b298      	uxth	r0, r3
 8017602:	4943      	ldr	r1, [pc, #268]	; (8017710 <etharp_tmr+0x14c>)
 8017604:	687a      	ldr	r2, [r7, #4]
 8017606:	4613      	mov	r3, r2
 8017608:	005b      	lsls	r3, r3, #1
 801760a:	4413      	add	r3, r2
 801760c:	00db      	lsls	r3, r3, #3
 801760e:	440b      	add	r3, r1
 8017610:	3312      	adds	r3, #18
 8017612:	4602      	mov	r2, r0
 8017614:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017616:	493e      	ldr	r1, [pc, #248]	; (8017710 <etharp_tmr+0x14c>)
 8017618:	687a      	ldr	r2, [r7, #4]
 801761a:	4613      	mov	r3, r2
 801761c:	005b      	lsls	r3, r3, #1
 801761e:	4413      	add	r3, r2
 8017620:	00db      	lsls	r3, r3, #3
 8017622:	440b      	add	r3, r1
 8017624:	3312      	adds	r3, #18
 8017626:	881b      	ldrh	r3, [r3, #0]
 8017628:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801762c:	d215      	bcs.n	801765a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801762e:	4938      	ldr	r1, [pc, #224]	; (8017710 <etharp_tmr+0x14c>)
 8017630:	687a      	ldr	r2, [r7, #4]
 8017632:	4613      	mov	r3, r2
 8017634:	005b      	lsls	r3, r3, #1
 8017636:	4413      	add	r3, r2
 8017638:	00db      	lsls	r3, r3, #3
 801763a:	440b      	add	r3, r1
 801763c:	3314      	adds	r3, #20
 801763e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017640:	2b01      	cmp	r3, #1
 8017642:	d10e      	bne.n	8017662 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017644:	4932      	ldr	r1, [pc, #200]	; (8017710 <etharp_tmr+0x14c>)
 8017646:	687a      	ldr	r2, [r7, #4]
 8017648:	4613      	mov	r3, r2
 801764a:	005b      	lsls	r3, r3, #1
 801764c:	4413      	add	r3, r2
 801764e:	00db      	lsls	r3, r3, #3
 8017650:	440b      	add	r3, r1
 8017652:	3312      	adds	r3, #18
 8017654:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017656:	2b04      	cmp	r3, #4
 8017658:	d903      	bls.n	8017662 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801765a:	6878      	ldr	r0, [r7, #4]
 801765c:	f7ff ff80 	bl	8017560 <etharp_free_entry>
 8017660:	e04a      	b.n	80176f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8017662:	492b      	ldr	r1, [pc, #172]	; (8017710 <etharp_tmr+0x14c>)
 8017664:	687a      	ldr	r2, [r7, #4]
 8017666:	4613      	mov	r3, r2
 8017668:	005b      	lsls	r3, r3, #1
 801766a:	4413      	add	r3, r2
 801766c:	00db      	lsls	r3, r3, #3
 801766e:	440b      	add	r3, r1
 8017670:	3314      	adds	r3, #20
 8017672:	781b      	ldrb	r3, [r3, #0]
 8017674:	2b03      	cmp	r3, #3
 8017676:	d10a      	bne.n	801768e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017678:	4925      	ldr	r1, [pc, #148]	; (8017710 <etharp_tmr+0x14c>)
 801767a:	687a      	ldr	r2, [r7, #4]
 801767c:	4613      	mov	r3, r2
 801767e:	005b      	lsls	r3, r3, #1
 8017680:	4413      	add	r3, r2
 8017682:	00db      	lsls	r3, r3, #3
 8017684:	440b      	add	r3, r1
 8017686:	3314      	adds	r3, #20
 8017688:	2204      	movs	r2, #4
 801768a:	701a      	strb	r2, [r3, #0]
 801768c:	e034      	b.n	80176f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801768e:	4920      	ldr	r1, [pc, #128]	; (8017710 <etharp_tmr+0x14c>)
 8017690:	687a      	ldr	r2, [r7, #4]
 8017692:	4613      	mov	r3, r2
 8017694:	005b      	lsls	r3, r3, #1
 8017696:	4413      	add	r3, r2
 8017698:	00db      	lsls	r3, r3, #3
 801769a:	440b      	add	r3, r1
 801769c:	3314      	adds	r3, #20
 801769e:	781b      	ldrb	r3, [r3, #0]
 80176a0:	2b04      	cmp	r3, #4
 80176a2:	d10a      	bne.n	80176ba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80176a4:	491a      	ldr	r1, [pc, #104]	; (8017710 <etharp_tmr+0x14c>)
 80176a6:	687a      	ldr	r2, [r7, #4]
 80176a8:	4613      	mov	r3, r2
 80176aa:	005b      	lsls	r3, r3, #1
 80176ac:	4413      	add	r3, r2
 80176ae:	00db      	lsls	r3, r3, #3
 80176b0:	440b      	add	r3, r1
 80176b2:	3314      	adds	r3, #20
 80176b4:	2202      	movs	r2, #2
 80176b6:	701a      	strb	r2, [r3, #0]
 80176b8:	e01e      	b.n	80176f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80176ba:	4915      	ldr	r1, [pc, #84]	; (8017710 <etharp_tmr+0x14c>)
 80176bc:	687a      	ldr	r2, [r7, #4]
 80176be:	4613      	mov	r3, r2
 80176c0:	005b      	lsls	r3, r3, #1
 80176c2:	4413      	add	r3, r2
 80176c4:	00db      	lsls	r3, r3, #3
 80176c6:	440b      	add	r3, r1
 80176c8:	3314      	adds	r3, #20
 80176ca:	781b      	ldrb	r3, [r3, #0]
 80176cc:	2b01      	cmp	r3, #1
 80176ce:	d113      	bne.n	80176f8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80176d0:	490f      	ldr	r1, [pc, #60]	; (8017710 <etharp_tmr+0x14c>)
 80176d2:	687a      	ldr	r2, [r7, #4]
 80176d4:	4613      	mov	r3, r2
 80176d6:	005b      	lsls	r3, r3, #1
 80176d8:	4413      	add	r3, r2
 80176da:	00db      	lsls	r3, r3, #3
 80176dc:	440b      	add	r3, r1
 80176de:	3308      	adds	r3, #8
 80176e0:	6818      	ldr	r0, [r3, #0]
 80176e2:	687a      	ldr	r2, [r7, #4]
 80176e4:	4613      	mov	r3, r2
 80176e6:	005b      	lsls	r3, r3, #1
 80176e8:	4413      	add	r3, r2
 80176ea:	00db      	lsls	r3, r3, #3
 80176ec:	4a08      	ldr	r2, [pc, #32]	; (8017710 <etharp_tmr+0x14c>)
 80176ee:	4413      	add	r3, r2
 80176f0:	3304      	adds	r3, #4
 80176f2:	4619      	mov	r1, r3
 80176f4:	f000 fe6e 	bl	80183d4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	3301      	adds	r3, #1
 80176fc:	607b      	str	r3, [r7, #4]
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	2b09      	cmp	r3, #9
 8017702:	f77f af65 	ble.w	80175d0 <etharp_tmr+0xc>
      }
    }
  }
}
 8017706:	bf00      	nop
 8017708:	bf00      	nop
 801770a:	3708      	adds	r7, #8
 801770c:	46bd      	mov	sp, r7
 801770e:	bd80      	pop	{r7, pc}
 8017710:	20004b08 	.word	0x20004b08

08017714 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017714:	b580      	push	{r7, lr}
 8017716:	b08a      	sub	sp, #40	; 0x28
 8017718:	af00      	add	r7, sp, #0
 801771a:	60f8      	str	r0, [r7, #12]
 801771c:	460b      	mov	r3, r1
 801771e:	607a      	str	r2, [r7, #4]
 8017720:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8017722:	230a      	movs	r3, #10
 8017724:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017726:	230a      	movs	r3, #10
 8017728:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801772a:	230a      	movs	r3, #10
 801772c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801772e:	2300      	movs	r3, #0
 8017730:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8017732:	230a      	movs	r3, #10
 8017734:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8017736:	2300      	movs	r3, #0
 8017738:	83bb      	strh	r3, [r7, #28]
 801773a:	2300      	movs	r3, #0
 801773c:	837b      	strh	r3, [r7, #26]
 801773e:	2300      	movs	r3, #0
 8017740:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017742:	2300      	movs	r3, #0
 8017744:	843b      	strh	r3, [r7, #32]
 8017746:	e0ae      	b.n	80178a6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8017748:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801774c:	49a6      	ldr	r1, [pc, #664]	; (80179e8 <etharp_find_entry+0x2d4>)
 801774e:	4613      	mov	r3, r2
 8017750:	005b      	lsls	r3, r3, #1
 8017752:	4413      	add	r3, r2
 8017754:	00db      	lsls	r3, r3, #3
 8017756:	440b      	add	r3, r1
 8017758:	3314      	adds	r3, #20
 801775a:	781b      	ldrb	r3, [r3, #0]
 801775c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801775e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017762:	2b0a      	cmp	r3, #10
 8017764:	d105      	bne.n	8017772 <etharp_find_entry+0x5e>
 8017766:	7dfb      	ldrb	r3, [r7, #23]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d102      	bne.n	8017772 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801776c:	8c3b      	ldrh	r3, [r7, #32]
 801776e:	847b      	strh	r3, [r7, #34]	; 0x22
 8017770:	e095      	b.n	801789e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017772:	7dfb      	ldrb	r3, [r7, #23]
 8017774:	2b00      	cmp	r3, #0
 8017776:	f000 8092 	beq.w	801789e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801777a:	7dfb      	ldrb	r3, [r7, #23]
 801777c:	2b01      	cmp	r3, #1
 801777e:	d009      	beq.n	8017794 <etharp_find_entry+0x80>
 8017780:	7dfb      	ldrb	r3, [r7, #23]
 8017782:	2b01      	cmp	r3, #1
 8017784:	d806      	bhi.n	8017794 <etharp_find_entry+0x80>
 8017786:	4b99      	ldr	r3, [pc, #612]	; (80179ec <etharp_find_entry+0x2d8>)
 8017788:	f240 1223 	movw	r2, #291	; 0x123
 801778c:	4998      	ldr	r1, [pc, #608]	; (80179f0 <etharp_find_entry+0x2dc>)
 801778e:	4899      	ldr	r0, [pc, #612]	; (80179f4 <etharp_find_entry+0x2e0>)
 8017790:	f002 fcf8 	bl	801a184 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d020      	beq.n	80177dc <etharp_find_entry+0xc8>
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	6819      	ldr	r1, [r3, #0]
 801779e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80177a2:	4891      	ldr	r0, [pc, #580]	; (80179e8 <etharp_find_entry+0x2d4>)
 80177a4:	4613      	mov	r3, r2
 80177a6:	005b      	lsls	r3, r3, #1
 80177a8:	4413      	add	r3, r2
 80177aa:	00db      	lsls	r3, r3, #3
 80177ac:	4403      	add	r3, r0
 80177ae:	3304      	adds	r3, #4
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	4299      	cmp	r1, r3
 80177b4:	d112      	bne.n	80177dc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d00c      	beq.n	80177d6 <etharp_find_entry+0xc2>
 80177bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80177c0:	4989      	ldr	r1, [pc, #548]	; (80179e8 <etharp_find_entry+0x2d4>)
 80177c2:	4613      	mov	r3, r2
 80177c4:	005b      	lsls	r3, r3, #1
 80177c6:	4413      	add	r3, r2
 80177c8:	00db      	lsls	r3, r3, #3
 80177ca:	440b      	add	r3, r1
 80177cc:	3308      	adds	r3, #8
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	687a      	ldr	r2, [r7, #4]
 80177d2:	429a      	cmp	r2, r3
 80177d4:	d102      	bne.n	80177dc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80177d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80177da:	e100      	b.n	80179de <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80177dc:	7dfb      	ldrb	r3, [r7, #23]
 80177de:	2b01      	cmp	r3, #1
 80177e0:	d140      	bne.n	8017864 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80177e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80177e6:	4980      	ldr	r1, [pc, #512]	; (80179e8 <etharp_find_entry+0x2d4>)
 80177e8:	4613      	mov	r3, r2
 80177ea:	005b      	lsls	r3, r3, #1
 80177ec:	4413      	add	r3, r2
 80177ee:	00db      	lsls	r3, r3, #3
 80177f0:	440b      	add	r3, r1
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d01a      	beq.n	801782e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80177f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80177fc:	497a      	ldr	r1, [pc, #488]	; (80179e8 <etharp_find_entry+0x2d4>)
 80177fe:	4613      	mov	r3, r2
 8017800:	005b      	lsls	r3, r3, #1
 8017802:	4413      	add	r3, r2
 8017804:	00db      	lsls	r3, r3, #3
 8017806:	440b      	add	r3, r1
 8017808:	3312      	adds	r3, #18
 801780a:	881b      	ldrh	r3, [r3, #0]
 801780c:	8bba      	ldrh	r2, [r7, #28]
 801780e:	429a      	cmp	r2, r3
 8017810:	d845      	bhi.n	801789e <etharp_find_entry+0x18a>
            old_queue = i;
 8017812:	8c3b      	ldrh	r3, [r7, #32]
 8017814:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017816:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801781a:	4973      	ldr	r1, [pc, #460]	; (80179e8 <etharp_find_entry+0x2d4>)
 801781c:	4613      	mov	r3, r2
 801781e:	005b      	lsls	r3, r3, #1
 8017820:	4413      	add	r3, r2
 8017822:	00db      	lsls	r3, r3, #3
 8017824:	440b      	add	r3, r1
 8017826:	3312      	adds	r3, #18
 8017828:	881b      	ldrh	r3, [r3, #0]
 801782a:	83bb      	strh	r3, [r7, #28]
 801782c:	e037      	b.n	801789e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801782e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017832:	496d      	ldr	r1, [pc, #436]	; (80179e8 <etharp_find_entry+0x2d4>)
 8017834:	4613      	mov	r3, r2
 8017836:	005b      	lsls	r3, r3, #1
 8017838:	4413      	add	r3, r2
 801783a:	00db      	lsls	r3, r3, #3
 801783c:	440b      	add	r3, r1
 801783e:	3312      	adds	r3, #18
 8017840:	881b      	ldrh	r3, [r3, #0]
 8017842:	8b7a      	ldrh	r2, [r7, #26]
 8017844:	429a      	cmp	r2, r3
 8017846:	d82a      	bhi.n	801789e <etharp_find_entry+0x18a>
            old_pending = i;
 8017848:	8c3b      	ldrh	r3, [r7, #32]
 801784a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801784c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017850:	4965      	ldr	r1, [pc, #404]	; (80179e8 <etharp_find_entry+0x2d4>)
 8017852:	4613      	mov	r3, r2
 8017854:	005b      	lsls	r3, r3, #1
 8017856:	4413      	add	r3, r2
 8017858:	00db      	lsls	r3, r3, #3
 801785a:	440b      	add	r3, r1
 801785c:	3312      	adds	r3, #18
 801785e:	881b      	ldrh	r3, [r3, #0]
 8017860:	837b      	strh	r3, [r7, #26]
 8017862:	e01c      	b.n	801789e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017864:	7dfb      	ldrb	r3, [r7, #23]
 8017866:	2b01      	cmp	r3, #1
 8017868:	d919      	bls.n	801789e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801786a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801786e:	495e      	ldr	r1, [pc, #376]	; (80179e8 <etharp_find_entry+0x2d4>)
 8017870:	4613      	mov	r3, r2
 8017872:	005b      	lsls	r3, r3, #1
 8017874:	4413      	add	r3, r2
 8017876:	00db      	lsls	r3, r3, #3
 8017878:	440b      	add	r3, r1
 801787a:	3312      	adds	r3, #18
 801787c:	881b      	ldrh	r3, [r3, #0]
 801787e:	8b3a      	ldrh	r2, [r7, #24]
 8017880:	429a      	cmp	r2, r3
 8017882:	d80c      	bhi.n	801789e <etharp_find_entry+0x18a>
            old_stable = i;
 8017884:	8c3b      	ldrh	r3, [r7, #32]
 8017886:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8017888:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801788c:	4956      	ldr	r1, [pc, #344]	; (80179e8 <etharp_find_entry+0x2d4>)
 801788e:	4613      	mov	r3, r2
 8017890:	005b      	lsls	r3, r3, #1
 8017892:	4413      	add	r3, r2
 8017894:	00db      	lsls	r3, r3, #3
 8017896:	440b      	add	r3, r1
 8017898:	3312      	adds	r3, #18
 801789a:	881b      	ldrh	r3, [r3, #0]
 801789c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801789e:	8c3b      	ldrh	r3, [r7, #32]
 80178a0:	3301      	adds	r3, #1
 80178a2:	b29b      	uxth	r3, r3
 80178a4:	843b      	strh	r3, [r7, #32]
 80178a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80178aa:	2b09      	cmp	r3, #9
 80178ac:	f77f af4c 	ble.w	8017748 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80178b0:	7afb      	ldrb	r3, [r7, #11]
 80178b2:	f003 0302 	and.w	r3, r3, #2
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d108      	bne.n	80178cc <etharp_find_entry+0x1b8>
 80178ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80178be:	2b0a      	cmp	r3, #10
 80178c0:	d107      	bne.n	80178d2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80178c2:	7afb      	ldrb	r3, [r7, #11]
 80178c4:	f003 0301 	and.w	r3, r3, #1
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d102      	bne.n	80178d2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80178cc:	f04f 33ff 	mov.w	r3, #4294967295
 80178d0:	e085      	b.n	80179de <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80178d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80178d6:	2b09      	cmp	r3, #9
 80178d8:	dc02      	bgt.n	80178e0 <etharp_find_entry+0x1cc>
    i = empty;
 80178da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80178dc:	843b      	strh	r3, [r7, #32]
 80178de:	e039      	b.n	8017954 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80178e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80178e4:	2b09      	cmp	r3, #9
 80178e6:	dc14      	bgt.n	8017912 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80178e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80178ea:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80178ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80178f0:	493d      	ldr	r1, [pc, #244]	; (80179e8 <etharp_find_entry+0x2d4>)
 80178f2:	4613      	mov	r3, r2
 80178f4:	005b      	lsls	r3, r3, #1
 80178f6:	4413      	add	r3, r2
 80178f8:	00db      	lsls	r3, r3, #3
 80178fa:	440b      	add	r3, r1
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	2b00      	cmp	r3, #0
 8017900:	d018      	beq.n	8017934 <etharp_find_entry+0x220>
 8017902:	4b3a      	ldr	r3, [pc, #232]	; (80179ec <etharp_find_entry+0x2d8>)
 8017904:	f240 126d 	movw	r2, #365	; 0x16d
 8017908:	493b      	ldr	r1, [pc, #236]	; (80179f8 <etharp_find_entry+0x2e4>)
 801790a:	483a      	ldr	r0, [pc, #232]	; (80179f4 <etharp_find_entry+0x2e0>)
 801790c:	f002 fc3a 	bl	801a184 <iprintf>
 8017910:	e010      	b.n	8017934 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017912:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017916:	2b09      	cmp	r3, #9
 8017918:	dc02      	bgt.n	8017920 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801791a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801791c:	843b      	strh	r3, [r7, #32]
 801791e:	e009      	b.n	8017934 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017920:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017924:	2b09      	cmp	r3, #9
 8017926:	dc02      	bgt.n	801792e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017928:	8bfb      	ldrh	r3, [r7, #30]
 801792a:	843b      	strh	r3, [r7, #32]
 801792c:	e002      	b.n	8017934 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801792e:	f04f 33ff 	mov.w	r3, #4294967295
 8017932:	e054      	b.n	80179de <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017934:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017938:	2b09      	cmp	r3, #9
 801793a:	dd06      	ble.n	801794a <etharp_find_entry+0x236>
 801793c:	4b2b      	ldr	r3, [pc, #172]	; (80179ec <etharp_find_entry+0x2d8>)
 801793e:	f240 127f 	movw	r2, #383	; 0x17f
 8017942:	492e      	ldr	r1, [pc, #184]	; (80179fc <etharp_find_entry+0x2e8>)
 8017944:	482b      	ldr	r0, [pc, #172]	; (80179f4 <etharp_find_entry+0x2e0>)
 8017946:	f002 fc1d 	bl	801a184 <iprintf>
    etharp_free_entry(i);
 801794a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801794e:	4618      	mov	r0, r3
 8017950:	f7ff fe06 	bl	8017560 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017954:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017958:	2b09      	cmp	r3, #9
 801795a:	dd06      	ble.n	801796a <etharp_find_entry+0x256>
 801795c:	4b23      	ldr	r3, [pc, #140]	; (80179ec <etharp_find_entry+0x2d8>)
 801795e:	f240 1283 	movw	r2, #387	; 0x183
 8017962:	4926      	ldr	r1, [pc, #152]	; (80179fc <etharp_find_entry+0x2e8>)
 8017964:	4823      	ldr	r0, [pc, #140]	; (80179f4 <etharp_find_entry+0x2e0>)
 8017966:	f002 fc0d 	bl	801a184 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801796a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801796e:	491e      	ldr	r1, [pc, #120]	; (80179e8 <etharp_find_entry+0x2d4>)
 8017970:	4613      	mov	r3, r2
 8017972:	005b      	lsls	r3, r3, #1
 8017974:	4413      	add	r3, r2
 8017976:	00db      	lsls	r3, r3, #3
 8017978:	440b      	add	r3, r1
 801797a:	3314      	adds	r3, #20
 801797c:	781b      	ldrb	r3, [r3, #0]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d006      	beq.n	8017990 <etharp_find_entry+0x27c>
 8017982:	4b1a      	ldr	r3, [pc, #104]	; (80179ec <etharp_find_entry+0x2d8>)
 8017984:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017988:	491d      	ldr	r1, [pc, #116]	; (8017a00 <etharp_find_entry+0x2ec>)
 801798a:	481a      	ldr	r0, [pc, #104]	; (80179f4 <etharp_find_entry+0x2e0>)
 801798c:	f002 fbfa 	bl	801a184 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	2b00      	cmp	r3, #0
 8017994:	d00b      	beq.n	80179ae <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017996:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801799a:	68fb      	ldr	r3, [r7, #12]
 801799c:	6819      	ldr	r1, [r3, #0]
 801799e:	4812      	ldr	r0, [pc, #72]	; (80179e8 <etharp_find_entry+0x2d4>)
 80179a0:	4613      	mov	r3, r2
 80179a2:	005b      	lsls	r3, r3, #1
 80179a4:	4413      	add	r3, r2
 80179a6:	00db      	lsls	r3, r3, #3
 80179a8:	4403      	add	r3, r0
 80179aa:	3304      	adds	r3, #4
 80179ac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80179ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80179b2:	490d      	ldr	r1, [pc, #52]	; (80179e8 <etharp_find_entry+0x2d4>)
 80179b4:	4613      	mov	r3, r2
 80179b6:	005b      	lsls	r3, r3, #1
 80179b8:	4413      	add	r3, r2
 80179ba:	00db      	lsls	r3, r3, #3
 80179bc:	440b      	add	r3, r1
 80179be:	3312      	adds	r3, #18
 80179c0:	2200      	movs	r2, #0
 80179c2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80179c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80179c8:	4907      	ldr	r1, [pc, #28]	; (80179e8 <etharp_find_entry+0x2d4>)
 80179ca:	4613      	mov	r3, r2
 80179cc:	005b      	lsls	r3, r3, #1
 80179ce:	4413      	add	r3, r2
 80179d0:	00db      	lsls	r3, r3, #3
 80179d2:	440b      	add	r3, r1
 80179d4:	3308      	adds	r3, #8
 80179d6:	687a      	ldr	r2, [r7, #4]
 80179d8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80179da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80179de:	4618      	mov	r0, r3
 80179e0:	3728      	adds	r7, #40	; 0x28
 80179e2:	46bd      	mov	sp, r7
 80179e4:	bd80      	pop	{r7, pc}
 80179e6:	bf00      	nop
 80179e8:	20004b08 	.word	0x20004b08
 80179ec:	0801df44 	.word	0x0801df44
 80179f0:	0801df7c 	.word	0x0801df7c
 80179f4:	0801dfbc 	.word	0x0801dfbc
 80179f8:	0801dfe4 	.word	0x0801dfe4
 80179fc:	0801dffc 	.word	0x0801dffc
 8017a00:	0801e010 	.word	0x0801e010

08017a04 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b088      	sub	sp, #32
 8017a08:	af02      	add	r7, sp, #8
 8017a0a:	60f8      	str	r0, [r7, #12]
 8017a0c:	60b9      	str	r1, [r7, #8]
 8017a0e:	607a      	str	r2, [r7, #4]
 8017a10:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017a18:	2b06      	cmp	r3, #6
 8017a1a:	d006      	beq.n	8017a2a <etharp_update_arp_entry+0x26>
 8017a1c:	4b48      	ldr	r3, [pc, #288]	; (8017b40 <etharp_update_arp_entry+0x13c>)
 8017a1e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8017a22:	4948      	ldr	r1, [pc, #288]	; (8017b44 <etharp_update_arp_entry+0x140>)
 8017a24:	4848      	ldr	r0, [pc, #288]	; (8017b48 <etharp_update_arp_entry+0x144>)
 8017a26:	f002 fbad 	bl	801a184 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017a2a:	68bb      	ldr	r3, [r7, #8]
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d012      	beq.n	8017a56 <etharp_update_arp_entry+0x52>
 8017a30:	68bb      	ldr	r3, [r7, #8]
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d00e      	beq.n	8017a56 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017a38:	68bb      	ldr	r3, [r7, #8]
 8017a3a:	681b      	ldr	r3, [r3, #0]
 8017a3c:	68f9      	ldr	r1, [r7, #12]
 8017a3e:	4618      	mov	r0, r3
 8017a40:	f001 f8fe 	bl	8018c40 <ip4_addr_isbroadcast_u32>
 8017a44:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d105      	bne.n	8017a56 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017a4a:	68bb      	ldr	r3, [r7, #8]
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017a52:	2be0      	cmp	r3, #224	; 0xe0
 8017a54:	d102      	bne.n	8017a5c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017a56:	f06f 030f 	mvn.w	r3, #15
 8017a5a:	e06c      	b.n	8017b36 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017a5c:	78fb      	ldrb	r3, [r7, #3]
 8017a5e:	68fa      	ldr	r2, [r7, #12]
 8017a60:	4619      	mov	r1, r3
 8017a62:	68b8      	ldr	r0, [r7, #8]
 8017a64:	f7ff fe56 	bl	8017714 <etharp_find_entry>
 8017a68:	4603      	mov	r3, r0
 8017a6a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017a6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	da02      	bge.n	8017a7a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017a74:	8afb      	ldrh	r3, [r7, #22]
 8017a76:	b25b      	sxtb	r3, r3
 8017a78:	e05d      	b.n	8017b36 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017a7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017a7e:	4933      	ldr	r1, [pc, #204]	; (8017b4c <etharp_update_arp_entry+0x148>)
 8017a80:	4613      	mov	r3, r2
 8017a82:	005b      	lsls	r3, r3, #1
 8017a84:	4413      	add	r3, r2
 8017a86:	00db      	lsls	r3, r3, #3
 8017a88:	440b      	add	r3, r1
 8017a8a:	3314      	adds	r3, #20
 8017a8c:	2202      	movs	r2, #2
 8017a8e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017a90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017a94:	492d      	ldr	r1, [pc, #180]	; (8017b4c <etharp_update_arp_entry+0x148>)
 8017a96:	4613      	mov	r3, r2
 8017a98:	005b      	lsls	r3, r3, #1
 8017a9a:	4413      	add	r3, r2
 8017a9c:	00db      	lsls	r3, r3, #3
 8017a9e:	440b      	add	r3, r1
 8017aa0:	3308      	adds	r3, #8
 8017aa2:	68fa      	ldr	r2, [r7, #12]
 8017aa4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017aa6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017aaa:	4613      	mov	r3, r2
 8017aac:	005b      	lsls	r3, r3, #1
 8017aae:	4413      	add	r3, r2
 8017ab0:	00db      	lsls	r3, r3, #3
 8017ab2:	3308      	adds	r3, #8
 8017ab4:	4a25      	ldr	r2, [pc, #148]	; (8017b4c <etharp_update_arp_entry+0x148>)
 8017ab6:	4413      	add	r3, r2
 8017ab8:	3304      	adds	r3, #4
 8017aba:	2206      	movs	r2, #6
 8017abc:	6879      	ldr	r1, [r7, #4]
 8017abe:	4618      	mov	r0, r3
 8017ac0:	f002 faef 	bl	801a0a2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017ac4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017ac8:	4920      	ldr	r1, [pc, #128]	; (8017b4c <etharp_update_arp_entry+0x148>)
 8017aca:	4613      	mov	r3, r2
 8017acc:	005b      	lsls	r3, r3, #1
 8017ace:	4413      	add	r3, r2
 8017ad0:	00db      	lsls	r3, r3, #3
 8017ad2:	440b      	add	r3, r1
 8017ad4:	3312      	adds	r3, #18
 8017ad6:	2200      	movs	r2, #0
 8017ad8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017ada:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017ade:	491b      	ldr	r1, [pc, #108]	; (8017b4c <etharp_update_arp_entry+0x148>)
 8017ae0:	4613      	mov	r3, r2
 8017ae2:	005b      	lsls	r3, r3, #1
 8017ae4:	4413      	add	r3, r2
 8017ae6:	00db      	lsls	r3, r3, #3
 8017ae8:	440b      	add	r3, r1
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d021      	beq.n	8017b34 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017af0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017af4:	4915      	ldr	r1, [pc, #84]	; (8017b4c <etharp_update_arp_entry+0x148>)
 8017af6:	4613      	mov	r3, r2
 8017af8:	005b      	lsls	r3, r3, #1
 8017afa:	4413      	add	r3, r2
 8017afc:	00db      	lsls	r3, r3, #3
 8017afe:	440b      	add	r3, r1
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017b04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017b08:	4910      	ldr	r1, [pc, #64]	; (8017b4c <etharp_update_arp_entry+0x148>)
 8017b0a:	4613      	mov	r3, r2
 8017b0c:	005b      	lsls	r3, r3, #1
 8017b0e:	4413      	add	r3, r2
 8017b10:	00db      	lsls	r3, r3, #3
 8017b12:	440b      	add	r3, r1
 8017b14:	2200      	movs	r2, #0
 8017b16:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8017b1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017b22:	9300      	str	r3, [sp, #0]
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	6939      	ldr	r1, [r7, #16]
 8017b28:	68f8      	ldr	r0, [r7, #12]
 8017b2a:	f001 ff91 	bl	8019a50 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017b2e:	6938      	ldr	r0, [r7, #16]
 8017b30:	f7f8 fd80 	bl	8010634 <pbuf_free>
  }
  return ERR_OK;
 8017b34:	2300      	movs	r3, #0
}
 8017b36:	4618      	mov	r0, r3
 8017b38:	3718      	adds	r7, #24
 8017b3a:	46bd      	mov	sp, r7
 8017b3c:	bd80      	pop	{r7, pc}
 8017b3e:	bf00      	nop
 8017b40:	0801df44 	.word	0x0801df44
 8017b44:	0801e03c 	.word	0x0801e03c
 8017b48:	0801dfbc 	.word	0x0801dfbc
 8017b4c:	20004b08 	.word	0x20004b08

08017b50 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017b50:	b580      	push	{r7, lr}
 8017b52:	b084      	sub	sp, #16
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017b58:	2300      	movs	r3, #0
 8017b5a:	60fb      	str	r3, [r7, #12]
 8017b5c:	e01e      	b.n	8017b9c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017b5e:	4913      	ldr	r1, [pc, #76]	; (8017bac <etharp_cleanup_netif+0x5c>)
 8017b60:	68fa      	ldr	r2, [r7, #12]
 8017b62:	4613      	mov	r3, r2
 8017b64:	005b      	lsls	r3, r3, #1
 8017b66:	4413      	add	r3, r2
 8017b68:	00db      	lsls	r3, r3, #3
 8017b6a:	440b      	add	r3, r1
 8017b6c:	3314      	adds	r3, #20
 8017b6e:	781b      	ldrb	r3, [r3, #0]
 8017b70:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017b72:	7afb      	ldrb	r3, [r7, #11]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d00e      	beq.n	8017b96 <etharp_cleanup_netif+0x46>
 8017b78:	490c      	ldr	r1, [pc, #48]	; (8017bac <etharp_cleanup_netif+0x5c>)
 8017b7a:	68fa      	ldr	r2, [r7, #12]
 8017b7c:	4613      	mov	r3, r2
 8017b7e:	005b      	lsls	r3, r3, #1
 8017b80:	4413      	add	r3, r2
 8017b82:	00db      	lsls	r3, r3, #3
 8017b84:	440b      	add	r3, r1
 8017b86:	3308      	adds	r3, #8
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	687a      	ldr	r2, [r7, #4]
 8017b8c:	429a      	cmp	r2, r3
 8017b8e:	d102      	bne.n	8017b96 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017b90:	68f8      	ldr	r0, [r7, #12]
 8017b92:	f7ff fce5 	bl	8017560 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	3301      	adds	r3, #1
 8017b9a:	60fb      	str	r3, [r7, #12]
 8017b9c:	68fb      	ldr	r3, [r7, #12]
 8017b9e:	2b09      	cmp	r3, #9
 8017ba0:	dddd      	ble.n	8017b5e <etharp_cleanup_netif+0xe>
    }
  }
}
 8017ba2:	bf00      	nop
 8017ba4:	bf00      	nop
 8017ba6:	3710      	adds	r7, #16
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	bd80      	pop	{r7, pc}
 8017bac:	20004b08 	.word	0x20004b08

08017bb0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017bb0:	b5b0      	push	{r4, r5, r7, lr}
 8017bb2:	b08a      	sub	sp, #40	; 0x28
 8017bb4:	af04      	add	r7, sp, #16
 8017bb6:	6078      	str	r0, [r7, #4]
 8017bb8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017bba:	683b      	ldr	r3, [r7, #0]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d107      	bne.n	8017bd0 <etharp_input+0x20>
 8017bc0:	4b3d      	ldr	r3, [pc, #244]	; (8017cb8 <etharp_input+0x108>)
 8017bc2:	f240 228a 	movw	r2, #650	; 0x28a
 8017bc6:	493d      	ldr	r1, [pc, #244]	; (8017cbc <etharp_input+0x10c>)
 8017bc8:	483d      	ldr	r0, [pc, #244]	; (8017cc0 <etharp_input+0x110>)
 8017bca:	f002 fadb 	bl	801a184 <iprintf>
 8017bce:	e06f      	b.n	8017cb0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	685b      	ldr	r3, [r3, #4]
 8017bd4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017bd6:	693b      	ldr	r3, [r7, #16]
 8017bd8:	881b      	ldrh	r3, [r3, #0]
 8017bda:	b29b      	uxth	r3, r3
 8017bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017be0:	d10c      	bne.n	8017bfc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017be2:	693b      	ldr	r3, [r7, #16]
 8017be4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017be6:	2b06      	cmp	r3, #6
 8017be8:	d108      	bne.n	8017bfc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017bea:	693b      	ldr	r3, [r7, #16]
 8017bec:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017bee:	2b04      	cmp	r3, #4
 8017bf0:	d104      	bne.n	8017bfc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017bf2:	693b      	ldr	r3, [r7, #16]
 8017bf4:	885b      	ldrh	r3, [r3, #2]
 8017bf6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017bf8:	2b08      	cmp	r3, #8
 8017bfa:	d003      	beq.n	8017c04 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017bfc:	6878      	ldr	r0, [r7, #4]
 8017bfe:	f7f8 fd19 	bl	8010634 <pbuf_free>
    return;
 8017c02:	e055      	b.n	8017cb0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017c04:	693b      	ldr	r3, [r7, #16]
 8017c06:	330e      	adds	r3, #14
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017c0c:	693b      	ldr	r3, [r7, #16]
 8017c0e:	3318      	adds	r3, #24
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017c14:	683b      	ldr	r3, [r7, #0]
 8017c16:	3304      	adds	r3, #4
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d102      	bne.n	8017c24 <etharp_input+0x74>
    for_us = 0;
 8017c1e:	2300      	movs	r3, #0
 8017c20:	75fb      	strb	r3, [r7, #23]
 8017c22:	e009      	b.n	8017c38 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017c24:	68ba      	ldr	r2, [r7, #8]
 8017c26:	683b      	ldr	r3, [r7, #0]
 8017c28:	3304      	adds	r3, #4
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	429a      	cmp	r2, r3
 8017c2e:	bf0c      	ite	eq
 8017c30:	2301      	moveq	r3, #1
 8017c32:	2300      	movne	r3, #0
 8017c34:	b2db      	uxtb	r3, r3
 8017c36:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017c38:	693b      	ldr	r3, [r7, #16]
 8017c3a:	f103 0208 	add.w	r2, r3, #8
 8017c3e:	7dfb      	ldrb	r3, [r7, #23]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d001      	beq.n	8017c48 <etharp_input+0x98>
 8017c44:	2301      	movs	r3, #1
 8017c46:	e000      	b.n	8017c4a <etharp_input+0x9a>
 8017c48:	2302      	movs	r3, #2
 8017c4a:	f107 010c 	add.w	r1, r7, #12
 8017c4e:	6838      	ldr	r0, [r7, #0]
 8017c50:	f7ff fed8 	bl	8017a04 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017c54:	693b      	ldr	r3, [r7, #16]
 8017c56:	88db      	ldrh	r3, [r3, #6]
 8017c58:	b29b      	uxth	r3, r3
 8017c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017c5e:	d003      	beq.n	8017c68 <etharp_input+0xb8>
 8017c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017c64:	d01e      	beq.n	8017ca4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017c66:	e020      	b.n	8017caa <etharp_input+0xfa>
      if (for_us) {
 8017c68:	7dfb      	ldrb	r3, [r7, #23]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d01c      	beq.n	8017ca8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017c74:	693b      	ldr	r3, [r7, #16]
 8017c76:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017c7a:	683b      	ldr	r3, [r7, #0]
 8017c7c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8017c80:	683b      	ldr	r3, [r7, #0]
 8017c82:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017c84:	693a      	ldr	r2, [r7, #16]
 8017c86:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017c88:	2102      	movs	r1, #2
 8017c8a:	9103      	str	r1, [sp, #12]
 8017c8c:	f107 010c 	add.w	r1, r7, #12
 8017c90:	9102      	str	r1, [sp, #8]
 8017c92:	9201      	str	r2, [sp, #4]
 8017c94:	9300      	str	r3, [sp, #0]
 8017c96:	462b      	mov	r3, r5
 8017c98:	4622      	mov	r2, r4
 8017c9a:	4601      	mov	r1, r0
 8017c9c:	6838      	ldr	r0, [r7, #0]
 8017c9e:	f000 faeb 	bl	8018278 <etharp_raw>
      break;
 8017ca2:	e001      	b.n	8017ca8 <etharp_input+0xf8>
      break;
 8017ca4:	bf00      	nop
 8017ca6:	e000      	b.n	8017caa <etharp_input+0xfa>
      break;
 8017ca8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017caa:	6878      	ldr	r0, [r7, #4]
 8017cac:	f7f8 fcc2 	bl	8010634 <pbuf_free>
}
 8017cb0:	3718      	adds	r7, #24
 8017cb2:	46bd      	mov	sp, r7
 8017cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8017cb6:	bf00      	nop
 8017cb8:	0801df44 	.word	0x0801df44
 8017cbc:	0801e094 	.word	0x0801e094
 8017cc0:	0801dfbc 	.word	0x0801dfbc

08017cc4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b086      	sub	sp, #24
 8017cc8:	af02      	add	r7, sp, #8
 8017cca:	60f8      	str	r0, [r7, #12]
 8017ccc:	60b9      	str	r1, [r7, #8]
 8017cce:	4613      	mov	r3, r2
 8017cd0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017cd2:	79fa      	ldrb	r2, [r7, #7]
 8017cd4:	4944      	ldr	r1, [pc, #272]	; (8017de8 <etharp_output_to_arp_index+0x124>)
 8017cd6:	4613      	mov	r3, r2
 8017cd8:	005b      	lsls	r3, r3, #1
 8017cda:	4413      	add	r3, r2
 8017cdc:	00db      	lsls	r3, r3, #3
 8017cde:	440b      	add	r3, r1
 8017ce0:	3314      	adds	r3, #20
 8017ce2:	781b      	ldrb	r3, [r3, #0]
 8017ce4:	2b01      	cmp	r3, #1
 8017ce6:	d806      	bhi.n	8017cf6 <etharp_output_to_arp_index+0x32>
 8017ce8:	4b40      	ldr	r3, [pc, #256]	; (8017dec <etharp_output_to_arp_index+0x128>)
 8017cea:	f240 22ee 	movw	r2, #750	; 0x2ee
 8017cee:	4940      	ldr	r1, [pc, #256]	; (8017df0 <etharp_output_to_arp_index+0x12c>)
 8017cf0:	4840      	ldr	r0, [pc, #256]	; (8017df4 <etharp_output_to_arp_index+0x130>)
 8017cf2:	f002 fa47 	bl	801a184 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017cf6:	79fa      	ldrb	r2, [r7, #7]
 8017cf8:	493b      	ldr	r1, [pc, #236]	; (8017de8 <etharp_output_to_arp_index+0x124>)
 8017cfa:	4613      	mov	r3, r2
 8017cfc:	005b      	lsls	r3, r3, #1
 8017cfe:	4413      	add	r3, r2
 8017d00:	00db      	lsls	r3, r3, #3
 8017d02:	440b      	add	r3, r1
 8017d04:	3314      	adds	r3, #20
 8017d06:	781b      	ldrb	r3, [r3, #0]
 8017d08:	2b02      	cmp	r3, #2
 8017d0a:	d153      	bne.n	8017db4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017d0c:	79fa      	ldrb	r2, [r7, #7]
 8017d0e:	4936      	ldr	r1, [pc, #216]	; (8017de8 <etharp_output_to_arp_index+0x124>)
 8017d10:	4613      	mov	r3, r2
 8017d12:	005b      	lsls	r3, r3, #1
 8017d14:	4413      	add	r3, r2
 8017d16:	00db      	lsls	r3, r3, #3
 8017d18:	440b      	add	r3, r1
 8017d1a:	3312      	adds	r3, #18
 8017d1c:	881b      	ldrh	r3, [r3, #0]
 8017d1e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017d22:	d919      	bls.n	8017d58 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017d24:	79fa      	ldrb	r2, [r7, #7]
 8017d26:	4613      	mov	r3, r2
 8017d28:	005b      	lsls	r3, r3, #1
 8017d2a:	4413      	add	r3, r2
 8017d2c:	00db      	lsls	r3, r3, #3
 8017d2e:	4a2e      	ldr	r2, [pc, #184]	; (8017de8 <etharp_output_to_arp_index+0x124>)
 8017d30:	4413      	add	r3, r2
 8017d32:	3304      	adds	r3, #4
 8017d34:	4619      	mov	r1, r3
 8017d36:	68f8      	ldr	r0, [r7, #12]
 8017d38:	f000 fb4c 	bl	80183d4 <etharp_request>
 8017d3c:	4603      	mov	r3, r0
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d138      	bne.n	8017db4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017d42:	79fa      	ldrb	r2, [r7, #7]
 8017d44:	4928      	ldr	r1, [pc, #160]	; (8017de8 <etharp_output_to_arp_index+0x124>)
 8017d46:	4613      	mov	r3, r2
 8017d48:	005b      	lsls	r3, r3, #1
 8017d4a:	4413      	add	r3, r2
 8017d4c:	00db      	lsls	r3, r3, #3
 8017d4e:	440b      	add	r3, r1
 8017d50:	3314      	adds	r3, #20
 8017d52:	2203      	movs	r2, #3
 8017d54:	701a      	strb	r2, [r3, #0]
 8017d56:	e02d      	b.n	8017db4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017d58:	79fa      	ldrb	r2, [r7, #7]
 8017d5a:	4923      	ldr	r1, [pc, #140]	; (8017de8 <etharp_output_to_arp_index+0x124>)
 8017d5c:	4613      	mov	r3, r2
 8017d5e:	005b      	lsls	r3, r3, #1
 8017d60:	4413      	add	r3, r2
 8017d62:	00db      	lsls	r3, r3, #3
 8017d64:	440b      	add	r3, r1
 8017d66:	3312      	adds	r3, #18
 8017d68:	881b      	ldrh	r3, [r3, #0]
 8017d6a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017d6e:	d321      	bcc.n	8017db4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017d70:	79fa      	ldrb	r2, [r7, #7]
 8017d72:	4613      	mov	r3, r2
 8017d74:	005b      	lsls	r3, r3, #1
 8017d76:	4413      	add	r3, r2
 8017d78:	00db      	lsls	r3, r3, #3
 8017d7a:	4a1b      	ldr	r2, [pc, #108]	; (8017de8 <etharp_output_to_arp_index+0x124>)
 8017d7c:	4413      	add	r3, r2
 8017d7e:	1d19      	adds	r1, r3, #4
 8017d80:	79fa      	ldrb	r2, [r7, #7]
 8017d82:	4613      	mov	r3, r2
 8017d84:	005b      	lsls	r3, r3, #1
 8017d86:	4413      	add	r3, r2
 8017d88:	00db      	lsls	r3, r3, #3
 8017d8a:	3308      	adds	r3, #8
 8017d8c:	4a16      	ldr	r2, [pc, #88]	; (8017de8 <etharp_output_to_arp_index+0x124>)
 8017d8e:	4413      	add	r3, r2
 8017d90:	3304      	adds	r3, #4
 8017d92:	461a      	mov	r2, r3
 8017d94:	68f8      	ldr	r0, [r7, #12]
 8017d96:	f000 fafb 	bl	8018390 <etharp_request_dst>
 8017d9a:	4603      	mov	r3, r0
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d109      	bne.n	8017db4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017da0:	79fa      	ldrb	r2, [r7, #7]
 8017da2:	4911      	ldr	r1, [pc, #68]	; (8017de8 <etharp_output_to_arp_index+0x124>)
 8017da4:	4613      	mov	r3, r2
 8017da6:	005b      	lsls	r3, r3, #1
 8017da8:	4413      	add	r3, r2
 8017daa:	00db      	lsls	r3, r3, #3
 8017dac:	440b      	add	r3, r1
 8017dae:	3314      	adds	r3, #20
 8017db0:	2203      	movs	r2, #3
 8017db2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8017dba:	79fa      	ldrb	r2, [r7, #7]
 8017dbc:	4613      	mov	r3, r2
 8017dbe:	005b      	lsls	r3, r3, #1
 8017dc0:	4413      	add	r3, r2
 8017dc2:	00db      	lsls	r3, r3, #3
 8017dc4:	3308      	adds	r3, #8
 8017dc6:	4a08      	ldr	r2, [pc, #32]	; (8017de8 <etharp_output_to_arp_index+0x124>)
 8017dc8:	4413      	add	r3, r2
 8017dca:	3304      	adds	r3, #4
 8017dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017dd0:	9200      	str	r2, [sp, #0]
 8017dd2:	460a      	mov	r2, r1
 8017dd4:	68b9      	ldr	r1, [r7, #8]
 8017dd6:	68f8      	ldr	r0, [r7, #12]
 8017dd8:	f001 fe3a 	bl	8019a50 <ethernet_output>
 8017ddc:	4603      	mov	r3, r0
}
 8017dde:	4618      	mov	r0, r3
 8017de0:	3710      	adds	r7, #16
 8017de2:	46bd      	mov	sp, r7
 8017de4:	bd80      	pop	{r7, pc}
 8017de6:	bf00      	nop
 8017de8:	20004b08 	.word	0x20004b08
 8017dec:	0801df44 	.word	0x0801df44
 8017df0:	0801e0b4 	.word	0x0801e0b4
 8017df4:	0801dfbc 	.word	0x0801dfbc

08017df8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017df8:	b580      	push	{r7, lr}
 8017dfa:	b08a      	sub	sp, #40	; 0x28
 8017dfc:	af02      	add	r7, sp, #8
 8017dfe:	60f8      	str	r0, [r7, #12]
 8017e00:	60b9      	str	r1, [r7, #8]
 8017e02:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d106      	bne.n	8017e1c <etharp_output+0x24>
 8017e0e:	4b73      	ldr	r3, [pc, #460]	; (8017fdc <etharp_output+0x1e4>)
 8017e10:	f240 321e 	movw	r2, #798	; 0x31e
 8017e14:	4972      	ldr	r1, [pc, #456]	; (8017fe0 <etharp_output+0x1e8>)
 8017e16:	4873      	ldr	r0, [pc, #460]	; (8017fe4 <etharp_output+0x1ec>)
 8017e18:	f002 f9b4 	bl	801a184 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017e1c:	68bb      	ldr	r3, [r7, #8]
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d106      	bne.n	8017e30 <etharp_output+0x38>
 8017e22:	4b6e      	ldr	r3, [pc, #440]	; (8017fdc <etharp_output+0x1e4>)
 8017e24:	f240 321f 	movw	r2, #799	; 0x31f
 8017e28:	496f      	ldr	r1, [pc, #444]	; (8017fe8 <etharp_output+0x1f0>)
 8017e2a:	486e      	ldr	r0, [pc, #440]	; (8017fe4 <etharp_output+0x1ec>)
 8017e2c:	f002 f9aa 	bl	801a184 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d106      	bne.n	8017e44 <etharp_output+0x4c>
 8017e36:	4b69      	ldr	r3, [pc, #420]	; (8017fdc <etharp_output+0x1e4>)
 8017e38:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017e3c:	496b      	ldr	r1, [pc, #428]	; (8017fec <etharp_output+0x1f4>)
 8017e3e:	4869      	ldr	r0, [pc, #420]	; (8017fe4 <etharp_output+0x1ec>)
 8017e40:	f002 f9a0 	bl	801a184 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017e44:	687b      	ldr	r3, [r7, #4]
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	68f9      	ldr	r1, [r7, #12]
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	f000 fef8 	bl	8018c40 <ip4_addr_isbroadcast_u32>
 8017e50:	4603      	mov	r3, r0
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d002      	beq.n	8017e5c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017e56:	4b66      	ldr	r3, [pc, #408]	; (8017ff0 <etharp_output+0x1f8>)
 8017e58:	61fb      	str	r3, [r7, #28]
 8017e5a:	e0af      	b.n	8017fbc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	681b      	ldr	r3, [r3, #0]
 8017e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017e64:	2be0      	cmp	r3, #224	; 0xe0
 8017e66:	d118      	bne.n	8017e9a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017e68:	2301      	movs	r3, #1
 8017e6a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017e6c:	2300      	movs	r3, #0
 8017e6e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017e70:	235e      	movs	r3, #94	; 0x5e
 8017e72:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	3301      	adds	r3, #1
 8017e78:	781b      	ldrb	r3, [r3, #0]
 8017e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017e7e:	b2db      	uxtb	r3, r3
 8017e80:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	3302      	adds	r3, #2
 8017e86:	781b      	ldrb	r3, [r3, #0]
 8017e88:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	3303      	adds	r3, #3
 8017e8e:	781b      	ldrb	r3, [r3, #0]
 8017e90:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017e92:	f107 0310 	add.w	r3, r7, #16
 8017e96:	61fb      	str	r3, [r7, #28]
 8017e98:	e090      	b.n	8017fbc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	681a      	ldr	r2, [r3, #0]
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	3304      	adds	r3, #4
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	405a      	eors	r2, r3
 8017ea6:	68fb      	ldr	r3, [r7, #12]
 8017ea8:	3308      	adds	r3, #8
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	4013      	ands	r3, r2
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d012      	beq.n	8017ed8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017eb8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017ebc:	4293      	cmp	r3, r2
 8017ebe:	d00b      	beq.n	8017ed8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	330c      	adds	r3, #12
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d003      	beq.n	8017ed2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	330c      	adds	r3, #12
 8017ece:	61bb      	str	r3, [r7, #24]
 8017ed0:	e002      	b.n	8017ed8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017ed2:	f06f 0303 	mvn.w	r3, #3
 8017ed6:	e07d      	b.n	8017fd4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017ed8:	4b46      	ldr	r3, [pc, #280]	; (8017ff4 <etharp_output+0x1fc>)
 8017eda:	781b      	ldrb	r3, [r3, #0]
 8017edc:	4619      	mov	r1, r3
 8017ede:	4a46      	ldr	r2, [pc, #280]	; (8017ff8 <etharp_output+0x200>)
 8017ee0:	460b      	mov	r3, r1
 8017ee2:	005b      	lsls	r3, r3, #1
 8017ee4:	440b      	add	r3, r1
 8017ee6:	00db      	lsls	r3, r3, #3
 8017ee8:	4413      	add	r3, r2
 8017eea:	3314      	adds	r3, #20
 8017eec:	781b      	ldrb	r3, [r3, #0]
 8017eee:	2b01      	cmp	r3, #1
 8017ef0:	d925      	bls.n	8017f3e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017ef2:	4b40      	ldr	r3, [pc, #256]	; (8017ff4 <etharp_output+0x1fc>)
 8017ef4:	781b      	ldrb	r3, [r3, #0]
 8017ef6:	4619      	mov	r1, r3
 8017ef8:	4a3f      	ldr	r2, [pc, #252]	; (8017ff8 <etharp_output+0x200>)
 8017efa:	460b      	mov	r3, r1
 8017efc:	005b      	lsls	r3, r3, #1
 8017efe:	440b      	add	r3, r1
 8017f00:	00db      	lsls	r3, r3, #3
 8017f02:	4413      	add	r3, r2
 8017f04:	3308      	adds	r3, #8
 8017f06:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017f08:	68fa      	ldr	r2, [r7, #12]
 8017f0a:	429a      	cmp	r2, r3
 8017f0c:	d117      	bne.n	8017f3e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8017f0e:	69bb      	ldr	r3, [r7, #24]
 8017f10:	681a      	ldr	r2, [r3, #0]
 8017f12:	4b38      	ldr	r3, [pc, #224]	; (8017ff4 <etharp_output+0x1fc>)
 8017f14:	781b      	ldrb	r3, [r3, #0]
 8017f16:	4618      	mov	r0, r3
 8017f18:	4937      	ldr	r1, [pc, #220]	; (8017ff8 <etharp_output+0x200>)
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	005b      	lsls	r3, r3, #1
 8017f1e:	4403      	add	r3, r0
 8017f20:	00db      	lsls	r3, r3, #3
 8017f22:	440b      	add	r3, r1
 8017f24:	3304      	adds	r3, #4
 8017f26:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017f28:	429a      	cmp	r2, r3
 8017f2a:	d108      	bne.n	8017f3e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017f2c:	4b31      	ldr	r3, [pc, #196]	; (8017ff4 <etharp_output+0x1fc>)
 8017f2e:	781b      	ldrb	r3, [r3, #0]
 8017f30:	461a      	mov	r2, r3
 8017f32:	68b9      	ldr	r1, [r7, #8]
 8017f34:	68f8      	ldr	r0, [r7, #12]
 8017f36:	f7ff fec5 	bl	8017cc4 <etharp_output_to_arp_index>
 8017f3a:	4603      	mov	r3, r0
 8017f3c:	e04a      	b.n	8017fd4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017f3e:	2300      	movs	r3, #0
 8017f40:	75fb      	strb	r3, [r7, #23]
 8017f42:	e031      	b.n	8017fa8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017f44:	7dfa      	ldrb	r2, [r7, #23]
 8017f46:	492c      	ldr	r1, [pc, #176]	; (8017ff8 <etharp_output+0x200>)
 8017f48:	4613      	mov	r3, r2
 8017f4a:	005b      	lsls	r3, r3, #1
 8017f4c:	4413      	add	r3, r2
 8017f4e:	00db      	lsls	r3, r3, #3
 8017f50:	440b      	add	r3, r1
 8017f52:	3314      	adds	r3, #20
 8017f54:	781b      	ldrb	r3, [r3, #0]
 8017f56:	2b01      	cmp	r3, #1
 8017f58:	d923      	bls.n	8017fa2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017f5a:	7dfa      	ldrb	r2, [r7, #23]
 8017f5c:	4926      	ldr	r1, [pc, #152]	; (8017ff8 <etharp_output+0x200>)
 8017f5e:	4613      	mov	r3, r2
 8017f60:	005b      	lsls	r3, r3, #1
 8017f62:	4413      	add	r3, r2
 8017f64:	00db      	lsls	r3, r3, #3
 8017f66:	440b      	add	r3, r1
 8017f68:	3308      	adds	r3, #8
 8017f6a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017f6c:	68fa      	ldr	r2, [r7, #12]
 8017f6e:	429a      	cmp	r2, r3
 8017f70:	d117      	bne.n	8017fa2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017f72:	69bb      	ldr	r3, [r7, #24]
 8017f74:	6819      	ldr	r1, [r3, #0]
 8017f76:	7dfa      	ldrb	r2, [r7, #23]
 8017f78:	481f      	ldr	r0, [pc, #124]	; (8017ff8 <etharp_output+0x200>)
 8017f7a:	4613      	mov	r3, r2
 8017f7c:	005b      	lsls	r3, r3, #1
 8017f7e:	4413      	add	r3, r2
 8017f80:	00db      	lsls	r3, r3, #3
 8017f82:	4403      	add	r3, r0
 8017f84:	3304      	adds	r3, #4
 8017f86:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017f88:	4299      	cmp	r1, r3
 8017f8a:	d10a      	bne.n	8017fa2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017f8c:	4a19      	ldr	r2, [pc, #100]	; (8017ff4 <etharp_output+0x1fc>)
 8017f8e:	7dfb      	ldrb	r3, [r7, #23]
 8017f90:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017f92:	7dfb      	ldrb	r3, [r7, #23]
 8017f94:	461a      	mov	r2, r3
 8017f96:	68b9      	ldr	r1, [r7, #8]
 8017f98:	68f8      	ldr	r0, [r7, #12]
 8017f9a:	f7ff fe93 	bl	8017cc4 <etharp_output_to_arp_index>
 8017f9e:	4603      	mov	r3, r0
 8017fa0:	e018      	b.n	8017fd4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017fa2:	7dfb      	ldrb	r3, [r7, #23]
 8017fa4:	3301      	adds	r3, #1
 8017fa6:	75fb      	strb	r3, [r7, #23]
 8017fa8:	7dfb      	ldrb	r3, [r7, #23]
 8017faa:	2b09      	cmp	r3, #9
 8017fac:	d9ca      	bls.n	8017f44 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017fae:	68ba      	ldr	r2, [r7, #8]
 8017fb0:	69b9      	ldr	r1, [r7, #24]
 8017fb2:	68f8      	ldr	r0, [r7, #12]
 8017fb4:	f000 f822 	bl	8017ffc <etharp_query>
 8017fb8:	4603      	mov	r3, r0
 8017fba:	e00b      	b.n	8017fd4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8017fc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017fc6:	9300      	str	r3, [sp, #0]
 8017fc8:	69fb      	ldr	r3, [r7, #28]
 8017fca:	68b9      	ldr	r1, [r7, #8]
 8017fcc:	68f8      	ldr	r0, [r7, #12]
 8017fce:	f001 fd3f 	bl	8019a50 <ethernet_output>
 8017fd2:	4603      	mov	r3, r0
}
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	3720      	adds	r7, #32
 8017fd8:	46bd      	mov	sp, r7
 8017fda:	bd80      	pop	{r7, pc}
 8017fdc:	0801df44 	.word	0x0801df44
 8017fe0:	0801e094 	.word	0x0801e094
 8017fe4:	0801dfbc 	.word	0x0801dfbc
 8017fe8:	0801e0e4 	.word	0x0801e0e4
 8017fec:	0801e084 	.word	0x0801e084
 8017ff0:	0801e828 	.word	0x0801e828
 8017ff4:	20004bf8 	.word	0x20004bf8
 8017ff8:	20004b08 	.word	0x20004b08

08017ffc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017ffc:	b580      	push	{r7, lr}
 8017ffe:	b08c      	sub	sp, #48	; 0x30
 8018000:	af02      	add	r7, sp, #8
 8018002:	60f8      	str	r0, [r7, #12]
 8018004:	60b9      	str	r1, [r7, #8]
 8018006:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	3326      	adds	r3, #38	; 0x26
 801800c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801800e:	23ff      	movs	r3, #255	; 0xff
 8018010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018014:	2300      	movs	r3, #0
 8018016:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018018:	68bb      	ldr	r3, [r7, #8]
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	68f9      	ldr	r1, [r7, #12]
 801801e:	4618      	mov	r0, r3
 8018020:	f000 fe0e 	bl	8018c40 <ip4_addr_isbroadcast_u32>
 8018024:	4603      	mov	r3, r0
 8018026:	2b00      	cmp	r3, #0
 8018028:	d10c      	bne.n	8018044 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801802a:	68bb      	ldr	r3, [r7, #8]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018032:	2be0      	cmp	r3, #224	; 0xe0
 8018034:	d006      	beq.n	8018044 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018036:	68bb      	ldr	r3, [r7, #8]
 8018038:	2b00      	cmp	r3, #0
 801803a:	d003      	beq.n	8018044 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801803c:	68bb      	ldr	r3, [r7, #8]
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d102      	bne.n	801804a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018044:	f06f 030f 	mvn.w	r3, #15
 8018048:	e101      	b.n	801824e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801804a:	68fa      	ldr	r2, [r7, #12]
 801804c:	2101      	movs	r1, #1
 801804e:	68b8      	ldr	r0, [r7, #8]
 8018050:	f7ff fb60 	bl	8017714 <etharp_find_entry>
 8018054:	4603      	mov	r3, r0
 8018056:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018058:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801805c:	2b00      	cmp	r3, #0
 801805e:	da02      	bge.n	8018066 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018060:	8a7b      	ldrh	r3, [r7, #18]
 8018062:	b25b      	sxtb	r3, r3
 8018064:	e0f3      	b.n	801824e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018066:	8a7b      	ldrh	r3, [r7, #18]
 8018068:	2b7e      	cmp	r3, #126	; 0x7e
 801806a:	d906      	bls.n	801807a <etharp_query+0x7e>
 801806c:	4b7a      	ldr	r3, [pc, #488]	; (8018258 <etharp_query+0x25c>)
 801806e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018072:	497a      	ldr	r1, [pc, #488]	; (801825c <etharp_query+0x260>)
 8018074:	487a      	ldr	r0, [pc, #488]	; (8018260 <etharp_query+0x264>)
 8018076:	f002 f885 	bl	801a184 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801807a:	8a7b      	ldrh	r3, [r7, #18]
 801807c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801807e:	7c7a      	ldrb	r2, [r7, #17]
 8018080:	4978      	ldr	r1, [pc, #480]	; (8018264 <etharp_query+0x268>)
 8018082:	4613      	mov	r3, r2
 8018084:	005b      	lsls	r3, r3, #1
 8018086:	4413      	add	r3, r2
 8018088:	00db      	lsls	r3, r3, #3
 801808a:	440b      	add	r3, r1
 801808c:	3314      	adds	r3, #20
 801808e:	781b      	ldrb	r3, [r3, #0]
 8018090:	2b00      	cmp	r3, #0
 8018092:	d115      	bne.n	80180c0 <etharp_query+0xc4>
    is_new_entry = 1;
 8018094:	2301      	movs	r3, #1
 8018096:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018098:	7c7a      	ldrb	r2, [r7, #17]
 801809a:	4972      	ldr	r1, [pc, #456]	; (8018264 <etharp_query+0x268>)
 801809c:	4613      	mov	r3, r2
 801809e:	005b      	lsls	r3, r3, #1
 80180a0:	4413      	add	r3, r2
 80180a2:	00db      	lsls	r3, r3, #3
 80180a4:	440b      	add	r3, r1
 80180a6:	3314      	adds	r3, #20
 80180a8:	2201      	movs	r2, #1
 80180aa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80180ac:	7c7a      	ldrb	r2, [r7, #17]
 80180ae:	496d      	ldr	r1, [pc, #436]	; (8018264 <etharp_query+0x268>)
 80180b0:	4613      	mov	r3, r2
 80180b2:	005b      	lsls	r3, r3, #1
 80180b4:	4413      	add	r3, r2
 80180b6:	00db      	lsls	r3, r3, #3
 80180b8:	440b      	add	r3, r1
 80180ba:	3308      	adds	r3, #8
 80180bc:	68fa      	ldr	r2, [r7, #12]
 80180be:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80180c0:	7c7a      	ldrb	r2, [r7, #17]
 80180c2:	4968      	ldr	r1, [pc, #416]	; (8018264 <etharp_query+0x268>)
 80180c4:	4613      	mov	r3, r2
 80180c6:	005b      	lsls	r3, r3, #1
 80180c8:	4413      	add	r3, r2
 80180ca:	00db      	lsls	r3, r3, #3
 80180cc:	440b      	add	r3, r1
 80180ce:	3314      	adds	r3, #20
 80180d0:	781b      	ldrb	r3, [r3, #0]
 80180d2:	2b01      	cmp	r3, #1
 80180d4:	d011      	beq.n	80180fa <etharp_query+0xfe>
 80180d6:	7c7a      	ldrb	r2, [r7, #17]
 80180d8:	4962      	ldr	r1, [pc, #392]	; (8018264 <etharp_query+0x268>)
 80180da:	4613      	mov	r3, r2
 80180dc:	005b      	lsls	r3, r3, #1
 80180de:	4413      	add	r3, r2
 80180e0:	00db      	lsls	r3, r3, #3
 80180e2:	440b      	add	r3, r1
 80180e4:	3314      	adds	r3, #20
 80180e6:	781b      	ldrb	r3, [r3, #0]
 80180e8:	2b01      	cmp	r3, #1
 80180ea:	d806      	bhi.n	80180fa <etharp_query+0xfe>
 80180ec:	4b5a      	ldr	r3, [pc, #360]	; (8018258 <etharp_query+0x25c>)
 80180ee:	f240 32cd 	movw	r2, #973	; 0x3cd
 80180f2:	495d      	ldr	r1, [pc, #372]	; (8018268 <etharp_query+0x26c>)
 80180f4:	485a      	ldr	r0, [pc, #360]	; (8018260 <etharp_query+0x264>)
 80180f6:	f002 f845 	bl	801a184 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80180fa:	6a3b      	ldr	r3, [r7, #32]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d102      	bne.n	8018106 <etharp_query+0x10a>
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	2b00      	cmp	r3, #0
 8018104:	d10c      	bne.n	8018120 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018106:	68b9      	ldr	r1, [r7, #8]
 8018108:	68f8      	ldr	r0, [r7, #12]
 801810a:	f000 f963 	bl	80183d4 <etharp_request>
 801810e:	4603      	mov	r3, r0
 8018110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	2b00      	cmp	r3, #0
 8018118:	d102      	bne.n	8018120 <etharp_query+0x124>
      return result;
 801811a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801811e:	e096      	b.n	801824e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	2b00      	cmp	r3, #0
 8018124:	d106      	bne.n	8018134 <etharp_query+0x138>
 8018126:	4b4c      	ldr	r3, [pc, #304]	; (8018258 <etharp_query+0x25c>)
 8018128:	f240 32e1 	movw	r2, #993	; 0x3e1
 801812c:	494f      	ldr	r1, [pc, #316]	; (801826c <etharp_query+0x270>)
 801812e:	484c      	ldr	r0, [pc, #304]	; (8018260 <etharp_query+0x264>)
 8018130:	f002 f828 	bl	801a184 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018134:	7c7a      	ldrb	r2, [r7, #17]
 8018136:	494b      	ldr	r1, [pc, #300]	; (8018264 <etharp_query+0x268>)
 8018138:	4613      	mov	r3, r2
 801813a:	005b      	lsls	r3, r3, #1
 801813c:	4413      	add	r3, r2
 801813e:	00db      	lsls	r3, r3, #3
 8018140:	440b      	add	r3, r1
 8018142:	3314      	adds	r3, #20
 8018144:	781b      	ldrb	r3, [r3, #0]
 8018146:	2b01      	cmp	r3, #1
 8018148:	d917      	bls.n	801817a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801814a:	4a49      	ldr	r2, [pc, #292]	; (8018270 <etharp_query+0x274>)
 801814c:	7c7b      	ldrb	r3, [r7, #17]
 801814e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018150:	7c7a      	ldrb	r2, [r7, #17]
 8018152:	4613      	mov	r3, r2
 8018154:	005b      	lsls	r3, r3, #1
 8018156:	4413      	add	r3, r2
 8018158:	00db      	lsls	r3, r3, #3
 801815a:	3308      	adds	r3, #8
 801815c:	4a41      	ldr	r2, [pc, #260]	; (8018264 <etharp_query+0x268>)
 801815e:	4413      	add	r3, r2
 8018160:	3304      	adds	r3, #4
 8018162:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018166:	9200      	str	r2, [sp, #0]
 8018168:	697a      	ldr	r2, [r7, #20]
 801816a:	6879      	ldr	r1, [r7, #4]
 801816c:	68f8      	ldr	r0, [r7, #12]
 801816e:	f001 fc6f 	bl	8019a50 <ethernet_output>
 8018172:	4603      	mov	r3, r0
 8018174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018178:	e067      	b.n	801824a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801817a:	7c7a      	ldrb	r2, [r7, #17]
 801817c:	4939      	ldr	r1, [pc, #228]	; (8018264 <etharp_query+0x268>)
 801817e:	4613      	mov	r3, r2
 8018180:	005b      	lsls	r3, r3, #1
 8018182:	4413      	add	r3, r2
 8018184:	00db      	lsls	r3, r3, #3
 8018186:	440b      	add	r3, r1
 8018188:	3314      	adds	r3, #20
 801818a:	781b      	ldrb	r3, [r3, #0]
 801818c:	2b01      	cmp	r3, #1
 801818e:	d15c      	bne.n	801824a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018190:	2300      	movs	r3, #0
 8018192:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018198:	e01c      	b.n	80181d4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801819a:	69fb      	ldr	r3, [r7, #28]
 801819c:	895a      	ldrh	r2, [r3, #10]
 801819e:	69fb      	ldr	r3, [r7, #28]
 80181a0:	891b      	ldrh	r3, [r3, #8]
 80181a2:	429a      	cmp	r2, r3
 80181a4:	d10a      	bne.n	80181bc <etharp_query+0x1c0>
 80181a6:	69fb      	ldr	r3, [r7, #28]
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d006      	beq.n	80181bc <etharp_query+0x1c0>
 80181ae:	4b2a      	ldr	r3, [pc, #168]	; (8018258 <etharp_query+0x25c>)
 80181b0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80181b4:	492f      	ldr	r1, [pc, #188]	; (8018274 <etharp_query+0x278>)
 80181b6:	482a      	ldr	r0, [pc, #168]	; (8018260 <etharp_query+0x264>)
 80181b8:	f001 ffe4 	bl	801a184 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80181bc:	69fb      	ldr	r3, [r7, #28]
 80181be:	7b1b      	ldrb	r3, [r3, #12]
 80181c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d002      	beq.n	80181ce <etharp_query+0x1d2>
        copy_needed = 1;
 80181c8:	2301      	movs	r3, #1
 80181ca:	61bb      	str	r3, [r7, #24]
        break;
 80181cc:	e005      	b.n	80181da <etharp_query+0x1de>
      }
      p = p->next;
 80181ce:	69fb      	ldr	r3, [r7, #28]
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80181d4:	69fb      	ldr	r3, [r7, #28]
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d1df      	bne.n	801819a <etharp_query+0x19e>
    }
    if (copy_needed) {
 80181da:	69bb      	ldr	r3, [r7, #24]
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d007      	beq.n	80181f0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80181e0:	687a      	ldr	r2, [r7, #4]
 80181e2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80181e6:	200e      	movs	r0, #14
 80181e8:	f7f8 fc8c 	bl	8010b04 <pbuf_clone>
 80181ec:	61f8      	str	r0, [r7, #28]
 80181ee:	e004      	b.n	80181fa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80181f4:	69f8      	ldr	r0, [r7, #28]
 80181f6:	f7f8 fac3 	bl	8010780 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80181fa:	69fb      	ldr	r3, [r7, #28]
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d021      	beq.n	8018244 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018200:	7c7a      	ldrb	r2, [r7, #17]
 8018202:	4918      	ldr	r1, [pc, #96]	; (8018264 <etharp_query+0x268>)
 8018204:	4613      	mov	r3, r2
 8018206:	005b      	lsls	r3, r3, #1
 8018208:	4413      	add	r3, r2
 801820a:	00db      	lsls	r3, r3, #3
 801820c:	440b      	add	r3, r1
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d00a      	beq.n	801822a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018214:	7c7a      	ldrb	r2, [r7, #17]
 8018216:	4913      	ldr	r1, [pc, #76]	; (8018264 <etharp_query+0x268>)
 8018218:	4613      	mov	r3, r2
 801821a:	005b      	lsls	r3, r3, #1
 801821c:	4413      	add	r3, r2
 801821e:	00db      	lsls	r3, r3, #3
 8018220:	440b      	add	r3, r1
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	4618      	mov	r0, r3
 8018226:	f7f8 fa05 	bl	8010634 <pbuf_free>
      }
      arp_table[i].q = p;
 801822a:	7c7a      	ldrb	r2, [r7, #17]
 801822c:	490d      	ldr	r1, [pc, #52]	; (8018264 <etharp_query+0x268>)
 801822e:	4613      	mov	r3, r2
 8018230:	005b      	lsls	r3, r3, #1
 8018232:	4413      	add	r3, r2
 8018234:	00db      	lsls	r3, r3, #3
 8018236:	440b      	add	r3, r1
 8018238:	69fa      	ldr	r2, [r7, #28]
 801823a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801823c:	2300      	movs	r3, #0
 801823e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018242:	e002      	b.n	801824a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018244:	23ff      	movs	r3, #255	; 0xff
 8018246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801824a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801824e:	4618      	mov	r0, r3
 8018250:	3728      	adds	r7, #40	; 0x28
 8018252:	46bd      	mov	sp, r7
 8018254:	bd80      	pop	{r7, pc}
 8018256:	bf00      	nop
 8018258:	0801df44 	.word	0x0801df44
 801825c:	0801e0f0 	.word	0x0801e0f0
 8018260:	0801dfbc 	.word	0x0801dfbc
 8018264:	20004b08 	.word	0x20004b08
 8018268:	0801e100 	.word	0x0801e100
 801826c:	0801e0e4 	.word	0x0801e0e4
 8018270:	20004bf8 	.word	0x20004bf8
 8018274:	0801e128 	.word	0x0801e128

08018278 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018278:	b580      	push	{r7, lr}
 801827a:	b08a      	sub	sp, #40	; 0x28
 801827c:	af02      	add	r7, sp, #8
 801827e:	60f8      	str	r0, [r7, #12]
 8018280:	60b9      	str	r1, [r7, #8]
 8018282:	607a      	str	r2, [r7, #4]
 8018284:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018286:	2300      	movs	r3, #0
 8018288:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	2b00      	cmp	r3, #0
 801828e:	d106      	bne.n	801829e <etharp_raw+0x26>
 8018290:	4b3a      	ldr	r3, [pc, #232]	; (801837c <etharp_raw+0x104>)
 8018292:	f240 4257 	movw	r2, #1111	; 0x457
 8018296:	493a      	ldr	r1, [pc, #232]	; (8018380 <etharp_raw+0x108>)
 8018298:	483a      	ldr	r0, [pc, #232]	; (8018384 <etharp_raw+0x10c>)
 801829a:	f001 ff73 	bl	801a184 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801829e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80182a2:	211c      	movs	r1, #28
 80182a4:	200e      	movs	r0, #14
 80182a6:	f7f7 fee1 	bl	801006c <pbuf_alloc>
 80182aa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80182ac:	69bb      	ldr	r3, [r7, #24]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d102      	bne.n	80182b8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80182b2:	f04f 33ff 	mov.w	r3, #4294967295
 80182b6:	e05d      	b.n	8018374 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80182b8:	69bb      	ldr	r3, [r7, #24]
 80182ba:	895b      	ldrh	r3, [r3, #10]
 80182bc:	2b1b      	cmp	r3, #27
 80182be:	d806      	bhi.n	80182ce <etharp_raw+0x56>
 80182c0:	4b2e      	ldr	r3, [pc, #184]	; (801837c <etharp_raw+0x104>)
 80182c2:	f240 4262 	movw	r2, #1122	; 0x462
 80182c6:	4930      	ldr	r1, [pc, #192]	; (8018388 <etharp_raw+0x110>)
 80182c8:	482e      	ldr	r0, [pc, #184]	; (8018384 <etharp_raw+0x10c>)
 80182ca:	f001 ff5b 	bl	801a184 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80182ce:	69bb      	ldr	r3, [r7, #24]
 80182d0:	685b      	ldr	r3, [r3, #4]
 80182d2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80182d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80182d6:	4618      	mov	r0, r3
 80182d8:	f7f6 fe00 	bl	800eedc <lwip_htons>
 80182dc:	4603      	mov	r3, r0
 80182de:	461a      	mov	r2, r3
 80182e0:	697b      	ldr	r3, [r7, #20]
 80182e2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80182ea:	2b06      	cmp	r3, #6
 80182ec:	d006      	beq.n	80182fc <etharp_raw+0x84>
 80182ee:	4b23      	ldr	r3, [pc, #140]	; (801837c <etharp_raw+0x104>)
 80182f0:	f240 4269 	movw	r2, #1129	; 0x469
 80182f4:	4925      	ldr	r1, [pc, #148]	; (801838c <etharp_raw+0x114>)
 80182f6:	4823      	ldr	r0, [pc, #140]	; (8018384 <etharp_raw+0x10c>)
 80182f8:	f001 ff44 	bl	801a184 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80182fc:	697b      	ldr	r3, [r7, #20]
 80182fe:	3308      	adds	r3, #8
 8018300:	2206      	movs	r2, #6
 8018302:	6839      	ldr	r1, [r7, #0]
 8018304:	4618      	mov	r0, r3
 8018306:	f001 fecc 	bl	801a0a2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801830a:	697b      	ldr	r3, [r7, #20]
 801830c:	3312      	adds	r3, #18
 801830e:	2206      	movs	r2, #6
 8018310:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018312:	4618      	mov	r0, r3
 8018314:	f001 fec5 	bl	801a0a2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018318:	697b      	ldr	r3, [r7, #20]
 801831a:	330e      	adds	r3, #14
 801831c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801831e:	6812      	ldr	r2, [r2, #0]
 8018320:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018322:	697b      	ldr	r3, [r7, #20]
 8018324:	3318      	adds	r3, #24
 8018326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018328:	6812      	ldr	r2, [r2, #0]
 801832a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801832c:	697b      	ldr	r3, [r7, #20]
 801832e:	2200      	movs	r2, #0
 8018330:	701a      	strb	r2, [r3, #0]
 8018332:	2200      	movs	r2, #0
 8018334:	f042 0201 	orr.w	r2, r2, #1
 8018338:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801833a:	697b      	ldr	r3, [r7, #20]
 801833c:	2200      	movs	r2, #0
 801833e:	f042 0208 	orr.w	r2, r2, #8
 8018342:	709a      	strb	r2, [r3, #2]
 8018344:	2200      	movs	r2, #0
 8018346:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018348:	697b      	ldr	r3, [r7, #20]
 801834a:	2206      	movs	r2, #6
 801834c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801834e:	697b      	ldr	r3, [r7, #20]
 8018350:	2204      	movs	r2, #4
 8018352:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018354:	f640 0306 	movw	r3, #2054	; 0x806
 8018358:	9300      	str	r3, [sp, #0]
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	68ba      	ldr	r2, [r7, #8]
 801835e:	69b9      	ldr	r1, [r7, #24]
 8018360:	68f8      	ldr	r0, [r7, #12]
 8018362:	f001 fb75 	bl	8019a50 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018366:	69b8      	ldr	r0, [r7, #24]
 8018368:	f7f8 f964 	bl	8010634 <pbuf_free>
  p = NULL;
 801836c:	2300      	movs	r3, #0
 801836e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018370:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018374:	4618      	mov	r0, r3
 8018376:	3720      	adds	r7, #32
 8018378:	46bd      	mov	sp, r7
 801837a:	bd80      	pop	{r7, pc}
 801837c:	0801df44 	.word	0x0801df44
 8018380:	0801e094 	.word	0x0801e094
 8018384:	0801dfbc 	.word	0x0801dfbc
 8018388:	0801e144 	.word	0x0801e144
 801838c:	0801e178 	.word	0x0801e178

08018390 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018390:	b580      	push	{r7, lr}
 8018392:	b088      	sub	sp, #32
 8018394:	af04      	add	r7, sp, #16
 8018396:	60f8      	str	r0, [r7, #12]
 8018398:	60b9      	str	r1, [r7, #8]
 801839a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80183a2:	68fb      	ldr	r3, [r7, #12]
 80183a4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80183ac:	2201      	movs	r2, #1
 80183ae:	9203      	str	r2, [sp, #12]
 80183b0:	68ba      	ldr	r2, [r7, #8]
 80183b2:	9202      	str	r2, [sp, #8]
 80183b4:	4a06      	ldr	r2, [pc, #24]	; (80183d0 <etharp_request_dst+0x40>)
 80183b6:	9201      	str	r2, [sp, #4]
 80183b8:	9300      	str	r3, [sp, #0]
 80183ba:	4603      	mov	r3, r0
 80183bc:	687a      	ldr	r2, [r7, #4]
 80183be:	68f8      	ldr	r0, [r7, #12]
 80183c0:	f7ff ff5a 	bl	8018278 <etharp_raw>
 80183c4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80183c6:	4618      	mov	r0, r3
 80183c8:	3710      	adds	r7, #16
 80183ca:	46bd      	mov	sp, r7
 80183cc:	bd80      	pop	{r7, pc}
 80183ce:	bf00      	nop
 80183d0:	0801e830 	.word	0x0801e830

080183d4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80183d4:	b580      	push	{r7, lr}
 80183d6:	b082      	sub	sp, #8
 80183d8:	af00      	add	r7, sp, #0
 80183da:	6078      	str	r0, [r7, #4]
 80183dc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80183de:	4a05      	ldr	r2, [pc, #20]	; (80183f4 <etharp_request+0x20>)
 80183e0:	6839      	ldr	r1, [r7, #0]
 80183e2:	6878      	ldr	r0, [r7, #4]
 80183e4:	f7ff ffd4 	bl	8018390 <etharp_request_dst>
 80183e8:	4603      	mov	r3, r0
}
 80183ea:	4618      	mov	r0, r3
 80183ec:	3708      	adds	r7, #8
 80183ee:	46bd      	mov	sp, r7
 80183f0:	bd80      	pop	{r7, pc}
 80183f2:	bf00      	nop
 80183f4:	0801e828 	.word	0x0801e828

080183f8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80183f8:	b580      	push	{r7, lr}
 80183fa:	b08e      	sub	sp, #56	; 0x38
 80183fc:	af04      	add	r7, sp, #16
 80183fe:	6078      	str	r0, [r7, #4]
 8018400:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018402:	4b79      	ldr	r3, [pc, #484]	; (80185e8 <icmp_input+0x1f0>)
 8018404:	689b      	ldr	r3, [r3, #8]
 8018406:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801840a:	781b      	ldrb	r3, [r3, #0]
 801840c:	f003 030f 	and.w	r3, r3, #15
 8018410:	b2db      	uxtb	r3, r3
 8018412:	009b      	lsls	r3, r3, #2
 8018414:	b2db      	uxtb	r3, r3
 8018416:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018418:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801841a:	2b13      	cmp	r3, #19
 801841c:	f240 80cd 	bls.w	80185ba <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018420:	687b      	ldr	r3, [r7, #4]
 8018422:	895b      	ldrh	r3, [r3, #10]
 8018424:	2b03      	cmp	r3, #3
 8018426:	f240 80ca 	bls.w	80185be <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	685b      	ldr	r3, [r3, #4]
 801842e:	781b      	ldrb	r3, [r3, #0]
 8018430:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018434:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018438:	2b00      	cmp	r3, #0
 801843a:	f000 80b7 	beq.w	80185ac <icmp_input+0x1b4>
 801843e:	2b08      	cmp	r3, #8
 8018440:	f040 80b7 	bne.w	80185b2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018444:	4b69      	ldr	r3, [pc, #420]	; (80185ec <icmp_input+0x1f4>)
 8018446:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018448:	4b67      	ldr	r3, [pc, #412]	; (80185e8 <icmp_input+0x1f0>)
 801844a:	695b      	ldr	r3, [r3, #20]
 801844c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018450:	2be0      	cmp	r3, #224	; 0xe0
 8018452:	f000 80bb 	beq.w	80185cc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018456:	4b64      	ldr	r3, [pc, #400]	; (80185e8 <icmp_input+0x1f0>)
 8018458:	695b      	ldr	r3, [r3, #20]
 801845a:	4a63      	ldr	r2, [pc, #396]	; (80185e8 <icmp_input+0x1f0>)
 801845c:	6812      	ldr	r2, [r2, #0]
 801845e:	4611      	mov	r1, r2
 8018460:	4618      	mov	r0, r3
 8018462:	f000 fbed 	bl	8018c40 <ip4_addr_isbroadcast_u32>
 8018466:	4603      	mov	r3, r0
 8018468:	2b00      	cmp	r3, #0
 801846a:	f040 80b1 	bne.w	80185d0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	891b      	ldrh	r3, [r3, #8]
 8018472:	2b07      	cmp	r3, #7
 8018474:	f240 80a5 	bls.w	80185c2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018478:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801847a:	330e      	adds	r3, #14
 801847c:	4619      	mov	r1, r3
 801847e:	6878      	ldr	r0, [r7, #4]
 8018480:	f7f8 f842 	bl	8010508 <pbuf_add_header>
 8018484:	4603      	mov	r3, r0
 8018486:	2b00      	cmp	r3, #0
 8018488:	d04b      	beq.n	8018522 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	891a      	ldrh	r2, [r3, #8]
 801848e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018490:	4413      	add	r3, r2
 8018492:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	891b      	ldrh	r3, [r3, #8]
 8018498:	8b7a      	ldrh	r2, [r7, #26]
 801849a:	429a      	cmp	r2, r3
 801849c:	f0c0 809a 	bcc.w	80185d4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80184a0:	8b7b      	ldrh	r3, [r7, #26]
 80184a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80184a6:	4619      	mov	r1, r3
 80184a8:	200e      	movs	r0, #14
 80184aa:	f7f7 fddf 	bl	801006c <pbuf_alloc>
 80184ae:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80184b0:	697b      	ldr	r3, [r7, #20]
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	f000 8090 	beq.w	80185d8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80184b8:	697b      	ldr	r3, [r7, #20]
 80184ba:	895b      	ldrh	r3, [r3, #10]
 80184bc:	461a      	mov	r2, r3
 80184be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80184c0:	3308      	adds	r3, #8
 80184c2:	429a      	cmp	r2, r3
 80184c4:	d203      	bcs.n	80184ce <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80184c6:	6978      	ldr	r0, [r7, #20]
 80184c8:	f7f8 f8b4 	bl	8010634 <pbuf_free>
          goto icmperr;
 80184cc:	e085      	b.n	80185da <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80184ce:	697b      	ldr	r3, [r7, #20]
 80184d0:	685b      	ldr	r3, [r3, #4]
 80184d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80184d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80184d6:	4618      	mov	r0, r3
 80184d8:	f001 fde3 	bl	801a0a2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80184dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80184de:	4619      	mov	r1, r3
 80184e0:	6978      	ldr	r0, [r7, #20]
 80184e2:	f7f8 f821 	bl	8010528 <pbuf_remove_header>
 80184e6:	4603      	mov	r3, r0
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d009      	beq.n	8018500 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80184ec:	4b40      	ldr	r3, [pc, #256]	; (80185f0 <icmp_input+0x1f8>)
 80184ee:	22b6      	movs	r2, #182	; 0xb6
 80184f0:	4940      	ldr	r1, [pc, #256]	; (80185f4 <icmp_input+0x1fc>)
 80184f2:	4841      	ldr	r0, [pc, #260]	; (80185f8 <icmp_input+0x200>)
 80184f4:	f001 fe46 	bl	801a184 <iprintf>
          pbuf_free(r);
 80184f8:	6978      	ldr	r0, [r7, #20]
 80184fa:	f7f8 f89b 	bl	8010634 <pbuf_free>
          goto icmperr;
 80184fe:	e06c      	b.n	80185da <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8018500:	6879      	ldr	r1, [r7, #4]
 8018502:	6978      	ldr	r0, [r7, #20]
 8018504:	f7f8 f9ba 	bl	801087c <pbuf_copy>
 8018508:	4603      	mov	r3, r0
 801850a:	2b00      	cmp	r3, #0
 801850c:	d003      	beq.n	8018516 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801850e:	6978      	ldr	r0, [r7, #20]
 8018510:	f7f8 f890 	bl	8010634 <pbuf_free>
          goto icmperr;
 8018514:	e061      	b.n	80185da <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8018516:	6878      	ldr	r0, [r7, #4]
 8018518:	f7f8 f88c 	bl	8010634 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801851c:	697b      	ldr	r3, [r7, #20]
 801851e:	607b      	str	r3, [r7, #4]
 8018520:	e00f      	b.n	8018542 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018522:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018524:	330e      	adds	r3, #14
 8018526:	4619      	mov	r1, r3
 8018528:	6878      	ldr	r0, [r7, #4]
 801852a:	f7f7 fffd 	bl	8010528 <pbuf_remove_header>
 801852e:	4603      	mov	r3, r0
 8018530:	2b00      	cmp	r3, #0
 8018532:	d006      	beq.n	8018542 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8018534:	4b2e      	ldr	r3, [pc, #184]	; (80185f0 <icmp_input+0x1f8>)
 8018536:	22c7      	movs	r2, #199	; 0xc7
 8018538:	4930      	ldr	r1, [pc, #192]	; (80185fc <icmp_input+0x204>)
 801853a:	482f      	ldr	r0, [pc, #188]	; (80185f8 <icmp_input+0x200>)
 801853c:	f001 fe22 	bl	801a184 <iprintf>
          goto icmperr;
 8018540:	e04b      	b.n	80185da <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	685b      	ldr	r3, [r3, #4]
 8018546:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018548:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801854a:	4619      	mov	r1, r3
 801854c:	6878      	ldr	r0, [r7, #4]
 801854e:	f7f7 ffdb 	bl	8010508 <pbuf_add_header>
 8018552:	4603      	mov	r3, r0
 8018554:	2b00      	cmp	r3, #0
 8018556:	d12b      	bne.n	80185b0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	685b      	ldr	r3, [r3, #4]
 801855c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801855e:	69fb      	ldr	r3, [r7, #28]
 8018560:	681a      	ldr	r2, [r3, #0]
 8018562:	68fb      	ldr	r3, [r7, #12]
 8018564:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018566:	4b20      	ldr	r3, [pc, #128]	; (80185e8 <icmp_input+0x1f0>)
 8018568:	691a      	ldr	r2, [r3, #16]
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801856e:	693b      	ldr	r3, [r7, #16]
 8018570:	2200      	movs	r2, #0
 8018572:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8018574:	693b      	ldr	r3, [r7, #16]
 8018576:	2200      	movs	r2, #0
 8018578:	709a      	strb	r2, [r3, #2]
 801857a:	2200      	movs	r2, #0
 801857c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801857e:	68fb      	ldr	r3, [r7, #12]
 8018580:	22ff      	movs	r2, #255	; 0xff
 8018582:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	2200      	movs	r2, #0
 8018588:	729a      	strb	r2, [r3, #10]
 801858a:	2200      	movs	r2, #0
 801858c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801858e:	683b      	ldr	r3, [r7, #0]
 8018590:	9302      	str	r3, [sp, #8]
 8018592:	2301      	movs	r3, #1
 8018594:	9301      	str	r3, [sp, #4]
 8018596:	2300      	movs	r3, #0
 8018598:	9300      	str	r3, [sp, #0]
 801859a:	23ff      	movs	r3, #255	; 0xff
 801859c:	2200      	movs	r2, #0
 801859e:	69f9      	ldr	r1, [r7, #28]
 80185a0:	6878      	ldr	r0, [r7, #4]
 80185a2:	f000 fa75 	bl	8018a90 <ip4_output_if>
 80185a6:	4603      	mov	r3, r0
 80185a8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80185aa:	e001      	b.n	80185b0 <icmp_input+0x1b8>
      break;
 80185ac:	bf00      	nop
 80185ae:	e000      	b.n	80185b2 <icmp_input+0x1ba>
      break;
 80185b0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80185b2:	6878      	ldr	r0, [r7, #4]
 80185b4:	f7f8 f83e 	bl	8010634 <pbuf_free>
  return;
 80185b8:	e013      	b.n	80185e2 <icmp_input+0x1ea>
    goto lenerr;
 80185ba:	bf00      	nop
 80185bc:	e002      	b.n	80185c4 <icmp_input+0x1cc>
    goto lenerr;
 80185be:	bf00      	nop
 80185c0:	e000      	b.n	80185c4 <icmp_input+0x1cc>
        goto lenerr;
 80185c2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80185c4:	6878      	ldr	r0, [r7, #4]
 80185c6:	f7f8 f835 	bl	8010634 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80185ca:	e00a      	b.n	80185e2 <icmp_input+0x1ea>
        goto icmperr;
 80185cc:	bf00      	nop
 80185ce:	e004      	b.n	80185da <icmp_input+0x1e2>
        goto icmperr;
 80185d0:	bf00      	nop
 80185d2:	e002      	b.n	80185da <icmp_input+0x1e2>
          goto icmperr;
 80185d4:	bf00      	nop
 80185d6:	e000      	b.n	80185da <icmp_input+0x1e2>
          goto icmperr;
 80185d8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80185da:	6878      	ldr	r0, [r7, #4]
 80185dc:	f7f8 f82a 	bl	8010634 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80185e0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80185e2:	3728      	adds	r7, #40	; 0x28
 80185e4:	46bd      	mov	sp, r7
 80185e6:	bd80      	pop	{r7, pc}
 80185e8:	20008290 	.word	0x20008290
 80185ec:	200082a4 	.word	0x200082a4
 80185f0:	0801e1bc 	.word	0x0801e1bc
 80185f4:	0801e1f4 	.word	0x0801e1f4
 80185f8:	0801e22c 	.word	0x0801e22c
 80185fc:	0801e254 	.word	0x0801e254

08018600 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018600:	b580      	push	{r7, lr}
 8018602:	b082      	sub	sp, #8
 8018604:	af00      	add	r7, sp, #0
 8018606:	6078      	str	r0, [r7, #4]
 8018608:	460b      	mov	r3, r1
 801860a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801860c:	78fb      	ldrb	r3, [r7, #3]
 801860e:	461a      	mov	r2, r3
 8018610:	2103      	movs	r1, #3
 8018612:	6878      	ldr	r0, [r7, #4]
 8018614:	f000 f814 	bl	8018640 <icmp_send_response>
}
 8018618:	bf00      	nop
 801861a:	3708      	adds	r7, #8
 801861c:	46bd      	mov	sp, r7
 801861e:	bd80      	pop	{r7, pc}

08018620 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018620:	b580      	push	{r7, lr}
 8018622:	b082      	sub	sp, #8
 8018624:	af00      	add	r7, sp, #0
 8018626:	6078      	str	r0, [r7, #4]
 8018628:	460b      	mov	r3, r1
 801862a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801862c:	78fb      	ldrb	r3, [r7, #3]
 801862e:	461a      	mov	r2, r3
 8018630:	210b      	movs	r1, #11
 8018632:	6878      	ldr	r0, [r7, #4]
 8018634:	f000 f804 	bl	8018640 <icmp_send_response>
}
 8018638:	bf00      	nop
 801863a:	3708      	adds	r7, #8
 801863c:	46bd      	mov	sp, r7
 801863e:	bd80      	pop	{r7, pc}

08018640 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018640:	b580      	push	{r7, lr}
 8018642:	b08c      	sub	sp, #48	; 0x30
 8018644:	af04      	add	r7, sp, #16
 8018646:	6078      	str	r0, [r7, #4]
 8018648:	460b      	mov	r3, r1
 801864a:	70fb      	strb	r3, [r7, #3]
 801864c:	4613      	mov	r3, r2
 801864e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018650:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018654:	2124      	movs	r1, #36	; 0x24
 8018656:	2022      	movs	r0, #34	; 0x22
 8018658:	f7f7 fd08 	bl	801006c <pbuf_alloc>
 801865c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801865e:	69fb      	ldr	r3, [r7, #28]
 8018660:	2b00      	cmp	r3, #0
 8018662:	d04c      	beq.n	80186fe <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018664:	69fb      	ldr	r3, [r7, #28]
 8018666:	895b      	ldrh	r3, [r3, #10]
 8018668:	2b23      	cmp	r3, #35	; 0x23
 801866a:	d806      	bhi.n	801867a <icmp_send_response+0x3a>
 801866c:	4b26      	ldr	r3, [pc, #152]	; (8018708 <icmp_send_response+0xc8>)
 801866e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018672:	4926      	ldr	r1, [pc, #152]	; (801870c <icmp_send_response+0xcc>)
 8018674:	4826      	ldr	r0, [pc, #152]	; (8018710 <icmp_send_response+0xd0>)
 8018676:	f001 fd85 	bl	801a184 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	685b      	ldr	r3, [r3, #4]
 801867e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018680:	69fb      	ldr	r3, [r7, #28]
 8018682:	685b      	ldr	r3, [r3, #4]
 8018684:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018686:	697b      	ldr	r3, [r7, #20]
 8018688:	78fa      	ldrb	r2, [r7, #3]
 801868a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801868c:	697b      	ldr	r3, [r7, #20]
 801868e:	78ba      	ldrb	r2, [r7, #2]
 8018690:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018692:	697b      	ldr	r3, [r7, #20]
 8018694:	2200      	movs	r2, #0
 8018696:	711a      	strb	r2, [r3, #4]
 8018698:	2200      	movs	r2, #0
 801869a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801869c:	697b      	ldr	r3, [r7, #20]
 801869e:	2200      	movs	r2, #0
 80186a0:	719a      	strb	r2, [r3, #6]
 80186a2:	2200      	movs	r2, #0
 80186a4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80186a6:	69fb      	ldr	r3, [r7, #28]
 80186a8:	685b      	ldr	r3, [r3, #4]
 80186aa:	f103 0008 	add.w	r0, r3, #8
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	685b      	ldr	r3, [r3, #4]
 80186b2:	221c      	movs	r2, #28
 80186b4:	4619      	mov	r1, r3
 80186b6:	f001 fcf4 	bl	801a0a2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80186ba:	69bb      	ldr	r3, [r7, #24]
 80186bc:	68db      	ldr	r3, [r3, #12]
 80186be:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80186c0:	f107 030c 	add.w	r3, r7, #12
 80186c4:	4618      	mov	r0, r3
 80186c6:	f000 f825 	bl	8018714 <ip4_route>
 80186ca:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80186cc:	693b      	ldr	r3, [r7, #16]
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	d011      	beq.n	80186f6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80186d2:	697b      	ldr	r3, [r7, #20]
 80186d4:	2200      	movs	r2, #0
 80186d6:	709a      	strb	r2, [r3, #2]
 80186d8:	2200      	movs	r2, #0
 80186da:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80186dc:	f107 020c 	add.w	r2, r7, #12
 80186e0:	693b      	ldr	r3, [r7, #16]
 80186e2:	9302      	str	r3, [sp, #8]
 80186e4:	2301      	movs	r3, #1
 80186e6:	9301      	str	r3, [sp, #4]
 80186e8:	2300      	movs	r3, #0
 80186ea:	9300      	str	r3, [sp, #0]
 80186ec:	23ff      	movs	r3, #255	; 0xff
 80186ee:	2100      	movs	r1, #0
 80186f0:	69f8      	ldr	r0, [r7, #28]
 80186f2:	f000 f9cd 	bl	8018a90 <ip4_output_if>
  }
  pbuf_free(q);
 80186f6:	69f8      	ldr	r0, [r7, #28]
 80186f8:	f7f7 ff9c 	bl	8010634 <pbuf_free>
 80186fc:	e000      	b.n	8018700 <icmp_send_response+0xc0>
    return;
 80186fe:	bf00      	nop
}
 8018700:	3720      	adds	r7, #32
 8018702:	46bd      	mov	sp, r7
 8018704:	bd80      	pop	{r7, pc}
 8018706:	bf00      	nop
 8018708:	0801e1bc 	.word	0x0801e1bc
 801870c:	0801e288 	.word	0x0801e288
 8018710:	0801e22c 	.word	0x0801e22c

08018714 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018714:	b480      	push	{r7}
 8018716:	b085      	sub	sp, #20
 8018718:	af00      	add	r7, sp, #0
 801871a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801871c:	4b33      	ldr	r3, [pc, #204]	; (80187ec <ip4_route+0xd8>)
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	60fb      	str	r3, [r7, #12]
 8018722:	e036      	b.n	8018792 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801872a:	f003 0301 	and.w	r3, r3, #1
 801872e:	b2db      	uxtb	r3, r3
 8018730:	2b00      	cmp	r3, #0
 8018732:	d02b      	beq.n	801878c <ip4_route+0x78>
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801873a:	089b      	lsrs	r3, r3, #2
 801873c:	f003 0301 	and.w	r3, r3, #1
 8018740:	b2db      	uxtb	r3, r3
 8018742:	2b00      	cmp	r3, #0
 8018744:	d022      	beq.n	801878c <ip4_route+0x78>
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	3304      	adds	r3, #4
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d01d      	beq.n	801878c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	681a      	ldr	r2, [r3, #0]
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	3304      	adds	r3, #4
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	405a      	eors	r2, r3
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	3308      	adds	r3, #8
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	4013      	ands	r3, r2
 8018764:	2b00      	cmp	r3, #0
 8018766:	d101      	bne.n	801876c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	e038      	b.n	80187de <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018772:	f003 0302 	and.w	r3, r3, #2
 8018776:	2b00      	cmp	r3, #0
 8018778:	d108      	bne.n	801878c <ip4_route+0x78>
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	681a      	ldr	r2, [r3, #0]
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	330c      	adds	r3, #12
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	429a      	cmp	r2, r3
 8018786:	d101      	bne.n	801878c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	e028      	b.n	80187de <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801878c:	68fb      	ldr	r3, [r7, #12]
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	60fb      	str	r3, [r7, #12]
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	2b00      	cmp	r3, #0
 8018796:	d1c5      	bne.n	8018724 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018798:	4b15      	ldr	r3, [pc, #84]	; (80187f0 <ip4_route+0xdc>)
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	2b00      	cmp	r3, #0
 801879e:	d01a      	beq.n	80187d6 <ip4_route+0xc2>
 80187a0:	4b13      	ldr	r3, [pc, #76]	; (80187f0 <ip4_route+0xdc>)
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80187a8:	f003 0301 	and.w	r3, r3, #1
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d012      	beq.n	80187d6 <ip4_route+0xc2>
 80187b0:	4b0f      	ldr	r3, [pc, #60]	; (80187f0 <ip4_route+0xdc>)
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80187b8:	f003 0304 	and.w	r3, r3, #4
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d00a      	beq.n	80187d6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80187c0:	4b0b      	ldr	r3, [pc, #44]	; (80187f0 <ip4_route+0xdc>)
 80187c2:	681b      	ldr	r3, [r3, #0]
 80187c4:	3304      	adds	r3, #4
 80187c6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d004      	beq.n	80187d6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	b2db      	uxtb	r3, r3
 80187d2:	2b7f      	cmp	r3, #127	; 0x7f
 80187d4:	d101      	bne.n	80187da <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80187d6:	2300      	movs	r3, #0
 80187d8:	e001      	b.n	80187de <ip4_route+0xca>
  }

  return netif_default;
 80187da:	4b05      	ldr	r3, [pc, #20]	; (80187f0 <ip4_route+0xdc>)
 80187dc:	681b      	ldr	r3, [r3, #0]
}
 80187de:	4618      	mov	r0, r3
 80187e0:	3714      	adds	r7, #20
 80187e2:	46bd      	mov	sp, r7
 80187e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187e8:	4770      	bx	lr
 80187ea:	bf00      	nop
 80187ec:	2000db94 	.word	0x2000db94
 80187f0:	2000db98 	.word	0x2000db98

080187f4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b082      	sub	sp, #8
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018802:	f003 0301 	and.w	r3, r3, #1
 8018806:	b2db      	uxtb	r3, r3
 8018808:	2b00      	cmp	r3, #0
 801880a:	d016      	beq.n	801883a <ip4_input_accept+0x46>
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	3304      	adds	r3, #4
 8018810:	681b      	ldr	r3, [r3, #0]
 8018812:	2b00      	cmp	r3, #0
 8018814:	d011      	beq.n	801883a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018816:	4b0b      	ldr	r3, [pc, #44]	; (8018844 <ip4_input_accept+0x50>)
 8018818:	695a      	ldr	r2, [r3, #20]
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	3304      	adds	r3, #4
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	429a      	cmp	r2, r3
 8018822:	d008      	beq.n	8018836 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018824:	4b07      	ldr	r3, [pc, #28]	; (8018844 <ip4_input_accept+0x50>)
 8018826:	695b      	ldr	r3, [r3, #20]
 8018828:	6879      	ldr	r1, [r7, #4]
 801882a:	4618      	mov	r0, r3
 801882c:	f000 fa08 	bl	8018c40 <ip4_addr_isbroadcast_u32>
 8018830:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018832:	2b00      	cmp	r3, #0
 8018834:	d001      	beq.n	801883a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018836:	2301      	movs	r3, #1
 8018838:	e000      	b.n	801883c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801883a:	2300      	movs	r3, #0
}
 801883c:	4618      	mov	r0, r3
 801883e:	3708      	adds	r7, #8
 8018840:	46bd      	mov	sp, r7
 8018842:	bd80      	pop	{r7, pc}
 8018844:	20008290 	.word	0x20008290

08018848 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018848:	b580      	push	{r7, lr}
 801884a:	b086      	sub	sp, #24
 801884c:	af00      	add	r7, sp, #0
 801884e:	6078      	str	r0, [r7, #4]
 8018850:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	685b      	ldr	r3, [r3, #4]
 8018856:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8018858:	697b      	ldr	r3, [r7, #20]
 801885a:	781b      	ldrb	r3, [r3, #0]
 801885c:	091b      	lsrs	r3, r3, #4
 801885e:	b2db      	uxtb	r3, r3
 8018860:	2b04      	cmp	r3, #4
 8018862:	d004      	beq.n	801886e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018864:	6878      	ldr	r0, [r7, #4]
 8018866:	f7f7 fee5 	bl	8010634 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801886a:	2300      	movs	r3, #0
 801886c:	e107      	b.n	8018a7e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801886e:	697b      	ldr	r3, [r7, #20]
 8018870:	781b      	ldrb	r3, [r3, #0]
 8018872:	f003 030f 	and.w	r3, r3, #15
 8018876:	b2db      	uxtb	r3, r3
 8018878:	009b      	lsls	r3, r3, #2
 801887a:	b2db      	uxtb	r3, r3
 801887c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801887e:	697b      	ldr	r3, [r7, #20]
 8018880:	885b      	ldrh	r3, [r3, #2]
 8018882:	b29b      	uxth	r3, r3
 8018884:	4618      	mov	r0, r3
 8018886:	f7f6 fb29 	bl	800eedc <lwip_htons>
 801888a:	4603      	mov	r3, r0
 801888c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	891b      	ldrh	r3, [r3, #8]
 8018892:	89ba      	ldrh	r2, [r7, #12]
 8018894:	429a      	cmp	r2, r3
 8018896:	d204      	bcs.n	80188a2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8018898:	89bb      	ldrh	r3, [r7, #12]
 801889a:	4619      	mov	r1, r3
 801889c:	6878      	ldr	r0, [r7, #4]
 801889e:	f7f7 fd43 	bl	8010328 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	895b      	ldrh	r3, [r3, #10]
 80188a6:	89fa      	ldrh	r2, [r7, #14]
 80188a8:	429a      	cmp	r2, r3
 80188aa:	d807      	bhi.n	80188bc <ip4_input+0x74>
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	891b      	ldrh	r3, [r3, #8]
 80188b0:	89ba      	ldrh	r2, [r7, #12]
 80188b2:	429a      	cmp	r2, r3
 80188b4:	d802      	bhi.n	80188bc <ip4_input+0x74>
 80188b6:	89fb      	ldrh	r3, [r7, #14]
 80188b8:	2b13      	cmp	r3, #19
 80188ba:	d804      	bhi.n	80188c6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80188bc:	6878      	ldr	r0, [r7, #4]
 80188be:	f7f7 feb9 	bl	8010634 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80188c2:	2300      	movs	r3, #0
 80188c4:	e0db      	b.n	8018a7e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80188c6:	697b      	ldr	r3, [r7, #20]
 80188c8:	691b      	ldr	r3, [r3, #16]
 80188ca:	4a6f      	ldr	r2, [pc, #444]	; (8018a88 <ip4_input+0x240>)
 80188cc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80188ce:	697b      	ldr	r3, [r7, #20]
 80188d0:	68db      	ldr	r3, [r3, #12]
 80188d2:	4a6d      	ldr	r2, [pc, #436]	; (8018a88 <ip4_input+0x240>)
 80188d4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80188d6:	4b6c      	ldr	r3, [pc, #432]	; (8018a88 <ip4_input+0x240>)
 80188d8:	695b      	ldr	r3, [r3, #20]
 80188da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80188de:	2be0      	cmp	r3, #224	; 0xe0
 80188e0:	d112      	bne.n	8018908 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80188e2:	683b      	ldr	r3, [r7, #0]
 80188e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80188e8:	f003 0301 	and.w	r3, r3, #1
 80188ec:	b2db      	uxtb	r3, r3
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d007      	beq.n	8018902 <ip4_input+0xba>
 80188f2:	683b      	ldr	r3, [r7, #0]
 80188f4:	3304      	adds	r3, #4
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d002      	beq.n	8018902 <ip4_input+0xba>
      netif = inp;
 80188fc:	683b      	ldr	r3, [r7, #0]
 80188fe:	613b      	str	r3, [r7, #16]
 8018900:	e02a      	b.n	8018958 <ip4_input+0x110>
    } else {
      netif = NULL;
 8018902:	2300      	movs	r3, #0
 8018904:	613b      	str	r3, [r7, #16]
 8018906:	e027      	b.n	8018958 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018908:	6838      	ldr	r0, [r7, #0]
 801890a:	f7ff ff73 	bl	80187f4 <ip4_input_accept>
 801890e:	4603      	mov	r3, r0
 8018910:	2b00      	cmp	r3, #0
 8018912:	d002      	beq.n	801891a <ip4_input+0xd2>
      netif = inp;
 8018914:	683b      	ldr	r3, [r7, #0]
 8018916:	613b      	str	r3, [r7, #16]
 8018918:	e01e      	b.n	8018958 <ip4_input+0x110>
    } else {
      netif = NULL;
 801891a:	2300      	movs	r3, #0
 801891c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801891e:	4b5a      	ldr	r3, [pc, #360]	; (8018a88 <ip4_input+0x240>)
 8018920:	695b      	ldr	r3, [r3, #20]
 8018922:	b2db      	uxtb	r3, r3
 8018924:	2b7f      	cmp	r3, #127	; 0x7f
 8018926:	d017      	beq.n	8018958 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018928:	4b58      	ldr	r3, [pc, #352]	; (8018a8c <ip4_input+0x244>)
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	613b      	str	r3, [r7, #16]
 801892e:	e00e      	b.n	801894e <ip4_input+0x106>
          if (netif == inp) {
 8018930:	693a      	ldr	r2, [r7, #16]
 8018932:	683b      	ldr	r3, [r7, #0]
 8018934:	429a      	cmp	r2, r3
 8018936:	d006      	beq.n	8018946 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018938:	6938      	ldr	r0, [r7, #16]
 801893a:	f7ff ff5b 	bl	80187f4 <ip4_input_accept>
 801893e:	4603      	mov	r3, r0
 8018940:	2b00      	cmp	r3, #0
 8018942:	d108      	bne.n	8018956 <ip4_input+0x10e>
 8018944:	e000      	b.n	8018948 <ip4_input+0x100>
            continue;
 8018946:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018948:	693b      	ldr	r3, [r7, #16]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	613b      	str	r3, [r7, #16]
 801894e:	693b      	ldr	r3, [r7, #16]
 8018950:	2b00      	cmp	r3, #0
 8018952:	d1ed      	bne.n	8018930 <ip4_input+0xe8>
 8018954:	e000      	b.n	8018958 <ip4_input+0x110>
            break;
 8018956:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018958:	4b4b      	ldr	r3, [pc, #300]	; (8018a88 <ip4_input+0x240>)
 801895a:	691b      	ldr	r3, [r3, #16]
 801895c:	6839      	ldr	r1, [r7, #0]
 801895e:	4618      	mov	r0, r3
 8018960:	f000 f96e 	bl	8018c40 <ip4_addr_isbroadcast_u32>
 8018964:	4603      	mov	r3, r0
 8018966:	2b00      	cmp	r3, #0
 8018968:	d105      	bne.n	8018976 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801896a:	4b47      	ldr	r3, [pc, #284]	; (8018a88 <ip4_input+0x240>)
 801896c:	691b      	ldr	r3, [r3, #16]
 801896e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018972:	2be0      	cmp	r3, #224	; 0xe0
 8018974:	d104      	bne.n	8018980 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018976:	6878      	ldr	r0, [r7, #4]
 8018978:	f7f7 fe5c 	bl	8010634 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801897c:	2300      	movs	r3, #0
 801897e:	e07e      	b.n	8018a7e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018980:	693b      	ldr	r3, [r7, #16]
 8018982:	2b00      	cmp	r3, #0
 8018984:	d104      	bne.n	8018990 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018986:	6878      	ldr	r0, [r7, #4]
 8018988:	f7f7 fe54 	bl	8010634 <pbuf_free>
    return ERR_OK;
 801898c:	2300      	movs	r3, #0
 801898e:	e076      	b.n	8018a7e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018990:	697b      	ldr	r3, [r7, #20]
 8018992:	88db      	ldrh	r3, [r3, #6]
 8018994:	b29b      	uxth	r3, r3
 8018996:	461a      	mov	r2, r3
 8018998:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801899c:	4013      	ands	r3, r2
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d00b      	beq.n	80189ba <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80189a2:	6878      	ldr	r0, [r7, #4]
 80189a4:	f000 fc92 	bl	80192cc <ip4_reass>
 80189a8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d101      	bne.n	80189b4 <ip4_input+0x16c>
      return ERR_OK;
 80189b0:	2300      	movs	r3, #0
 80189b2:	e064      	b.n	8018a7e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	685b      	ldr	r3, [r3, #4]
 80189b8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80189ba:	4a33      	ldr	r2, [pc, #204]	; (8018a88 <ip4_input+0x240>)
 80189bc:	693b      	ldr	r3, [r7, #16]
 80189be:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80189c0:	4a31      	ldr	r2, [pc, #196]	; (8018a88 <ip4_input+0x240>)
 80189c2:	683b      	ldr	r3, [r7, #0]
 80189c4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80189c6:	4a30      	ldr	r2, [pc, #192]	; (8018a88 <ip4_input+0x240>)
 80189c8:	697b      	ldr	r3, [r7, #20]
 80189ca:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80189cc:	697b      	ldr	r3, [r7, #20]
 80189ce:	781b      	ldrb	r3, [r3, #0]
 80189d0:	f003 030f 	and.w	r3, r3, #15
 80189d4:	b2db      	uxtb	r3, r3
 80189d6:	009b      	lsls	r3, r3, #2
 80189d8:	b2db      	uxtb	r3, r3
 80189da:	b29a      	uxth	r2, r3
 80189dc:	4b2a      	ldr	r3, [pc, #168]	; (8018a88 <ip4_input+0x240>)
 80189de:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80189e0:	89fb      	ldrh	r3, [r7, #14]
 80189e2:	4619      	mov	r1, r3
 80189e4:	6878      	ldr	r0, [r7, #4]
 80189e6:	f7f7 fd9f 	bl	8010528 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80189ea:	697b      	ldr	r3, [r7, #20]
 80189ec:	7a5b      	ldrb	r3, [r3, #9]
 80189ee:	2b11      	cmp	r3, #17
 80189f0:	d006      	beq.n	8018a00 <ip4_input+0x1b8>
 80189f2:	2b11      	cmp	r3, #17
 80189f4:	dc13      	bgt.n	8018a1e <ip4_input+0x1d6>
 80189f6:	2b01      	cmp	r3, #1
 80189f8:	d00c      	beq.n	8018a14 <ip4_input+0x1cc>
 80189fa:	2b06      	cmp	r3, #6
 80189fc:	d005      	beq.n	8018a0a <ip4_input+0x1c2>
 80189fe:	e00e      	b.n	8018a1e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018a00:	6839      	ldr	r1, [r7, #0]
 8018a02:	6878      	ldr	r0, [r7, #4]
 8018a04:	f7fe fb5a 	bl	80170bc <udp_input>
        break;
 8018a08:	e026      	b.n	8018a58 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018a0a:	6839      	ldr	r1, [r7, #0]
 8018a0c:	6878      	ldr	r0, [r7, #4]
 8018a0e:	f7f9 ff17 	bl	8012840 <tcp_input>
        break;
 8018a12:	e021      	b.n	8018a58 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018a14:	6839      	ldr	r1, [r7, #0]
 8018a16:	6878      	ldr	r0, [r7, #4]
 8018a18:	f7ff fcee 	bl	80183f8 <icmp_input>
        break;
 8018a1c:	e01c      	b.n	8018a58 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018a1e:	4b1a      	ldr	r3, [pc, #104]	; (8018a88 <ip4_input+0x240>)
 8018a20:	695b      	ldr	r3, [r3, #20]
 8018a22:	6939      	ldr	r1, [r7, #16]
 8018a24:	4618      	mov	r0, r3
 8018a26:	f000 f90b 	bl	8018c40 <ip4_addr_isbroadcast_u32>
 8018a2a:	4603      	mov	r3, r0
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d10f      	bne.n	8018a50 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018a30:	4b15      	ldr	r3, [pc, #84]	; (8018a88 <ip4_input+0x240>)
 8018a32:	695b      	ldr	r3, [r3, #20]
 8018a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018a38:	2be0      	cmp	r3, #224	; 0xe0
 8018a3a:	d009      	beq.n	8018a50 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018a3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018a40:	4619      	mov	r1, r3
 8018a42:	6878      	ldr	r0, [r7, #4]
 8018a44:	f7f7 fde3 	bl	801060e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018a48:	2102      	movs	r1, #2
 8018a4a:	6878      	ldr	r0, [r7, #4]
 8018a4c:	f7ff fdd8 	bl	8018600 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018a50:	6878      	ldr	r0, [r7, #4]
 8018a52:	f7f7 fdef 	bl	8010634 <pbuf_free>
        break;
 8018a56:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018a58:	4b0b      	ldr	r3, [pc, #44]	; (8018a88 <ip4_input+0x240>)
 8018a5a:	2200      	movs	r2, #0
 8018a5c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018a5e:	4b0a      	ldr	r3, [pc, #40]	; (8018a88 <ip4_input+0x240>)
 8018a60:	2200      	movs	r2, #0
 8018a62:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018a64:	4b08      	ldr	r3, [pc, #32]	; (8018a88 <ip4_input+0x240>)
 8018a66:	2200      	movs	r2, #0
 8018a68:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018a6a:	4b07      	ldr	r3, [pc, #28]	; (8018a88 <ip4_input+0x240>)
 8018a6c:	2200      	movs	r2, #0
 8018a6e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018a70:	4b05      	ldr	r3, [pc, #20]	; (8018a88 <ip4_input+0x240>)
 8018a72:	2200      	movs	r2, #0
 8018a74:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018a76:	4b04      	ldr	r3, [pc, #16]	; (8018a88 <ip4_input+0x240>)
 8018a78:	2200      	movs	r2, #0
 8018a7a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018a7c:	2300      	movs	r3, #0
}
 8018a7e:	4618      	mov	r0, r3
 8018a80:	3718      	adds	r7, #24
 8018a82:	46bd      	mov	sp, r7
 8018a84:	bd80      	pop	{r7, pc}
 8018a86:	bf00      	nop
 8018a88:	20008290 	.word	0x20008290
 8018a8c:	2000db94 	.word	0x2000db94

08018a90 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b08a      	sub	sp, #40	; 0x28
 8018a94:	af04      	add	r7, sp, #16
 8018a96:	60f8      	str	r0, [r7, #12]
 8018a98:	60b9      	str	r1, [r7, #8]
 8018a9a:	607a      	str	r2, [r7, #4]
 8018a9c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018a9e:	68bb      	ldr	r3, [r7, #8]
 8018aa0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d009      	beq.n	8018abc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018aa8:	68bb      	ldr	r3, [r7, #8]
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d003      	beq.n	8018ab6 <ip4_output_if+0x26>
 8018aae:	68bb      	ldr	r3, [r7, #8]
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	d102      	bne.n	8018abc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ab8:	3304      	adds	r3, #4
 8018aba:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018abc:	78fa      	ldrb	r2, [r7, #3]
 8018abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ac0:	9302      	str	r3, [sp, #8]
 8018ac2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018ac6:	9301      	str	r3, [sp, #4]
 8018ac8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018acc:	9300      	str	r3, [sp, #0]
 8018ace:	4613      	mov	r3, r2
 8018ad0:	687a      	ldr	r2, [r7, #4]
 8018ad2:	6979      	ldr	r1, [r7, #20]
 8018ad4:	68f8      	ldr	r0, [r7, #12]
 8018ad6:	f000 f805 	bl	8018ae4 <ip4_output_if_src>
 8018ada:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018adc:	4618      	mov	r0, r3
 8018ade:	3718      	adds	r7, #24
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	bd80      	pop	{r7, pc}

08018ae4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018ae4:	b580      	push	{r7, lr}
 8018ae6:	b088      	sub	sp, #32
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	60f8      	str	r0, [r7, #12]
 8018aec:	60b9      	str	r1, [r7, #8]
 8018aee:	607a      	str	r2, [r7, #4]
 8018af0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	7b9b      	ldrb	r3, [r3, #14]
 8018af6:	2b01      	cmp	r3, #1
 8018af8:	d006      	beq.n	8018b08 <ip4_output_if_src+0x24>
 8018afa:	4b4b      	ldr	r3, [pc, #300]	; (8018c28 <ip4_output_if_src+0x144>)
 8018afc:	f44f 7255 	mov.w	r2, #852	; 0x354
 8018b00:	494a      	ldr	r1, [pc, #296]	; (8018c2c <ip4_output_if_src+0x148>)
 8018b02:	484b      	ldr	r0, [pc, #300]	; (8018c30 <ip4_output_if_src+0x14c>)
 8018b04:	f001 fb3e 	bl	801a184 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	d060      	beq.n	8018bd0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8018b0e:	2314      	movs	r3, #20
 8018b10:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8018b12:	2114      	movs	r1, #20
 8018b14:	68f8      	ldr	r0, [r7, #12]
 8018b16:	f7f7 fcf7 	bl	8010508 <pbuf_add_header>
 8018b1a:	4603      	mov	r3, r0
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d002      	beq.n	8018b26 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018b20:	f06f 0301 	mvn.w	r3, #1
 8018b24:	e07c      	b.n	8018c20 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	685b      	ldr	r3, [r3, #4]
 8018b2a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	895b      	ldrh	r3, [r3, #10]
 8018b30:	2b13      	cmp	r3, #19
 8018b32:	d806      	bhi.n	8018b42 <ip4_output_if_src+0x5e>
 8018b34:	4b3c      	ldr	r3, [pc, #240]	; (8018c28 <ip4_output_if_src+0x144>)
 8018b36:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018b3a:	493e      	ldr	r1, [pc, #248]	; (8018c34 <ip4_output_if_src+0x150>)
 8018b3c:	483c      	ldr	r0, [pc, #240]	; (8018c30 <ip4_output_if_src+0x14c>)
 8018b3e:	f001 fb21 	bl	801a184 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018b42:	69fb      	ldr	r3, [r7, #28]
 8018b44:	78fa      	ldrb	r2, [r7, #3]
 8018b46:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018b48:	69fb      	ldr	r3, [r7, #28]
 8018b4a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018b4e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	681a      	ldr	r2, [r3, #0]
 8018b54:	69fb      	ldr	r3, [r7, #28]
 8018b56:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018b58:	8b7b      	ldrh	r3, [r7, #26]
 8018b5a:	089b      	lsrs	r3, r3, #2
 8018b5c:	b29b      	uxth	r3, r3
 8018b5e:	b2db      	uxtb	r3, r3
 8018b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b64:	b2da      	uxtb	r2, r3
 8018b66:	69fb      	ldr	r3, [r7, #28]
 8018b68:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018b6a:	69fb      	ldr	r3, [r7, #28]
 8018b6c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018b70:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	891b      	ldrh	r3, [r3, #8]
 8018b76:	4618      	mov	r0, r3
 8018b78:	f7f6 f9b0 	bl	800eedc <lwip_htons>
 8018b7c:	4603      	mov	r3, r0
 8018b7e:	461a      	mov	r2, r3
 8018b80:	69fb      	ldr	r3, [r7, #28]
 8018b82:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018b84:	69fb      	ldr	r3, [r7, #28]
 8018b86:	2200      	movs	r2, #0
 8018b88:	719a      	strb	r2, [r3, #6]
 8018b8a:	2200      	movs	r2, #0
 8018b8c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018b8e:	4b2a      	ldr	r3, [pc, #168]	; (8018c38 <ip4_output_if_src+0x154>)
 8018b90:	881b      	ldrh	r3, [r3, #0]
 8018b92:	4618      	mov	r0, r3
 8018b94:	f7f6 f9a2 	bl	800eedc <lwip_htons>
 8018b98:	4603      	mov	r3, r0
 8018b9a:	461a      	mov	r2, r3
 8018b9c:	69fb      	ldr	r3, [r7, #28]
 8018b9e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018ba0:	4b25      	ldr	r3, [pc, #148]	; (8018c38 <ip4_output_if_src+0x154>)
 8018ba2:	881b      	ldrh	r3, [r3, #0]
 8018ba4:	3301      	adds	r3, #1
 8018ba6:	b29a      	uxth	r2, r3
 8018ba8:	4b23      	ldr	r3, [pc, #140]	; (8018c38 <ip4_output_if_src+0x154>)
 8018baa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018bac:	68bb      	ldr	r3, [r7, #8]
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d104      	bne.n	8018bbc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018bb2:	4b22      	ldr	r3, [pc, #136]	; (8018c3c <ip4_output_if_src+0x158>)
 8018bb4:	681a      	ldr	r2, [r3, #0]
 8018bb6:	69fb      	ldr	r3, [r7, #28]
 8018bb8:	60da      	str	r2, [r3, #12]
 8018bba:	e003      	b.n	8018bc4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018bbc:	68bb      	ldr	r3, [r7, #8]
 8018bbe:	681a      	ldr	r2, [r3, #0]
 8018bc0:	69fb      	ldr	r3, [r7, #28]
 8018bc2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018bc4:	69fb      	ldr	r3, [r7, #28]
 8018bc6:	2200      	movs	r2, #0
 8018bc8:	729a      	strb	r2, [r3, #10]
 8018bca:	2200      	movs	r2, #0
 8018bcc:	72da      	strb	r2, [r3, #11]
 8018bce:	e00f      	b.n	8018bf0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	895b      	ldrh	r3, [r3, #10]
 8018bd4:	2b13      	cmp	r3, #19
 8018bd6:	d802      	bhi.n	8018bde <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018bd8:	f06f 0301 	mvn.w	r3, #1
 8018bdc:	e020      	b.n	8018c20 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	685b      	ldr	r3, [r3, #4]
 8018be2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018be4:	69fb      	ldr	r3, [r7, #28]
 8018be6:	691b      	ldr	r3, [r3, #16]
 8018be8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018bea:	f107 0314 	add.w	r3, r7, #20
 8018bee:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bf2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d00c      	beq.n	8018c12 <ip4_output_if_src+0x12e>
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	891a      	ldrh	r2, [r3, #8]
 8018bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018c00:	429a      	cmp	r2, r3
 8018c02:	d906      	bls.n	8018c12 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018c04:	687a      	ldr	r2, [r7, #4]
 8018c06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018c08:	68f8      	ldr	r0, [r7, #12]
 8018c0a:	f000 fd4d 	bl	80196a8 <ip4_frag>
 8018c0e:	4603      	mov	r3, r0
 8018c10:	e006      	b.n	8018c20 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c14:	695b      	ldr	r3, [r3, #20]
 8018c16:	687a      	ldr	r2, [r7, #4]
 8018c18:	68f9      	ldr	r1, [r7, #12]
 8018c1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018c1c:	4798      	blx	r3
 8018c1e:	4603      	mov	r3, r0
}
 8018c20:	4618      	mov	r0, r3
 8018c22:	3720      	adds	r7, #32
 8018c24:	46bd      	mov	sp, r7
 8018c26:	bd80      	pop	{r7, pc}
 8018c28:	0801e2b4 	.word	0x0801e2b4
 8018c2c:	0801e2e8 	.word	0x0801e2e8
 8018c30:	0801e2f4 	.word	0x0801e2f4
 8018c34:	0801e31c 	.word	0x0801e31c
 8018c38:	20004bfa 	.word	0x20004bfa
 8018c3c:	0801e824 	.word	0x0801e824

08018c40 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018c40:	b480      	push	{r7}
 8018c42:	b085      	sub	sp, #20
 8018c44:	af00      	add	r7, sp, #0
 8018c46:	6078      	str	r0, [r7, #4]
 8018c48:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c54:	d002      	beq.n	8018c5c <ip4_addr_isbroadcast_u32+0x1c>
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	2b00      	cmp	r3, #0
 8018c5a:	d101      	bne.n	8018c60 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018c5c:	2301      	movs	r3, #1
 8018c5e:	e02a      	b.n	8018cb6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018c60:	683b      	ldr	r3, [r7, #0]
 8018c62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018c66:	f003 0302 	and.w	r3, r3, #2
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d101      	bne.n	8018c72 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018c6e:	2300      	movs	r3, #0
 8018c70:	e021      	b.n	8018cb6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018c72:	683b      	ldr	r3, [r7, #0]
 8018c74:	3304      	adds	r3, #4
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	687a      	ldr	r2, [r7, #4]
 8018c7a:	429a      	cmp	r2, r3
 8018c7c:	d101      	bne.n	8018c82 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018c7e:	2300      	movs	r3, #0
 8018c80:	e019      	b.n	8018cb6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018c82:	68fa      	ldr	r2, [r7, #12]
 8018c84:	683b      	ldr	r3, [r7, #0]
 8018c86:	3304      	adds	r3, #4
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	405a      	eors	r2, r3
 8018c8c:	683b      	ldr	r3, [r7, #0]
 8018c8e:	3308      	adds	r3, #8
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	4013      	ands	r3, r2
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d10d      	bne.n	8018cb4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018c98:	683b      	ldr	r3, [r7, #0]
 8018c9a:	3308      	adds	r3, #8
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	43da      	mvns	r2, r3
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018ca4:	683b      	ldr	r3, [r7, #0]
 8018ca6:	3308      	adds	r3, #8
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018cac:	429a      	cmp	r2, r3
 8018cae:	d101      	bne.n	8018cb4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018cb0:	2301      	movs	r3, #1
 8018cb2:	e000      	b.n	8018cb6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018cb4:	2300      	movs	r3, #0
  }
}
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	3714      	adds	r7, #20
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cc0:	4770      	bx	lr
	...

08018cc4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018cc4:	b580      	push	{r7, lr}
 8018cc6:	b084      	sub	sp, #16
 8018cc8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018cca:	2300      	movs	r3, #0
 8018ccc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018cce:	4b12      	ldr	r3, [pc, #72]	; (8018d18 <ip_reass_tmr+0x54>)
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018cd4:	e018      	b.n	8018d08 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	7fdb      	ldrb	r3, [r3, #31]
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d00b      	beq.n	8018cf6 <ip_reass_tmr+0x32>
      r->timer--;
 8018cde:	68fb      	ldr	r3, [r7, #12]
 8018ce0:	7fdb      	ldrb	r3, [r3, #31]
 8018ce2:	3b01      	subs	r3, #1
 8018ce4:	b2da      	uxtb	r2, r3
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	60fb      	str	r3, [r7, #12]
 8018cf4:	e008      	b.n	8018d08 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018cfa:	68fb      	ldr	r3, [r7, #12]
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018d00:	68b9      	ldr	r1, [r7, #8]
 8018d02:	6878      	ldr	r0, [r7, #4]
 8018d04:	f000 f80a 	bl	8018d1c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d1e3      	bne.n	8018cd6 <ip_reass_tmr+0x12>
    }
  }
}
 8018d0e:	bf00      	nop
 8018d10:	bf00      	nop
 8018d12:	3710      	adds	r7, #16
 8018d14:	46bd      	mov	sp, r7
 8018d16:	bd80      	pop	{r7, pc}
 8018d18:	20004bfc 	.word	0x20004bfc

08018d1c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	b088      	sub	sp, #32
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	6078      	str	r0, [r7, #4]
 8018d24:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018d26:	2300      	movs	r3, #0
 8018d28:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018d2a:	683a      	ldr	r2, [r7, #0]
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	429a      	cmp	r2, r3
 8018d30:	d105      	bne.n	8018d3e <ip_reass_free_complete_datagram+0x22>
 8018d32:	4b45      	ldr	r3, [pc, #276]	; (8018e48 <ip_reass_free_complete_datagram+0x12c>)
 8018d34:	22ab      	movs	r2, #171	; 0xab
 8018d36:	4945      	ldr	r1, [pc, #276]	; (8018e4c <ip_reass_free_complete_datagram+0x130>)
 8018d38:	4845      	ldr	r0, [pc, #276]	; (8018e50 <ip_reass_free_complete_datagram+0x134>)
 8018d3a:	f001 fa23 	bl	801a184 <iprintf>
  if (prev != NULL) {
 8018d3e:	683b      	ldr	r3, [r7, #0]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	d00a      	beq.n	8018d5a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018d44:	683b      	ldr	r3, [r7, #0]
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	687a      	ldr	r2, [r7, #4]
 8018d4a:	429a      	cmp	r2, r3
 8018d4c:	d005      	beq.n	8018d5a <ip_reass_free_complete_datagram+0x3e>
 8018d4e:	4b3e      	ldr	r3, [pc, #248]	; (8018e48 <ip_reass_free_complete_datagram+0x12c>)
 8018d50:	22ad      	movs	r2, #173	; 0xad
 8018d52:	4940      	ldr	r1, [pc, #256]	; (8018e54 <ip_reass_free_complete_datagram+0x138>)
 8018d54:	483e      	ldr	r0, [pc, #248]	; (8018e50 <ip_reass_free_complete_datagram+0x134>)
 8018d56:	f001 fa15 	bl	801a184 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	685b      	ldr	r3, [r3, #4]
 8018d5e:	685b      	ldr	r3, [r3, #4]
 8018d60:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018d62:	697b      	ldr	r3, [r7, #20]
 8018d64:	889b      	ldrh	r3, [r3, #4]
 8018d66:	b29b      	uxth	r3, r3
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d12a      	bne.n	8018dc2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	685b      	ldr	r3, [r3, #4]
 8018d70:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018d72:	697b      	ldr	r3, [r7, #20]
 8018d74:	681a      	ldr	r2, [r3, #0]
 8018d76:	687b      	ldr	r3, [r7, #4]
 8018d78:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018d7a:	69bb      	ldr	r3, [r7, #24]
 8018d7c:	6858      	ldr	r0, [r3, #4]
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	3308      	adds	r3, #8
 8018d82:	2214      	movs	r2, #20
 8018d84:	4619      	mov	r1, r3
 8018d86:	f001 f98c 	bl	801a0a2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018d8a:	2101      	movs	r1, #1
 8018d8c:	69b8      	ldr	r0, [r7, #24]
 8018d8e:	f7ff fc47 	bl	8018620 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018d92:	69b8      	ldr	r0, [r7, #24]
 8018d94:	f7f7 fcdc 	bl	8010750 <pbuf_clen>
 8018d98:	4603      	mov	r3, r0
 8018d9a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018d9c:	8bfa      	ldrh	r2, [r7, #30]
 8018d9e:	8a7b      	ldrh	r3, [r7, #18]
 8018da0:	4413      	add	r3, r2
 8018da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018da6:	db05      	blt.n	8018db4 <ip_reass_free_complete_datagram+0x98>
 8018da8:	4b27      	ldr	r3, [pc, #156]	; (8018e48 <ip_reass_free_complete_datagram+0x12c>)
 8018daa:	22bc      	movs	r2, #188	; 0xbc
 8018dac:	492a      	ldr	r1, [pc, #168]	; (8018e58 <ip_reass_free_complete_datagram+0x13c>)
 8018dae:	4828      	ldr	r0, [pc, #160]	; (8018e50 <ip_reass_free_complete_datagram+0x134>)
 8018db0:	f001 f9e8 	bl	801a184 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018db4:	8bfa      	ldrh	r2, [r7, #30]
 8018db6:	8a7b      	ldrh	r3, [r7, #18]
 8018db8:	4413      	add	r3, r2
 8018dba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018dbc:	69b8      	ldr	r0, [r7, #24]
 8018dbe:	f7f7 fc39 	bl	8010634 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	685b      	ldr	r3, [r3, #4]
 8018dc6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018dc8:	e01f      	b.n	8018e0a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018dca:	69bb      	ldr	r3, [r7, #24]
 8018dcc:	685b      	ldr	r3, [r3, #4]
 8018dce:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018dd0:	69bb      	ldr	r3, [r7, #24]
 8018dd2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018dd4:	697b      	ldr	r3, [r7, #20]
 8018dd6:	681b      	ldr	r3, [r3, #0]
 8018dd8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018dda:	68f8      	ldr	r0, [r7, #12]
 8018ddc:	f7f7 fcb8 	bl	8010750 <pbuf_clen>
 8018de0:	4603      	mov	r3, r0
 8018de2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018de4:	8bfa      	ldrh	r2, [r7, #30]
 8018de6:	8a7b      	ldrh	r3, [r7, #18]
 8018de8:	4413      	add	r3, r2
 8018dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018dee:	db05      	blt.n	8018dfc <ip_reass_free_complete_datagram+0xe0>
 8018df0:	4b15      	ldr	r3, [pc, #84]	; (8018e48 <ip_reass_free_complete_datagram+0x12c>)
 8018df2:	22cc      	movs	r2, #204	; 0xcc
 8018df4:	4918      	ldr	r1, [pc, #96]	; (8018e58 <ip_reass_free_complete_datagram+0x13c>)
 8018df6:	4816      	ldr	r0, [pc, #88]	; (8018e50 <ip_reass_free_complete_datagram+0x134>)
 8018df8:	f001 f9c4 	bl	801a184 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018dfc:	8bfa      	ldrh	r2, [r7, #30]
 8018dfe:	8a7b      	ldrh	r3, [r7, #18]
 8018e00:	4413      	add	r3, r2
 8018e02:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018e04:	68f8      	ldr	r0, [r7, #12]
 8018e06:	f7f7 fc15 	bl	8010634 <pbuf_free>
  while (p != NULL) {
 8018e0a:	69bb      	ldr	r3, [r7, #24]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d1dc      	bne.n	8018dca <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018e10:	6839      	ldr	r1, [r7, #0]
 8018e12:	6878      	ldr	r0, [r7, #4]
 8018e14:	f000 f8c2 	bl	8018f9c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018e18:	4b10      	ldr	r3, [pc, #64]	; (8018e5c <ip_reass_free_complete_datagram+0x140>)
 8018e1a:	881b      	ldrh	r3, [r3, #0]
 8018e1c:	8bfa      	ldrh	r2, [r7, #30]
 8018e1e:	429a      	cmp	r2, r3
 8018e20:	d905      	bls.n	8018e2e <ip_reass_free_complete_datagram+0x112>
 8018e22:	4b09      	ldr	r3, [pc, #36]	; (8018e48 <ip_reass_free_complete_datagram+0x12c>)
 8018e24:	22d2      	movs	r2, #210	; 0xd2
 8018e26:	490e      	ldr	r1, [pc, #56]	; (8018e60 <ip_reass_free_complete_datagram+0x144>)
 8018e28:	4809      	ldr	r0, [pc, #36]	; (8018e50 <ip_reass_free_complete_datagram+0x134>)
 8018e2a:	f001 f9ab 	bl	801a184 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018e2e:	4b0b      	ldr	r3, [pc, #44]	; (8018e5c <ip_reass_free_complete_datagram+0x140>)
 8018e30:	881a      	ldrh	r2, [r3, #0]
 8018e32:	8bfb      	ldrh	r3, [r7, #30]
 8018e34:	1ad3      	subs	r3, r2, r3
 8018e36:	b29a      	uxth	r2, r3
 8018e38:	4b08      	ldr	r3, [pc, #32]	; (8018e5c <ip_reass_free_complete_datagram+0x140>)
 8018e3a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018e3c:	8bfb      	ldrh	r3, [r7, #30]
}
 8018e3e:	4618      	mov	r0, r3
 8018e40:	3720      	adds	r7, #32
 8018e42:	46bd      	mov	sp, r7
 8018e44:	bd80      	pop	{r7, pc}
 8018e46:	bf00      	nop
 8018e48:	0801e34c 	.word	0x0801e34c
 8018e4c:	0801e388 	.word	0x0801e388
 8018e50:	0801e394 	.word	0x0801e394
 8018e54:	0801e3bc 	.word	0x0801e3bc
 8018e58:	0801e3d0 	.word	0x0801e3d0
 8018e5c:	20004c00 	.word	0x20004c00
 8018e60:	0801e3f0 	.word	0x0801e3f0

08018e64 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018e64:	b580      	push	{r7, lr}
 8018e66:	b08a      	sub	sp, #40	; 0x28
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	6078      	str	r0, [r7, #4]
 8018e6c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018e6e:	2300      	movs	r3, #0
 8018e70:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018e72:	2300      	movs	r3, #0
 8018e74:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018e76:	2300      	movs	r3, #0
 8018e78:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018e7a:	2300      	movs	r3, #0
 8018e7c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018e7e:	2300      	movs	r3, #0
 8018e80:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018e82:	4b28      	ldr	r3, [pc, #160]	; (8018f24 <ip_reass_remove_oldest_datagram+0xc0>)
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018e88:	e030      	b.n	8018eec <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e8c:	695a      	ldr	r2, [r3, #20]
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	68db      	ldr	r3, [r3, #12]
 8018e92:	429a      	cmp	r2, r3
 8018e94:	d10c      	bne.n	8018eb0 <ip_reass_remove_oldest_datagram+0x4c>
 8018e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e98:	699a      	ldr	r2, [r3, #24]
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	691b      	ldr	r3, [r3, #16]
 8018e9e:	429a      	cmp	r2, r3
 8018ea0:	d106      	bne.n	8018eb0 <ip_reass_remove_oldest_datagram+0x4c>
 8018ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ea4:	899a      	ldrh	r2, [r3, #12]
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	889b      	ldrh	r3, [r3, #4]
 8018eaa:	b29b      	uxth	r3, r3
 8018eac:	429a      	cmp	r2, r3
 8018eae:	d014      	beq.n	8018eda <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018eb0:	693b      	ldr	r3, [r7, #16]
 8018eb2:	3301      	adds	r3, #1
 8018eb4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018eb6:	6a3b      	ldr	r3, [r7, #32]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d104      	bne.n	8018ec6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ebe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018ec0:	69fb      	ldr	r3, [r7, #28]
 8018ec2:	61bb      	str	r3, [r7, #24]
 8018ec4:	e009      	b.n	8018eda <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ec8:	7fda      	ldrb	r2, [r3, #31]
 8018eca:	6a3b      	ldr	r3, [r7, #32]
 8018ecc:	7fdb      	ldrb	r3, [r3, #31]
 8018ece:	429a      	cmp	r2, r3
 8018ed0:	d803      	bhi.n	8018eda <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ed4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018ed6:	69fb      	ldr	r3, [r7, #28]
 8018ed8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	2b00      	cmp	r3, #0
 8018ee0:	d001      	beq.n	8018ee6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ee4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d1cb      	bne.n	8018e8a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018ef2:	6a3b      	ldr	r3, [r7, #32]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	d008      	beq.n	8018f0a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018ef8:	69b9      	ldr	r1, [r7, #24]
 8018efa:	6a38      	ldr	r0, [r7, #32]
 8018efc:	f7ff ff0e 	bl	8018d1c <ip_reass_free_complete_datagram>
 8018f00:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018f02:	697a      	ldr	r2, [r7, #20]
 8018f04:	68fb      	ldr	r3, [r7, #12]
 8018f06:	4413      	add	r3, r2
 8018f08:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018f0a:	697a      	ldr	r2, [r7, #20]
 8018f0c:	683b      	ldr	r3, [r7, #0]
 8018f0e:	429a      	cmp	r2, r3
 8018f10:	da02      	bge.n	8018f18 <ip_reass_remove_oldest_datagram+0xb4>
 8018f12:	693b      	ldr	r3, [r7, #16]
 8018f14:	2b01      	cmp	r3, #1
 8018f16:	dcac      	bgt.n	8018e72 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018f18:	697b      	ldr	r3, [r7, #20]
}
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	3728      	adds	r7, #40	; 0x28
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	bd80      	pop	{r7, pc}
 8018f22:	bf00      	nop
 8018f24:	20004bfc 	.word	0x20004bfc

08018f28 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018f28:	b580      	push	{r7, lr}
 8018f2a:	b084      	sub	sp, #16
 8018f2c:	af00      	add	r7, sp, #0
 8018f2e:	6078      	str	r0, [r7, #4]
 8018f30:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018f32:	2004      	movs	r0, #4
 8018f34:	f7f6 fc88 	bl	800f848 <memp_malloc>
 8018f38:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d110      	bne.n	8018f62 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018f40:	6839      	ldr	r1, [r7, #0]
 8018f42:	6878      	ldr	r0, [r7, #4]
 8018f44:	f7ff ff8e 	bl	8018e64 <ip_reass_remove_oldest_datagram>
 8018f48:	4602      	mov	r2, r0
 8018f4a:	683b      	ldr	r3, [r7, #0]
 8018f4c:	4293      	cmp	r3, r2
 8018f4e:	dc03      	bgt.n	8018f58 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018f50:	2004      	movs	r0, #4
 8018f52:	f7f6 fc79 	bl	800f848 <memp_malloc>
 8018f56:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d101      	bne.n	8018f62 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018f5e:	2300      	movs	r3, #0
 8018f60:	e016      	b.n	8018f90 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018f62:	2220      	movs	r2, #32
 8018f64:	2100      	movs	r1, #0
 8018f66:	68f8      	ldr	r0, [r7, #12]
 8018f68:	f001 f8a9 	bl	801a0be <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	220f      	movs	r2, #15
 8018f70:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018f72:	4b09      	ldr	r3, [pc, #36]	; (8018f98 <ip_reass_enqueue_new_datagram+0x70>)
 8018f74:	681a      	ldr	r2, [r3, #0]
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018f7a:	4a07      	ldr	r2, [pc, #28]	; (8018f98 <ip_reass_enqueue_new_datagram+0x70>)
 8018f7c:	68fb      	ldr	r3, [r7, #12]
 8018f7e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	3308      	adds	r3, #8
 8018f84:	2214      	movs	r2, #20
 8018f86:	6879      	ldr	r1, [r7, #4]
 8018f88:	4618      	mov	r0, r3
 8018f8a:	f001 f88a 	bl	801a0a2 <memcpy>
  return ipr;
 8018f8e:	68fb      	ldr	r3, [r7, #12]
}
 8018f90:	4618      	mov	r0, r3
 8018f92:	3710      	adds	r7, #16
 8018f94:	46bd      	mov	sp, r7
 8018f96:	bd80      	pop	{r7, pc}
 8018f98:	20004bfc 	.word	0x20004bfc

08018f9c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018f9c:	b580      	push	{r7, lr}
 8018f9e:	b082      	sub	sp, #8
 8018fa0:	af00      	add	r7, sp, #0
 8018fa2:	6078      	str	r0, [r7, #4]
 8018fa4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018fa6:	4b10      	ldr	r3, [pc, #64]	; (8018fe8 <ip_reass_dequeue_datagram+0x4c>)
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	687a      	ldr	r2, [r7, #4]
 8018fac:	429a      	cmp	r2, r3
 8018fae:	d104      	bne.n	8018fba <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	4a0c      	ldr	r2, [pc, #48]	; (8018fe8 <ip_reass_dequeue_datagram+0x4c>)
 8018fb6:	6013      	str	r3, [r2, #0]
 8018fb8:	e00d      	b.n	8018fd6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018fba:	683b      	ldr	r3, [r7, #0]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d106      	bne.n	8018fce <ip_reass_dequeue_datagram+0x32>
 8018fc0:	4b0a      	ldr	r3, [pc, #40]	; (8018fec <ip_reass_dequeue_datagram+0x50>)
 8018fc2:	f240 1245 	movw	r2, #325	; 0x145
 8018fc6:	490a      	ldr	r1, [pc, #40]	; (8018ff0 <ip_reass_dequeue_datagram+0x54>)
 8018fc8:	480a      	ldr	r0, [pc, #40]	; (8018ff4 <ip_reass_dequeue_datagram+0x58>)
 8018fca:	f001 f8db 	bl	801a184 <iprintf>
    prev->next = ipr->next;
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	681a      	ldr	r2, [r3, #0]
 8018fd2:	683b      	ldr	r3, [r7, #0]
 8018fd4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018fd6:	6879      	ldr	r1, [r7, #4]
 8018fd8:	2004      	movs	r0, #4
 8018fda:	f7f6 fc87 	bl	800f8ec <memp_free>
}
 8018fde:	bf00      	nop
 8018fe0:	3708      	adds	r7, #8
 8018fe2:	46bd      	mov	sp, r7
 8018fe4:	bd80      	pop	{r7, pc}
 8018fe6:	bf00      	nop
 8018fe8:	20004bfc 	.word	0x20004bfc
 8018fec:	0801e34c 	.word	0x0801e34c
 8018ff0:	0801e414 	.word	0x0801e414
 8018ff4:	0801e394 	.word	0x0801e394

08018ff8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018ff8:	b580      	push	{r7, lr}
 8018ffa:	b08c      	sub	sp, #48	; 0x30
 8018ffc:	af00      	add	r7, sp, #0
 8018ffe:	60f8      	str	r0, [r7, #12]
 8019000:	60b9      	str	r1, [r7, #8]
 8019002:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019004:	2300      	movs	r3, #0
 8019006:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019008:	2301      	movs	r3, #1
 801900a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801900c:	68bb      	ldr	r3, [r7, #8]
 801900e:	685b      	ldr	r3, [r3, #4]
 8019010:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019012:	69fb      	ldr	r3, [r7, #28]
 8019014:	885b      	ldrh	r3, [r3, #2]
 8019016:	b29b      	uxth	r3, r3
 8019018:	4618      	mov	r0, r3
 801901a:	f7f5 ff5f 	bl	800eedc <lwip_htons>
 801901e:	4603      	mov	r3, r0
 8019020:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019022:	69fb      	ldr	r3, [r7, #28]
 8019024:	781b      	ldrb	r3, [r3, #0]
 8019026:	f003 030f 	and.w	r3, r3, #15
 801902a:	b2db      	uxtb	r3, r3
 801902c:	009b      	lsls	r3, r3, #2
 801902e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019030:	7e7b      	ldrb	r3, [r7, #25]
 8019032:	b29b      	uxth	r3, r3
 8019034:	8b7a      	ldrh	r2, [r7, #26]
 8019036:	429a      	cmp	r2, r3
 8019038:	d202      	bcs.n	8019040 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801903a:	f04f 33ff 	mov.w	r3, #4294967295
 801903e:	e135      	b.n	80192ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019040:	7e7b      	ldrb	r3, [r7, #25]
 8019042:	b29b      	uxth	r3, r3
 8019044:	8b7a      	ldrh	r2, [r7, #26]
 8019046:	1ad3      	subs	r3, r2, r3
 8019048:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801904a:	69fb      	ldr	r3, [r7, #28]
 801904c:	88db      	ldrh	r3, [r3, #6]
 801904e:	b29b      	uxth	r3, r3
 8019050:	4618      	mov	r0, r3
 8019052:	f7f5 ff43 	bl	800eedc <lwip_htons>
 8019056:	4603      	mov	r3, r0
 8019058:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801905c:	b29b      	uxth	r3, r3
 801905e:	00db      	lsls	r3, r3, #3
 8019060:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019062:	68bb      	ldr	r3, [r7, #8]
 8019064:	685b      	ldr	r3, [r3, #4]
 8019066:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801906a:	2200      	movs	r2, #0
 801906c:	701a      	strb	r2, [r3, #0]
 801906e:	2200      	movs	r2, #0
 8019070:	705a      	strb	r2, [r3, #1]
 8019072:	2200      	movs	r2, #0
 8019074:	709a      	strb	r2, [r3, #2]
 8019076:	2200      	movs	r2, #0
 8019078:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801907a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801907c:	8afa      	ldrh	r2, [r7, #22]
 801907e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019080:	8afa      	ldrh	r2, [r7, #22]
 8019082:	8b7b      	ldrh	r3, [r7, #26]
 8019084:	4413      	add	r3, r2
 8019086:	b29a      	uxth	r2, r3
 8019088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801908a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801908c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801908e:	88db      	ldrh	r3, [r3, #6]
 8019090:	b29b      	uxth	r3, r3
 8019092:	8afa      	ldrh	r2, [r7, #22]
 8019094:	429a      	cmp	r2, r3
 8019096:	d902      	bls.n	801909e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019098:	f04f 33ff 	mov.w	r3, #4294967295
 801909c:	e106      	b.n	80192ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801909e:	68fb      	ldr	r3, [r7, #12]
 80190a0:	685b      	ldr	r3, [r3, #4]
 80190a2:	627b      	str	r3, [r7, #36]	; 0x24
 80190a4:	e068      	b.n	8019178 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80190a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190a8:	685b      	ldr	r3, [r3, #4]
 80190aa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80190ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ae:	889b      	ldrh	r3, [r3, #4]
 80190b0:	b29a      	uxth	r2, r3
 80190b2:	693b      	ldr	r3, [r7, #16]
 80190b4:	889b      	ldrh	r3, [r3, #4]
 80190b6:	b29b      	uxth	r3, r3
 80190b8:	429a      	cmp	r2, r3
 80190ba:	d235      	bcs.n	8019128 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80190bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80190c0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80190c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d020      	beq.n	801910a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80190c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190ca:	889b      	ldrh	r3, [r3, #4]
 80190cc:	b29a      	uxth	r2, r3
 80190ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190d0:	88db      	ldrh	r3, [r3, #6]
 80190d2:	b29b      	uxth	r3, r3
 80190d4:	429a      	cmp	r2, r3
 80190d6:	d307      	bcc.n	80190e8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80190d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190da:	88db      	ldrh	r3, [r3, #6]
 80190dc:	b29a      	uxth	r2, r3
 80190de:	693b      	ldr	r3, [r7, #16]
 80190e0:	889b      	ldrh	r3, [r3, #4]
 80190e2:	b29b      	uxth	r3, r3
 80190e4:	429a      	cmp	r2, r3
 80190e6:	d902      	bls.n	80190ee <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80190e8:	f04f 33ff 	mov.w	r3, #4294967295
 80190ec:	e0de      	b.n	80192ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80190ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190f0:	68ba      	ldr	r2, [r7, #8]
 80190f2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80190f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190f6:	88db      	ldrh	r3, [r3, #6]
 80190f8:	b29a      	uxth	r2, r3
 80190fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190fc:	889b      	ldrh	r3, [r3, #4]
 80190fe:	b29b      	uxth	r3, r3
 8019100:	429a      	cmp	r2, r3
 8019102:	d03d      	beq.n	8019180 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019104:	2300      	movs	r3, #0
 8019106:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019108:	e03a      	b.n	8019180 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801910a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801910c:	88db      	ldrh	r3, [r3, #6]
 801910e:	b29a      	uxth	r2, r3
 8019110:	693b      	ldr	r3, [r7, #16]
 8019112:	889b      	ldrh	r3, [r3, #4]
 8019114:	b29b      	uxth	r3, r3
 8019116:	429a      	cmp	r2, r3
 8019118:	d902      	bls.n	8019120 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801911a:	f04f 33ff 	mov.w	r3, #4294967295
 801911e:	e0c5      	b.n	80192ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019120:	68fb      	ldr	r3, [r7, #12]
 8019122:	68ba      	ldr	r2, [r7, #8]
 8019124:	605a      	str	r2, [r3, #4]
      break;
 8019126:	e02b      	b.n	8019180 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801912a:	889b      	ldrh	r3, [r3, #4]
 801912c:	b29a      	uxth	r2, r3
 801912e:	693b      	ldr	r3, [r7, #16]
 8019130:	889b      	ldrh	r3, [r3, #4]
 8019132:	b29b      	uxth	r3, r3
 8019134:	429a      	cmp	r2, r3
 8019136:	d102      	bne.n	801913e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019138:	f04f 33ff 	mov.w	r3, #4294967295
 801913c:	e0b6      	b.n	80192ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801913e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019140:	889b      	ldrh	r3, [r3, #4]
 8019142:	b29a      	uxth	r2, r3
 8019144:	693b      	ldr	r3, [r7, #16]
 8019146:	88db      	ldrh	r3, [r3, #6]
 8019148:	b29b      	uxth	r3, r3
 801914a:	429a      	cmp	r2, r3
 801914c:	d202      	bcs.n	8019154 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801914e:	f04f 33ff 	mov.w	r3, #4294967295
 8019152:	e0ab      	b.n	80192ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019156:	2b00      	cmp	r3, #0
 8019158:	d009      	beq.n	801916e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801915a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801915c:	88db      	ldrh	r3, [r3, #6]
 801915e:	b29a      	uxth	r2, r3
 8019160:	693b      	ldr	r3, [r7, #16]
 8019162:	889b      	ldrh	r3, [r3, #4]
 8019164:	b29b      	uxth	r3, r3
 8019166:	429a      	cmp	r2, r3
 8019168:	d001      	beq.n	801916e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801916a:	2300      	movs	r3, #0
 801916c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801916e:	693b      	ldr	r3, [r7, #16]
 8019170:	681b      	ldr	r3, [r3, #0]
 8019172:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019174:	693b      	ldr	r3, [r7, #16]
 8019176:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801917a:	2b00      	cmp	r3, #0
 801917c:	d193      	bne.n	80190a6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801917e:	e000      	b.n	8019182 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019180:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019184:	2b00      	cmp	r3, #0
 8019186:	d12d      	bne.n	80191e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801918a:	2b00      	cmp	r3, #0
 801918c:	d01c      	beq.n	80191c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801918e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019190:	88db      	ldrh	r3, [r3, #6]
 8019192:	b29a      	uxth	r2, r3
 8019194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019196:	889b      	ldrh	r3, [r3, #4]
 8019198:	b29b      	uxth	r3, r3
 801919a:	429a      	cmp	r2, r3
 801919c:	d906      	bls.n	80191ac <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801919e:	4b45      	ldr	r3, [pc, #276]	; (80192b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80191a0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80191a4:	4944      	ldr	r1, [pc, #272]	; (80192b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80191a6:	4845      	ldr	r0, [pc, #276]	; (80192bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80191a8:	f000 ffec 	bl	801a184 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80191ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191ae:	68ba      	ldr	r2, [r7, #8]
 80191b0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80191b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191b4:	88db      	ldrh	r3, [r3, #6]
 80191b6:	b29a      	uxth	r2, r3
 80191b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191ba:	889b      	ldrh	r3, [r3, #4]
 80191bc:	b29b      	uxth	r3, r3
 80191be:	429a      	cmp	r2, r3
 80191c0:	d010      	beq.n	80191e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80191c2:	2300      	movs	r3, #0
 80191c4:	623b      	str	r3, [r7, #32]
 80191c6:	e00d      	b.n	80191e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80191c8:	68fb      	ldr	r3, [r7, #12]
 80191ca:	685b      	ldr	r3, [r3, #4]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d006      	beq.n	80191de <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80191d0:	4b38      	ldr	r3, [pc, #224]	; (80192b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80191d2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80191d6:	493a      	ldr	r1, [pc, #232]	; (80192c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80191d8:	4838      	ldr	r0, [pc, #224]	; (80192bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80191da:	f000 ffd3 	bl	801a184 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80191de:	68fb      	ldr	r3, [r7, #12]
 80191e0:	68ba      	ldr	r2, [r7, #8]
 80191e2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d105      	bne.n	80191f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	7f9b      	ldrb	r3, [r3, #30]
 80191ee:	f003 0301 	and.w	r3, r3, #1
 80191f2:	2b00      	cmp	r3, #0
 80191f4:	d059      	beq.n	80192aa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80191f6:	6a3b      	ldr	r3, [r7, #32]
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d04f      	beq.n	801929c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	685b      	ldr	r3, [r3, #4]
 8019200:	2b00      	cmp	r3, #0
 8019202:	d006      	beq.n	8019212 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	685b      	ldr	r3, [r3, #4]
 8019208:	685b      	ldr	r3, [r3, #4]
 801920a:	889b      	ldrh	r3, [r3, #4]
 801920c:	b29b      	uxth	r3, r3
 801920e:	2b00      	cmp	r3, #0
 8019210:	d002      	beq.n	8019218 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019212:	2300      	movs	r3, #0
 8019214:	623b      	str	r3, [r7, #32]
 8019216:	e041      	b.n	801929c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801921a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801921c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019222:	e012      	b.n	801924a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019226:	685b      	ldr	r3, [r3, #4]
 8019228:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801922c:	88db      	ldrh	r3, [r3, #6]
 801922e:	b29a      	uxth	r2, r3
 8019230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019232:	889b      	ldrh	r3, [r3, #4]
 8019234:	b29b      	uxth	r3, r3
 8019236:	429a      	cmp	r2, r3
 8019238:	d002      	beq.n	8019240 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801923a:	2300      	movs	r3, #0
 801923c:	623b      	str	r3, [r7, #32]
            break;
 801923e:	e007      	b.n	8019250 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019242:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801924c:	2b00      	cmp	r3, #0
 801924e:	d1e9      	bne.n	8019224 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019250:	6a3b      	ldr	r3, [r7, #32]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d022      	beq.n	801929c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	685b      	ldr	r3, [r3, #4]
 801925a:	2b00      	cmp	r3, #0
 801925c:	d106      	bne.n	801926c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801925e:	4b15      	ldr	r3, [pc, #84]	; (80192b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019260:	f240 12df 	movw	r2, #479	; 0x1df
 8019264:	4917      	ldr	r1, [pc, #92]	; (80192c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019266:	4815      	ldr	r0, [pc, #84]	; (80192bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019268:	f000 ff8c 	bl	801a184 <iprintf>
          LWIP_ASSERT("sanity check",
 801926c:	68fb      	ldr	r3, [r7, #12]
 801926e:	685b      	ldr	r3, [r3, #4]
 8019270:	685b      	ldr	r3, [r3, #4]
 8019272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019274:	429a      	cmp	r2, r3
 8019276:	d106      	bne.n	8019286 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019278:	4b0e      	ldr	r3, [pc, #56]	; (80192b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801927a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801927e:	4911      	ldr	r1, [pc, #68]	; (80192c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019280:	480e      	ldr	r0, [pc, #56]	; (80192bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019282:	f000 ff7f 	bl	801a184 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	2b00      	cmp	r3, #0
 801928c:	d006      	beq.n	801929c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801928e:	4b09      	ldr	r3, [pc, #36]	; (80192b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019290:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019294:	490c      	ldr	r1, [pc, #48]	; (80192c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019296:	4809      	ldr	r0, [pc, #36]	; (80192bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019298:	f000 ff74 	bl	801a184 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801929c:	6a3b      	ldr	r3, [r7, #32]
 801929e:	2b00      	cmp	r3, #0
 80192a0:	bf14      	ite	ne
 80192a2:	2301      	movne	r3, #1
 80192a4:	2300      	moveq	r3, #0
 80192a6:	b2db      	uxtb	r3, r3
 80192a8:	e000      	b.n	80192ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80192aa:	2300      	movs	r3, #0
}
 80192ac:	4618      	mov	r0, r3
 80192ae:	3730      	adds	r7, #48	; 0x30
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bd80      	pop	{r7, pc}
 80192b4:	0801e34c 	.word	0x0801e34c
 80192b8:	0801e430 	.word	0x0801e430
 80192bc:	0801e394 	.word	0x0801e394
 80192c0:	0801e450 	.word	0x0801e450
 80192c4:	0801e488 	.word	0x0801e488
 80192c8:	0801e498 	.word	0x0801e498

080192cc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80192cc:	b580      	push	{r7, lr}
 80192ce:	b08e      	sub	sp, #56	; 0x38
 80192d0:	af00      	add	r7, sp, #0
 80192d2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	685b      	ldr	r3, [r3, #4]
 80192d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80192da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192dc:	781b      	ldrb	r3, [r3, #0]
 80192de:	f003 030f 	and.w	r3, r3, #15
 80192e2:	b2db      	uxtb	r3, r3
 80192e4:	009b      	lsls	r3, r3, #2
 80192e6:	b2db      	uxtb	r3, r3
 80192e8:	2b14      	cmp	r3, #20
 80192ea:	f040 8167 	bne.w	80195bc <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80192ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192f0:	88db      	ldrh	r3, [r3, #6]
 80192f2:	b29b      	uxth	r3, r3
 80192f4:	4618      	mov	r0, r3
 80192f6:	f7f5 fdf1 	bl	800eedc <lwip_htons>
 80192fa:	4603      	mov	r3, r0
 80192fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019300:	b29b      	uxth	r3, r3
 8019302:	00db      	lsls	r3, r3, #3
 8019304:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019308:	885b      	ldrh	r3, [r3, #2]
 801930a:	b29b      	uxth	r3, r3
 801930c:	4618      	mov	r0, r3
 801930e:	f7f5 fde5 	bl	800eedc <lwip_htons>
 8019312:	4603      	mov	r3, r0
 8019314:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8019316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019318:	781b      	ldrb	r3, [r3, #0]
 801931a:	f003 030f 	and.w	r3, r3, #15
 801931e:	b2db      	uxtb	r3, r3
 8019320:	009b      	lsls	r3, r3, #2
 8019322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8019326:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801932a:	b29b      	uxth	r3, r3
 801932c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801932e:	429a      	cmp	r2, r3
 8019330:	f0c0 8146 	bcc.w	80195c0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019334:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019338:	b29b      	uxth	r3, r3
 801933a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801933c:	1ad3      	subs	r3, r2, r3
 801933e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019340:	6878      	ldr	r0, [r7, #4]
 8019342:	f7f7 fa05 	bl	8010750 <pbuf_clen>
 8019346:	4603      	mov	r3, r0
 8019348:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801934a:	4b9f      	ldr	r3, [pc, #636]	; (80195c8 <ip4_reass+0x2fc>)
 801934c:	881b      	ldrh	r3, [r3, #0]
 801934e:	461a      	mov	r2, r3
 8019350:	8c3b      	ldrh	r3, [r7, #32]
 8019352:	4413      	add	r3, r2
 8019354:	2b0a      	cmp	r3, #10
 8019356:	dd10      	ble.n	801937a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019358:	8c3b      	ldrh	r3, [r7, #32]
 801935a:	4619      	mov	r1, r3
 801935c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801935e:	f7ff fd81 	bl	8018e64 <ip_reass_remove_oldest_datagram>
 8019362:	4603      	mov	r3, r0
 8019364:	2b00      	cmp	r3, #0
 8019366:	f000 812d 	beq.w	80195c4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801936a:	4b97      	ldr	r3, [pc, #604]	; (80195c8 <ip4_reass+0x2fc>)
 801936c:	881b      	ldrh	r3, [r3, #0]
 801936e:	461a      	mov	r2, r3
 8019370:	8c3b      	ldrh	r3, [r7, #32]
 8019372:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019374:	2b0a      	cmp	r3, #10
 8019376:	f300 8125 	bgt.w	80195c4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801937a:	4b94      	ldr	r3, [pc, #592]	; (80195cc <ip4_reass+0x300>)
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	633b      	str	r3, [r7, #48]	; 0x30
 8019380:	e015      	b.n	80193ae <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019384:	695a      	ldr	r2, [r3, #20]
 8019386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019388:	68db      	ldr	r3, [r3, #12]
 801938a:	429a      	cmp	r2, r3
 801938c:	d10c      	bne.n	80193a8 <ip4_reass+0xdc>
 801938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019390:	699a      	ldr	r2, [r3, #24]
 8019392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019394:	691b      	ldr	r3, [r3, #16]
 8019396:	429a      	cmp	r2, r3
 8019398:	d106      	bne.n	80193a8 <ip4_reass+0xdc>
 801939a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801939c:	899a      	ldrh	r2, [r3, #12]
 801939e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193a0:	889b      	ldrh	r3, [r3, #4]
 80193a2:	b29b      	uxth	r3, r3
 80193a4:	429a      	cmp	r2, r3
 80193a6:	d006      	beq.n	80193b6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80193a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	633b      	str	r3, [r7, #48]	; 0x30
 80193ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d1e6      	bne.n	8019382 <ip4_reass+0xb6>
 80193b4:	e000      	b.n	80193b8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80193b6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80193b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d109      	bne.n	80193d2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80193be:	8c3b      	ldrh	r3, [r7, #32]
 80193c0:	4619      	mov	r1, r3
 80193c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80193c4:	f7ff fdb0 	bl	8018f28 <ip_reass_enqueue_new_datagram>
 80193c8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80193ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d11c      	bne.n	801940a <ip4_reass+0x13e>
      goto nullreturn;
 80193d0:	e109      	b.n	80195e6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80193d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193d4:	88db      	ldrh	r3, [r3, #6]
 80193d6:	b29b      	uxth	r3, r3
 80193d8:	4618      	mov	r0, r3
 80193da:	f7f5 fd7f 	bl	800eedc <lwip_htons>
 80193de:	4603      	mov	r3, r0
 80193e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d110      	bne.n	801940a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80193e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193ea:	89db      	ldrh	r3, [r3, #14]
 80193ec:	4618      	mov	r0, r3
 80193ee:	f7f5 fd75 	bl	800eedc <lwip_htons>
 80193f2:	4603      	mov	r3, r0
 80193f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d006      	beq.n	801940a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80193fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193fe:	3308      	adds	r3, #8
 8019400:	2214      	movs	r2, #20
 8019402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019404:	4618      	mov	r0, r3
 8019406:	f000 fe4c 	bl	801a0a2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801940a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801940c:	88db      	ldrh	r3, [r3, #6]
 801940e:	b29b      	uxth	r3, r3
 8019410:	f003 0320 	and.w	r3, r3, #32
 8019414:	2b00      	cmp	r3, #0
 8019416:	bf0c      	ite	eq
 8019418:	2301      	moveq	r3, #1
 801941a:	2300      	movne	r3, #0
 801941c:	b2db      	uxtb	r3, r3
 801941e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019420:	69fb      	ldr	r3, [r7, #28]
 8019422:	2b00      	cmp	r3, #0
 8019424:	d00e      	beq.n	8019444 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8019426:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019428:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801942a:	4413      	add	r3, r2
 801942c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801942e:	8b7a      	ldrh	r2, [r7, #26]
 8019430:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019432:	429a      	cmp	r2, r3
 8019434:	f0c0 80a0 	bcc.w	8019578 <ip4_reass+0x2ac>
 8019438:	8b7b      	ldrh	r3, [r7, #26]
 801943a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801943e:	4293      	cmp	r3, r2
 8019440:	f200 809a 	bhi.w	8019578 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019444:	69fa      	ldr	r2, [r7, #28]
 8019446:	6879      	ldr	r1, [r7, #4]
 8019448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801944a:	f7ff fdd5 	bl	8018ff8 <ip_reass_chain_frag_into_datagram_and_validate>
 801944e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019450:	697b      	ldr	r3, [r7, #20]
 8019452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019456:	f000 8091 	beq.w	801957c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801945a:	4b5b      	ldr	r3, [pc, #364]	; (80195c8 <ip4_reass+0x2fc>)
 801945c:	881a      	ldrh	r2, [r3, #0]
 801945e:	8c3b      	ldrh	r3, [r7, #32]
 8019460:	4413      	add	r3, r2
 8019462:	b29a      	uxth	r2, r3
 8019464:	4b58      	ldr	r3, [pc, #352]	; (80195c8 <ip4_reass+0x2fc>)
 8019466:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019468:	69fb      	ldr	r3, [r7, #28]
 801946a:	2b00      	cmp	r3, #0
 801946c:	d00d      	beq.n	801948a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801946e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019472:	4413      	add	r3, r2
 8019474:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019478:	8a7a      	ldrh	r2, [r7, #18]
 801947a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801947c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801947e:	7f9b      	ldrb	r3, [r3, #30]
 8019480:	f043 0301 	orr.w	r3, r3, #1
 8019484:	b2da      	uxtb	r2, r3
 8019486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019488:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801948a:	697b      	ldr	r3, [r7, #20]
 801948c:	2b01      	cmp	r3, #1
 801948e:	d171      	bne.n	8019574 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8019490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019492:	8b9b      	ldrh	r3, [r3, #28]
 8019494:	3314      	adds	r3, #20
 8019496:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8019498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801949a:	685b      	ldr	r3, [r3, #4]
 801949c:	685b      	ldr	r3, [r3, #4]
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80194a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194a4:	685b      	ldr	r3, [r3, #4]
 80194a6:	685b      	ldr	r3, [r3, #4]
 80194a8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80194aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194ac:	3308      	adds	r3, #8
 80194ae:	2214      	movs	r2, #20
 80194b0:	4619      	mov	r1, r3
 80194b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194b4:	f000 fdf5 	bl	801a0a2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80194b8:	8a3b      	ldrh	r3, [r7, #16]
 80194ba:	4618      	mov	r0, r3
 80194bc:	f7f5 fd0e 	bl	800eedc <lwip_htons>
 80194c0:	4603      	mov	r3, r0
 80194c2:	461a      	mov	r2, r3
 80194c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194c6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80194c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194ca:	2200      	movs	r2, #0
 80194cc:	719a      	strb	r2, [r3, #6]
 80194ce:	2200      	movs	r2, #0
 80194d0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80194d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194d4:	2200      	movs	r2, #0
 80194d6:	729a      	strb	r2, [r3, #10]
 80194d8:	2200      	movs	r2, #0
 80194da:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80194dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194de:	685b      	ldr	r3, [r3, #4]
 80194e0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80194e2:	e00d      	b.n	8019500 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80194e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194e6:	685b      	ldr	r3, [r3, #4]
 80194e8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80194ea:	2114      	movs	r1, #20
 80194ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80194ee:	f7f7 f81b 	bl	8010528 <pbuf_remove_header>
      pbuf_cat(p, r);
 80194f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80194f4:	6878      	ldr	r0, [r7, #4]
 80194f6:	f7f7 f96b 	bl	80107d0 <pbuf_cat>
      r = iprh->next_pbuf;
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8019500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019502:	2b00      	cmp	r3, #0
 8019504:	d1ee      	bne.n	80194e4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019506:	4b31      	ldr	r3, [pc, #196]	; (80195cc <ip4_reass+0x300>)
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801950c:	429a      	cmp	r2, r3
 801950e:	d102      	bne.n	8019516 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8019510:	2300      	movs	r3, #0
 8019512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019514:	e010      	b.n	8019538 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019516:	4b2d      	ldr	r3, [pc, #180]	; (80195cc <ip4_reass+0x300>)
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801951c:	e007      	b.n	801952e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801951e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019524:	429a      	cmp	r2, r3
 8019526:	d006      	beq.n	8019536 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019530:	2b00      	cmp	r3, #0
 8019532:	d1f4      	bne.n	801951e <ip4_reass+0x252>
 8019534:	e000      	b.n	8019538 <ip4_reass+0x26c>
          break;
 8019536:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019538:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801953a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801953c:	f7ff fd2e 	bl	8018f9c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019540:	6878      	ldr	r0, [r7, #4]
 8019542:	f7f7 f905 	bl	8010750 <pbuf_clen>
 8019546:	4603      	mov	r3, r0
 8019548:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801954a:	4b1f      	ldr	r3, [pc, #124]	; (80195c8 <ip4_reass+0x2fc>)
 801954c:	881b      	ldrh	r3, [r3, #0]
 801954e:	8c3a      	ldrh	r2, [r7, #32]
 8019550:	429a      	cmp	r2, r3
 8019552:	d906      	bls.n	8019562 <ip4_reass+0x296>
 8019554:	4b1e      	ldr	r3, [pc, #120]	; (80195d0 <ip4_reass+0x304>)
 8019556:	f240 229b 	movw	r2, #667	; 0x29b
 801955a:	491e      	ldr	r1, [pc, #120]	; (80195d4 <ip4_reass+0x308>)
 801955c:	481e      	ldr	r0, [pc, #120]	; (80195d8 <ip4_reass+0x30c>)
 801955e:	f000 fe11 	bl	801a184 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019562:	4b19      	ldr	r3, [pc, #100]	; (80195c8 <ip4_reass+0x2fc>)
 8019564:	881a      	ldrh	r2, [r3, #0]
 8019566:	8c3b      	ldrh	r3, [r7, #32]
 8019568:	1ad3      	subs	r3, r2, r3
 801956a:	b29a      	uxth	r2, r3
 801956c:	4b16      	ldr	r3, [pc, #88]	; (80195c8 <ip4_reass+0x2fc>)
 801956e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	e03c      	b.n	80195ee <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019574:	2300      	movs	r3, #0
 8019576:	e03a      	b.n	80195ee <ip4_reass+0x322>
      goto nullreturn_ipr;
 8019578:	bf00      	nop
 801957a:	e000      	b.n	801957e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801957c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801957e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019580:	2b00      	cmp	r3, #0
 8019582:	d106      	bne.n	8019592 <ip4_reass+0x2c6>
 8019584:	4b12      	ldr	r3, [pc, #72]	; (80195d0 <ip4_reass+0x304>)
 8019586:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801958a:	4914      	ldr	r1, [pc, #80]	; (80195dc <ip4_reass+0x310>)
 801958c:	4812      	ldr	r0, [pc, #72]	; (80195d8 <ip4_reass+0x30c>)
 801958e:	f000 fdf9 	bl	801a184 <iprintf>
  if (ipr->p == NULL) {
 8019592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019594:	685b      	ldr	r3, [r3, #4]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d124      	bne.n	80195e4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801959a:	4b0c      	ldr	r3, [pc, #48]	; (80195cc <ip4_reass+0x300>)
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80195a0:	429a      	cmp	r2, r3
 80195a2:	d006      	beq.n	80195b2 <ip4_reass+0x2e6>
 80195a4:	4b0a      	ldr	r3, [pc, #40]	; (80195d0 <ip4_reass+0x304>)
 80195a6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80195aa:	490d      	ldr	r1, [pc, #52]	; (80195e0 <ip4_reass+0x314>)
 80195ac:	480a      	ldr	r0, [pc, #40]	; (80195d8 <ip4_reass+0x30c>)
 80195ae:	f000 fde9 	bl	801a184 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80195b2:	2100      	movs	r1, #0
 80195b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80195b6:	f7ff fcf1 	bl	8018f9c <ip_reass_dequeue_datagram>
 80195ba:	e014      	b.n	80195e6 <ip4_reass+0x31a>
    goto nullreturn;
 80195bc:	bf00      	nop
 80195be:	e012      	b.n	80195e6 <ip4_reass+0x31a>
    goto nullreturn;
 80195c0:	bf00      	nop
 80195c2:	e010      	b.n	80195e6 <ip4_reass+0x31a>
      goto nullreturn;
 80195c4:	bf00      	nop
 80195c6:	e00e      	b.n	80195e6 <ip4_reass+0x31a>
 80195c8:	20004c00 	.word	0x20004c00
 80195cc:	20004bfc 	.word	0x20004bfc
 80195d0:	0801e34c 	.word	0x0801e34c
 80195d4:	0801e4bc 	.word	0x0801e4bc
 80195d8:	0801e394 	.word	0x0801e394
 80195dc:	0801e4d8 	.word	0x0801e4d8
 80195e0:	0801e4e4 	.word	0x0801e4e4
  }

nullreturn:
 80195e4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80195e6:	6878      	ldr	r0, [r7, #4]
 80195e8:	f7f7 f824 	bl	8010634 <pbuf_free>
  return NULL;
 80195ec:	2300      	movs	r3, #0
}
 80195ee:	4618      	mov	r0, r3
 80195f0:	3738      	adds	r7, #56	; 0x38
 80195f2:	46bd      	mov	sp, r7
 80195f4:	bd80      	pop	{r7, pc}
 80195f6:	bf00      	nop

080195f8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80195f8:	b580      	push	{r7, lr}
 80195fa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80195fc:	2005      	movs	r0, #5
 80195fe:	f7f6 f923 	bl	800f848 <memp_malloc>
 8019602:	4603      	mov	r3, r0
}
 8019604:	4618      	mov	r0, r3
 8019606:	bd80      	pop	{r7, pc}

08019608 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019608:	b580      	push	{r7, lr}
 801960a:	b082      	sub	sp, #8
 801960c:	af00      	add	r7, sp, #0
 801960e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	2b00      	cmp	r3, #0
 8019614:	d106      	bne.n	8019624 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019616:	4b07      	ldr	r3, [pc, #28]	; (8019634 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019618:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801961c:	4906      	ldr	r1, [pc, #24]	; (8019638 <ip_frag_free_pbuf_custom_ref+0x30>)
 801961e:	4807      	ldr	r0, [pc, #28]	; (801963c <ip_frag_free_pbuf_custom_ref+0x34>)
 8019620:	f000 fdb0 	bl	801a184 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019624:	6879      	ldr	r1, [r7, #4]
 8019626:	2005      	movs	r0, #5
 8019628:	f7f6 f960 	bl	800f8ec <memp_free>
}
 801962c:	bf00      	nop
 801962e:	3708      	adds	r7, #8
 8019630:	46bd      	mov	sp, r7
 8019632:	bd80      	pop	{r7, pc}
 8019634:	0801e34c 	.word	0x0801e34c
 8019638:	0801e504 	.word	0x0801e504
 801963c:	0801e394 	.word	0x0801e394

08019640 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019640:	b580      	push	{r7, lr}
 8019642:	b084      	sub	sp, #16
 8019644:	af00      	add	r7, sp, #0
 8019646:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d106      	bne.n	8019660 <ipfrag_free_pbuf_custom+0x20>
 8019652:	4b11      	ldr	r3, [pc, #68]	; (8019698 <ipfrag_free_pbuf_custom+0x58>)
 8019654:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019658:	4910      	ldr	r1, [pc, #64]	; (801969c <ipfrag_free_pbuf_custom+0x5c>)
 801965a:	4811      	ldr	r0, [pc, #68]	; (80196a0 <ipfrag_free_pbuf_custom+0x60>)
 801965c:	f000 fd92 	bl	801a184 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019660:	68fa      	ldr	r2, [r7, #12]
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	429a      	cmp	r2, r3
 8019666:	d006      	beq.n	8019676 <ipfrag_free_pbuf_custom+0x36>
 8019668:	4b0b      	ldr	r3, [pc, #44]	; (8019698 <ipfrag_free_pbuf_custom+0x58>)
 801966a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801966e:	490d      	ldr	r1, [pc, #52]	; (80196a4 <ipfrag_free_pbuf_custom+0x64>)
 8019670:	480b      	ldr	r0, [pc, #44]	; (80196a0 <ipfrag_free_pbuf_custom+0x60>)
 8019672:	f000 fd87 	bl	801a184 <iprintf>
  if (pcr->original != NULL) {
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	695b      	ldr	r3, [r3, #20]
 801967a:	2b00      	cmp	r3, #0
 801967c:	d004      	beq.n	8019688 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801967e:	68fb      	ldr	r3, [r7, #12]
 8019680:	695b      	ldr	r3, [r3, #20]
 8019682:	4618      	mov	r0, r3
 8019684:	f7f6 ffd6 	bl	8010634 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019688:	68f8      	ldr	r0, [r7, #12]
 801968a:	f7ff ffbd 	bl	8019608 <ip_frag_free_pbuf_custom_ref>
}
 801968e:	bf00      	nop
 8019690:	3710      	adds	r7, #16
 8019692:	46bd      	mov	sp, r7
 8019694:	bd80      	pop	{r7, pc}
 8019696:	bf00      	nop
 8019698:	0801e34c 	.word	0x0801e34c
 801969c:	0801e510 	.word	0x0801e510
 80196a0:	0801e394 	.word	0x0801e394
 80196a4:	0801e51c 	.word	0x0801e51c

080196a8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b094      	sub	sp, #80	; 0x50
 80196ac:	af02      	add	r7, sp, #8
 80196ae:	60f8      	str	r0, [r7, #12]
 80196b0:	60b9      	str	r1, [r7, #8]
 80196b2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80196b4:	2300      	movs	r3, #0
 80196b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80196ba:	68bb      	ldr	r3, [r7, #8]
 80196bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80196be:	3b14      	subs	r3, #20
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	da00      	bge.n	80196c6 <ip4_frag+0x1e>
 80196c4:	3307      	adds	r3, #7
 80196c6:	10db      	asrs	r3, r3, #3
 80196c8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80196ca:	2314      	movs	r3, #20
 80196cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	685b      	ldr	r3, [r3, #4]
 80196d2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80196d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196d6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80196d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196da:	781b      	ldrb	r3, [r3, #0]
 80196dc:	f003 030f 	and.w	r3, r3, #15
 80196e0:	b2db      	uxtb	r3, r3
 80196e2:	009b      	lsls	r3, r3, #2
 80196e4:	b2db      	uxtb	r3, r3
 80196e6:	2b14      	cmp	r3, #20
 80196e8:	d002      	beq.n	80196f0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80196ea:	f06f 0305 	mvn.w	r3, #5
 80196ee:	e110      	b.n	8019912 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	895b      	ldrh	r3, [r3, #10]
 80196f4:	2b13      	cmp	r3, #19
 80196f6:	d809      	bhi.n	801970c <ip4_frag+0x64>
 80196f8:	4b88      	ldr	r3, [pc, #544]	; (801991c <ip4_frag+0x274>)
 80196fa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80196fe:	4988      	ldr	r1, [pc, #544]	; (8019920 <ip4_frag+0x278>)
 8019700:	4888      	ldr	r0, [pc, #544]	; (8019924 <ip4_frag+0x27c>)
 8019702:	f000 fd3f 	bl	801a184 <iprintf>
 8019706:	f06f 0305 	mvn.w	r3, #5
 801970a:	e102      	b.n	8019912 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801970c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801970e:	88db      	ldrh	r3, [r3, #6]
 8019710:	b29b      	uxth	r3, r3
 8019712:	4618      	mov	r0, r3
 8019714:	f7f5 fbe2 	bl	800eedc <lwip_htons>
 8019718:	4603      	mov	r3, r0
 801971a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801971c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801971e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019722:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019726:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801972c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	891b      	ldrh	r3, [r3, #8]
 8019732:	3b14      	subs	r3, #20
 8019734:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019738:	e0e1      	b.n	80198fe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801973a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801973c:	00db      	lsls	r3, r3, #3
 801973e:	b29b      	uxth	r3, r3
 8019740:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019744:	4293      	cmp	r3, r2
 8019746:	bf28      	it	cs
 8019748:	4613      	movcs	r3, r2
 801974a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801974c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019750:	2114      	movs	r1, #20
 8019752:	200e      	movs	r0, #14
 8019754:	f7f6 fc8a 	bl	801006c <pbuf_alloc>
 8019758:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801975c:	2b00      	cmp	r3, #0
 801975e:	f000 80d5 	beq.w	801990c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019764:	895b      	ldrh	r3, [r3, #10]
 8019766:	2b13      	cmp	r3, #19
 8019768:	d806      	bhi.n	8019778 <ip4_frag+0xd0>
 801976a:	4b6c      	ldr	r3, [pc, #432]	; (801991c <ip4_frag+0x274>)
 801976c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019770:	496d      	ldr	r1, [pc, #436]	; (8019928 <ip4_frag+0x280>)
 8019772:	486c      	ldr	r0, [pc, #432]	; (8019924 <ip4_frag+0x27c>)
 8019774:	f000 fd06 	bl	801a184 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801977a:	685b      	ldr	r3, [r3, #4]
 801977c:	2214      	movs	r2, #20
 801977e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019780:	4618      	mov	r0, r3
 8019782:	f000 fc8e 	bl	801a0a2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019788:	685b      	ldr	r3, [r3, #4]
 801978a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801978c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801978e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8019792:	e064      	b.n	801985e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019794:	68fb      	ldr	r3, [r7, #12]
 8019796:	895a      	ldrh	r2, [r3, #10]
 8019798:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801979a:	1ad3      	subs	r3, r2, r3
 801979c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801979e:	68fb      	ldr	r3, [r7, #12]
 80197a0:	895b      	ldrh	r3, [r3, #10]
 80197a2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80197a4:	429a      	cmp	r2, r3
 80197a6:	d906      	bls.n	80197b6 <ip4_frag+0x10e>
 80197a8:	4b5c      	ldr	r3, [pc, #368]	; (801991c <ip4_frag+0x274>)
 80197aa:	f240 322d 	movw	r2, #813	; 0x32d
 80197ae:	495f      	ldr	r1, [pc, #380]	; (801992c <ip4_frag+0x284>)
 80197b0:	485c      	ldr	r0, [pc, #368]	; (8019924 <ip4_frag+0x27c>)
 80197b2:	f000 fce7 	bl	801a184 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80197b6:	8bfa      	ldrh	r2, [r7, #30]
 80197b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80197bc:	4293      	cmp	r3, r2
 80197be:	bf28      	it	cs
 80197c0:	4613      	movcs	r3, r2
 80197c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80197c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d105      	bne.n	80197da <ip4_frag+0x132>
        poff = 0;
 80197ce:	2300      	movs	r3, #0
 80197d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	681b      	ldr	r3, [r3, #0]
 80197d6:	60fb      	str	r3, [r7, #12]
        continue;
 80197d8:	e041      	b.n	801985e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80197da:	f7ff ff0d 	bl	80195f8 <ip_frag_alloc_pbuf_custom_ref>
 80197de:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80197e0:	69bb      	ldr	r3, [r7, #24]
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d103      	bne.n	80197ee <ip4_frag+0x146>
        pbuf_free(rambuf);
 80197e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80197e8:	f7f6 ff24 	bl	8010634 <pbuf_free>
        goto memerr;
 80197ec:	e08f      	b.n	801990e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80197ee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80197f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80197f6:	4413      	add	r3, r2
 80197f8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80197fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019800:	9201      	str	r2, [sp, #4]
 8019802:	9300      	str	r3, [sp, #0]
 8019804:	4603      	mov	r3, r0
 8019806:	2241      	movs	r2, #65	; 0x41
 8019808:	2000      	movs	r0, #0
 801980a:	f7f6 fd59 	bl	80102c0 <pbuf_alloced_custom>
 801980e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019810:	697b      	ldr	r3, [r7, #20]
 8019812:	2b00      	cmp	r3, #0
 8019814:	d106      	bne.n	8019824 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019816:	69b8      	ldr	r0, [r7, #24]
 8019818:	f7ff fef6 	bl	8019608 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801981c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801981e:	f7f6 ff09 	bl	8010634 <pbuf_free>
        goto memerr;
 8019822:	e074      	b.n	801990e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8019824:	68f8      	ldr	r0, [r7, #12]
 8019826:	f7f6 ffab 	bl	8010780 <pbuf_ref>
      pcr->original = p;
 801982a:	69bb      	ldr	r3, [r7, #24]
 801982c:	68fa      	ldr	r2, [r7, #12]
 801982e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019830:	69bb      	ldr	r3, [r7, #24]
 8019832:	4a3f      	ldr	r2, [pc, #252]	; (8019930 <ip4_frag+0x288>)
 8019834:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019836:	6979      	ldr	r1, [r7, #20]
 8019838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801983a:	f7f6 ffc9 	bl	80107d0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801983e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019842:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019846:	1ad3      	subs	r3, r2, r3
 8019848:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801984c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019850:	2b00      	cmp	r3, #0
 8019852:	d004      	beq.n	801985e <ip4_frag+0x1b6>
        poff = 0;
 8019854:	2300      	movs	r3, #0
 8019856:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019858:	68fb      	ldr	r3, [r7, #12]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801985e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019862:	2b00      	cmp	r3, #0
 8019864:	d196      	bne.n	8019794 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019866:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019868:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801986c:	4413      	add	r3, r2
 801986e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019870:	68bb      	ldr	r3, [r7, #8]
 8019872:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019874:	f1a3 0213 	sub.w	r2, r3, #19
 8019878:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801987c:	429a      	cmp	r2, r3
 801987e:	bfcc      	ite	gt
 8019880:	2301      	movgt	r3, #1
 8019882:	2300      	movle	r3, #0
 8019884:	b2db      	uxtb	r3, r3
 8019886:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019888:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801988c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019890:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8019892:	6a3b      	ldr	r3, [r7, #32]
 8019894:	2b00      	cmp	r3, #0
 8019896:	d002      	beq.n	801989e <ip4_frag+0x1f6>
 8019898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801989a:	2b00      	cmp	r3, #0
 801989c:	d003      	beq.n	80198a6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801989e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80198a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80198a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80198a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80198a8:	4618      	mov	r0, r3
 80198aa:	f7f5 fb17 	bl	800eedc <lwip_htons>
 80198ae:	4603      	mov	r3, r0
 80198b0:	461a      	mov	r2, r3
 80198b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198b4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80198b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80198b8:	3314      	adds	r3, #20
 80198ba:	b29b      	uxth	r3, r3
 80198bc:	4618      	mov	r0, r3
 80198be:	f7f5 fb0d 	bl	800eedc <lwip_htons>
 80198c2:	4603      	mov	r3, r0
 80198c4:	461a      	mov	r2, r3
 80198c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198c8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80198ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198cc:	2200      	movs	r2, #0
 80198ce:	729a      	strb	r2, [r3, #10]
 80198d0:	2200      	movs	r2, #0
 80198d2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80198d4:	68bb      	ldr	r3, [r7, #8]
 80198d6:	695b      	ldr	r3, [r3, #20]
 80198d8:	687a      	ldr	r2, [r7, #4]
 80198da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80198dc:	68b8      	ldr	r0, [r7, #8]
 80198de:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80198e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80198e2:	f7f6 fea7 	bl	8010634 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80198e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80198ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80198ec:	1ad3      	subs	r3, r2, r3
 80198ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80198f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80198f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80198f8:	4413      	add	r3, r2
 80198fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80198fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019902:	2b00      	cmp	r3, #0
 8019904:	f47f af19 	bne.w	801973a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019908:	2300      	movs	r3, #0
 801990a:	e002      	b.n	8019912 <ip4_frag+0x26a>
      goto memerr;
 801990c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801990e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019912:	4618      	mov	r0, r3
 8019914:	3748      	adds	r7, #72	; 0x48
 8019916:	46bd      	mov	sp, r7
 8019918:	bd80      	pop	{r7, pc}
 801991a:	bf00      	nop
 801991c:	0801e34c 	.word	0x0801e34c
 8019920:	0801e528 	.word	0x0801e528
 8019924:	0801e394 	.word	0x0801e394
 8019928:	0801e544 	.word	0x0801e544
 801992c:	0801e564 	.word	0x0801e564
 8019930:	08019641 	.word	0x08019641

08019934 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019934:	b580      	push	{r7, lr}
 8019936:	b086      	sub	sp, #24
 8019938:	af00      	add	r7, sp, #0
 801993a:	6078      	str	r0, [r7, #4]
 801993c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801993e:	230e      	movs	r3, #14
 8019940:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	895b      	ldrh	r3, [r3, #10]
 8019946:	2b0e      	cmp	r3, #14
 8019948:	d96e      	bls.n	8019a28 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	7bdb      	ldrb	r3, [r3, #15]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d106      	bne.n	8019960 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019952:	683b      	ldr	r3, [r7, #0]
 8019954:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019958:	3301      	adds	r3, #1
 801995a:	b2da      	uxtb	r2, r3
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	685b      	ldr	r3, [r3, #4]
 8019964:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019966:	693b      	ldr	r3, [r7, #16]
 8019968:	7b1a      	ldrb	r2, [r3, #12]
 801996a:	7b5b      	ldrb	r3, [r3, #13]
 801996c:	021b      	lsls	r3, r3, #8
 801996e:	4313      	orrs	r3, r2
 8019970:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019972:	693b      	ldr	r3, [r7, #16]
 8019974:	781b      	ldrb	r3, [r3, #0]
 8019976:	f003 0301 	and.w	r3, r3, #1
 801997a:	2b00      	cmp	r3, #0
 801997c:	d023      	beq.n	80199c6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801997e:	693b      	ldr	r3, [r7, #16]
 8019980:	781b      	ldrb	r3, [r3, #0]
 8019982:	2b01      	cmp	r3, #1
 8019984:	d10f      	bne.n	80199a6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019986:	693b      	ldr	r3, [r7, #16]
 8019988:	785b      	ldrb	r3, [r3, #1]
 801998a:	2b00      	cmp	r3, #0
 801998c:	d11b      	bne.n	80199c6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801998e:	693b      	ldr	r3, [r7, #16]
 8019990:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019992:	2b5e      	cmp	r3, #94	; 0x5e
 8019994:	d117      	bne.n	80199c6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	7b5b      	ldrb	r3, [r3, #13]
 801999a:	f043 0310 	orr.w	r3, r3, #16
 801999e:	b2da      	uxtb	r2, r3
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	735a      	strb	r2, [r3, #13]
 80199a4:	e00f      	b.n	80199c6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80199a6:	693b      	ldr	r3, [r7, #16]
 80199a8:	2206      	movs	r2, #6
 80199aa:	4928      	ldr	r1, [pc, #160]	; (8019a4c <ethernet_input+0x118>)
 80199ac:	4618      	mov	r0, r3
 80199ae:	f000 fb6a 	bl	801a086 <memcmp>
 80199b2:	4603      	mov	r3, r0
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	d106      	bne.n	80199c6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	7b5b      	ldrb	r3, [r3, #13]
 80199bc:	f043 0308 	orr.w	r3, r3, #8
 80199c0:	b2da      	uxtb	r2, r3
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80199c6:	89fb      	ldrh	r3, [r7, #14]
 80199c8:	2b08      	cmp	r3, #8
 80199ca:	d003      	beq.n	80199d4 <ethernet_input+0xa0>
 80199cc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80199d0:	d014      	beq.n	80199fc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80199d2:	e032      	b.n	8019a3a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80199d4:	683b      	ldr	r3, [r7, #0]
 80199d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80199da:	f003 0308 	and.w	r3, r3, #8
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d024      	beq.n	8019a2c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80199e2:	8afb      	ldrh	r3, [r7, #22]
 80199e4:	4619      	mov	r1, r3
 80199e6:	6878      	ldr	r0, [r7, #4]
 80199e8:	f7f6 fd9e 	bl	8010528 <pbuf_remove_header>
 80199ec:	4603      	mov	r3, r0
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	d11e      	bne.n	8019a30 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80199f2:	6839      	ldr	r1, [r7, #0]
 80199f4:	6878      	ldr	r0, [r7, #4]
 80199f6:	f7fe ff27 	bl	8018848 <ip4_input>
      break;
 80199fa:	e013      	b.n	8019a24 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80199fc:	683b      	ldr	r3, [r7, #0]
 80199fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019a02:	f003 0308 	and.w	r3, r3, #8
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d014      	beq.n	8019a34 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019a0a:	8afb      	ldrh	r3, [r7, #22]
 8019a0c:	4619      	mov	r1, r3
 8019a0e:	6878      	ldr	r0, [r7, #4]
 8019a10:	f7f6 fd8a 	bl	8010528 <pbuf_remove_header>
 8019a14:	4603      	mov	r3, r0
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d10e      	bne.n	8019a38 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019a1a:	6839      	ldr	r1, [r7, #0]
 8019a1c:	6878      	ldr	r0, [r7, #4]
 8019a1e:	f7fe f8c7 	bl	8017bb0 <etharp_input>
      break;
 8019a22:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019a24:	2300      	movs	r3, #0
 8019a26:	e00c      	b.n	8019a42 <ethernet_input+0x10e>
    goto free_and_return;
 8019a28:	bf00      	nop
 8019a2a:	e006      	b.n	8019a3a <ethernet_input+0x106>
        goto free_and_return;
 8019a2c:	bf00      	nop
 8019a2e:	e004      	b.n	8019a3a <ethernet_input+0x106>
        goto free_and_return;
 8019a30:	bf00      	nop
 8019a32:	e002      	b.n	8019a3a <ethernet_input+0x106>
        goto free_and_return;
 8019a34:	bf00      	nop
 8019a36:	e000      	b.n	8019a3a <ethernet_input+0x106>
        goto free_and_return;
 8019a38:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019a3a:	6878      	ldr	r0, [r7, #4]
 8019a3c:	f7f6 fdfa 	bl	8010634 <pbuf_free>
  return ERR_OK;
 8019a40:	2300      	movs	r3, #0
}
 8019a42:	4618      	mov	r0, r3
 8019a44:	3718      	adds	r7, #24
 8019a46:	46bd      	mov	sp, r7
 8019a48:	bd80      	pop	{r7, pc}
 8019a4a:	bf00      	nop
 8019a4c:	0801e828 	.word	0x0801e828

08019a50 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019a50:	b580      	push	{r7, lr}
 8019a52:	b086      	sub	sp, #24
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	60f8      	str	r0, [r7, #12]
 8019a58:	60b9      	str	r1, [r7, #8]
 8019a5a:	607a      	str	r2, [r7, #4]
 8019a5c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019a5e:	8c3b      	ldrh	r3, [r7, #32]
 8019a60:	4618      	mov	r0, r3
 8019a62:	f7f5 fa3b 	bl	800eedc <lwip_htons>
 8019a66:	4603      	mov	r3, r0
 8019a68:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019a6a:	210e      	movs	r1, #14
 8019a6c:	68b8      	ldr	r0, [r7, #8]
 8019a6e:	f7f6 fd4b 	bl	8010508 <pbuf_add_header>
 8019a72:	4603      	mov	r3, r0
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d125      	bne.n	8019ac4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019a78:	68bb      	ldr	r3, [r7, #8]
 8019a7a:	685b      	ldr	r3, [r3, #4]
 8019a7c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019a7e:	693b      	ldr	r3, [r7, #16]
 8019a80:	8afa      	ldrh	r2, [r7, #22]
 8019a82:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019a84:	693b      	ldr	r3, [r7, #16]
 8019a86:	2206      	movs	r2, #6
 8019a88:	6839      	ldr	r1, [r7, #0]
 8019a8a:	4618      	mov	r0, r3
 8019a8c:	f000 fb09 	bl	801a0a2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019a90:	693b      	ldr	r3, [r7, #16]
 8019a92:	3306      	adds	r3, #6
 8019a94:	2206      	movs	r2, #6
 8019a96:	6879      	ldr	r1, [r7, #4]
 8019a98:	4618      	mov	r0, r3
 8019a9a:	f000 fb02 	bl	801a0a2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019aa4:	2b06      	cmp	r3, #6
 8019aa6:	d006      	beq.n	8019ab6 <ethernet_output+0x66>
 8019aa8:	4b0a      	ldr	r3, [pc, #40]	; (8019ad4 <ethernet_output+0x84>)
 8019aaa:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019aae:	490a      	ldr	r1, [pc, #40]	; (8019ad8 <ethernet_output+0x88>)
 8019ab0:	480a      	ldr	r0, [pc, #40]	; (8019adc <ethernet_output+0x8c>)
 8019ab2:	f000 fb67 	bl	801a184 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019ab6:	68fb      	ldr	r3, [r7, #12]
 8019ab8:	699b      	ldr	r3, [r3, #24]
 8019aba:	68b9      	ldr	r1, [r7, #8]
 8019abc:	68f8      	ldr	r0, [r7, #12]
 8019abe:	4798      	blx	r3
 8019ac0:	4603      	mov	r3, r0
 8019ac2:	e002      	b.n	8019aca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019ac4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019ac6:	f06f 0301 	mvn.w	r3, #1
}
 8019aca:	4618      	mov	r0, r3
 8019acc:	3718      	adds	r7, #24
 8019ace:	46bd      	mov	sp, r7
 8019ad0:	bd80      	pop	{r7, pc}
 8019ad2:	bf00      	nop
 8019ad4:	0801e574 	.word	0x0801e574
 8019ad8:	0801e5ac 	.word	0x0801e5ac
 8019adc:	0801e5e0 	.word	0x0801e5e0

08019ae0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019ae0:	b580      	push	{r7, lr}
 8019ae2:	b082      	sub	sp, #8
 8019ae4:	af00      	add	r7, sp, #0
 8019ae6:	6078      	str	r0, [r7, #4]
 8019ae8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8019aea:	683b      	ldr	r3, [r7, #0]
 8019aec:	2200      	movs	r2, #0
 8019aee:	2104      	movs	r1, #4
 8019af0:	4618      	mov	r0, r3
 8019af2:	f7ef f83f 	bl	8008b74 <osMessageQueueNew>
 8019af6:	4602      	mov	r2, r0
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d102      	bne.n	8019b0a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8019b04:	f04f 33ff 	mov.w	r3, #4294967295
 8019b08:	e000      	b.n	8019b0c <sys_mbox_new+0x2c>

  return ERR_OK;
 8019b0a:	2300      	movs	r3, #0
}
 8019b0c:	4618      	mov	r0, r3
 8019b0e:	3708      	adds	r7, #8
 8019b10:	46bd      	mov	sp, r7
 8019b12:	bd80      	pop	{r7, pc}

08019b14 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8019b14:	b580      	push	{r7, lr}
 8019b16:	b082      	sub	sp, #8
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	4618      	mov	r0, r3
 8019b22:	f7ef f993 	bl	8008e4c <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	4618      	mov	r0, r3
 8019b2c:	f7ef f9c0 	bl	8008eb0 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8019b30:	bf00      	nop
 8019b32:	3708      	adds	r7, #8
 8019b34:	46bd      	mov	sp, r7
 8019b36:	bd80      	pop	{r7, pc}

08019b38 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019b38:	b580      	push	{r7, lr}
 8019b3a:	b084      	sub	sp, #16
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	6078      	str	r0, [r7, #4]
 8019b40:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	6818      	ldr	r0, [r3, #0]
 8019b46:	4639      	mov	r1, r7
 8019b48:	2300      	movs	r3, #0
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	f7ef f898 	bl	8008c80 <osMessageQueuePut>
 8019b50:	4603      	mov	r3, r0
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d102      	bne.n	8019b5c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8019b56:	2300      	movs	r3, #0
 8019b58:	73fb      	strb	r3, [r7, #15]
 8019b5a:	e001      	b.n	8019b60 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019b5c:	23ff      	movs	r3, #255	; 0xff
 8019b5e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019b64:	4618      	mov	r0, r3
 8019b66:	3710      	adds	r7, #16
 8019b68:	46bd      	mov	sp, r7
 8019b6a:	bd80      	pop	{r7, pc}

08019b6c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019b6c:	b580      	push	{r7, lr}
 8019b6e:	b086      	sub	sp, #24
 8019b70:	af00      	add	r7, sp, #0
 8019b72:	60f8      	str	r0, [r7, #12]
 8019b74:	60b9      	str	r1, [r7, #8]
 8019b76:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8019b78:	f7ee fc1c 	bl	80083b4 <osKernelGetTickCount>
 8019b7c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d013      	beq.n	8019bac <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8019b84:	68fb      	ldr	r3, [r7, #12]
 8019b86:	6818      	ldr	r0, [r3, #0]
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	2200      	movs	r2, #0
 8019b8c:	68b9      	ldr	r1, [r7, #8]
 8019b8e:	f7ef f8eb 	bl	8008d68 <osMessageQueueGet>
 8019b92:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8019b94:	693b      	ldr	r3, [r7, #16]
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d105      	bne.n	8019ba6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8019b9a:	f7ee fc0b 	bl	80083b4 <osKernelGetTickCount>
 8019b9e:	4602      	mov	r2, r0
 8019ba0:	697b      	ldr	r3, [r7, #20]
 8019ba2:	1ad3      	subs	r3, r2, r3
 8019ba4:	e00f      	b.n	8019bc6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8019baa:	e00c      	b.n	8019bc6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	6818      	ldr	r0, [r3, #0]
 8019bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8019bb4:	2200      	movs	r2, #0
 8019bb6:	68b9      	ldr	r1, [r7, #8]
 8019bb8:	f7ef f8d6 	bl	8008d68 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8019bbc:	f7ee fbfa 	bl	80083b4 <osKernelGetTickCount>
 8019bc0:	4602      	mov	r2, r0
 8019bc2:	697b      	ldr	r3, [r7, #20]
 8019bc4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8019bc6:	4618      	mov	r0, r3
 8019bc8:	3718      	adds	r7, #24
 8019bca:	46bd      	mov	sp, r7
 8019bcc:	bd80      	pop	{r7, pc}

08019bce <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8019bce:	b580      	push	{r7, lr}
 8019bd0:	b082      	sub	sp, #8
 8019bd2:	af00      	add	r7, sp, #0
 8019bd4:	6078      	str	r0, [r7, #4]
 8019bd6:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	6818      	ldr	r0, [r3, #0]
 8019bdc:	2300      	movs	r3, #0
 8019bde:	2200      	movs	r2, #0
 8019be0:	6839      	ldr	r1, [r7, #0]
 8019be2:	f7ef f8c1 	bl	8008d68 <osMessageQueueGet>
 8019be6:	4603      	mov	r3, r0
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d101      	bne.n	8019bf0 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8019bec:	2300      	movs	r3, #0
 8019bee:	e001      	b.n	8019bf4 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8019bf0:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8019bf4:	4618      	mov	r0, r3
 8019bf6:	3708      	adds	r7, #8
 8019bf8:	46bd      	mov	sp, r7
 8019bfa:	bd80      	pop	{r7, pc}

08019bfc <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019bfc:	b480      	push	{r7}
 8019bfe:	b083      	sub	sp, #12
 8019c00:	af00      	add	r7, sp, #0
 8019c02:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d101      	bne.n	8019c10 <sys_mbox_valid+0x14>
    return 0;
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	e000      	b.n	8019c12 <sys_mbox_valid+0x16>
  else
    return 1;
 8019c10:	2301      	movs	r3, #1
}
 8019c12:	4618      	mov	r0, r3
 8019c14:	370c      	adds	r7, #12
 8019c16:	46bd      	mov	sp, r7
 8019c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c1c:	4770      	bx	lr

08019c1e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8019c1e:	b480      	push	{r7}
 8019c20:	b083      	sub	sp, #12
 8019c22:	af00      	add	r7, sp, #0
 8019c24:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	2200      	movs	r2, #0
 8019c2a:	601a      	str	r2, [r3, #0]
}
 8019c2c:	bf00      	nop
 8019c2e:	370c      	adds	r7, #12
 8019c30:	46bd      	mov	sp, r7
 8019c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c36:	4770      	bx	lr

08019c38 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8019c38:	b580      	push	{r7, lr}
 8019c3a:	b082      	sub	sp, #8
 8019c3c:	af00      	add	r7, sp, #0
 8019c3e:	6078      	str	r0, [r7, #4]
 8019c40:	460b      	mov	r3, r1
 8019c42:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8019c44:	78fb      	ldrb	r3, [r7, #3]
 8019c46:	2200      	movs	r2, #0
 8019c48:	4619      	mov	r1, r3
 8019c4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019c4e:	f7ee fe01 	bl	8008854 <osSemaphoreNew>
 8019c52:	4602      	mov	r2, r0
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	d102      	bne.n	8019c66 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019c60:	f04f 33ff 	mov.w	r3, #4294967295
 8019c64:	e009      	b.n	8019c7a <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8019c66:	78fb      	ldrb	r3, [r7, #3]
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d105      	bne.n	8019c78 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	2100      	movs	r1, #0
 8019c72:	4618      	mov	r0, r3
 8019c74:	f7ee fe8a 	bl	800898c <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8019c78:	2300      	movs	r3, #0
}
 8019c7a:	4618      	mov	r0, r3
 8019c7c:	3708      	adds	r7, #8
 8019c7e:	46bd      	mov	sp, r7
 8019c80:	bd80      	pop	{r7, pc}

08019c82 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8019c82:	b580      	push	{r7, lr}
 8019c84:	b084      	sub	sp, #16
 8019c86:	af00      	add	r7, sp, #0
 8019c88:	6078      	str	r0, [r7, #4]
 8019c8a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8019c8c:	f7ee fb92 	bl	80083b4 <osKernelGetTickCount>
 8019c90:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8019c92:	683b      	ldr	r3, [r7, #0]
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d011      	beq.n	8019cbc <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	6839      	ldr	r1, [r7, #0]
 8019c9e:	4618      	mov	r0, r3
 8019ca0:	f7ee fe74 	bl	800898c <osSemaphoreAcquire>
 8019ca4:	4603      	mov	r3, r0
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d105      	bne.n	8019cb6 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8019caa:	f7ee fb83 	bl	80083b4 <osKernelGetTickCount>
 8019cae:	4602      	mov	r2, r0
 8019cb0:	68fb      	ldr	r3, [r7, #12]
 8019cb2:	1ad3      	subs	r3, r2, r3
 8019cb4:	e012      	b.n	8019cdc <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8019cba:	e00f      	b.n	8019cdc <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8019cbc:	bf00      	nop
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	f04f 31ff 	mov.w	r1, #4294967295
 8019cc6:	4618      	mov	r0, r3
 8019cc8:	f7ee fe60 	bl	800898c <osSemaphoreAcquire>
 8019ccc:	4603      	mov	r3, r0
 8019cce:	2b00      	cmp	r3, #0
 8019cd0:	d1f5      	bne.n	8019cbe <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8019cd2:	f7ee fb6f 	bl	80083b4 <osKernelGetTickCount>
 8019cd6:	4602      	mov	r2, r0
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8019cdc:	4618      	mov	r0, r3
 8019cde:	3710      	adds	r7, #16
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	bd80      	pop	{r7, pc}

08019ce4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8019ce4:	b580      	push	{r7, lr}
 8019ce6:	b082      	sub	sp, #8
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	4618      	mov	r0, r3
 8019cf2:	f7ee feb1 	bl	8008a58 <osSemaphoreRelease>
}
 8019cf6:	bf00      	nop
 8019cf8:	3708      	adds	r7, #8
 8019cfa:	46bd      	mov	sp, r7
 8019cfc:	bd80      	pop	{r7, pc}

08019cfe <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8019cfe:	b580      	push	{r7, lr}
 8019d00:	b082      	sub	sp, #8
 8019d02:	af00      	add	r7, sp, #0
 8019d04:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	f7ee fefc 	bl	8008b08 <osSemaphoreDelete>
}
 8019d10:	bf00      	nop
 8019d12:	3708      	adds	r7, #8
 8019d14:	46bd      	mov	sp, r7
 8019d16:	bd80      	pop	{r7, pc}

08019d18 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8019d18:	b480      	push	{r7}
 8019d1a:	b083      	sub	sp, #12
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d101      	bne.n	8019d2c <sys_sem_valid+0x14>
    return 0;
 8019d28:	2300      	movs	r3, #0
 8019d2a:	e000      	b.n	8019d2e <sys_sem_valid+0x16>
  else
    return 1;
 8019d2c:	2301      	movs	r3, #1
}
 8019d2e:	4618      	mov	r0, r3
 8019d30:	370c      	adds	r7, #12
 8019d32:	46bd      	mov	sp, r7
 8019d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d38:	4770      	bx	lr

08019d3a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8019d3a:	b480      	push	{r7}
 8019d3c:	b083      	sub	sp, #12
 8019d3e:	af00      	add	r7, sp, #0
 8019d40:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	2200      	movs	r2, #0
 8019d46:	601a      	str	r2, [r3, #0]
}
 8019d48:	bf00      	nop
 8019d4a:	370c      	adds	r7, #12
 8019d4c:	46bd      	mov	sp, r7
 8019d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d52:	4770      	bx	lr

08019d54 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019d54:	b580      	push	{r7, lr}
 8019d56:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8019d58:	2000      	movs	r0, #0
 8019d5a:	f7ee fc33 	bl	80085c4 <osMutexNew>
 8019d5e:	4603      	mov	r3, r0
 8019d60:	4a01      	ldr	r2, [pc, #4]	; (8019d68 <sys_init+0x14>)
 8019d62:	6013      	str	r3, [r2, #0]
#endif
}
 8019d64:	bf00      	nop
 8019d66:	bd80      	pop	{r7, pc}
 8019d68:	2000dbc4 	.word	0x2000dbc4

08019d6c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019d6c:	b580      	push	{r7, lr}
 8019d6e:	b082      	sub	sp, #8
 8019d70:	af00      	add	r7, sp, #0
 8019d72:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8019d74:	2000      	movs	r0, #0
 8019d76:	f7ee fc25 	bl	80085c4 <osMutexNew>
 8019d7a:	4602      	mov	r2, r0
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8019d80:	687b      	ldr	r3, [r7, #4]
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d102      	bne.n	8019d8e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019d88:	f04f 33ff 	mov.w	r3, #4294967295
 8019d8c:	e000      	b.n	8019d90 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019d8e:	2300      	movs	r3, #0
}
 8019d90:	4618      	mov	r0, r3
 8019d92:	3708      	adds	r7, #8
 8019d94:	46bd      	mov	sp, r7
 8019d96:	bd80      	pop	{r7, pc}

08019d98 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	b082      	sub	sp, #8
 8019d9c:	af00      	add	r7, sp, #0
 8019d9e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	f04f 31ff 	mov.w	r1, #4294967295
 8019da8:	4618      	mov	r0, r3
 8019daa:	f7ee fca5 	bl	80086f8 <osMutexAcquire>
#endif
}
 8019dae:	bf00      	nop
 8019db0:	3708      	adds	r7, #8
 8019db2:	46bd      	mov	sp, r7
 8019db4:	bd80      	pop	{r7, pc}

08019db6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019db6:	b580      	push	{r7, lr}
 8019db8:	b082      	sub	sp, #8
 8019dba:	af00      	add	r7, sp, #0
 8019dbc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	4618      	mov	r0, r3
 8019dc4:	f7ee fcf6 	bl	80087b4 <osMutexRelease>
}
 8019dc8:	bf00      	nop
 8019dca:	3708      	adds	r7, #8
 8019dcc:	46bd      	mov	sp, r7
 8019dce:	bd80      	pop	{r7, pc}

08019dd0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019dd0:	b580      	push	{r7, lr}
 8019dd2:	b08e      	sub	sp, #56	; 0x38
 8019dd4:	af00      	add	r7, sp, #0
 8019dd6:	60f8      	str	r0, [r7, #12]
 8019dd8:	60b9      	str	r1, [r7, #8]
 8019dda:	607a      	str	r2, [r7, #4]
 8019ddc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8019dde:	f107 0314 	add.w	r3, r7, #20
 8019de2:	2224      	movs	r2, #36	; 0x24
 8019de4:	2100      	movs	r1, #0
 8019de6:	4618      	mov	r0, r3
 8019de8:	f000 f969 	bl	801a0be <memset>
 8019dec:	68fb      	ldr	r3, [r7, #12]
 8019dee:	617b      	str	r3, [r7, #20]
 8019df0:	683b      	ldr	r3, [r7, #0]
 8019df2:	62bb      	str	r3, [r7, #40]	; 0x28
 8019df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019df6:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8019df8:	f107 0314 	add.w	r3, r7, #20
 8019dfc:	461a      	mov	r2, r3
 8019dfe:	6879      	ldr	r1, [r7, #4]
 8019e00:	68b8      	ldr	r0, [r7, #8]
 8019e02:	f7ee faff 	bl	8008404 <osThreadNew>
 8019e06:	4603      	mov	r3, r0
#endif
}
 8019e08:	4618      	mov	r0, r3
 8019e0a:	3738      	adds	r7, #56	; 0x38
 8019e0c:	46bd      	mov	sp, r7
 8019e0e:	bd80      	pop	{r7, pc}

08019e10 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019e10:	b580      	push	{r7, lr}
 8019e12:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8019e14:	4b04      	ldr	r3, [pc, #16]	; (8019e28 <sys_arch_protect+0x18>)
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	f04f 31ff 	mov.w	r1, #4294967295
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	f7ee fc6b 	bl	80086f8 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8019e22:	2301      	movs	r3, #1
}
 8019e24:	4618      	mov	r0, r3
 8019e26:	bd80      	pop	{r7, pc}
 8019e28:	2000dbc4 	.word	0x2000dbc4

08019e2c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019e2c:	b580      	push	{r7, lr}
 8019e2e:	b082      	sub	sp, #8
 8019e30:	af00      	add	r7, sp, #0
 8019e32:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019e34:	4b04      	ldr	r3, [pc, #16]	; (8019e48 <sys_arch_unprotect+0x1c>)
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	4618      	mov	r0, r3
 8019e3a:	f7ee fcbb 	bl	80087b4 <osMutexRelease>
}
 8019e3e:	bf00      	nop
 8019e40:	3708      	adds	r7, #8
 8019e42:	46bd      	mov	sp, r7
 8019e44:	bd80      	pop	{r7, pc}
 8019e46:	bf00      	nop
 8019e48:	2000dbc4 	.word	0x2000dbc4

08019e4c <std>:
 8019e4c:	2300      	movs	r3, #0
 8019e4e:	b510      	push	{r4, lr}
 8019e50:	4604      	mov	r4, r0
 8019e52:	e9c0 3300 	strd	r3, r3, [r0]
 8019e56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019e5a:	6083      	str	r3, [r0, #8]
 8019e5c:	8181      	strh	r1, [r0, #12]
 8019e5e:	6643      	str	r3, [r0, #100]	; 0x64
 8019e60:	81c2      	strh	r2, [r0, #14]
 8019e62:	6183      	str	r3, [r0, #24]
 8019e64:	4619      	mov	r1, r3
 8019e66:	2208      	movs	r2, #8
 8019e68:	305c      	adds	r0, #92	; 0x5c
 8019e6a:	f000 f928 	bl	801a0be <memset>
 8019e6e:	4b05      	ldr	r3, [pc, #20]	; (8019e84 <std+0x38>)
 8019e70:	6263      	str	r3, [r4, #36]	; 0x24
 8019e72:	4b05      	ldr	r3, [pc, #20]	; (8019e88 <std+0x3c>)
 8019e74:	62a3      	str	r3, [r4, #40]	; 0x28
 8019e76:	4b05      	ldr	r3, [pc, #20]	; (8019e8c <std+0x40>)
 8019e78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019e7a:	4b05      	ldr	r3, [pc, #20]	; (8019e90 <std+0x44>)
 8019e7c:	6224      	str	r4, [r4, #32]
 8019e7e:	6323      	str	r3, [r4, #48]	; 0x30
 8019e80:	bd10      	pop	{r4, pc}
 8019e82:	bf00      	nop
 8019e84:	0801a329 	.word	0x0801a329
 8019e88:	0801a34b 	.word	0x0801a34b
 8019e8c:	0801a383 	.word	0x0801a383
 8019e90:	0801a3a7 	.word	0x0801a3a7

08019e94 <_cleanup_r>:
 8019e94:	4901      	ldr	r1, [pc, #4]	; (8019e9c <_cleanup_r+0x8>)
 8019e96:	f000 b8af 	b.w	8019ff8 <_fwalk_reent>
 8019e9a:	bf00      	nop
 8019e9c:	0801a53d 	.word	0x0801a53d

08019ea0 <__sfmoreglue>:
 8019ea0:	b570      	push	{r4, r5, r6, lr}
 8019ea2:	1e4a      	subs	r2, r1, #1
 8019ea4:	2568      	movs	r5, #104	; 0x68
 8019ea6:	4355      	muls	r5, r2
 8019ea8:	460e      	mov	r6, r1
 8019eaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019eae:	f000 f90f 	bl	801a0d0 <_malloc_r>
 8019eb2:	4604      	mov	r4, r0
 8019eb4:	b140      	cbz	r0, 8019ec8 <__sfmoreglue+0x28>
 8019eb6:	2100      	movs	r1, #0
 8019eb8:	e9c0 1600 	strd	r1, r6, [r0]
 8019ebc:	300c      	adds	r0, #12
 8019ebe:	60a0      	str	r0, [r4, #8]
 8019ec0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019ec4:	f000 f8fb 	bl	801a0be <memset>
 8019ec8:	4620      	mov	r0, r4
 8019eca:	bd70      	pop	{r4, r5, r6, pc}

08019ecc <__sfp_lock_acquire>:
 8019ecc:	4801      	ldr	r0, [pc, #4]	; (8019ed4 <__sfp_lock_acquire+0x8>)
 8019ece:	f000 b8d8 	b.w	801a082 <__retarget_lock_acquire_recursive>
 8019ed2:	bf00      	nop
 8019ed4:	2000dbd0 	.word	0x2000dbd0

08019ed8 <__sfp_lock_release>:
 8019ed8:	4801      	ldr	r0, [pc, #4]	; (8019ee0 <__sfp_lock_release+0x8>)
 8019eda:	f000 b8d3 	b.w	801a084 <__retarget_lock_release_recursive>
 8019ede:	bf00      	nop
 8019ee0:	2000dbd0 	.word	0x2000dbd0

08019ee4 <__sinit_lock_acquire>:
 8019ee4:	4801      	ldr	r0, [pc, #4]	; (8019eec <__sinit_lock_acquire+0x8>)
 8019ee6:	f000 b8cc 	b.w	801a082 <__retarget_lock_acquire_recursive>
 8019eea:	bf00      	nop
 8019eec:	2000dbcb 	.word	0x2000dbcb

08019ef0 <__sinit_lock_release>:
 8019ef0:	4801      	ldr	r0, [pc, #4]	; (8019ef8 <__sinit_lock_release+0x8>)
 8019ef2:	f000 b8c7 	b.w	801a084 <__retarget_lock_release_recursive>
 8019ef6:	bf00      	nop
 8019ef8:	2000dbcb 	.word	0x2000dbcb

08019efc <__sinit>:
 8019efc:	b510      	push	{r4, lr}
 8019efe:	4604      	mov	r4, r0
 8019f00:	f7ff fff0 	bl	8019ee4 <__sinit_lock_acquire>
 8019f04:	69a3      	ldr	r3, [r4, #24]
 8019f06:	b11b      	cbz	r3, 8019f10 <__sinit+0x14>
 8019f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f0c:	f7ff bff0 	b.w	8019ef0 <__sinit_lock_release>
 8019f10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019f14:	6523      	str	r3, [r4, #80]	; 0x50
 8019f16:	4b13      	ldr	r3, [pc, #76]	; (8019f64 <__sinit+0x68>)
 8019f18:	4a13      	ldr	r2, [pc, #76]	; (8019f68 <__sinit+0x6c>)
 8019f1a:	681b      	ldr	r3, [r3, #0]
 8019f1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8019f1e:	42a3      	cmp	r3, r4
 8019f20:	bf04      	itt	eq
 8019f22:	2301      	moveq	r3, #1
 8019f24:	61a3      	streq	r3, [r4, #24]
 8019f26:	4620      	mov	r0, r4
 8019f28:	f000 f820 	bl	8019f6c <__sfp>
 8019f2c:	6060      	str	r0, [r4, #4]
 8019f2e:	4620      	mov	r0, r4
 8019f30:	f000 f81c 	bl	8019f6c <__sfp>
 8019f34:	60a0      	str	r0, [r4, #8]
 8019f36:	4620      	mov	r0, r4
 8019f38:	f000 f818 	bl	8019f6c <__sfp>
 8019f3c:	2200      	movs	r2, #0
 8019f3e:	60e0      	str	r0, [r4, #12]
 8019f40:	2104      	movs	r1, #4
 8019f42:	6860      	ldr	r0, [r4, #4]
 8019f44:	f7ff ff82 	bl	8019e4c <std>
 8019f48:	68a0      	ldr	r0, [r4, #8]
 8019f4a:	2201      	movs	r2, #1
 8019f4c:	2109      	movs	r1, #9
 8019f4e:	f7ff ff7d 	bl	8019e4c <std>
 8019f52:	68e0      	ldr	r0, [r4, #12]
 8019f54:	2202      	movs	r2, #2
 8019f56:	2112      	movs	r1, #18
 8019f58:	f7ff ff78 	bl	8019e4c <std>
 8019f5c:	2301      	movs	r3, #1
 8019f5e:	61a3      	str	r3, [r4, #24]
 8019f60:	e7d2      	b.n	8019f08 <__sinit+0xc>
 8019f62:	bf00      	nop
 8019f64:	0801e898 	.word	0x0801e898
 8019f68:	08019e95 	.word	0x08019e95

08019f6c <__sfp>:
 8019f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f6e:	4607      	mov	r7, r0
 8019f70:	f7ff ffac 	bl	8019ecc <__sfp_lock_acquire>
 8019f74:	4b1e      	ldr	r3, [pc, #120]	; (8019ff0 <__sfp+0x84>)
 8019f76:	681e      	ldr	r6, [r3, #0]
 8019f78:	69b3      	ldr	r3, [r6, #24]
 8019f7a:	b913      	cbnz	r3, 8019f82 <__sfp+0x16>
 8019f7c:	4630      	mov	r0, r6
 8019f7e:	f7ff ffbd 	bl	8019efc <__sinit>
 8019f82:	3648      	adds	r6, #72	; 0x48
 8019f84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019f88:	3b01      	subs	r3, #1
 8019f8a:	d503      	bpl.n	8019f94 <__sfp+0x28>
 8019f8c:	6833      	ldr	r3, [r6, #0]
 8019f8e:	b30b      	cbz	r3, 8019fd4 <__sfp+0x68>
 8019f90:	6836      	ldr	r6, [r6, #0]
 8019f92:	e7f7      	b.n	8019f84 <__sfp+0x18>
 8019f94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019f98:	b9d5      	cbnz	r5, 8019fd0 <__sfp+0x64>
 8019f9a:	4b16      	ldr	r3, [pc, #88]	; (8019ff4 <__sfp+0x88>)
 8019f9c:	60e3      	str	r3, [r4, #12]
 8019f9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019fa2:	6665      	str	r5, [r4, #100]	; 0x64
 8019fa4:	f000 f86c 	bl	801a080 <__retarget_lock_init_recursive>
 8019fa8:	f7ff ff96 	bl	8019ed8 <__sfp_lock_release>
 8019fac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019fb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019fb4:	6025      	str	r5, [r4, #0]
 8019fb6:	61a5      	str	r5, [r4, #24]
 8019fb8:	2208      	movs	r2, #8
 8019fba:	4629      	mov	r1, r5
 8019fbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019fc0:	f000 f87d 	bl	801a0be <memset>
 8019fc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019fc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019fcc:	4620      	mov	r0, r4
 8019fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019fd0:	3468      	adds	r4, #104	; 0x68
 8019fd2:	e7d9      	b.n	8019f88 <__sfp+0x1c>
 8019fd4:	2104      	movs	r1, #4
 8019fd6:	4638      	mov	r0, r7
 8019fd8:	f7ff ff62 	bl	8019ea0 <__sfmoreglue>
 8019fdc:	4604      	mov	r4, r0
 8019fde:	6030      	str	r0, [r6, #0]
 8019fe0:	2800      	cmp	r0, #0
 8019fe2:	d1d5      	bne.n	8019f90 <__sfp+0x24>
 8019fe4:	f7ff ff78 	bl	8019ed8 <__sfp_lock_release>
 8019fe8:	230c      	movs	r3, #12
 8019fea:	603b      	str	r3, [r7, #0]
 8019fec:	e7ee      	b.n	8019fcc <__sfp+0x60>
 8019fee:	bf00      	nop
 8019ff0:	0801e898 	.word	0x0801e898
 8019ff4:	ffff0001 	.word	0xffff0001

08019ff8 <_fwalk_reent>:
 8019ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ffc:	4606      	mov	r6, r0
 8019ffe:	4688      	mov	r8, r1
 801a000:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a004:	2700      	movs	r7, #0
 801a006:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a00a:	f1b9 0901 	subs.w	r9, r9, #1
 801a00e:	d505      	bpl.n	801a01c <_fwalk_reent+0x24>
 801a010:	6824      	ldr	r4, [r4, #0]
 801a012:	2c00      	cmp	r4, #0
 801a014:	d1f7      	bne.n	801a006 <_fwalk_reent+0xe>
 801a016:	4638      	mov	r0, r7
 801a018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a01c:	89ab      	ldrh	r3, [r5, #12]
 801a01e:	2b01      	cmp	r3, #1
 801a020:	d907      	bls.n	801a032 <_fwalk_reent+0x3a>
 801a022:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a026:	3301      	adds	r3, #1
 801a028:	d003      	beq.n	801a032 <_fwalk_reent+0x3a>
 801a02a:	4629      	mov	r1, r5
 801a02c:	4630      	mov	r0, r6
 801a02e:	47c0      	blx	r8
 801a030:	4307      	orrs	r7, r0
 801a032:	3568      	adds	r5, #104	; 0x68
 801a034:	e7e9      	b.n	801a00a <_fwalk_reent+0x12>
	...

0801a038 <__libc_init_array>:
 801a038:	b570      	push	{r4, r5, r6, lr}
 801a03a:	4d0d      	ldr	r5, [pc, #52]	; (801a070 <__libc_init_array+0x38>)
 801a03c:	4c0d      	ldr	r4, [pc, #52]	; (801a074 <__libc_init_array+0x3c>)
 801a03e:	1b64      	subs	r4, r4, r5
 801a040:	10a4      	asrs	r4, r4, #2
 801a042:	2600      	movs	r6, #0
 801a044:	42a6      	cmp	r6, r4
 801a046:	d109      	bne.n	801a05c <__libc_init_array+0x24>
 801a048:	4d0b      	ldr	r5, [pc, #44]	; (801a078 <__libc_init_array+0x40>)
 801a04a:	4c0c      	ldr	r4, [pc, #48]	; (801a07c <__libc_init_array+0x44>)
 801a04c:	f000 ffcc 	bl	801afe8 <_init>
 801a050:	1b64      	subs	r4, r4, r5
 801a052:	10a4      	asrs	r4, r4, #2
 801a054:	2600      	movs	r6, #0
 801a056:	42a6      	cmp	r6, r4
 801a058:	d105      	bne.n	801a066 <__libc_init_array+0x2e>
 801a05a:	bd70      	pop	{r4, r5, r6, pc}
 801a05c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a060:	4798      	blx	r3
 801a062:	3601      	adds	r6, #1
 801a064:	e7ee      	b.n	801a044 <__libc_init_array+0xc>
 801a066:	f855 3b04 	ldr.w	r3, [r5], #4
 801a06a:	4798      	blx	r3
 801a06c:	3601      	adds	r6, #1
 801a06e:	e7f2      	b.n	801a056 <__libc_init_array+0x1e>
 801a070:	0801e98c 	.word	0x0801e98c
 801a074:	0801e98c 	.word	0x0801e98c
 801a078:	0801e98c 	.word	0x0801e98c
 801a07c:	0801e990 	.word	0x0801e990

0801a080 <__retarget_lock_init_recursive>:
 801a080:	4770      	bx	lr

0801a082 <__retarget_lock_acquire_recursive>:
 801a082:	4770      	bx	lr

0801a084 <__retarget_lock_release_recursive>:
 801a084:	4770      	bx	lr

0801a086 <memcmp>:
 801a086:	b530      	push	{r4, r5, lr}
 801a088:	3901      	subs	r1, #1
 801a08a:	2400      	movs	r4, #0
 801a08c:	42a2      	cmp	r2, r4
 801a08e:	d101      	bne.n	801a094 <memcmp+0xe>
 801a090:	2000      	movs	r0, #0
 801a092:	e005      	b.n	801a0a0 <memcmp+0x1a>
 801a094:	5d03      	ldrb	r3, [r0, r4]
 801a096:	3401      	adds	r4, #1
 801a098:	5d0d      	ldrb	r5, [r1, r4]
 801a09a:	42ab      	cmp	r3, r5
 801a09c:	d0f6      	beq.n	801a08c <memcmp+0x6>
 801a09e:	1b58      	subs	r0, r3, r5
 801a0a0:	bd30      	pop	{r4, r5, pc}

0801a0a2 <memcpy>:
 801a0a2:	440a      	add	r2, r1
 801a0a4:	4291      	cmp	r1, r2
 801a0a6:	f100 33ff 	add.w	r3, r0, #4294967295
 801a0aa:	d100      	bne.n	801a0ae <memcpy+0xc>
 801a0ac:	4770      	bx	lr
 801a0ae:	b510      	push	{r4, lr}
 801a0b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a0b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a0b8:	4291      	cmp	r1, r2
 801a0ba:	d1f9      	bne.n	801a0b0 <memcpy+0xe>
 801a0bc:	bd10      	pop	{r4, pc}

0801a0be <memset>:
 801a0be:	4402      	add	r2, r0
 801a0c0:	4603      	mov	r3, r0
 801a0c2:	4293      	cmp	r3, r2
 801a0c4:	d100      	bne.n	801a0c8 <memset+0xa>
 801a0c6:	4770      	bx	lr
 801a0c8:	f803 1b01 	strb.w	r1, [r3], #1
 801a0cc:	e7f9      	b.n	801a0c2 <memset+0x4>
	...

0801a0d0 <_malloc_r>:
 801a0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0d2:	1ccd      	adds	r5, r1, #3
 801a0d4:	f025 0503 	bic.w	r5, r5, #3
 801a0d8:	3508      	adds	r5, #8
 801a0da:	2d0c      	cmp	r5, #12
 801a0dc:	bf38      	it	cc
 801a0de:	250c      	movcc	r5, #12
 801a0e0:	2d00      	cmp	r5, #0
 801a0e2:	4606      	mov	r6, r0
 801a0e4:	db01      	blt.n	801a0ea <_malloc_r+0x1a>
 801a0e6:	42a9      	cmp	r1, r5
 801a0e8:	d903      	bls.n	801a0f2 <_malloc_r+0x22>
 801a0ea:	230c      	movs	r3, #12
 801a0ec:	6033      	str	r3, [r6, #0]
 801a0ee:	2000      	movs	r0, #0
 801a0f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0f2:	f000 fa8b 	bl	801a60c <__malloc_lock>
 801a0f6:	4921      	ldr	r1, [pc, #132]	; (801a17c <_malloc_r+0xac>)
 801a0f8:	680a      	ldr	r2, [r1, #0]
 801a0fa:	4614      	mov	r4, r2
 801a0fc:	b99c      	cbnz	r4, 801a126 <_malloc_r+0x56>
 801a0fe:	4f20      	ldr	r7, [pc, #128]	; (801a180 <_malloc_r+0xb0>)
 801a100:	683b      	ldr	r3, [r7, #0]
 801a102:	b923      	cbnz	r3, 801a10e <_malloc_r+0x3e>
 801a104:	4621      	mov	r1, r4
 801a106:	4630      	mov	r0, r6
 801a108:	f000 f8fe 	bl	801a308 <_sbrk_r>
 801a10c:	6038      	str	r0, [r7, #0]
 801a10e:	4629      	mov	r1, r5
 801a110:	4630      	mov	r0, r6
 801a112:	f000 f8f9 	bl	801a308 <_sbrk_r>
 801a116:	1c43      	adds	r3, r0, #1
 801a118:	d123      	bne.n	801a162 <_malloc_r+0x92>
 801a11a:	230c      	movs	r3, #12
 801a11c:	6033      	str	r3, [r6, #0]
 801a11e:	4630      	mov	r0, r6
 801a120:	f000 fa7a 	bl	801a618 <__malloc_unlock>
 801a124:	e7e3      	b.n	801a0ee <_malloc_r+0x1e>
 801a126:	6823      	ldr	r3, [r4, #0]
 801a128:	1b5b      	subs	r3, r3, r5
 801a12a:	d417      	bmi.n	801a15c <_malloc_r+0x8c>
 801a12c:	2b0b      	cmp	r3, #11
 801a12e:	d903      	bls.n	801a138 <_malloc_r+0x68>
 801a130:	6023      	str	r3, [r4, #0]
 801a132:	441c      	add	r4, r3
 801a134:	6025      	str	r5, [r4, #0]
 801a136:	e004      	b.n	801a142 <_malloc_r+0x72>
 801a138:	6863      	ldr	r3, [r4, #4]
 801a13a:	42a2      	cmp	r2, r4
 801a13c:	bf0c      	ite	eq
 801a13e:	600b      	streq	r3, [r1, #0]
 801a140:	6053      	strne	r3, [r2, #4]
 801a142:	4630      	mov	r0, r6
 801a144:	f000 fa68 	bl	801a618 <__malloc_unlock>
 801a148:	f104 000b 	add.w	r0, r4, #11
 801a14c:	1d23      	adds	r3, r4, #4
 801a14e:	f020 0007 	bic.w	r0, r0, #7
 801a152:	1ac2      	subs	r2, r0, r3
 801a154:	d0cc      	beq.n	801a0f0 <_malloc_r+0x20>
 801a156:	1a1b      	subs	r3, r3, r0
 801a158:	50a3      	str	r3, [r4, r2]
 801a15a:	e7c9      	b.n	801a0f0 <_malloc_r+0x20>
 801a15c:	4622      	mov	r2, r4
 801a15e:	6864      	ldr	r4, [r4, #4]
 801a160:	e7cc      	b.n	801a0fc <_malloc_r+0x2c>
 801a162:	1cc4      	adds	r4, r0, #3
 801a164:	f024 0403 	bic.w	r4, r4, #3
 801a168:	42a0      	cmp	r0, r4
 801a16a:	d0e3      	beq.n	801a134 <_malloc_r+0x64>
 801a16c:	1a21      	subs	r1, r4, r0
 801a16e:	4630      	mov	r0, r6
 801a170:	f000 f8ca 	bl	801a308 <_sbrk_r>
 801a174:	3001      	adds	r0, #1
 801a176:	d1dd      	bne.n	801a134 <_malloc_r+0x64>
 801a178:	e7cf      	b.n	801a11a <_malloc_r+0x4a>
 801a17a:	bf00      	nop
 801a17c:	20004c04 	.word	0x20004c04
 801a180:	20004c08 	.word	0x20004c08

0801a184 <iprintf>:
 801a184:	b40f      	push	{r0, r1, r2, r3}
 801a186:	4b0a      	ldr	r3, [pc, #40]	; (801a1b0 <iprintf+0x2c>)
 801a188:	b513      	push	{r0, r1, r4, lr}
 801a18a:	681c      	ldr	r4, [r3, #0]
 801a18c:	b124      	cbz	r4, 801a198 <iprintf+0x14>
 801a18e:	69a3      	ldr	r3, [r4, #24]
 801a190:	b913      	cbnz	r3, 801a198 <iprintf+0x14>
 801a192:	4620      	mov	r0, r4
 801a194:	f7ff feb2 	bl	8019efc <__sinit>
 801a198:	ab05      	add	r3, sp, #20
 801a19a:	9a04      	ldr	r2, [sp, #16]
 801a19c:	68a1      	ldr	r1, [r4, #8]
 801a19e:	9301      	str	r3, [sp, #4]
 801a1a0:	4620      	mov	r0, r4
 801a1a2:	f000 fab9 	bl	801a718 <_vfiprintf_r>
 801a1a6:	b002      	add	sp, #8
 801a1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a1ac:	b004      	add	sp, #16
 801a1ae:	4770      	bx	lr
 801a1b0:	2000001c 	.word	0x2000001c

0801a1b4 <rand>:
 801a1b4:	4b17      	ldr	r3, [pc, #92]	; (801a214 <rand+0x60>)
 801a1b6:	b510      	push	{r4, lr}
 801a1b8:	681c      	ldr	r4, [r3, #0]
 801a1ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a1bc:	b9b3      	cbnz	r3, 801a1ec <rand+0x38>
 801a1be:	2018      	movs	r0, #24
 801a1c0:	f000 fa1c 	bl	801a5fc <malloc>
 801a1c4:	63a0      	str	r0, [r4, #56]	; 0x38
 801a1c6:	b928      	cbnz	r0, 801a1d4 <rand+0x20>
 801a1c8:	4602      	mov	r2, r0
 801a1ca:	4b13      	ldr	r3, [pc, #76]	; (801a218 <rand+0x64>)
 801a1cc:	4813      	ldr	r0, [pc, #76]	; (801a21c <rand+0x68>)
 801a1ce:	214e      	movs	r1, #78	; 0x4e
 801a1d0:	f000 f900 	bl	801a3d4 <__assert_func>
 801a1d4:	4a12      	ldr	r2, [pc, #72]	; (801a220 <rand+0x6c>)
 801a1d6:	4b13      	ldr	r3, [pc, #76]	; (801a224 <rand+0x70>)
 801a1d8:	e9c0 2300 	strd	r2, r3, [r0]
 801a1dc:	4b12      	ldr	r3, [pc, #72]	; (801a228 <rand+0x74>)
 801a1de:	6083      	str	r3, [r0, #8]
 801a1e0:	230b      	movs	r3, #11
 801a1e2:	8183      	strh	r3, [r0, #12]
 801a1e4:	2201      	movs	r2, #1
 801a1e6:	2300      	movs	r3, #0
 801a1e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a1ec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a1ee:	480f      	ldr	r0, [pc, #60]	; (801a22c <rand+0x78>)
 801a1f0:	690a      	ldr	r2, [r1, #16]
 801a1f2:	694b      	ldr	r3, [r1, #20]
 801a1f4:	4c0e      	ldr	r4, [pc, #56]	; (801a230 <rand+0x7c>)
 801a1f6:	4350      	muls	r0, r2
 801a1f8:	fb04 0003 	mla	r0, r4, r3, r0
 801a1fc:	fba2 3404 	umull	r3, r4, r2, r4
 801a200:	1c5a      	adds	r2, r3, #1
 801a202:	4404      	add	r4, r0
 801a204:	f144 0000 	adc.w	r0, r4, #0
 801a208:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801a20c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a210:	bd10      	pop	{r4, pc}
 801a212:	bf00      	nop
 801a214:	2000001c 	.word	0x2000001c
 801a218:	0801e89c 	.word	0x0801e89c
 801a21c:	0801e8b3 	.word	0x0801e8b3
 801a220:	abcd330e 	.word	0xabcd330e
 801a224:	e66d1234 	.word	0xe66d1234
 801a228:	0005deec 	.word	0x0005deec
 801a22c:	5851f42d 	.word	0x5851f42d
 801a230:	4c957f2d 	.word	0x4c957f2d

0801a234 <cleanup_glue>:
 801a234:	b538      	push	{r3, r4, r5, lr}
 801a236:	460c      	mov	r4, r1
 801a238:	6809      	ldr	r1, [r1, #0]
 801a23a:	4605      	mov	r5, r0
 801a23c:	b109      	cbz	r1, 801a242 <cleanup_glue+0xe>
 801a23e:	f7ff fff9 	bl	801a234 <cleanup_glue>
 801a242:	4621      	mov	r1, r4
 801a244:	4628      	mov	r0, r5
 801a246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a24a:	f000 b9eb 	b.w	801a624 <_free_r>
	...

0801a250 <_reclaim_reent>:
 801a250:	4b2c      	ldr	r3, [pc, #176]	; (801a304 <_reclaim_reent+0xb4>)
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	4283      	cmp	r3, r0
 801a256:	b570      	push	{r4, r5, r6, lr}
 801a258:	4604      	mov	r4, r0
 801a25a:	d051      	beq.n	801a300 <_reclaim_reent+0xb0>
 801a25c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a25e:	b143      	cbz	r3, 801a272 <_reclaim_reent+0x22>
 801a260:	68db      	ldr	r3, [r3, #12]
 801a262:	2b00      	cmp	r3, #0
 801a264:	d14a      	bne.n	801a2fc <_reclaim_reent+0xac>
 801a266:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a268:	6819      	ldr	r1, [r3, #0]
 801a26a:	b111      	cbz	r1, 801a272 <_reclaim_reent+0x22>
 801a26c:	4620      	mov	r0, r4
 801a26e:	f000 f9d9 	bl	801a624 <_free_r>
 801a272:	6961      	ldr	r1, [r4, #20]
 801a274:	b111      	cbz	r1, 801a27c <_reclaim_reent+0x2c>
 801a276:	4620      	mov	r0, r4
 801a278:	f000 f9d4 	bl	801a624 <_free_r>
 801a27c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a27e:	b111      	cbz	r1, 801a286 <_reclaim_reent+0x36>
 801a280:	4620      	mov	r0, r4
 801a282:	f000 f9cf 	bl	801a624 <_free_r>
 801a286:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a288:	b111      	cbz	r1, 801a290 <_reclaim_reent+0x40>
 801a28a:	4620      	mov	r0, r4
 801a28c:	f000 f9ca 	bl	801a624 <_free_r>
 801a290:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a292:	b111      	cbz	r1, 801a29a <_reclaim_reent+0x4a>
 801a294:	4620      	mov	r0, r4
 801a296:	f000 f9c5 	bl	801a624 <_free_r>
 801a29a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801a29c:	b111      	cbz	r1, 801a2a4 <_reclaim_reent+0x54>
 801a29e:	4620      	mov	r0, r4
 801a2a0:	f000 f9c0 	bl	801a624 <_free_r>
 801a2a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801a2a6:	b111      	cbz	r1, 801a2ae <_reclaim_reent+0x5e>
 801a2a8:	4620      	mov	r0, r4
 801a2aa:	f000 f9bb 	bl	801a624 <_free_r>
 801a2ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a2b0:	b111      	cbz	r1, 801a2b8 <_reclaim_reent+0x68>
 801a2b2:	4620      	mov	r0, r4
 801a2b4:	f000 f9b6 	bl	801a624 <_free_r>
 801a2b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a2ba:	b111      	cbz	r1, 801a2c2 <_reclaim_reent+0x72>
 801a2bc:	4620      	mov	r0, r4
 801a2be:	f000 f9b1 	bl	801a624 <_free_r>
 801a2c2:	69a3      	ldr	r3, [r4, #24]
 801a2c4:	b1e3      	cbz	r3, 801a300 <_reclaim_reent+0xb0>
 801a2c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a2c8:	4620      	mov	r0, r4
 801a2ca:	4798      	blx	r3
 801a2cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a2ce:	b1b9      	cbz	r1, 801a300 <_reclaim_reent+0xb0>
 801a2d0:	4620      	mov	r0, r4
 801a2d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a2d6:	f7ff bfad 	b.w	801a234 <cleanup_glue>
 801a2da:	5949      	ldr	r1, [r1, r5]
 801a2dc:	b941      	cbnz	r1, 801a2f0 <_reclaim_reent+0xa0>
 801a2de:	3504      	adds	r5, #4
 801a2e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a2e2:	2d80      	cmp	r5, #128	; 0x80
 801a2e4:	68d9      	ldr	r1, [r3, #12]
 801a2e6:	d1f8      	bne.n	801a2da <_reclaim_reent+0x8a>
 801a2e8:	4620      	mov	r0, r4
 801a2ea:	f000 f99b 	bl	801a624 <_free_r>
 801a2ee:	e7ba      	b.n	801a266 <_reclaim_reent+0x16>
 801a2f0:	680e      	ldr	r6, [r1, #0]
 801a2f2:	4620      	mov	r0, r4
 801a2f4:	f000 f996 	bl	801a624 <_free_r>
 801a2f8:	4631      	mov	r1, r6
 801a2fa:	e7ef      	b.n	801a2dc <_reclaim_reent+0x8c>
 801a2fc:	2500      	movs	r5, #0
 801a2fe:	e7ef      	b.n	801a2e0 <_reclaim_reent+0x90>
 801a300:	bd70      	pop	{r4, r5, r6, pc}
 801a302:	bf00      	nop
 801a304:	2000001c 	.word	0x2000001c

0801a308 <_sbrk_r>:
 801a308:	b538      	push	{r3, r4, r5, lr}
 801a30a:	4d06      	ldr	r5, [pc, #24]	; (801a324 <_sbrk_r+0x1c>)
 801a30c:	2300      	movs	r3, #0
 801a30e:	4604      	mov	r4, r0
 801a310:	4608      	mov	r0, r1
 801a312:	602b      	str	r3, [r5, #0]
 801a314:	f7e6 fcba 	bl	8000c8c <_sbrk>
 801a318:	1c43      	adds	r3, r0, #1
 801a31a:	d102      	bne.n	801a322 <_sbrk_r+0x1a>
 801a31c:	682b      	ldr	r3, [r5, #0]
 801a31e:	b103      	cbz	r3, 801a322 <_sbrk_r+0x1a>
 801a320:	6023      	str	r3, [r4, #0]
 801a322:	bd38      	pop	{r3, r4, r5, pc}
 801a324:	2000dbc0 	.word	0x2000dbc0

0801a328 <__sread>:
 801a328:	b510      	push	{r4, lr}
 801a32a:	460c      	mov	r4, r1
 801a32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a330:	f000 fcb6 	bl	801aca0 <_read_r>
 801a334:	2800      	cmp	r0, #0
 801a336:	bfab      	itete	ge
 801a338:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a33a:	89a3      	ldrhlt	r3, [r4, #12]
 801a33c:	181b      	addge	r3, r3, r0
 801a33e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a342:	bfac      	ite	ge
 801a344:	6563      	strge	r3, [r4, #84]	; 0x54
 801a346:	81a3      	strhlt	r3, [r4, #12]
 801a348:	bd10      	pop	{r4, pc}

0801a34a <__swrite>:
 801a34a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a34e:	461f      	mov	r7, r3
 801a350:	898b      	ldrh	r3, [r1, #12]
 801a352:	05db      	lsls	r3, r3, #23
 801a354:	4605      	mov	r5, r0
 801a356:	460c      	mov	r4, r1
 801a358:	4616      	mov	r6, r2
 801a35a:	d505      	bpl.n	801a368 <__swrite+0x1e>
 801a35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a360:	2302      	movs	r3, #2
 801a362:	2200      	movs	r2, #0
 801a364:	f000 f938 	bl	801a5d8 <_lseek_r>
 801a368:	89a3      	ldrh	r3, [r4, #12]
 801a36a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a36e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a372:	81a3      	strh	r3, [r4, #12]
 801a374:	4632      	mov	r2, r6
 801a376:	463b      	mov	r3, r7
 801a378:	4628      	mov	r0, r5
 801a37a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a37e:	f000 b817 	b.w	801a3b0 <_write_r>

0801a382 <__sseek>:
 801a382:	b510      	push	{r4, lr}
 801a384:	460c      	mov	r4, r1
 801a386:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a38a:	f000 f925 	bl	801a5d8 <_lseek_r>
 801a38e:	1c43      	adds	r3, r0, #1
 801a390:	89a3      	ldrh	r3, [r4, #12]
 801a392:	bf15      	itete	ne
 801a394:	6560      	strne	r0, [r4, #84]	; 0x54
 801a396:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a39a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a39e:	81a3      	strheq	r3, [r4, #12]
 801a3a0:	bf18      	it	ne
 801a3a2:	81a3      	strhne	r3, [r4, #12]
 801a3a4:	bd10      	pop	{r4, pc}

0801a3a6 <__sclose>:
 801a3a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3aa:	f000 b831 	b.w	801a410 <_close_r>
	...

0801a3b0 <_write_r>:
 801a3b0:	b538      	push	{r3, r4, r5, lr}
 801a3b2:	4d07      	ldr	r5, [pc, #28]	; (801a3d0 <_write_r+0x20>)
 801a3b4:	4604      	mov	r4, r0
 801a3b6:	4608      	mov	r0, r1
 801a3b8:	4611      	mov	r1, r2
 801a3ba:	2200      	movs	r2, #0
 801a3bc:	602a      	str	r2, [r5, #0]
 801a3be:	461a      	mov	r2, r3
 801a3c0:	f7e6 fc13 	bl	8000bea <_write>
 801a3c4:	1c43      	adds	r3, r0, #1
 801a3c6:	d102      	bne.n	801a3ce <_write_r+0x1e>
 801a3c8:	682b      	ldr	r3, [r5, #0]
 801a3ca:	b103      	cbz	r3, 801a3ce <_write_r+0x1e>
 801a3cc:	6023      	str	r3, [r4, #0]
 801a3ce:	bd38      	pop	{r3, r4, r5, pc}
 801a3d0:	2000dbc0 	.word	0x2000dbc0

0801a3d4 <__assert_func>:
 801a3d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a3d6:	4614      	mov	r4, r2
 801a3d8:	461a      	mov	r2, r3
 801a3da:	4b09      	ldr	r3, [pc, #36]	; (801a400 <__assert_func+0x2c>)
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	4605      	mov	r5, r0
 801a3e0:	68d8      	ldr	r0, [r3, #12]
 801a3e2:	b14c      	cbz	r4, 801a3f8 <__assert_func+0x24>
 801a3e4:	4b07      	ldr	r3, [pc, #28]	; (801a404 <__assert_func+0x30>)
 801a3e6:	9100      	str	r1, [sp, #0]
 801a3e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a3ec:	4906      	ldr	r1, [pc, #24]	; (801a408 <__assert_func+0x34>)
 801a3ee:	462b      	mov	r3, r5
 801a3f0:	f000 f8e0 	bl	801a5b4 <fiprintf>
 801a3f4:	f000 fd26 	bl	801ae44 <abort>
 801a3f8:	4b04      	ldr	r3, [pc, #16]	; (801a40c <__assert_func+0x38>)
 801a3fa:	461c      	mov	r4, r3
 801a3fc:	e7f3      	b.n	801a3e6 <__assert_func+0x12>
 801a3fe:	bf00      	nop
 801a400:	2000001c 	.word	0x2000001c
 801a404:	0801e912 	.word	0x0801e912
 801a408:	0801e91f 	.word	0x0801e91f
 801a40c:	0801e94d 	.word	0x0801e94d

0801a410 <_close_r>:
 801a410:	b538      	push	{r3, r4, r5, lr}
 801a412:	4d06      	ldr	r5, [pc, #24]	; (801a42c <_close_r+0x1c>)
 801a414:	2300      	movs	r3, #0
 801a416:	4604      	mov	r4, r0
 801a418:	4608      	mov	r0, r1
 801a41a:	602b      	str	r3, [r5, #0]
 801a41c:	f7e6 fc01 	bl	8000c22 <_close>
 801a420:	1c43      	adds	r3, r0, #1
 801a422:	d102      	bne.n	801a42a <_close_r+0x1a>
 801a424:	682b      	ldr	r3, [r5, #0]
 801a426:	b103      	cbz	r3, 801a42a <_close_r+0x1a>
 801a428:	6023      	str	r3, [r4, #0]
 801a42a:	bd38      	pop	{r3, r4, r5, pc}
 801a42c:	2000dbc0 	.word	0x2000dbc0

0801a430 <__sflush_r>:
 801a430:	898a      	ldrh	r2, [r1, #12]
 801a432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a436:	4605      	mov	r5, r0
 801a438:	0710      	lsls	r0, r2, #28
 801a43a:	460c      	mov	r4, r1
 801a43c:	d458      	bmi.n	801a4f0 <__sflush_r+0xc0>
 801a43e:	684b      	ldr	r3, [r1, #4]
 801a440:	2b00      	cmp	r3, #0
 801a442:	dc05      	bgt.n	801a450 <__sflush_r+0x20>
 801a444:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a446:	2b00      	cmp	r3, #0
 801a448:	dc02      	bgt.n	801a450 <__sflush_r+0x20>
 801a44a:	2000      	movs	r0, #0
 801a44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a452:	2e00      	cmp	r6, #0
 801a454:	d0f9      	beq.n	801a44a <__sflush_r+0x1a>
 801a456:	2300      	movs	r3, #0
 801a458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a45c:	682f      	ldr	r7, [r5, #0]
 801a45e:	602b      	str	r3, [r5, #0]
 801a460:	d032      	beq.n	801a4c8 <__sflush_r+0x98>
 801a462:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a464:	89a3      	ldrh	r3, [r4, #12]
 801a466:	075a      	lsls	r2, r3, #29
 801a468:	d505      	bpl.n	801a476 <__sflush_r+0x46>
 801a46a:	6863      	ldr	r3, [r4, #4]
 801a46c:	1ac0      	subs	r0, r0, r3
 801a46e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a470:	b10b      	cbz	r3, 801a476 <__sflush_r+0x46>
 801a472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a474:	1ac0      	subs	r0, r0, r3
 801a476:	2300      	movs	r3, #0
 801a478:	4602      	mov	r2, r0
 801a47a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a47c:	6a21      	ldr	r1, [r4, #32]
 801a47e:	4628      	mov	r0, r5
 801a480:	47b0      	blx	r6
 801a482:	1c43      	adds	r3, r0, #1
 801a484:	89a3      	ldrh	r3, [r4, #12]
 801a486:	d106      	bne.n	801a496 <__sflush_r+0x66>
 801a488:	6829      	ldr	r1, [r5, #0]
 801a48a:	291d      	cmp	r1, #29
 801a48c:	d82c      	bhi.n	801a4e8 <__sflush_r+0xb8>
 801a48e:	4a2a      	ldr	r2, [pc, #168]	; (801a538 <__sflush_r+0x108>)
 801a490:	40ca      	lsrs	r2, r1
 801a492:	07d6      	lsls	r6, r2, #31
 801a494:	d528      	bpl.n	801a4e8 <__sflush_r+0xb8>
 801a496:	2200      	movs	r2, #0
 801a498:	6062      	str	r2, [r4, #4]
 801a49a:	04d9      	lsls	r1, r3, #19
 801a49c:	6922      	ldr	r2, [r4, #16]
 801a49e:	6022      	str	r2, [r4, #0]
 801a4a0:	d504      	bpl.n	801a4ac <__sflush_r+0x7c>
 801a4a2:	1c42      	adds	r2, r0, #1
 801a4a4:	d101      	bne.n	801a4aa <__sflush_r+0x7a>
 801a4a6:	682b      	ldr	r3, [r5, #0]
 801a4a8:	b903      	cbnz	r3, 801a4ac <__sflush_r+0x7c>
 801a4aa:	6560      	str	r0, [r4, #84]	; 0x54
 801a4ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a4ae:	602f      	str	r7, [r5, #0]
 801a4b0:	2900      	cmp	r1, #0
 801a4b2:	d0ca      	beq.n	801a44a <__sflush_r+0x1a>
 801a4b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a4b8:	4299      	cmp	r1, r3
 801a4ba:	d002      	beq.n	801a4c2 <__sflush_r+0x92>
 801a4bc:	4628      	mov	r0, r5
 801a4be:	f000 f8b1 	bl	801a624 <_free_r>
 801a4c2:	2000      	movs	r0, #0
 801a4c4:	6360      	str	r0, [r4, #52]	; 0x34
 801a4c6:	e7c1      	b.n	801a44c <__sflush_r+0x1c>
 801a4c8:	6a21      	ldr	r1, [r4, #32]
 801a4ca:	2301      	movs	r3, #1
 801a4cc:	4628      	mov	r0, r5
 801a4ce:	47b0      	blx	r6
 801a4d0:	1c41      	adds	r1, r0, #1
 801a4d2:	d1c7      	bne.n	801a464 <__sflush_r+0x34>
 801a4d4:	682b      	ldr	r3, [r5, #0]
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	d0c4      	beq.n	801a464 <__sflush_r+0x34>
 801a4da:	2b1d      	cmp	r3, #29
 801a4dc:	d001      	beq.n	801a4e2 <__sflush_r+0xb2>
 801a4de:	2b16      	cmp	r3, #22
 801a4e0:	d101      	bne.n	801a4e6 <__sflush_r+0xb6>
 801a4e2:	602f      	str	r7, [r5, #0]
 801a4e4:	e7b1      	b.n	801a44a <__sflush_r+0x1a>
 801a4e6:	89a3      	ldrh	r3, [r4, #12]
 801a4e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a4ec:	81a3      	strh	r3, [r4, #12]
 801a4ee:	e7ad      	b.n	801a44c <__sflush_r+0x1c>
 801a4f0:	690f      	ldr	r7, [r1, #16]
 801a4f2:	2f00      	cmp	r7, #0
 801a4f4:	d0a9      	beq.n	801a44a <__sflush_r+0x1a>
 801a4f6:	0793      	lsls	r3, r2, #30
 801a4f8:	680e      	ldr	r6, [r1, #0]
 801a4fa:	bf08      	it	eq
 801a4fc:	694b      	ldreq	r3, [r1, #20]
 801a4fe:	600f      	str	r7, [r1, #0]
 801a500:	bf18      	it	ne
 801a502:	2300      	movne	r3, #0
 801a504:	eba6 0807 	sub.w	r8, r6, r7
 801a508:	608b      	str	r3, [r1, #8]
 801a50a:	f1b8 0f00 	cmp.w	r8, #0
 801a50e:	dd9c      	ble.n	801a44a <__sflush_r+0x1a>
 801a510:	6a21      	ldr	r1, [r4, #32]
 801a512:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a514:	4643      	mov	r3, r8
 801a516:	463a      	mov	r2, r7
 801a518:	4628      	mov	r0, r5
 801a51a:	47b0      	blx	r6
 801a51c:	2800      	cmp	r0, #0
 801a51e:	dc06      	bgt.n	801a52e <__sflush_r+0xfe>
 801a520:	89a3      	ldrh	r3, [r4, #12]
 801a522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a526:	81a3      	strh	r3, [r4, #12]
 801a528:	f04f 30ff 	mov.w	r0, #4294967295
 801a52c:	e78e      	b.n	801a44c <__sflush_r+0x1c>
 801a52e:	4407      	add	r7, r0
 801a530:	eba8 0800 	sub.w	r8, r8, r0
 801a534:	e7e9      	b.n	801a50a <__sflush_r+0xda>
 801a536:	bf00      	nop
 801a538:	20400001 	.word	0x20400001

0801a53c <_fflush_r>:
 801a53c:	b538      	push	{r3, r4, r5, lr}
 801a53e:	690b      	ldr	r3, [r1, #16]
 801a540:	4605      	mov	r5, r0
 801a542:	460c      	mov	r4, r1
 801a544:	b913      	cbnz	r3, 801a54c <_fflush_r+0x10>
 801a546:	2500      	movs	r5, #0
 801a548:	4628      	mov	r0, r5
 801a54a:	bd38      	pop	{r3, r4, r5, pc}
 801a54c:	b118      	cbz	r0, 801a556 <_fflush_r+0x1a>
 801a54e:	6983      	ldr	r3, [r0, #24]
 801a550:	b90b      	cbnz	r3, 801a556 <_fflush_r+0x1a>
 801a552:	f7ff fcd3 	bl	8019efc <__sinit>
 801a556:	4b14      	ldr	r3, [pc, #80]	; (801a5a8 <_fflush_r+0x6c>)
 801a558:	429c      	cmp	r4, r3
 801a55a:	d11b      	bne.n	801a594 <_fflush_r+0x58>
 801a55c:	686c      	ldr	r4, [r5, #4]
 801a55e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a562:	2b00      	cmp	r3, #0
 801a564:	d0ef      	beq.n	801a546 <_fflush_r+0xa>
 801a566:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a568:	07d0      	lsls	r0, r2, #31
 801a56a:	d404      	bmi.n	801a576 <_fflush_r+0x3a>
 801a56c:	0599      	lsls	r1, r3, #22
 801a56e:	d402      	bmi.n	801a576 <_fflush_r+0x3a>
 801a570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a572:	f7ff fd86 	bl	801a082 <__retarget_lock_acquire_recursive>
 801a576:	4628      	mov	r0, r5
 801a578:	4621      	mov	r1, r4
 801a57a:	f7ff ff59 	bl	801a430 <__sflush_r>
 801a57e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a580:	07da      	lsls	r2, r3, #31
 801a582:	4605      	mov	r5, r0
 801a584:	d4e0      	bmi.n	801a548 <_fflush_r+0xc>
 801a586:	89a3      	ldrh	r3, [r4, #12]
 801a588:	059b      	lsls	r3, r3, #22
 801a58a:	d4dd      	bmi.n	801a548 <_fflush_r+0xc>
 801a58c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a58e:	f7ff fd79 	bl	801a084 <__retarget_lock_release_recursive>
 801a592:	e7d9      	b.n	801a548 <_fflush_r+0xc>
 801a594:	4b05      	ldr	r3, [pc, #20]	; (801a5ac <_fflush_r+0x70>)
 801a596:	429c      	cmp	r4, r3
 801a598:	d101      	bne.n	801a59e <_fflush_r+0x62>
 801a59a:	68ac      	ldr	r4, [r5, #8]
 801a59c:	e7df      	b.n	801a55e <_fflush_r+0x22>
 801a59e:	4b04      	ldr	r3, [pc, #16]	; (801a5b0 <_fflush_r+0x74>)
 801a5a0:	429c      	cmp	r4, r3
 801a5a2:	bf08      	it	eq
 801a5a4:	68ec      	ldreq	r4, [r5, #12]
 801a5a6:	e7da      	b.n	801a55e <_fflush_r+0x22>
 801a5a8:	0801e858 	.word	0x0801e858
 801a5ac:	0801e878 	.word	0x0801e878
 801a5b0:	0801e838 	.word	0x0801e838

0801a5b4 <fiprintf>:
 801a5b4:	b40e      	push	{r1, r2, r3}
 801a5b6:	b503      	push	{r0, r1, lr}
 801a5b8:	4601      	mov	r1, r0
 801a5ba:	ab03      	add	r3, sp, #12
 801a5bc:	4805      	ldr	r0, [pc, #20]	; (801a5d4 <fiprintf+0x20>)
 801a5be:	f853 2b04 	ldr.w	r2, [r3], #4
 801a5c2:	6800      	ldr	r0, [r0, #0]
 801a5c4:	9301      	str	r3, [sp, #4]
 801a5c6:	f000 f8a7 	bl	801a718 <_vfiprintf_r>
 801a5ca:	b002      	add	sp, #8
 801a5cc:	f85d eb04 	ldr.w	lr, [sp], #4
 801a5d0:	b003      	add	sp, #12
 801a5d2:	4770      	bx	lr
 801a5d4:	2000001c 	.word	0x2000001c

0801a5d8 <_lseek_r>:
 801a5d8:	b538      	push	{r3, r4, r5, lr}
 801a5da:	4d07      	ldr	r5, [pc, #28]	; (801a5f8 <_lseek_r+0x20>)
 801a5dc:	4604      	mov	r4, r0
 801a5de:	4608      	mov	r0, r1
 801a5e0:	4611      	mov	r1, r2
 801a5e2:	2200      	movs	r2, #0
 801a5e4:	602a      	str	r2, [r5, #0]
 801a5e6:	461a      	mov	r2, r3
 801a5e8:	f7e6 fb42 	bl	8000c70 <_lseek>
 801a5ec:	1c43      	adds	r3, r0, #1
 801a5ee:	d102      	bne.n	801a5f6 <_lseek_r+0x1e>
 801a5f0:	682b      	ldr	r3, [r5, #0]
 801a5f2:	b103      	cbz	r3, 801a5f6 <_lseek_r+0x1e>
 801a5f4:	6023      	str	r3, [r4, #0]
 801a5f6:	bd38      	pop	{r3, r4, r5, pc}
 801a5f8:	2000dbc0 	.word	0x2000dbc0

0801a5fc <malloc>:
 801a5fc:	4b02      	ldr	r3, [pc, #8]	; (801a608 <malloc+0xc>)
 801a5fe:	4601      	mov	r1, r0
 801a600:	6818      	ldr	r0, [r3, #0]
 801a602:	f7ff bd65 	b.w	801a0d0 <_malloc_r>
 801a606:	bf00      	nop
 801a608:	2000001c 	.word	0x2000001c

0801a60c <__malloc_lock>:
 801a60c:	4801      	ldr	r0, [pc, #4]	; (801a614 <__malloc_lock+0x8>)
 801a60e:	f7ff bd38 	b.w	801a082 <__retarget_lock_acquire_recursive>
 801a612:	bf00      	nop
 801a614:	2000dbcc 	.word	0x2000dbcc

0801a618 <__malloc_unlock>:
 801a618:	4801      	ldr	r0, [pc, #4]	; (801a620 <__malloc_unlock+0x8>)
 801a61a:	f7ff bd33 	b.w	801a084 <__retarget_lock_release_recursive>
 801a61e:	bf00      	nop
 801a620:	2000dbcc 	.word	0x2000dbcc

0801a624 <_free_r>:
 801a624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a626:	2900      	cmp	r1, #0
 801a628:	d048      	beq.n	801a6bc <_free_r+0x98>
 801a62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a62e:	9001      	str	r0, [sp, #4]
 801a630:	2b00      	cmp	r3, #0
 801a632:	f1a1 0404 	sub.w	r4, r1, #4
 801a636:	bfb8      	it	lt
 801a638:	18e4      	addlt	r4, r4, r3
 801a63a:	f7ff ffe7 	bl	801a60c <__malloc_lock>
 801a63e:	4a20      	ldr	r2, [pc, #128]	; (801a6c0 <_free_r+0x9c>)
 801a640:	9801      	ldr	r0, [sp, #4]
 801a642:	6813      	ldr	r3, [r2, #0]
 801a644:	4615      	mov	r5, r2
 801a646:	b933      	cbnz	r3, 801a656 <_free_r+0x32>
 801a648:	6063      	str	r3, [r4, #4]
 801a64a:	6014      	str	r4, [r2, #0]
 801a64c:	b003      	add	sp, #12
 801a64e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a652:	f7ff bfe1 	b.w	801a618 <__malloc_unlock>
 801a656:	42a3      	cmp	r3, r4
 801a658:	d90b      	bls.n	801a672 <_free_r+0x4e>
 801a65a:	6821      	ldr	r1, [r4, #0]
 801a65c:	1862      	adds	r2, r4, r1
 801a65e:	4293      	cmp	r3, r2
 801a660:	bf04      	itt	eq
 801a662:	681a      	ldreq	r2, [r3, #0]
 801a664:	685b      	ldreq	r3, [r3, #4]
 801a666:	6063      	str	r3, [r4, #4]
 801a668:	bf04      	itt	eq
 801a66a:	1852      	addeq	r2, r2, r1
 801a66c:	6022      	streq	r2, [r4, #0]
 801a66e:	602c      	str	r4, [r5, #0]
 801a670:	e7ec      	b.n	801a64c <_free_r+0x28>
 801a672:	461a      	mov	r2, r3
 801a674:	685b      	ldr	r3, [r3, #4]
 801a676:	b10b      	cbz	r3, 801a67c <_free_r+0x58>
 801a678:	42a3      	cmp	r3, r4
 801a67a:	d9fa      	bls.n	801a672 <_free_r+0x4e>
 801a67c:	6811      	ldr	r1, [r2, #0]
 801a67e:	1855      	adds	r5, r2, r1
 801a680:	42a5      	cmp	r5, r4
 801a682:	d10b      	bne.n	801a69c <_free_r+0x78>
 801a684:	6824      	ldr	r4, [r4, #0]
 801a686:	4421      	add	r1, r4
 801a688:	1854      	adds	r4, r2, r1
 801a68a:	42a3      	cmp	r3, r4
 801a68c:	6011      	str	r1, [r2, #0]
 801a68e:	d1dd      	bne.n	801a64c <_free_r+0x28>
 801a690:	681c      	ldr	r4, [r3, #0]
 801a692:	685b      	ldr	r3, [r3, #4]
 801a694:	6053      	str	r3, [r2, #4]
 801a696:	4421      	add	r1, r4
 801a698:	6011      	str	r1, [r2, #0]
 801a69a:	e7d7      	b.n	801a64c <_free_r+0x28>
 801a69c:	d902      	bls.n	801a6a4 <_free_r+0x80>
 801a69e:	230c      	movs	r3, #12
 801a6a0:	6003      	str	r3, [r0, #0]
 801a6a2:	e7d3      	b.n	801a64c <_free_r+0x28>
 801a6a4:	6825      	ldr	r5, [r4, #0]
 801a6a6:	1961      	adds	r1, r4, r5
 801a6a8:	428b      	cmp	r3, r1
 801a6aa:	bf04      	itt	eq
 801a6ac:	6819      	ldreq	r1, [r3, #0]
 801a6ae:	685b      	ldreq	r3, [r3, #4]
 801a6b0:	6063      	str	r3, [r4, #4]
 801a6b2:	bf04      	itt	eq
 801a6b4:	1949      	addeq	r1, r1, r5
 801a6b6:	6021      	streq	r1, [r4, #0]
 801a6b8:	6054      	str	r4, [r2, #4]
 801a6ba:	e7c7      	b.n	801a64c <_free_r+0x28>
 801a6bc:	b003      	add	sp, #12
 801a6be:	bd30      	pop	{r4, r5, pc}
 801a6c0:	20004c04 	.word	0x20004c04

0801a6c4 <__sfputc_r>:
 801a6c4:	6893      	ldr	r3, [r2, #8]
 801a6c6:	3b01      	subs	r3, #1
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	b410      	push	{r4}
 801a6cc:	6093      	str	r3, [r2, #8]
 801a6ce:	da08      	bge.n	801a6e2 <__sfputc_r+0x1e>
 801a6d0:	6994      	ldr	r4, [r2, #24]
 801a6d2:	42a3      	cmp	r3, r4
 801a6d4:	db01      	blt.n	801a6da <__sfputc_r+0x16>
 801a6d6:	290a      	cmp	r1, #10
 801a6d8:	d103      	bne.n	801a6e2 <__sfputc_r+0x1e>
 801a6da:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a6de:	f000 baf1 	b.w	801acc4 <__swbuf_r>
 801a6e2:	6813      	ldr	r3, [r2, #0]
 801a6e4:	1c58      	adds	r0, r3, #1
 801a6e6:	6010      	str	r0, [r2, #0]
 801a6e8:	7019      	strb	r1, [r3, #0]
 801a6ea:	4608      	mov	r0, r1
 801a6ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a6f0:	4770      	bx	lr

0801a6f2 <__sfputs_r>:
 801a6f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6f4:	4606      	mov	r6, r0
 801a6f6:	460f      	mov	r7, r1
 801a6f8:	4614      	mov	r4, r2
 801a6fa:	18d5      	adds	r5, r2, r3
 801a6fc:	42ac      	cmp	r4, r5
 801a6fe:	d101      	bne.n	801a704 <__sfputs_r+0x12>
 801a700:	2000      	movs	r0, #0
 801a702:	e007      	b.n	801a714 <__sfputs_r+0x22>
 801a704:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a708:	463a      	mov	r2, r7
 801a70a:	4630      	mov	r0, r6
 801a70c:	f7ff ffda 	bl	801a6c4 <__sfputc_r>
 801a710:	1c43      	adds	r3, r0, #1
 801a712:	d1f3      	bne.n	801a6fc <__sfputs_r+0xa>
 801a714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a718 <_vfiprintf_r>:
 801a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a71c:	460d      	mov	r5, r1
 801a71e:	b09d      	sub	sp, #116	; 0x74
 801a720:	4614      	mov	r4, r2
 801a722:	4698      	mov	r8, r3
 801a724:	4606      	mov	r6, r0
 801a726:	b118      	cbz	r0, 801a730 <_vfiprintf_r+0x18>
 801a728:	6983      	ldr	r3, [r0, #24]
 801a72a:	b90b      	cbnz	r3, 801a730 <_vfiprintf_r+0x18>
 801a72c:	f7ff fbe6 	bl	8019efc <__sinit>
 801a730:	4b89      	ldr	r3, [pc, #548]	; (801a958 <_vfiprintf_r+0x240>)
 801a732:	429d      	cmp	r5, r3
 801a734:	d11b      	bne.n	801a76e <_vfiprintf_r+0x56>
 801a736:	6875      	ldr	r5, [r6, #4]
 801a738:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a73a:	07d9      	lsls	r1, r3, #31
 801a73c:	d405      	bmi.n	801a74a <_vfiprintf_r+0x32>
 801a73e:	89ab      	ldrh	r3, [r5, #12]
 801a740:	059a      	lsls	r2, r3, #22
 801a742:	d402      	bmi.n	801a74a <_vfiprintf_r+0x32>
 801a744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a746:	f7ff fc9c 	bl	801a082 <__retarget_lock_acquire_recursive>
 801a74a:	89ab      	ldrh	r3, [r5, #12]
 801a74c:	071b      	lsls	r3, r3, #28
 801a74e:	d501      	bpl.n	801a754 <_vfiprintf_r+0x3c>
 801a750:	692b      	ldr	r3, [r5, #16]
 801a752:	b9eb      	cbnz	r3, 801a790 <_vfiprintf_r+0x78>
 801a754:	4629      	mov	r1, r5
 801a756:	4630      	mov	r0, r6
 801a758:	f000 fb06 	bl	801ad68 <__swsetup_r>
 801a75c:	b1c0      	cbz	r0, 801a790 <_vfiprintf_r+0x78>
 801a75e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a760:	07dc      	lsls	r4, r3, #31
 801a762:	d50e      	bpl.n	801a782 <_vfiprintf_r+0x6a>
 801a764:	f04f 30ff 	mov.w	r0, #4294967295
 801a768:	b01d      	add	sp, #116	; 0x74
 801a76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a76e:	4b7b      	ldr	r3, [pc, #492]	; (801a95c <_vfiprintf_r+0x244>)
 801a770:	429d      	cmp	r5, r3
 801a772:	d101      	bne.n	801a778 <_vfiprintf_r+0x60>
 801a774:	68b5      	ldr	r5, [r6, #8]
 801a776:	e7df      	b.n	801a738 <_vfiprintf_r+0x20>
 801a778:	4b79      	ldr	r3, [pc, #484]	; (801a960 <_vfiprintf_r+0x248>)
 801a77a:	429d      	cmp	r5, r3
 801a77c:	bf08      	it	eq
 801a77e:	68f5      	ldreq	r5, [r6, #12]
 801a780:	e7da      	b.n	801a738 <_vfiprintf_r+0x20>
 801a782:	89ab      	ldrh	r3, [r5, #12]
 801a784:	0598      	lsls	r0, r3, #22
 801a786:	d4ed      	bmi.n	801a764 <_vfiprintf_r+0x4c>
 801a788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a78a:	f7ff fc7b 	bl	801a084 <__retarget_lock_release_recursive>
 801a78e:	e7e9      	b.n	801a764 <_vfiprintf_r+0x4c>
 801a790:	2300      	movs	r3, #0
 801a792:	9309      	str	r3, [sp, #36]	; 0x24
 801a794:	2320      	movs	r3, #32
 801a796:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a79a:	f8cd 800c 	str.w	r8, [sp, #12]
 801a79e:	2330      	movs	r3, #48	; 0x30
 801a7a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a964 <_vfiprintf_r+0x24c>
 801a7a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a7a8:	f04f 0901 	mov.w	r9, #1
 801a7ac:	4623      	mov	r3, r4
 801a7ae:	469a      	mov	sl, r3
 801a7b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a7b4:	b10a      	cbz	r2, 801a7ba <_vfiprintf_r+0xa2>
 801a7b6:	2a25      	cmp	r2, #37	; 0x25
 801a7b8:	d1f9      	bne.n	801a7ae <_vfiprintf_r+0x96>
 801a7ba:	ebba 0b04 	subs.w	fp, sl, r4
 801a7be:	d00b      	beq.n	801a7d8 <_vfiprintf_r+0xc0>
 801a7c0:	465b      	mov	r3, fp
 801a7c2:	4622      	mov	r2, r4
 801a7c4:	4629      	mov	r1, r5
 801a7c6:	4630      	mov	r0, r6
 801a7c8:	f7ff ff93 	bl	801a6f2 <__sfputs_r>
 801a7cc:	3001      	adds	r0, #1
 801a7ce:	f000 80aa 	beq.w	801a926 <_vfiprintf_r+0x20e>
 801a7d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a7d4:	445a      	add	r2, fp
 801a7d6:	9209      	str	r2, [sp, #36]	; 0x24
 801a7d8:	f89a 3000 	ldrb.w	r3, [sl]
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	f000 80a2 	beq.w	801a926 <_vfiprintf_r+0x20e>
 801a7e2:	2300      	movs	r3, #0
 801a7e4:	f04f 32ff 	mov.w	r2, #4294967295
 801a7e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a7ec:	f10a 0a01 	add.w	sl, sl, #1
 801a7f0:	9304      	str	r3, [sp, #16]
 801a7f2:	9307      	str	r3, [sp, #28]
 801a7f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a7f8:	931a      	str	r3, [sp, #104]	; 0x68
 801a7fa:	4654      	mov	r4, sl
 801a7fc:	2205      	movs	r2, #5
 801a7fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a802:	4858      	ldr	r0, [pc, #352]	; (801a964 <_vfiprintf_r+0x24c>)
 801a804:	f7e5 fd04 	bl	8000210 <memchr>
 801a808:	9a04      	ldr	r2, [sp, #16]
 801a80a:	b9d8      	cbnz	r0, 801a844 <_vfiprintf_r+0x12c>
 801a80c:	06d1      	lsls	r1, r2, #27
 801a80e:	bf44      	itt	mi
 801a810:	2320      	movmi	r3, #32
 801a812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a816:	0713      	lsls	r3, r2, #28
 801a818:	bf44      	itt	mi
 801a81a:	232b      	movmi	r3, #43	; 0x2b
 801a81c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a820:	f89a 3000 	ldrb.w	r3, [sl]
 801a824:	2b2a      	cmp	r3, #42	; 0x2a
 801a826:	d015      	beq.n	801a854 <_vfiprintf_r+0x13c>
 801a828:	9a07      	ldr	r2, [sp, #28]
 801a82a:	4654      	mov	r4, sl
 801a82c:	2000      	movs	r0, #0
 801a82e:	f04f 0c0a 	mov.w	ip, #10
 801a832:	4621      	mov	r1, r4
 801a834:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a838:	3b30      	subs	r3, #48	; 0x30
 801a83a:	2b09      	cmp	r3, #9
 801a83c:	d94e      	bls.n	801a8dc <_vfiprintf_r+0x1c4>
 801a83e:	b1b0      	cbz	r0, 801a86e <_vfiprintf_r+0x156>
 801a840:	9207      	str	r2, [sp, #28]
 801a842:	e014      	b.n	801a86e <_vfiprintf_r+0x156>
 801a844:	eba0 0308 	sub.w	r3, r0, r8
 801a848:	fa09 f303 	lsl.w	r3, r9, r3
 801a84c:	4313      	orrs	r3, r2
 801a84e:	9304      	str	r3, [sp, #16]
 801a850:	46a2      	mov	sl, r4
 801a852:	e7d2      	b.n	801a7fa <_vfiprintf_r+0xe2>
 801a854:	9b03      	ldr	r3, [sp, #12]
 801a856:	1d19      	adds	r1, r3, #4
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	9103      	str	r1, [sp, #12]
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	bfbb      	ittet	lt
 801a860:	425b      	neglt	r3, r3
 801a862:	f042 0202 	orrlt.w	r2, r2, #2
 801a866:	9307      	strge	r3, [sp, #28]
 801a868:	9307      	strlt	r3, [sp, #28]
 801a86a:	bfb8      	it	lt
 801a86c:	9204      	strlt	r2, [sp, #16]
 801a86e:	7823      	ldrb	r3, [r4, #0]
 801a870:	2b2e      	cmp	r3, #46	; 0x2e
 801a872:	d10c      	bne.n	801a88e <_vfiprintf_r+0x176>
 801a874:	7863      	ldrb	r3, [r4, #1]
 801a876:	2b2a      	cmp	r3, #42	; 0x2a
 801a878:	d135      	bne.n	801a8e6 <_vfiprintf_r+0x1ce>
 801a87a:	9b03      	ldr	r3, [sp, #12]
 801a87c:	1d1a      	adds	r2, r3, #4
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	9203      	str	r2, [sp, #12]
 801a882:	2b00      	cmp	r3, #0
 801a884:	bfb8      	it	lt
 801a886:	f04f 33ff 	movlt.w	r3, #4294967295
 801a88a:	3402      	adds	r4, #2
 801a88c:	9305      	str	r3, [sp, #20]
 801a88e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a974 <_vfiprintf_r+0x25c>
 801a892:	7821      	ldrb	r1, [r4, #0]
 801a894:	2203      	movs	r2, #3
 801a896:	4650      	mov	r0, sl
 801a898:	f7e5 fcba 	bl	8000210 <memchr>
 801a89c:	b140      	cbz	r0, 801a8b0 <_vfiprintf_r+0x198>
 801a89e:	2340      	movs	r3, #64	; 0x40
 801a8a0:	eba0 000a 	sub.w	r0, r0, sl
 801a8a4:	fa03 f000 	lsl.w	r0, r3, r0
 801a8a8:	9b04      	ldr	r3, [sp, #16]
 801a8aa:	4303      	orrs	r3, r0
 801a8ac:	3401      	adds	r4, #1
 801a8ae:	9304      	str	r3, [sp, #16]
 801a8b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a8b4:	482c      	ldr	r0, [pc, #176]	; (801a968 <_vfiprintf_r+0x250>)
 801a8b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a8ba:	2206      	movs	r2, #6
 801a8bc:	f7e5 fca8 	bl	8000210 <memchr>
 801a8c0:	2800      	cmp	r0, #0
 801a8c2:	d03f      	beq.n	801a944 <_vfiprintf_r+0x22c>
 801a8c4:	4b29      	ldr	r3, [pc, #164]	; (801a96c <_vfiprintf_r+0x254>)
 801a8c6:	bb1b      	cbnz	r3, 801a910 <_vfiprintf_r+0x1f8>
 801a8c8:	9b03      	ldr	r3, [sp, #12]
 801a8ca:	3307      	adds	r3, #7
 801a8cc:	f023 0307 	bic.w	r3, r3, #7
 801a8d0:	3308      	adds	r3, #8
 801a8d2:	9303      	str	r3, [sp, #12]
 801a8d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8d6:	443b      	add	r3, r7
 801a8d8:	9309      	str	r3, [sp, #36]	; 0x24
 801a8da:	e767      	b.n	801a7ac <_vfiprintf_r+0x94>
 801a8dc:	fb0c 3202 	mla	r2, ip, r2, r3
 801a8e0:	460c      	mov	r4, r1
 801a8e2:	2001      	movs	r0, #1
 801a8e4:	e7a5      	b.n	801a832 <_vfiprintf_r+0x11a>
 801a8e6:	2300      	movs	r3, #0
 801a8e8:	3401      	adds	r4, #1
 801a8ea:	9305      	str	r3, [sp, #20]
 801a8ec:	4619      	mov	r1, r3
 801a8ee:	f04f 0c0a 	mov.w	ip, #10
 801a8f2:	4620      	mov	r0, r4
 801a8f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a8f8:	3a30      	subs	r2, #48	; 0x30
 801a8fa:	2a09      	cmp	r2, #9
 801a8fc:	d903      	bls.n	801a906 <_vfiprintf_r+0x1ee>
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	d0c5      	beq.n	801a88e <_vfiprintf_r+0x176>
 801a902:	9105      	str	r1, [sp, #20]
 801a904:	e7c3      	b.n	801a88e <_vfiprintf_r+0x176>
 801a906:	fb0c 2101 	mla	r1, ip, r1, r2
 801a90a:	4604      	mov	r4, r0
 801a90c:	2301      	movs	r3, #1
 801a90e:	e7f0      	b.n	801a8f2 <_vfiprintf_r+0x1da>
 801a910:	ab03      	add	r3, sp, #12
 801a912:	9300      	str	r3, [sp, #0]
 801a914:	462a      	mov	r2, r5
 801a916:	4b16      	ldr	r3, [pc, #88]	; (801a970 <_vfiprintf_r+0x258>)
 801a918:	a904      	add	r1, sp, #16
 801a91a:	4630      	mov	r0, r6
 801a91c:	f3af 8000 	nop.w
 801a920:	4607      	mov	r7, r0
 801a922:	1c78      	adds	r0, r7, #1
 801a924:	d1d6      	bne.n	801a8d4 <_vfiprintf_r+0x1bc>
 801a926:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a928:	07d9      	lsls	r1, r3, #31
 801a92a:	d405      	bmi.n	801a938 <_vfiprintf_r+0x220>
 801a92c:	89ab      	ldrh	r3, [r5, #12]
 801a92e:	059a      	lsls	r2, r3, #22
 801a930:	d402      	bmi.n	801a938 <_vfiprintf_r+0x220>
 801a932:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a934:	f7ff fba6 	bl	801a084 <__retarget_lock_release_recursive>
 801a938:	89ab      	ldrh	r3, [r5, #12]
 801a93a:	065b      	lsls	r3, r3, #25
 801a93c:	f53f af12 	bmi.w	801a764 <_vfiprintf_r+0x4c>
 801a940:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a942:	e711      	b.n	801a768 <_vfiprintf_r+0x50>
 801a944:	ab03      	add	r3, sp, #12
 801a946:	9300      	str	r3, [sp, #0]
 801a948:	462a      	mov	r2, r5
 801a94a:	4b09      	ldr	r3, [pc, #36]	; (801a970 <_vfiprintf_r+0x258>)
 801a94c:	a904      	add	r1, sp, #16
 801a94e:	4630      	mov	r0, r6
 801a950:	f000 f880 	bl	801aa54 <_printf_i>
 801a954:	e7e4      	b.n	801a920 <_vfiprintf_r+0x208>
 801a956:	bf00      	nop
 801a958:	0801e858 	.word	0x0801e858
 801a95c:	0801e878 	.word	0x0801e878
 801a960:	0801e838 	.word	0x0801e838
 801a964:	0801e94e 	.word	0x0801e94e
 801a968:	0801e958 	.word	0x0801e958
 801a96c:	00000000 	.word	0x00000000
 801a970:	0801a6f3 	.word	0x0801a6f3
 801a974:	0801e954 	.word	0x0801e954

0801a978 <_printf_common>:
 801a978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a97c:	4616      	mov	r6, r2
 801a97e:	4699      	mov	r9, r3
 801a980:	688a      	ldr	r2, [r1, #8]
 801a982:	690b      	ldr	r3, [r1, #16]
 801a984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a988:	4293      	cmp	r3, r2
 801a98a:	bfb8      	it	lt
 801a98c:	4613      	movlt	r3, r2
 801a98e:	6033      	str	r3, [r6, #0]
 801a990:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a994:	4607      	mov	r7, r0
 801a996:	460c      	mov	r4, r1
 801a998:	b10a      	cbz	r2, 801a99e <_printf_common+0x26>
 801a99a:	3301      	adds	r3, #1
 801a99c:	6033      	str	r3, [r6, #0]
 801a99e:	6823      	ldr	r3, [r4, #0]
 801a9a0:	0699      	lsls	r1, r3, #26
 801a9a2:	bf42      	ittt	mi
 801a9a4:	6833      	ldrmi	r3, [r6, #0]
 801a9a6:	3302      	addmi	r3, #2
 801a9a8:	6033      	strmi	r3, [r6, #0]
 801a9aa:	6825      	ldr	r5, [r4, #0]
 801a9ac:	f015 0506 	ands.w	r5, r5, #6
 801a9b0:	d106      	bne.n	801a9c0 <_printf_common+0x48>
 801a9b2:	f104 0a19 	add.w	sl, r4, #25
 801a9b6:	68e3      	ldr	r3, [r4, #12]
 801a9b8:	6832      	ldr	r2, [r6, #0]
 801a9ba:	1a9b      	subs	r3, r3, r2
 801a9bc:	42ab      	cmp	r3, r5
 801a9be:	dc26      	bgt.n	801aa0e <_printf_common+0x96>
 801a9c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a9c4:	1e13      	subs	r3, r2, #0
 801a9c6:	6822      	ldr	r2, [r4, #0]
 801a9c8:	bf18      	it	ne
 801a9ca:	2301      	movne	r3, #1
 801a9cc:	0692      	lsls	r2, r2, #26
 801a9ce:	d42b      	bmi.n	801aa28 <_printf_common+0xb0>
 801a9d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a9d4:	4649      	mov	r1, r9
 801a9d6:	4638      	mov	r0, r7
 801a9d8:	47c0      	blx	r8
 801a9da:	3001      	adds	r0, #1
 801a9dc:	d01e      	beq.n	801aa1c <_printf_common+0xa4>
 801a9de:	6823      	ldr	r3, [r4, #0]
 801a9e0:	68e5      	ldr	r5, [r4, #12]
 801a9e2:	6832      	ldr	r2, [r6, #0]
 801a9e4:	f003 0306 	and.w	r3, r3, #6
 801a9e8:	2b04      	cmp	r3, #4
 801a9ea:	bf08      	it	eq
 801a9ec:	1aad      	subeq	r5, r5, r2
 801a9ee:	68a3      	ldr	r3, [r4, #8]
 801a9f0:	6922      	ldr	r2, [r4, #16]
 801a9f2:	bf0c      	ite	eq
 801a9f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a9f8:	2500      	movne	r5, #0
 801a9fa:	4293      	cmp	r3, r2
 801a9fc:	bfc4      	itt	gt
 801a9fe:	1a9b      	subgt	r3, r3, r2
 801aa00:	18ed      	addgt	r5, r5, r3
 801aa02:	2600      	movs	r6, #0
 801aa04:	341a      	adds	r4, #26
 801aa06:	42b5      	cmp	r5, r6
 801aa08:	d11a      	bne.n	801aa40 <_printf_common+0xc8>
 801aa0a:	2000      	movs	r0, #0
 801aa0c:	e008      	b.n	801aa20 <_printf_common+0xa8>
 801aa0e:	2301      	movs	r3, #1
 801aa10:	4652      	mov	r2, sl
 801aa12:	4649      	mov	r1, r9
 801aa14:	4638      	mov	r0, r7
 801aa16:	47c0      	blx	r8
 801aa18:	3001      	adds	r0, #1
 801aa1a:	d103      	bne.n	801aa24 <_printf_common+0xac>
 801aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 801aa20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa24:	3501      	adds	r5, #1
 801aa26:	e7c6      	b.n	801a9b6 <_printf_common+0x3e>
 801aa28:	18e1      	adds	r1, r4, r3
 801aa2a:	1c5a      	adds	r2, r3, #1
 801aa2c:	2030      	movs	r0, #48	; 0x30
 801aa2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aa32:	4422      	add	r2, r4
 801aa34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801aa38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801aa3c:	3302      	adds	r3, #2
 801aa3e:	e7c7      	b.n	801a9d0 <_printf_common+0x58>
 801aa40:	2301      	movs	r3, #1
 801aa42:	4622      	mov	r2, r4
 801aa44:	4649      	mov	r1, r9
 801aa46:	4638      	mov	r0, r7
 801aa48:	47c0      	blx	r8
 801aa4a:	3001      	adds	r0, #1
 801aa4c:	d0e6      	beq.n	801aa1c <_printf_common+0xa4>
 801aa4e:	3601      	adds	r6, #1
 801aa50:	e7d9      	b.n	801aa06 <_printf_common+0x8e>
	...

0801aa54 <_printf_i>:
 801aa54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aa58:	460c      	mov	r4, r1
 801aa5a:	4691      	mov	r9, r2
 801aa5c:	7e27      	ldrb	r7, [r4, #24]
 801aa5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801aa60:	2f78      	cmp	r7, #120	; 0x78
 801aa62:	4680      	mov	r8, r0
 801aa64:	469a      	mov	sl, r3
 801aa66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aa6a:	d807      	bhi.n	801aa7c <_printf_i+0x28>
 801aa6c:	2f62      	cmp	r7, #98	; 0x62
 801aa6e:	d80a      	bhi.n	801aa86 <_printf_i+0x32>
 801aa70:	2f00      	cmp	r7, #0
 801aa72:	f000 80d8 	beq.w	801ac26 <_printf_i+0x1d2>
 801aa76:	2f58      	cmp	r7, #88	; 0x58
 801aa78:	f000 80a3 	beq.w	801abc2 <_printf_i+0x16e>
 801aa7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801aa80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801aa84:	e03a      	b.n	801aafc <_printf_i+0xa8>
 801aa86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801aa8a:	2b15      	cmp	r3, #21
 801aa8c:	d8f6      	bhi.n	801aa7c <_printf_i+0x28>
 801aa8e:	a001      	add	r0, pc, #4	; (adr r0, 801aa94 <_printf_i+0x40>)
 801aa90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801aa94:	0801aaed 	.word	0x0801aaed
 801aa98:	0801ab01 	.word	0x0801ab01
 801aa9c:	0801aa7d 	.word	0x0801aa7d
 801aaa0:	0801aa7d 	.word	0x0801aa7d
 801aaa4:	0801aa7d 	.word	0x0801aa7d
 801aaa8:	0801aa7d 	.word	0x0801aa7d
 801aaac:	0801ab01 	.word	0x0801ab01
 801aab0:	0801aa7d 	.word	0x0801aa7d
 801aab4:	0801aa7d 	.word	0x0801aa7d
 801aab8:	0801aa7d 	.word	0x0801aa7d
 801aabc:	0801aa7d 	.word	0x0801aa7d
 801aac0:	0801ac0d 	.word	0x0801ac0d
 801aac4:	0801ab31 	.word	0x0801ab31
 801aac8:	0801abef 	.word	0x0801abef
 801aacc:	0801aa7d 	.word	0x0801aa7d
 801aad0:	0801aa7d 	.word	0x0801aa7d
 801aad4:	0801ac2f 	.word	0x0801ac2f
 801aad8:	0801aa7d 	.word	0x0801aa7d
 801aadc:	0801ab31 	.word	0x0801ab31
 801aae0:	0801aa7d 	.word	0x0801aa7d
 801aae4:	0801aa7d 	.word	0x0801aa7d
 801aae8:	0801abf7 	.word	0x0801abf7
 801aaec:	680b      	ldr	r3, [r1, #0]
 801aaee:	1d1a      	adds	r2, r3, #4
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	600a      	str	r2, [r1, #0]
 801aaf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801aaf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801aafc:	2301      	movs	r3, #1
 801aafe:	e0a3      	b.n	801ac48 <_printf_i+0x1f4>
 801ab00:	6825      	ldr	r5, [r4, #0]
 801ab02:	6808      	ldr	r0, [r1, #0]
 801ab04:	062e      	lsls	r6, r5, #24
 801ab06:	f100 0304 	add.w	r3, r0, #4
 801ab0a:	d50a      	bpl.n	801ab22 <_printf_i+0xce>
 801ab0c:	6805      	ldr	r5, [r0, #0]
 801ab0e:	600b      	str	r3, [r1, #0]
 801ab10:	2d00      	cmp	r5, #0
 801ab12:	da03      	bge.n	801ab1c <_printf_i+0xc8>
 801ab14:	232d      	movs	r3, #45	; 0x2d
 801ab16:	426d      	negs	r5, r5
 801ab18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ab1c:	485e      	ldr	r0, [pc, #376]	; (801ac98 <_printf_i+0x244>)
 801ab1e:	230a      	movs	r3, #10
 801ab20:	e019      	b.n	801ab56 <_printf_i+0x102>
 801ab22:	f015 0f40 	tst.w	r5, #64	; 0x40
 801ab26:	6805      	ldr	r5, [r0, #0]
 801ab28:	600b      	str	r3, [r1, #0]
 801ab2a:	bf18      	it	ne
 801ab2c:	b22d      	sxthne	r5, r5
 801ab2e:	e7ef      	b.n	801ab10 <_printf_i+0xbc>
 801ab30:	680b      	ldr	r3, [r1, #0]
 801ab32:	6825      	ldr	r5, [r4, #0]
 801ab34:	1d18      	adds	r0, r3, #4
 801ab36:	6008      	str	r0, [r1, #0]
 801ab38:	0628      	lsls	r0, r5, #24
 801ab3a:	d501      	bpl.n	801ab40 <_printf_i+0xec>
 801ab3c:	681d      	ldr	r5, [r3, #0]
 801ab3e:	e002      	b.n	801ab46 <_printf_i+0xf2>
 801ab40:	0669      	lsls	r1, r5, #25
 801ab42:	d5fb      	bpl.n	801ab3c <_printf_i+0xe8>
 801ab44:	881d      	ldrh	r5, [r3, #0]
 801ab46:	4854      	ldr	r0, [pc, #336]	; (801ac98 <_printf_i+0x244>)
 801ab48:	2f6f      	cmp	r7, #111	; 0x6f
 801ab4a:	bf0c      	ite	eq
 801ab4c:	2308      	moveq	r3, #8
 801ab4e:	230a      	movne	r3, #10
 801ab50:	2100      	movs	r1, #0
 801ab52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ab56:	6866      	ldr	r6, [r4, #4]
 801ab58:	60a6      	str	r6, [r4, #8]
 801ab5a:	2e00      	cmp	r6, #0
 801ab5c:	bfa2      	ittt	ge
 801ab5e:	6821      	ldrge	r1, [r4, #0]
 801ab60:	f021 0104 	bicge.w	r1, r1, #4
 801ab64:	6021      	strge	r1, [r4, #0]
 801ab66:	b90d      	cbnz	r5, 801ab6c <_printf_i+0x118>
 801ab68:	2e00      	cmp	r6, #0
 801ab6a:	d04d      	beq.n	801ac08 <_printf_i+0x1b4>
 801ab6c:	4616      	mov	r6, r2
 801ab6e:	fbb5 f1f3 	udiv	r1, r5, r3
 801ab72:	fb03 5711 	mls	r7, r3, r1, r5
 801ab76:	5dc7      	ldrb	r7, [r0, r7]
 801ab78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ab7c:	462f      	mov	r7, r5
 801ab7e:	42bb      	cmp	r3, r7
 801ab80:	460d      	mov	r5, r1
 801ab82:	d9f4      	bls.n	801ab6e <_printf_i+0x11a>
 801ab84:	2b08      	cmp	r3, #8
 801ab86:	d10b      	bne.n	801aba0 <_printf_i+0x14c>
 801ab88:	6823      	ldr	r3, [r4, #0]
 801ab8a:	07df      	lsls	r7, r3, #31
 801ab8c:	d508      	bpl.n	801aba0 <_printf_i+0x14c>
 801ab8e:	6923      	ldr	r3, [r4, #16]
 801ab90:	6861      	ldr	r1, [r4, #4]
 801ab92:	4299      	cmp	r1, r3
 801ab94:	bfde      	ittt	le
 801ab96:	2330      	movle	r3, #48	; 0x30
 801ab98:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ab9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801aba0:	1b92      	subs	r2, r2, r6
 801aba2:	6122      	str	r2, [r4, #16]
 801aba4:	f8cd a000 	str.w	sl, [sp]
 801aba8:	464b      	mov	r3, r9
 801abaa:	aa03      	add	r2, sp, #12
 801abac:	4621      	mov	r1, r4
 801abae:	4640      	mov	r0, r8
 801abb0:	f7ff fee2 	bl	801a978 <_printf_common>
 801abb4:	3001      	adds	r0, #1
 801abb6:	d14c      	bne.n	801ac52 <_printf_i+0x1fe>
 801abb8:	f04f 30ff 	mov.w	r0, #4294967295
 801abbc:	b004      	add	sp, #16
 801abbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abc2:	4835      	ldr	r0, [pc, #212]	; (801ac98 <_printf_i+0x244>)
 801abc4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801abc8:	6823      	ldr	r3, [r4, #0]
 801abca:	680e      	ldr	r6, [r1, #0]
 801abcc:	061f      	lsls	r7, r3, #24
 801abce:	f856 5b04 	ldr.w	r5, [r6], #4
 801abd2:	600e      	str	r6, [r1, #0]
 801abd4:	d514      	bpl.n	801ac00 <_printf_i+0x1ac>
 801abd6:	07d9      	lsls	r1, r3, #31
 801abd8:	bf44      	itt	mi
 801abda:	f043 0320 	orrmi.w	r3, r3, #32
 801abde:	6023      	strmi	r3, [r4, #0]
 801abe0:	b91d      	cbnz	r5, 801abea <_printf_i+0x196>
 801abe2:	6823      	ldr	r3, [r4, #0]
 801abe4:	f023 0320 	bic.w	r3, r3, #32
 801abe8:	6023      	str	r3, [r4, #0]
 801abea:	2310      	movs	r3, #16
 801abec:	e7b0      	b.n	801ab50 <_printf_i+0xfc>
 801abee:	6823      	ldr	r3, [r4, #0]
 801abf0:	f043 0320 	orr.w	r3, r3, #32
 801abf4:	6023      	str	r3, [r4, #0]
 801abf6:	2378      	movs	r3, #120	; 0x78
 801abf8:	4828      	ldr	r0, [pc, #160]	; (801ac9c <_printf_i+0x248>)
 801abfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801abfe:	e7e3      	b.n	801abc8 <_printf_i+0x174>
 801ac00:	065e      	lsls	r6, r3, #25
 801ac02:	bf48      	it	mi
 801ac04:	b2ad      	uxthmi	r5, r5
 801ac06:	e7e6      	b.n	801abd6 <_printf_i+0x182>
 801ac08:	4616      	mov	r6, r2
 801ac0a:	e7bb      	b.n	801ab84 <_printf_i+0x130>
 801ac0c:	680b      	ldr	r3, [r1, #0]
 801ac0e:	6826      	ldr	r6, [r4, #0]
 801ac10:	6960      	ldr	r0, [r4, #20]
 801ac12:	1d1d      	adds	r5, r3, #4
 801ac14:	600d      	str	r5, [r1, #0]
 801ac16:	0635      	lsls	r5, r6, #24
 801ac18:	681b      	ldr	r3, [r3, #0]
 801ac1a:	d501      	bpl.n	801ac20 <_printf_i+0x1cc>
 801ac1c:	6018      	str	r0, [r3, #0]
 801ac1e:	e002      	b.n	801ac26 <_printf_i+0x1d2>
 801ac20:	0671      	lsls	r1, r6, #25
 801ac22:	d5fb      	bpl.n	801ac1c <_printf_i+0x1c8>
 801ac24:	8018      	strh	r0, [r3, #0]
 801ac26:	2300      	movs	r3, #0
 801ac28:	6123      	str	r3, [r4, #16]
 801ac2a:	4616      	mov	r6, r2
 801ac2c:	e7ba      	b.n	801aba4 <_printf_i+0x150>
 801ac2e:	680b      	ldr	r3, [r1, #0]
 801ac30:	1d1a      	adds	r2, r3, #4
 801ac32:	600a      	str	r2, [r1, #0]
 801ac34:	681e      	ldr	r6, [r3, #0]
 801ac36:	6862      	ldr	r2, [r4, #4]
 801ac38:	2100      	movs	r1, #0
 801ac3a:	4630      	mov	r0, r6
 801ac3c:	f7e5 fae8 	bl	8000210 <memchr>
 801ac40:	b108      	cbz	r0, 801ac46 <_printf_i+0x1f2>
 801ac42:	1b80      	subs	r0, r0, r6
 801ac44:	6060      	str	r0, [r4, #4]
 801ac46:	6863      	ldr	r3, [r4, #4]
 801ac48:	6123      	str	r3, [r4, #16]
 801ac4a:	2300      	movs	r3, #0
 801ac4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ac50:	e7a8      	b.n	801aba4 <_printf_i+0x150>
 801ac52:	6923      	ldr	r3, [r4, #16]
 801ac54:	4632      	mov	r2, r6
 801ac56:	4649      	mov	r1, r9
 801ac58:	4640      	mov	r0, r8
 801ac5a:	47d0      	blx	sl
 801ac5c:	3001      	adds	r0, #1
 801ac5e:	d0ab      	beq.n	801abb8 <_printf_i+0x164>
 801ac60:	6823      	ldr	r3, [r4, #0]
 801ac62:	079b      	lsls	r3, r3, #30
 801ac64:	d413      	bmi.n	801ac8e <_printf_i+0x23a>
 801ac66:	68e0      	ldr	r0, [r4, #12]
 801ac68:	9b03      	ldr	r3, [sp, #12]
 801ac6a:	4298      	cmp	r0, r3
 801ac6c:	bfb8      	it	lt
 801ac6e:	4618      	movlt	r0, r3
 801ac70:	e7a4      	b.n	801abbc <_printf_i+0x168>
 801ac72:	2301      	movs	r3, #1
 801ac74:	4632      	mov	r2, r6
 801ac76:	4649      	mov	r1, r9
 801ac78:	4640      	mov	r0, r8
 801ac7a:	47d0      	blx	sl
 801ac7c:	3001      	adds	r0, #1
 801ac7e:	d09b      	beq.n	801abb8 <_printf_i+0x164>
 801ac80:	3501      	adds	r5, #1
 801ac82:	68e3      	ldr	r3, [r4, #12]
 801ac84:	9903      	ldr	r1, [sp, #12]
 801ac86:	1a5b      	subs	r3, r3, r1
 801ac88:	42ab      	cmp	r3, r5
 801ac8a:	dcf2      	bgt.n	801ac72 <_printf_i+0x21e>
 801ac8c:	e7eb      	b.n	801ac66 <_printf_i+0x212>
 801ac8e:	2500      	movs	r5, #0
 801ac90:	f104 0619 	add.w	r6, r4, #25
 801ac94:	e7f5      	b.n	801ac82 <_printf_i+0x22e>
 801ac96:	bf00      	nop
 801ac98:	0801e95f 	.word	0x0801e95f
 801ac9c:	0801e970 	.word	0x0801e970

0801aca0 <_read_r>:
 801aca0:	b538      	push	{r3, r4, r5, lr}
 801aca2:	4d07      	ldr	r5, [pc, #28]	; (801acc0 <_read_r+0x20>)
 801aca4:	4604      	mov	r4, r0
 801aca6:	4608      	mov	r0, r1
 801aca8:	4611      	mov	r1, r2
 801acaa:	2200      	movs	r2, #0
 801acac:	602a      	str	r2, [r5, #0]
 801acae:	461a      	mov	r2, r3
 801acb0:	f7e5 ff7e 	bl	8000bb0 <_read>
 801acb4:	1c43      	adds	r3, r0, #1
 801acb6:	d102      	bne.n	801acbe <_read_r+0x1e>
 801acb8:	682b      	ldr	r3, [r5, #0]
 801acba:	b103      	cbz	r3, 801acbe <_read_r+0x1e>
 801acbc:	6023      	str	r3, [r4, #0]
 801acbe:	bd38      	pop	{r3, r4, r5, pc}
 801acc0:	2000dbc0 	.word	0x2000dbc0

0801acc4 <__swbuf_r>:
 801acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acc6:	460e      	mov	r6, r1
 801acc8:	4614      	mov	r4, r2
 801acca:	4605      	mov	r5, r0
 801accc:	b118      	cbz	r0, 801acd6 <__swbuf_r+0x12>
 801acce:	6983      	ldr	r3, [r0, #24]
 801acd0:	b90b      	cbnz	r3, 801acd6 <__swbuf_r+0x12>
 801acd2:	f7ff f913 	bl	8019efc <__sinit>
 801acd6:	4b21      	ldr	r3, [pc, #132]	; (801ad5c <__swbuf_r+0x98>)
 801acd8:	429c      	cmp	r4, r3
 801acda:	d12b      	bne.n	801ad34 <__swbuf_r+0x70>
 801acdc:	686c      	ldr	r4, [r5, #4]
 801acde:	69a3      	ldr	r3, [r4, #24]
 801ace0:	60a3      	str	r3, [r4, #8]
 801ace2:	89a3      	ldrh	r3, [r4, #12]
 801ace4:	071a      	lsls	r2, r3, #28
 801ace6:	d52f      	bpl.n	801ad48 <__swbuf_r+0x84>
 801ace8:	6923      	ldr	r3, [r4, #16]
 801acea:	b36b      	cbz	r3, 801ad48 <__swbuf_r+0x84>
 801acec:	6923      	ldr	r3, [r4, #16]
 801acee:	6820      	ldr	r0, [r4, #0]
 801acf0:	1ac0      	subs	r0, r0, r3
 801acf2:	6963      	ldr	r3, [r4, #20]
 801acf4:	b2f6      	uxtb	r6, r6
 801acf6:	4283      	cmp	r3, r0
 801acf8:	4637      	mov	r7, r6
 801acfa:	dc04      	bgt.n	801ad06 <__swbuf_r+0x42>
 801acfc:	4621      	mov	r1, r4
 801acfe:	4628      	mov	r0, r5
 801ad00:	f7ff fc1c 	bl	801a53c <_fflush_r>
 801ad04:	bb30      	cbnz	r0, 801ad54 <__swbuf_r+0x90>
 801ad06:	68a3      	ldr	r3, [r4, #8]
 801ad08:	3b01      	subs	r3, #1
 801ad0a:	60a3      	str	r3, [r4, #8]
 801ad0c:	6823      	ldr	r3, [r4, #0]
 801ad0e:	1c5a      	adds	r2, r3, #1
 801ad10:	6022      	str	r2, [r4, #0]
 801ad12:	701e      	strb	r6, [r3, #0]
 801ad14:	6963      	ldr	r3, [r4, #20]
 801ad16:	3001      	adds	r0, #1
 801ad18:	4283      	cmp	r3, r0
 801ad1a:	d004      	beq.n	801ad26 <__swbuf_r+0x62>
 801ad1c:	89a3      	ldrh	r3, [r4, #12]
 801ad1e:	07db      	lsls	r3, r3, #31
 801ad20:	d506      	bpl.n	801ad30 <__swbuf_r+0x6c>
 801ad22:	2e0a      	cmp	r6, #10
 801ad24:	d104      	bne.n	801ad30 <__swbuf_r+0x6c>
 801ad26:	4621      	mov	r1, r4
 801ad28:	4628      	mov	r0, r5
 801ad2a:	f7ff fc07 	bl	801a53c <_fflush_r>
 801ad2e:	b988      	cbnz	r0, 801ad54 <__swbuf_r+0x90>
 801ad30:	4638      	mov	r0, r7
 801ad32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad34:	4b0a      	ldr	r3, [pc, #40]	; (801ad60 <__swbuf_r+0x9c>)
 801ad36:	429c      	cmp	r4, r3
 801ad38:	d101      	bne.n	801ad3e <__swbuf_r+0x7a>
 801ad3a:	68ac      	ldr	r4, [r5, #8]
 801ad3c:	e7cf      	b.n	801acde <__swbuf_r+0x1a>
 801ad3e:	4b09      	ldr	r3, [pc, #36]	; (801ad64 <__swbuf_r+0xa0>)
 801ad40:	429c      	cmp	r4, r3
 801ad42:	bf08      	it	eq
 801ad44:	68ec      	ldreq	r4, [r5, #12]
 801ad46:	e7ca      	b.n	801acde <__swbuf_r+0x1a>
 801ad48:	4621      	mov	r1, r4
 801ad4a:	4628      	mov	r0, r5
 801ad4c:	f000 f80c 	bl	801ad68 <__swsetup_r>
 801ad50:	2800      	cmp	r0, #0
 801ad52:	d0cb      	beq.n	801acec <__swbuf_r+0x28>
 801ad54:	f04f 37ff 	mov.w	r7, #4294967295
 801ad58:	e7ea      	b.n	801ad30 <__swbuf_r+0x6c>
 801ad5a:	bf00      	nop
 801ad5c:	0801e858 	.word	0x0801e858
 801ad60:	0801e878 	.word	0x0801e878
 801ad64:	0801e838 	.word	0x0801e838

0801ad68 <__swsetup_r>:
 801ad68:	4b32      	ldr	r3, [pc, #200]	; (801ae34 <__swsetup_r+0xcc>)
 801ad6a:	b570      	push	{r4, r5, r6, lr}
 801ad6c:	681d      	ldr	r5, [r3, #0]
 801ad6e:	4606      	mov	r6, r0
 801ad70:	460c      	mov	r4, r1
 801ad72:	b125      	cbz	r5, 801ad7e <__swsetup_r+0x16>
 801ad74:	69ab      	ldr	r3, [r5, #24]
 801ad76:	b913      	cbnz	r3, 801ad7e <__swsetup_r+0x16>
 801ad78:	4628      	mov	r0, r5
 801ad7a:	f7ff f8bf 	bl	8019efc <__sinit>
 801ad7e:	4b2e      	ldr	r3, [pc, #184]	; (801ae38 <__swsetup_r+0xd0>)
 801ad80:	429c      	cmp	r4, r3
 801ad82:	d10f      	bne.n	801ada4 <__swsetup_r+0x3c>
 801ad84:	686c      	ldr	r4, [r5, #4]
 801ad86:	89a3      	ldrh	r3, [r4, #12]
 801ad88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ad8c:	0719      	lsls	r1, r3, #28
 801ad8e:	d42c      	bmi.n	801adea <__swsetup_r+0x82>
 801ad90:	06dd      	lsls	r5, r3, #27
 801ad92:	d411      	bmi.n	801adb8 <__swsetup_r+0x50>
 801ad94:	2309      	movs	r3, #9
 801ad96:	6033      	str	r3, [r6, #0]
 801ad98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ad9c:	81a3      	strh	r3, [r4, #12]
 801ad9e:	f04f 30ff 	mov.w	r0, #4294967295
 801ada2:	e03e      	b.n	801ae22 <__swsetup_r+0xba>
 801ada4:	4b25      	ldr	r3, [pc, #148]	; (801ae3c <__swsetup_r+0xd4>)
 801ada6:	429c      	cmp	r4, r3
 801ada8:	d101      	bne.n	801adae <__swsetup_r+0x46>
 801adaa:	68ac      	ldr	r4, [r5, #8]
 801adac:	e7eb      	b.n	801ad86 <__swsetup_r+0x1e>
 801adae:	4b24      	ldr	r3, [pc, #144]	; (801ae40 <__swsetup_r+0xd8>)
 801adb0:	429c      	cmp	r4, r3
 801adb2:	bf08      	it	eq
 801adb4:	68ec      	ldreq	r4, [r5, #12]
 801adb6:	e7e6      	b.n	801ad86 <__swsetup_r+0x1e>
 801adb8:	0758      	lsls	r0, r3, #29
 801adba:	d512      	bpl.n	801ade2 <__swsetup_r+0x7a>
 801adbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801adbe:	b141      	cbz	r1, 801add2 <__swsetup_r+0x6a>
 801adc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801adc4:	4299      	cmp	r1, r3
 801adc6:	d002      	beq.n	801adce <__swsetup_r+0x66>
 801adc8:	4630      	mov	r0, r6
 801adca:	f7ff fc2b 	bl	801a624 <_free_r>
 801adce:	2300      	movs	r3, #0
 801add0:	6363      	str	r3, [r4, #52]	; 0x34
 801add2:	89a3      	ldrh	r3, [r4, #12]
 801add4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801add8:	81a3      	strh	r3, [r4, #12]
 801adda:	2300      	movs	r3, #0
 801addc:	6063      	str	r3, [r4, #4]
 801adde:	6923      	ldr	r3, [r4, #16]
 801ade0:	6023      	str	r3, [r4, #0]
 801ade2:	89a3      	ldrh	r3, [r4, #12]
 801ade4:	f043 0308 	orr.w	r3, r3, #8
 801ade8:	81a3      	strh	r3, [r4, #12]
 801adea:	6923      	ldr	r3, [r4, #16]
 801adec:	b94b      	cbnz	r3, 801ae02 <__swsetup_r+0x9a>
 801adee:	89a3      	ldrh	r3, [r4, #12]
 801adf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801adf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801adf8:	d003      	beq.n	801ae02 <__swsetup_r+0x9a>
 801adfa:	4621      	mov	r1, r4
 801adfc:	4630      	mov	r0, r6
 801adfe:	f000 f84d 	bl	801ae9c <__smakebuf_r>
 801ae02:	89a0      	ldrh	r0, [r4, #12]
 801ae04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ae08:	f010 0301 	ands.w	r3, r0, #1
 801ae0c:	d00a      	beq.n	801ae24 <__swsetup_r+0xbc>
 801ae0e:	2300      	movs	r3, #0
 801ae10:	60a3      	str	r3, [r4, #8]
 801ae12:	6963      	ldr	r3, [r4, #20]
 801ae14:	425b      	negs	r3, r3
 801ae16:	61a3      	str	r3, [r4, #24]
 801ae18:	6923      	ldr	r3, [r4, #16]
 801ae1a:	b943      	cbnz	r3, 801ae2e <__swsetup_r+0xc6>
 801ae1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ae20:	d1ba      	bne.n	801ad98 <__swsetup_r+0x30>
 801ae22:	bd70      	pop	{r4, r5, r6, pc}
 801ae24:	0781      	lsls	r1, r0, #30
 801ae26:	bf58      	it	pl
 801ae28:	6963      	ldrpl	r3, [r4, #20]
 801ae2a:	60a3      	str	r3, [r4, #8]
 801ae2c:	e7f4      	b.n	801ae18 <__swsetup_r+0xb0>
 801ae2e:	2000      	movs	r0, #0
 801ae30:	e7f7      	b.n	801ae22 <__swsetup_r+0xba>
 801ae32:	bf00      	nop
 801ae34:	2000001c 	.word	0x2000001c
 801ae38:	0801e858 	.word	0x0801e858
 801ae3c:	0801e878 	.word	0x0801e878
 801ae40:	0801e838 	.word	0x0801e838

0801ae44 <abort>:
 801ae44:	b508      	push	{r3, lr}
 801ae46:	2006      	movs	r0, #6
 801ae48:	f000 f890 	bl	801af6c <raise>
 801ae4c:	2001      	movs	r0, #1
 801ae4e:	f7e5 fea5 	bl	8000b9c <_exit>

0801ae52 <__swhatbuf_r>:
 801ae52:	b570      	push	{r4, r5, r6, lr}
 801ae54:	460e      	mov	r6, r1
 801ae56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae5a:	2900      	cmp	r1, #0
 801ae5c:	b096      	sub	sp, #88	; 0x58
 801ae5e:	4614      	mov	r4, r2
 801ae60:	461d      	mov	r5, r3
 801ae62:	da07      	bge.n	801ae74 <__swhatbuf_r+0x22>
 801ae64:	2300      	movs	r3, #0
 801ae66:	602b      	str	r3, [r5, #0]
 801ae68:	89b3      	ldrh	r3, [r6, #12]
 801ae6a:	061a      	lsls	r2, r3, #24
 801ae6c:	d410      	bmi.n	801ae90 <__swhatbuf_r+0x3e>
 801ae6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ae72:	e00e      	b.n	801ae92 <__swhatbuf_r+0x40>
 801ae74:	466a      	mov	r2, sp
 801ae76:	f000 f895 	bl	801afa4 <_fstat_r>
 801ae7a:	2800      	cmp	r0, #0
 801ae7c:	dbf2      	blt.n	801ae64 <__swhatbuf_r+0x12>
 801ae7e:	9a01      	ldr	r2, [sp, #4]
 801ae80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ae84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ae88:	425a      	negs	r2, r3
 801ae8a:	415a      	adcs	r2, r3
 801ae8c:	602a      	str	r2, [r5, #0]
 801ae8e:	e7ee      	b.n	801ae6e <__swhatbuf_r+0x1c>
 801ae90:	2340      	movs	r3, #64	; 0x40
 801ae92:	2000      	movs	r0, #0
 801ae94:	6023      	str	r3, [r4, #0]
 801ae96:	b016      	add	sp, #88	; 0x58
 801ae98:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ae9c <__smakebuf_r>:
 801ae9c:	898b      	ldrh	r3, [r1, #12]
 801ae9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801aea0:	079d      	lsls	r5, r3, #30
 801aea2:	4606      	mov	r6, r0
 801aea4:	460c      	mov	r4, r1
 801aea6:	d507      	bpl.n	801aeb8 <__smakebuf_r+0x1c>
 801aea8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801aeac:	6023      	str	r3, [r4, #0]
 801aeae:	6123      	str	r3, [r4, #16]
 801aeb0:	2301      	movs	r3, #1
 801aeb2:	6163      	str	r3, [r4, #20]
 801aeb4:	b002      	add	sp, #8
 801aeb6:	bd70      	pop	{r4, r5, r6, pc}
 801aeb8:	ab01      	add	r3, sp, #4
 801aeba:	466a      	mov	r2, sp
 801aebc:	f7ff ffc9 	bl	801ae52 <__swhatbuf_r>
 801aec0:	9900      	ldr	r1, [sp, #0]
 801aec2:	4605      	mov	r5, r0
 801aec4:	4630      	mov	r0, r6
 801aec6:	f7ff f903 	bl	801a0d0 <_malloc_r>
 801aeca:	b948      	cbnz	r0, 801aee0 <__smakebuf_r+0x44>
 801aecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aed0:	059a      	lsls	r2, r3, #22
 801aed2:	d4ef      	bmi.n	801aeb4 <__smakebuf_r+0x18>
 801aed4:	f023 0303 	bic.w	r3, r3, #3
 801aed8:	f043 0302 	orr.w	r3, r3, #2
 801aedc:	81a3      	strh	r3, [r4, #12]
 801aede:	e7e3      	b.n	801aea8 <__smakebuf_r+0xc>
 801aee0:	4b0d      	ldr	r3, [pc, #52]	; (801af18 <__smakebuf_r+0x7c>)
 801aee2:	62b3      	str	r3, [r6, #40]	; 0x28
 801aee4:	89a3      	ldrh	r3, [r4, #12]
 801aee6:	6020      	str	r0, [r4, #0]
 801aee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801aeec:	81a3      	strh	r3, [r4, #12]
 801aeee:	9b00      	ldr	r3, [sp, #0]
 801aef0:	6163      	str	r3, [r4, #20]
 801aef2:	9b01      	ldr	r3, [sp, #4]
 801aef4:	6120      	str	r0, [r4, #16]
 801aef6:	b15b      	cbz	r3, 801af10 <__smakebuf_r+0x74>
 801aef8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aefc:	4630      	mov	r0, r6
 801aefe:	f000 f863 	bl	801afc8 <_isatty_r>
 801af02:	b128      	cbz	r0, 801af10 <__smakebuf_r+0x74>
 801af04:	89a3      	ldrh	r3, [r4, #12]
 801af06:	f023 0303 	bic.w	r3, r3, #3
 801af0a:	f043 0301 	orr.w	r3, r3, #1
 801af0e:	81a3      	strh	r3, [r4, #12]
 801af10:	89a0      	ldrh	r0, [r4, #12]
 801af12:	4305      	orrs	r5, r0
 801af14:	81a5      	strh	r5, [r4, #12]
 801af16:	e7cd      	b.n	801aeb4 <__smakebuf_r+0x18>
 801af18:	08019e95 	.word	0x08019e95

0801af1c <_raise_r>:
 801af1c:	291f      	cmp	r1, #31
 801af1e:	b538      	push	{r3, r4, r5, lr}
 801af20:	4604      	mov	r4, r0
 801af22:	460d      	mov	r5, r1
 801af24:	d904      	bls.n	801af30 <_raise_r+0x14>
 801af26:	2316      	movs	r3, #22
 801af28:	6003      	str	r3, [r0, #0]
 801af2a:	f04f 30ff 	mov.w	r0, #4294967295
 801af2e:	bd38      	pop	{r3, r4, r5, pc}
 801af30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801af32:	b112      	cbz	r2, 801af3a <_raise_r+0x1e>
 801af34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801af38:	b94b      	cbnz	r3, 801af4e <_raise_r+0x32>
 801af3a:	4620      	mov	r0, r4
 801af3c:	f000 f830 	bl	801afa0 <_getpid_r>
 801af40:	462a      	mov	r2, r5
 801af42:	4601      	mov	r1, r0
 801af44:	4620      	mov	r0, r4
 801af46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801af4a:	f000 b817 	b.w	801af7c <_kill_r>
 801af4e:	2b01      	cmp	r3, #1
 801af50:	d00a      	beq.n	801af68 <_raise_r+0x4c>
 801af52:	1c59      	adds	r1, r3, #1
 801af54:	d103      	bne.n	801af5e <_raise_r+0x42>
 801af56:	2316      	movs	r3, #22
 801af58:	6003      	str	r3, [r0, #0]
 801af5a:	2001      	movs	r0, #1
 801af5c:	e7e7      	b.n	801af2e <_raise_r+0x12>
 801af5e:	2400      	movs	r4, #0
 801af60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801af64:	4628      	mov	r0, r5
 801af66:	4798      	blx	r3
 801af68:	2000      	movs	r0, #0
 801af6a:	e7e0      	b.n	801af2e <_raise_r+0x12>

0801af6c <raise>:
 801af6c:	4b02      	ldr	r3, [pc, #8]	; (801af78 <raise+0xc>)
 801af6e:	4601      	mov	r1, r0
 801af70:	6818      	ldr	r0, [r3, #0]
 801af72:	f7ff bfd3 	b.w	801af1c <_raise_r>
 801af76:	bf00      	nop
 801af78:	2000001c 	.word	0x2000001c

0801af7c <_kill_r>:
 801af7c:	b538      	push	{r3, r4, r5, lr}
 801af7e:	4d07      	ldr	r5, [pc, #28]	; (801af9c <_kill_r+0x20>)
 801af80:	2300      	movs	r3, #0
 801af82:	4604      	mov	r4, r0
 801af84:	4608      	mov	r0, r1
 801af86:	4611      	mov	r1, r2
 801af88:	602b      	str	r3, [r5, #0]
 801af8a:	f7e5 fdf5 	bl	8000b78 <_kill>
 801af8e:	1c43      	adds	r3, r0, #1
 801af90:	d102      	bne.n	801af98 <_kill_r+0x1c>
 801af92:	682b      	ldr	r3, [r5, #0]
 801af94:	b103      	cbz	r3, 801af98 <_kill_r+0x1c>
 801af96:	6023      	str	r3, [r4, #0]
 801af98:	bd38      	pop	{r3, r4, r5, pc}
 801af9a:	bf00      	nop
 801af9c:	2000dbc0 	.word	0x2000dbc0

0801afa0 <_getpid_r>:
 801afa0:	f7e5 bde2 	b.w	8000b68 <_getpid>

0801afa4 <_fstat_r>:
 801afa4:	b538      	push	{r3, r4, r5, lr}
 801afa6:	4d07      	ldr	r5, [pc, #28]	; (801afc4 <_fstat_r+0x20>)
 801afa8:	2300      	movs	r3, #0
 801afaa:	4604      	mov	r4, r0
 801afac:	4608      	mov	r0, r1
 801afae:	4611      	mov	r1, r2
 801afb0:	602b      	str	r3, [r5, #0]
 801afb2:	f7e5 fe42 	bl	8000c3a <_fstat>
 801afb6:	1c43      	adds	r3, r0, #1
 801afb8:	d102      	bne.n	801afc0 <_fstat_r+0x1c>
 801afba:	682b      	ldr	r3, [r5, #0]
 801afbc:	b103      	cbz	r3, 801afc0 <_fstat_r+0x1c>
 801afbe:	6023      	str	r3, [r4, #0]
 801afc0:	bd38      	pop	{r3, r4, r5, pc}
 801afc2:	bf00      	nop
 801afc4:	2000dbc0 	.word	0x2000dbc0

0801afc8 <_isatty_r>:
 801afc8:	b538      	push	{r3, r4, r5, lr}
 801afca:	4d06      	ldr	r5, [pc, #24]	; (801afe4 <_isatty_r+0x1c>)
 801afcc:	2300      	movs	r3, #0
 801afce:	4604      	mov	r4, r0
 801afd0:	4608      	mov	r0, r1
 801afd2:	602b      	str	r3, [r5, #0]
 801afd4:	f7e5 fe41 	bl	8000c5a <_isatty>
 801afd8:	1c43      	adds	r3, r0, #1
 801afda:	d102      	bne.n	801afe2 <_isatty_r+0x1a>
 801afdc:	682b      	ldr	r3, [r5, #0]
 801afde:	b103      	cbz	r3, 801afe2 <_isatty_r+0x1a>
 801afe0:	6023      	str	r3, [r4, #0]
 801afe2:	bd38      	pop	{r3, r4, r5, pc}
 801afe4:	2000dbc0 	.word	0x2000dbc0

0801afe8 <_init>:
 801afe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801afea:	bf00      	nop
 801afec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801afee:	bc08      	pop	{r3}
 801aff0:	469e      	mov	lr, r3
 801aff2:	4770      	bx	lr

0801aff4 <_fini>:
 801aff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aff6:	bf00      	nop
 801aff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801affa:	bc08      	pop	{r3}
 801affc:	469e      	mov	lr, r3
 801affe:	4770      	bx	lr
