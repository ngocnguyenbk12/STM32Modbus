#include <touchgfx/Font.hpp>

FONT_KERNING_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::KerningNode kerning_ariblk_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE = {
    { 0x0042,  1 },  // (First char = [0x0042, B], Second char = [0x002C, ,], Kerning dist = 1)
    { 0x0043,  1 },  // (First char = [0x0043, C], Second char = [0x002C, ,], Kerning dist = 1)
    { 0x0046, -6 },  // (First char = [0x0046, F], Second char = [0x002C, ,], Kerning dist = -6)
    { 0x0047,  1 },  // (First char = [0x0047, G], Second char = [0x002C, ,], Kerning dist = 1)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x002C, ,], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x002C, ,], Kerning dist = -1)
    { 0x0050, -7 },  // (First char = [0x0050, P], Second char = [0x002C, ,], Kerning dist = -7)
    { 0x0051,  1 },  // (First char = [0x0051, Q], Second char = [0x002C, ,], Kerning dist = 1)
    { 0x0054, -6 },  // (First char = [0x0054, T], Second char = [0x002C, ,], Kerning dist = -6)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x002C, ,], Kerning dist = -1)
    { 0x0056, -5 },  // (First char = [0x0056, V], Second char = [0x002C, ,], Kerning dist = -5)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x002C, ,], Kerning dist = -2)
    { 0x0059, -6 },  // (First char = [0x0059, Y], Second char = [0x002C, ,], Kerning dist = -6)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x002D, -], Kerning dist = -3)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x002D, -], Kerning dist = -2)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x002D, -], Kerning dist = -3)
    { 0x0042,  1 },  // (First char = [0x0042, B], Second char = [0x002E, .], Kerning dist = 1)
    { 0x0043,  1 },  // (First char = [0x0043, C], Second char = [0x002E, .], Kerning dist = 1)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x002E, .], Kerning dist = -1)
    { 0x0046, -6 },  // (First char = [0x0046, F], Second char = [0x002E, .], Kerning dist = -6)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x002E, .], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x002E, .], Kerning dist = -1)
    { 0x0050, -8 },  // (First char = [0x0050, P], Second char = [0x002E, .], Kerning dist = -8)
    { 0x0051,  1 },  // (First char = [0x0051, Q], Second char = [0x002E, .], Kerning dist = 1)
    { 0x0054, -6 },  // (First char = [0x0054, T], Second char = [0x002E, .], Kerning dist = -6)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x002E, .], Kerning dist = -1)
    { 0x0056, -5 },  // (First char = [0x0056, V], Second char = [0x002E, .], Kerning dist = -5)
    { 0x0057, -2 },  // (First char = [0x0057, W], Second char = [0x002E, .], Kerning dist = -2)
    { 0x0059, -7 },  // (First char = [0x0059, Y], Second char = [0x002E, .], Kerning dist = -7)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x002E, .], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x003A, :], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x003A, :], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x003A, :], Kerning dist = -2)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x003B, ;], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x003B, ;], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x003B, ;], Kerning dist = -2)
    { 0x0042, -1 },  // (First char = [0x0042, B], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0044, -2 },  // (First char = [0x0044, D], Second char = [0x0041, A], Kerning dist = -2)
    { 0x0046, -4 },  // (First char = [0x0046, F], Second char = [0x0041, A], Kerning dist = -4)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x0041, A], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0050, -3 },  // (First char = [0x0050, P], Second char = [0x0041, A], Kerning dist = -3)
    { 0x0051,  1 },  // (First char = [0x0051, Q], Second char = [0x0041, A], Kerning dist = 1)
    { 0x0054, -3 },  // (First char = [0x0054, T], Second char = [0x0041, A], Kerning dist = -3)
    { 0x0055, -1 },  // (First char = [0x0055, U], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x0041, A], Kerning dist = -2)
    { 0x0059, -4 },  // (First char = [0x0059, Y], Second char = [0x0041, A], Kerning dist = -4)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0043, C], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0043, C], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0043, C], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0043, C], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0043, C], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0043, C], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0043, C], Kerning dist = -1)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0043, C], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0043, C], Kerning dist = -2)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0047, G], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0047, G], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0047, G], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0047, G], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0047, G], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0047, G], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0047, G], Kerning dist = -1)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x0047, G], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0047, G], Kerning dist = -2)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x004F, O], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x004F, O], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0058, -1 },  // (First char = [0x0058, X], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x004F, O], Kerning dist = -2)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0051, Q], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0051, Q], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0051, Q], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0051, Q], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0053, S], Kerning dist = -2)
    { 0x0041, -3 },  // (First char = [0x0041, A], Second char = [0x0054, T], Kerning dist = -3)
    { 0x004C, -2 },  // (First char = [0x004C, L], Second char = [0x0054, T], Kerning dist = -2)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0051, -1 },  // (First char = [0x0051, Q], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0055, U], Kerning dist = -1)
    { 0x0042, -1 },  // (First char = [0x0042, B], Second char = [0x0055, U], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0055, U], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0055, U], Kerning dist = -1)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x0056, V], Kerning dist = -2)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x0056, V], Kerning dist = -1)
    { 0x004C, -2 },  // (First char = [0x004C, L], Second char = [0x0056, V], Kerning dist = -2)
    { 0x004F, -2 },  // (First char = [0x004F, O], Second char = [0x0056, V], Kerning dist = -2)
    { 0x0051, -2 },  // (First char = [0x0051, Q], Second char = [0x0056, V], Kerning dist = -2)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0044,  1 },  // (First char = [0x0044, D], Second char = [0x0057, W], Kerning dist = 1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0057, W], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0057, W], Kerning dist = -1)
    { 0x004F, -2 },  // (First char = [0x004F, O], Second char = [0x0058, X], Kerning dist = -2)
    { 0x0041, -3 },  // (First char = [0x0041, A], Second char = [0x0059, Y], Kerning dist = -3)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x004C, -3 },  // (First char = [0x004C, L], Second char = [0x0059, Y], Kerning dist = -3)
    { 0x004F, -3 },  // (First char = [0x004F, O], Second char = [0x0059, Y], Kerning dist = -3)
    { 0x0051, -2 },  // (First char = [0x0051, Q], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x0052, -2 },  // (First char = [0x0052, R], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0061, a], Kerning dist = -1)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0061, a], Kerning dist = -2)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x0061, a], Kerning dist = -2)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x0061, a], Kerning dist = -3)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0063, c], Kerning dist = -2)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0059, -4 },  // (First char = [0x0059, Y], Second char = [0x0064, d], Kerning dist = -4)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0065, e], Kerning dist = -1)
    { 0x004A, -1 },  // (First char = [0x004A, J], Second char = [0x0065, e], Kerning dist = -1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0052, -1 },  // (First char = [0x0052, R], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0059, -4 },  // (First char = [0x0059, Y], Second char = [0x0065, e], Kerning dist = -4)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x006D, m], Kerning dist = -2)
    { 0x0041,  1 },  // (First char = [0x0041, A], Second char = [0x0070, p], Kerning dist = 1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0070, p], Kerning dist = -2)
};
