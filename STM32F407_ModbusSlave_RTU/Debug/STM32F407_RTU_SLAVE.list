
STM32F407_RTU_SLAVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08008f28  08008f28  00018f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800909c  0800909c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800909c  0800909c  0001909c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090a4  080090a4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090a4  080090a4  000190a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090a8  080090a8  000190a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080090ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ddc  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004e50  20004e50  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026ebb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000046c4  00000000  00000000  00046f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001650  00000000  00000000  0004b628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014c8  00000000  00000000  0004cc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005412  00000000  00000000  0004e140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c17c  00000000  00000000  00053552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d67a5  00000000  00000000  0006f6ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00145e73  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060f4  00000000  00000000  00145ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f10 	.word	0x08008f10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008f10 	.word	0x08008f10

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b96e 	b.w	8000d00 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468c      	mov	ip, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	f040 8083 	bne.w	8000b52 <__udivmoddi4+0x116>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4617      	mov	r7, r2
 8000a50:	d947      	bls.n	8000ae2 <__udivmoddi4+0xa6>
 8000a52:	fab2 f282 	clz	r2, r2
 8000a56:	b142      	cbz	r2, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	f1c2 0020 	rsb	r0, r2, #32
 8000a5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000a60:	4091      	lsls	r1, r2
 8000a62:	4097      	lsls	r7, r2
 8000a64:	ea40 0c01 	orr.w	ip, r0, r1
 8000a68:	4094      	lsls	r4, r2
 8000a6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a6e:	0c23      	lsrs	r3, r4, #16
 8000a70:	fbbc f6f8 	udiv	r6, ip, r8
 8000a74:	fa1f fe87 	uxth.w	lr, r7
 8000a78:	fb08 c116 	mls	r1, r8, r6, ip
 8000a7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a80:	fb06 f10e 	mul.w	r1, r6, lr
 8000a84:	4299      	cmp	r1, r3
 8000a86:	d909      	bls.n	8000a9c <__udivmoddi4+0x60>
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8e:	f080 8119 	bcs.w	8000cc4 <__udivmoddi4+0x288>
 8000a92:	4299      	cmp	r1, r3
 8000a94:	f240 8116 	bls.w	8000cc4 <__udivmoddi4+0x288>
 8000a98:	3e02      	subs	r6, #2
 8000a9a:	443b      	add	r3, r7
 8000a9c:	1a5b      	subs	r3, r3, r1
 8000a9e:	b2a4      	uxth	r4, r4
 8000aa0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa4:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ab0:	45a6      	cmp	lr, r4
 8000ab2:	d909      	bls.n	8000ac8 <__udivmoddi4+0x8c>
 8000ab4:	193c      	adds	r4, r7, r4
 8000ab6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aba:	f080 8105 	bcs.w	8000cc8 <__udivmoddi4+0x28c>
 8000abe:	45a6      	cmp	lr, r4
 8000ac0:	f240 8102 	bls.w	8000cc8 <__udivmoddi4+0x28c>
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	443c      	add	r4, r7
 8000ac8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000acc:	eba4 040e 	sub.w	r4, r4, lr
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	b11d      	cbz	r5, 8000adc <__udivmoddi4+0xa0>
 8000ad4:	40d4      	lsrs	r4, r2
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e9c5 4300 	strd	r4, r3, [r5]
 8000adc:	4631      	mov	r1, r6
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	b902      	cbnz	r2, 8000ae6 <__udivmoddi4+0xaa>
 8000ae4:	deff      	udf	#255	; 0xff
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	d150      	bne.n	8000b90 <__udivmoddi4+0x154>
 8000aee:	1bcb      	subs	r3, r1, r7
 8000af0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af4:	fa1f f887 	uxth.w	r8, r7
 8000af8:	2601      	movs	r6, #1
 8000afa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000afe:	0c21      	lsrs	r1, r4, #16
 8000b00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b08:	fb08 f30c 	mul.w	r3, r8, ip
 8000b0c:	428b      	cmp	r3, r1
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0xe4>
 8000b10:	1879      	adds	r1, r7, r1
 8000b12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0xe2>
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	f200 80e9 	bhi.w	8000cf0 <__udivmoddi4+0x2b4>
 8000b1e:	4684      	mov	ip, r0
 8000b20:	1ac9      	subs	r1, r1, r3
 8000b22:	b2a3      	uxth	r3, r4
 8000b24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b30:	fb08 f800 	mul.w	r8, r8, r0
 8000b34:	45a0      	cmp	r8, r4
 8000b36:	d907      	bls.n	8000b48 <__udivmoddi4+0x10c>
 8000b38:	193c      	adds	r4, r7, r4
 8000b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x10a>
 8000b40:	45a0      	cmp	r8, r4
 8000b42:	f200 80d9 	bhi.w	8000cf8 <__udivmoddi4+0x2bc>
 8000b46:	4618      	mov	r0, r3
 8000b48:	eba4 0408 	sub.w	r4, r4, r8
 8000b4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b50:	e7bf      	b.n	8000ad2 <__udivmoddi4+0x96>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d909      	bls.n	8000b6a <__udivmoddi4+0x12e>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	f000 80b1 	beq.w	8000cbe <__udivmoddi4+0x282>
 8000b5c:	2600      	movs	r6, #0
 8000b5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000b62:	4630      	mov	r0, r6
 8000b64:	4631      	mov	r1, r6
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	fab3 f683 	clz	r6, r3
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d14a      	bne.n	8000c08 <__udivmoddi4+0x1cc>
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d302      	bcc.n	8000b7c <__udivmoddi4+0x140>
 8000b76:	4282      	cmp	r2, r0
 8000b78:	f200 80b8 	bhi.w	8000cec <__udivmoddi4+0x2b0>
 8000b7c:	1a84      	subs	r4, r0, r2
 8000b7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b82:	2001      	movs	r0, #1
 8000b84:	468c      	mov	ip, r1
 8000b86:	2d00      	cmp	r5, #0
 8000b88:	d0a8      	beq.n	8000adc <__udivmoddi4+0xa0>
 8000b8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b8e:	e7a5      	b.n	8000adc <__udivmoddi4+0xa0>
 8000b90:	f1c2 0320 	rsb	r3, r2, #32
 8000b94:	fa20 f603 	lsr.w	r6, r0, r3
 8000b98:	4097      	lsls	r7, r2
 8000b9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba2:	40d9      	lsrs	r1, r3
 8000ba4:	4330      	orrs	r0, r6
 8000ba6:	0c03      	lsrs	r3, r0, #16
 8000ba8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bac:	fa1f f887 	uxth.w	r8, r7
 8000bb0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb06 f108 	mul.w	r1, r6, r8
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x19c>
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bca:	f080 808d 	bcs.w	8000ce8 <__udivmoddi4+0x2ac>
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	f240 808a 	bls.w	8000ce8 <__udivmoddi4+0x2ac>
 8000bd4:	3e02      	subs	r6, #2
 8000bd6:	443b      	add	r3, r7
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b281      	uxth	r1, r0
 8000bdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000be0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be8:	fb00 f308 	mul.w	r3, r0, r8
 8000bec:	428b      	cmp	r3, r1
 8000bee:	d907      	bls.n	8000c00 <__udivmoddi4+0x1c4>
 8000bf0:	1879      	adds	r1, r7, r1
 8000bf2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bf6:	d273      	bcs.n	8000ce0 <__udivmoddi4+0x2a4>
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d971      	bls.n	8000ce0 <__udivmoddi4+0x2a4>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	4439      	add	r1, r7
 8000c00:	1acb      	subs	r3, r1, r3
 8000c02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c06:	e778      	b.n	8000afa <__udivmoddi4+0xbe>
 8000c08:	f1c6 0c20 	rsb	ip, r6, #32
 8000c0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c14:	431c      	orrs	r4, r3
 8000c16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c26:	431f      	orrs	r7, r3
 8000c28:	0c3b      	lsrs	r3, r7, #16
 8000c2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c2e:	fa1f f884 	uxth.w	r8, r4
 8000c32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c3e:	458a      	cmp	sl, r1
 8000c40:	fa02 f206 	lsl.w	r2, r2, r6
 8000c44:	fa00 f306 	lsl.w	r3, r0, r6
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x220>
 8000c4a:	1861      	adds	r1, r4, r1
 8000c4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c50:	d248      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c52:	458a      	cmp	sl, r1
 8000c54:	d946      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000c56:	f1a9 0902 	sub.w	r9, r9, #2
 8000c5a:	4421      	add	r1, r4
 8000c5c:	eba1 010a 	sub.w	r1, r1, sl
 8000c60:	b2bf      	uxth	r7, r7
 8000c62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c6e:	fb00 f808 	mul.w	r8, r0, r8
 8000c72:	45b8      	cmp	r8, r7
 8000c74:	d907      	bls.n	8000c86 <__udivmoddi4+0x24a>
 8000c76:	19e7      	adds	r7, r4, r7
 8000c78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7c:	d22e      	bcs.n	8000cdc <__udivmoddi4+0x2a0>
 8000c7e:	45b8      	cmp	r8, r7
 8000c80:	d92c      	bls.n	8000cdc <__udivmoddi4+0x2a0>
 8000c82:	3802      	subs	r0, #2
 8000c84:	4427      	add	r7, r4
 8000c86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c8a:	eba7 0708 	sub.w	r7, r7, r8
 8000c8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c92:	454f      	cmp	r7, r9
 8000c94:	46c6      	mov	lr, r8
 8000c96:	4649      	mov	r1, r9
 8000c98:	d31a      	bcc.n	8000cd0 <__udivmoddi4+0x294>
 8000c9a:	d017      	beq.n	8000ccc <__udivmoddi4+0x290>
 8000c9c:	b15d      	cbz	r5, 8000cb6 <__udivmoddi4+0x27a>
 8000c9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000ca2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ca6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000caa:	40f2      	lsrs	r2, r6
 8000cac:	ea4c 0202 	orr.w	r2, ip, r2
 8000cb0:	40f7      	lsrs	r7, r6
 8000cb2:	e9c5 2700 	strd	r2, r7, [r5]
 8000cb6:	2600      	movs	r6, #0
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	462e      	mov	r6, r5
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	e70b      	b.n	8000adc <__udivmoddi4+0xa0>
 8000cc4:	4606      	mov	r6, r0
 8000cc6:	e6e9      	b.n	8000a9c <__udivmoddi4+0x60>
 8000cc8:	4618      	mov	r0, r3
 8000cca:	e6fd      	b.n	8000ac8 <__udivmoddi4+0x8c>
 8000ccc:	4543      	cmp	r3, r8
 8000cce:	d2e5      	bcs.n	8000c9c <__udivmoddi4+0x260>
 8000cd0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cd4:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd8:	3801      	subs	r0, #1
 8000cda:	e7df      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	e7d2      	b.n	8000c86 <__udivmoddi4+0x24a>
 8000ce0:	4660      	mov	r0, ip
 8000ce2:	e78d      	b.n	8000c00 <__udivmoddi4+0x1c4>
 8000ce4:	4681      	mov	r9, r0
 8000ce6:	e7b9      	b.n	8000c5c <__udivmoddi4+0x220>
 8000ce8:	4666      	mov	r6, ip
 8000cea:	e775      	b.n	8000bd8 <__udivmoddi4+0x19c>
 8000cec:	4630      	mov	r0, r6
 8000cee:	e74a      	b.n	8000b86 <__udivmoddi4+0x14a>
 8000cf0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cf4:	4439      	add	r1, r7
 8000cf6:	e713      	b.n	8000b20 <__udivmoddi4+0xe4>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	443c      	add	r4, r7
 8000cfc:	e724      	b.n	8000b48 <__udivmoddi4+0x10c>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_idiv0>:
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d08:	f000 fb04 	bl	8001314 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0c:	f000 f81e 	bl	8000d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d10:	f000 f94e 	bl	8000fb0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d14:	f000 f922 	bl	8000f5c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d18:	f000 f882 	bl	8000e20 <MX_TIM1_Init>
  MX_TIM5_Init();
 8000d1c:	f000 f8d0 	bl	8000ec0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  SModbus_Init();
 8000d20:	f003 fb48 	bl	80043b4 <SModbus_Init>
  // //Start capturing traffic on serial Port
  // ModbusStart(&ModbusH);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d24:	f004 fc08 	bl	8005538 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d28:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <main+0x3c>)
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4805      	ldr	r0, [pc, #20]	; (8000d44 <main+0x40>)
 8000d2e:	f004 fc4d 	bl	80055cc <osThreadNew>
 8000d32:	4603      	mov	r3, r0
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <main+0x44>)
 8000d36:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d38:	f004 fc22 	bl	8005580 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <main+0x38>
 8000d3e:	bf00      	nop
 8000d40:	08008fac 	.word	0x08008fac
 8000d44:	0800106d 	.word	0x0800106d
 8000d48:	20004a74 	.word	0x20004a74

08000d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b094      	sub	sp, #80	; 0x50
 8000d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d52:	f107 0320 	add.w	r3, r7, #32
 8000d56:	2230      	movs	r2, #48	; 0x30
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f008 f80a 	bl	8008d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <SystemClock_Config+0xcc>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	4a27      	ldr	r2, [pc, #156]	; (8000e18 <SystemClock_Config+0xcc>)
 8000d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d80:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <SystemClock_Config+0xcc>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <SystemClock_Config+0xd0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a21      	ldr	r2, [pc, #132]	; (8000e1c <SystemClock_Config+0xd0>)
 8000d96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <SystemClock_Config+0xd0>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000da8:	2301      	movs	r3, #1
 8000daa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db2:	2302      	movs	r3, #2
 8000db4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000dc0:	2348      	movs	r3, #72	; 0x48
 8000dc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dc8:	2307      	movs	r3, #7
 8000dca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dcc:	f107 0320 	add.w	r3, r7, #32
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 fe83 	bl	8001adc <HAL_RCC_OscConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ddc:	f000 f976 	bl	80010cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de0:	230f      	movs	r3, #15
 8000de2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de4:	2302      	movs	r3, #2
 8000de6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 f8e4 	bl	8001fcc <HAL_RCC_ClockConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e0a:	f000 f95f 	bl	80010cc <Error_Handler>
  }
}
 8000e0e:	bf00      	nop
 8000e10:	3750      	adds	r7, #80	; 0x50
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40023800 	.word	0x40023800
 8000e1c:	40007000 	.word	0x40007000

08000e20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e34:	463b      	mov	r3, r7
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <MX_TIM1_Init+0x98>)
 8000e3e:	4a1f      	ldr	r2, [pc, #124]	; (8000ebc <MX_TIM1_Init+0x9c>)
 8000e40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <MX_TIM1_Init+0x98>)
 8000e44:	2247      	movs	r2, #71	; 0x47
 8000e46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_TIM1_Init+0x98>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_TIM1_Init+0x98>)
 8000e50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000e54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_TIM1_Init+0x98>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_TIM1_Init+0x98>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_TIM1_Init+0x98>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e68:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <MX_TIM1_Init+0x98>)
 8000e6a:	f001 faab 	bl	80023c4 <HAL_TIM_Base_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e74:	f000 f92a 	bl	80010cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e7e:	f107 0308 	add.w	r3, r7, #8
 8000e82:	4619      	mov	r1, r3
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <MX_TIM1_Init+0x98>)
 8000e86:	f001 fb55 	bl	8002534 <HAL_TIM_ConfigClockSource>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e90:	f000 f91c 	bl	80010cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e94:	2300      	movs	r3, #0
 8000e96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e9c:	463b      	mov	r3, r7
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_TIM1_Init+0x98>)
 8000ea2:	f001 fd49 	bl	8002938 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000eac:	f000 f90e 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3718      	adds	r7, #24
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20004b3c 	.word	0x20004b3c
 8000ebc:	40010000 	.word	0x40010000

08000ec0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec6:	f107 0308 	add.w	r3, r7, #8
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000edc:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000ede:	4a1e      	ldr	r2, [pc, #120]	; (8000f58 <MX_TIM5_Init+0x98>)
 8000ee0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000ee4:	2247      	movs	r2, #71	; 0x47
 8000ee6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff-1 ;
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000ef0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000ef4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f02:	4814      	ldr	r0, [pc, #80]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000f04:	f001 fa5e 	bl	80023c4 <HAL_TIM_Base_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000f0e:	f000 f8dd 	bl	80010cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480d      	ldr	r0, [pc, #52]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000f20:	f001 fb08 	bl	8002534 <HAL_TIM_ConfigClockSource>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000f2a:	f000 f8cf 	bl	80010cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f36:	463b      	mov	r3, r7
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4806      	ldr	r0, [pc, #24]	; (8000f54 <MX_TIM5_Init+0x94>)
 8000f3c:	f001 fcfc 	bl	8002938 <HAL_TIMEx_MasterConfigSynchronization>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000f46:	f000 f8c1 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20004af0 	.word	0x20004af0
 8000f58:	40000c00 	.word	0x40000c00

08000f5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	; (8000fac <MX_USART2_UART_Init+0x50>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_USART2_UART_Init+0x4c>)
 8000f94:	f001 fd4c 	bl	8002a30 <HAL_UART_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f9e:	f000 f895 	bl	80010cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20004b84 	.word	0x20004b84
 8000fac:	40004400 	.word	0x40004400

08000fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	4b26      	ldr	r3, [pc, #152]	; (8001064 <MX_GPIO_Init+0xb4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	4a25      	ldr	r2, [pc, #148]	; (8001064 <MX_GPIO_Init+0xb4>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <MX_GPIO_Init+0xb4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_GPIO_Init+0xb4>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	4a1e      	ldr	r2, [pc, #120]	; (8001064 <MX_GPIO_Init+0xb4>)
 8000fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_GPIO_Init+0xb4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_GPIO_Init+0xb4>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a17      	ldr	r2, [pc, #92]	; (8001064 <MX_GPIO_Init+0xb4>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_GPIO_Init+0xb4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_GPIO_Init+0xb4>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <MX_GPIO_Init+0xb4>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_GPIO_Init+0xb4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	480b      	ldr	r0, [pc, #44]	; (8001068 <MX_GPIO_Init+0xb8>)
 800103c:	f000 fd34 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	4804      	ldr	r0, [pc, #16]	; (8001068 <MX_GPIO_Init+0xb8>)
 8001058:	f000 fb72 	bl	8001740 <HAL_GPIO_Init>

}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	; 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40020800 	.word	0x40020800

0800106c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	float Temp, Hump;
	osDelay(1000);
 8001074:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001078:	f004 fb3a 	bl	80056f0 <osDelay>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800107c:	2001      	movs	r0, #1
 800107e:	f004 fb37 	bl	80056f0 <osDelay>
    osDelay(1000);
 8001082:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001086:	f004 fb33 	bl	80056f0 <osDelay>
    DHT11_ReadAll(&Temp,&Hump);
 800108a:	f107 0208 	add.w	r2, r7, #8
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f002 fe49 	bl	8003d2c <DHT11_ReadAll>
    Slave_Modbus.Device->Reg[0].Value = (uint16_t)Temp;
 800109a:	edd7 7a03 	vldr	s15, [r7, #12]
 800109e:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <StartDefaultTask+0x5c>)
 80010a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80010a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a8:	ee17 2a90 	vmov	r2, s15
 80010ac:	b292      	uxth	r2, r2
 80010ae:	805a      	strh	r2, [r3, #2]
    Slave_Modbus.Device->Reg[1].Value = (uint16_t)Hump;
 80010b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <StartDefaultTask+0x5c>)
 80010b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80010ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010be:	ee17 2a90 	vmov	r2, s15
 80010c2:	b292      	uxth	r2, r2
 80010c4:	80da      	strh	r2, [r3, #6]
    osDelay(1);
 80010c6:	e7d9      	b.n	800107c <StartDefaultTask+0x10>
 80010c8:	20004cb8 	.word	0x20004cb8

080010cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010d0:	b672      	cpsid	i
}
 80010d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <Error_Handler+0x8>
	...

080010d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_MspInit+0x54>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	4a11      	ldr	r2, [pc, #68]	; (800112c <HAL_MspInit+0x54>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	; 0x44
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_MspInit+0x54>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_MspInit+0x54>)
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <HAL_MspInit+0x54>)
 8001104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_MspInit+0x54>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	210f      	movs	r1, #15
 800111a:	f06f 0001 	mvn.w	r0, #1
 800111e:	f000 fa46 	bl	80015ae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800

08001130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a15      	ldr	r2, [pc, #84]	; (8001194 <HAL_TIM_Base_MspInit+0x64>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10e      	bne.n	8001160 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_TIM_Base_MspInit+0x68>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a13      	ldr	r2, [pc, #76]	; (8001198 <HAL_TIM_Base_MspInit+0x68>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_TIM_Base_MspInit+0x68>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800115e:	e012      	b.n	8001186 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM5)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <HAL_TIM_Base_MspInit+0x6c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d10d      	bne.n	8001186 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <HAL_TIM_Base_MspInit+0x68>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a09      	ldr	r2, [pc, #36]	; (8001198 <HAL_TIM_Base_MspInit+0x68>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <HAL_TIM_Base_MspInit+0x68>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40010000 	.word	0x40010000
 8001198:	40023800 	.word	0x40023800
 800119c:	40000c00 	.word	0x40000c00

080011a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a1d      	ldr	r2, [pc, #116]	; (8001234 <HAL_UART_MspInit+0x94>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d133      	bne.n	800122a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <HAL_UART_MspInit+0x98>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a1b      	ldr	r2, [pc, #108]	; (8001238 <HAL_UART_MspInit+0x98>)
 80011cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_UART_MspInit+0x98>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_UART_MspInit+0x98>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a14      	ldr	r2, [pc, #80]	; (8001238 <HAL_UART_MspInit+0x98>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_UART_MspInit+0x98>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011fa:	230c      	movs	r3, #12
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800120a:	2307      	movs	r3, #7
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4809      	ldr	r0, [pc, #36]	; (800123c <HAL_UART_MspInit+0x9c>)
 8001216:	f000 fa93 	bl	8001740 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	2105      	movs	r1, #5
 800121e:	2026      	movs	r0, #38	; 0x26
 8001220:	f000 f9c5 	bl	80015ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001224:	2026      	movs	r0, #38	; 0x26
 8001226:	f000 f9de 	bl	80015e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800122a:	bf00      	nop
 800122c:	3728      	adds	r7, #40	; 0x28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40004400 	.word	0x40004400
 8001238:	40023800 	.word	0x40023800
 800123c:	40020000 	.word	0x40020000

08001240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <NMI_Handler+0x4>

08001246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <HardFault_Handler+0x4>

0800124c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <MemManage_Handler+0x4>

08001252 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <BusFault_Handler+0x4>

08001258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800125c:	e7fe      	b.n	800125c <UsageFault_Handler+0x4>

0800125e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001270:	f000 f8a2 	bl	80013b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001274:	f006 f998 	bl	80075a8 <xTaskGetSchedulerState>
 8001278:	4603      	mov	r3, r0
 800127a:	2b01      	cmp	r3, #1
 800127c:	d001      	beq.n	8001282 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800127e:	f007 facb 	bl	8008818 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <USART2_IRQHandler+0x10>)
 800128e:	f001 fd43 	bl	8002d18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20004b84 	.word	0x20004b84

0800129c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <SystemInit+0x20>)
 80012a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012a6:	4a05      	ldr	r2, [pc, #20]	; (80012bc <SystemInit+0x20>)
 80012a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012c6:	490e      	ldr	r1, [pc, #56]	; (8001300 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012c8:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012dc:	4c0b      	ldr	r4, [pc, #44]	; (800130c <LoopFillZerobss+0x26>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012ea:	f7ff ffd7 	bl	800129c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ee:	f007 fd0d 	bl	8008d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012f2:	f7ff fd07 	bl	8000d04 <main>
  bx  lr    
 80012f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001300:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001304:	080090ac 	.word	0x080090ac
  ldr r2, =_sbss
 8001308:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800130c:	20004e50 	.word	0x20004e50

08001310 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC_IRQHandler>
	...

08001314 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_Init+0x40>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <HAL_Init+0x40>)
 800131e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001322:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <HAL_Init+0x40>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <HAL_Init+0x40>)
 800132a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800132e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_Init+0x40>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_Init+0x40>)
 8001336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133c:	2003      	movs	r0, #3
 800133e:	f000 f92b 	bl	8001598 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001342:	200f      	movs	r0, #15
 8001344:	f000 f808 	bl	8001358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001348:	f7ff fec6 	bl	80010d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023c00 	.word	0x40023c00

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_InitTick+0x54>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x58>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f943 	bl	8001602 <HAL_SYSTICK_Config>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e00e      	b.n	80013a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	d80a      	bhi.n	80013a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138c:	2200      	movs	r2, #0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f000 f90b 	bl	80015ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_InitTick+0x5c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000000 	.word	0x20000000
 80013b0:	20000008 	.word	0x20000008
 80013b4:	20000004 	.word	0x20000004

080013b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_IncTick+0x20>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x24>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_IncTick+0x24>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000008 	.word	0x20000008
 80013dc:	20004bc8 	.word	0x20004bc8

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20004bc8 	.word	0x20004bc8

080013f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001408:	4b0c      	ldr	r3, [pc, #48]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001414:	4013      	ands	r3, r2
 8001416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142a:	4a04      	ldr	r2, [pc, #16]	; (800143c <__NVIC_SetPriorityGrouping+0x44>)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	60d3      	str	r3, [r2, #12]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4907      	ldr	r1, [pc, #28]	; (8001494 <__NVIC_EnableIRQ+0x38>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001564:	d301      	bcc.n	800156a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <SysTick_Config+0x40>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001572:	210f      	movs	r1, #15
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f7ff ff8e 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x40>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x40>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff29 	bl	80013f8 <__NVIC_SetPriorityGrouping>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	4603      	mov	r3, r0
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c0:	f7ff ff3e 	bl	8001440 <__NVIC_GetPriorityGrouping>
 80015c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	6978      	ldr	r0, [r7, #20]
 80015cc:	f7ff ff8e 	bl	80014ec <NVIC_EncodePriority>
 80015d0:	4602      	mov	r2, r0
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff5d 	bl	8001498 <__NVIC_SetPriority>
}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff ff31 	bl	800145c <__NVIC_EnableIRQ>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffa2 	bl	8001554 <SysTick_Config>
 8001610:	4603      	mov	r3, r0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b084      	sub	sp, #16
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001626:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff feda 	bl	80013e0 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d008      	beq.n	800164c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2280      	movs	r2, #128	; 0x80
 800163e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e052      	b.n	80016f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0216 	bic.w	r2, r2, #22
 800165a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800166a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	2b00      	cmp	r3, #0
 8001672:	d103      	bne.n	800167c <HAL_DMA_Abort+0x62>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001678:	2b00      	cmp	r3, #0
 800167a:	d007      	beq.n	800168c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f022 0208 	bic.w	r2, r2, #8
 800168a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0201 	bic.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800169c:	e013      	b.n	80016c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800169e:	f7ff fe9f 	bl	80013e0 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d90c      	bls.n	80016c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2220      	movs	r2, #32
 80016b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2203      	movs	r2, #3
 80016b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e015      	b.n	80016f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1e4      	bne.n	800169e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d8:	223f      	movs	r2, #63	; 0x3f
 80016da:	409a      	lsls	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d004      	beq.n	8001718 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2280      	movs	r2, #128	; 0x80
 8001712:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e00c      	b.n	8001732 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2205      	movs	r2, #5
 800171c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	e16b      	b.n	8001a34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800175c:	2201      	movs	r2, #1
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	429a      	cmp	r2, r3
 8001776:	f040 815a 	bne.w	8001a2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 0303 	and.w	r3, r3, #3
 8001782:	2b01      	cmp	r3, #1
 8001784:	d005      	beq.n	8001792 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178e:	2b02      	cmp	r3, #2
 8001790:	d130      	bne.n	80017f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	2203      	movs	r2, #3
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017c8:	2201      	movs	r2, #1
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	f003 0201 	and.w	r2, r3, #1
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d017      	beq.n	8001830 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	2203      	movs	r2, #3
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4013      	ands	r3, r2
 8001816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d123      	bne.n	8001884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	08da      	lsrs	r2, r3, #3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3208      	adds	r2, #8
 8001844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	220f      	movs	r2, #15
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	08da      	lsrs	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3208      	adds	r2, #8
 800187e:	69b9      	ldr	r1, [r7, #24]
 8001880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0203 	and.w	r2, r3, #3
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80b4 	beq.w	8001a2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b60      	ldr	r3, [pc, #384]	; (8001a4c <HAL_GPIO_Init+0x30c>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a5f      	ldr	r2, [pc, #380]	; (8001a4c <HAL_GPIO_Init+0x30c>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b5d      	ldr	r3, [pc, #372]	; (8001a4c <HAL_GPIO_Init+0x30c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018e2:	4a5b      	ldr	r2, [pc, #364]	; (8001a50 <HAL_GPIO_Init+0x310>)
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3302      	adds	r3, #2
 80018ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a52      	ldr	r2, [pc, #328]	; (8001a54 <HAL_GPIO_Init+0x314>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d02b      	beq.n	8001966 <HAL_GPIO_Init+0x226>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a51      	ldr	r2, [pc, #324]	; (8001a58 <HAL_GPIO_Init+0x318>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d025      	beq.n	8001962 <HAL_GPIO_Init+0x222>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a50      	ldr	r2, [pc, #320]	; (8001a5c <HAL_GPIO_Init+0x31c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d01f      	beq.n	800195e <HAL_GPIO_Init+0x21e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4f      	ldr	r2, [pc, #316]	; (8001a60 <HAL_GPIO_Init+0x320>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d019      	beq.n	800195a <HAL_GPIO_Init+0x21a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4e      	ldr	r2, [pc, #312]	; (8001a64 <HAL_GPIO_Init+0x324>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d013      	beq.n	8001956 <HAL_GPIO_Init+0x216>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4d      	ldr	r2, [pc, #308]	; (8001a68 <HAL_GPIO_Init+0x328>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d00d      	beq.n	8001952 <HAL_GPIO_Init+0x212>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4c      	ldr	r2, [pc, #304]	; (8001a6c <HAL_GPIO_Init+0x32c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d007      	beq.n	800194e <HAL_GPIO_Init+0x20e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4b      	ldr	r2, [pc, #300]	; (8001a70 <HAL_GPIO_Init+0x330>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d101      	bne.n	800194a <HAL_GPIO_Init+0x20a>
 8001946:	2307      	movs	r3, #7
 8001948:	e00e      	b.n	8001968 <HAL_GPIO_Init+0x228>
 800194a:	2308      	movs	r3, #8
 800194c:	e00c      	b.n	8001968 <HAL_GPIO_Init+0x228>
 800194e:	2306      	movs	r3, #6
 8001950:	e00a      	b.n	8001968 <HAL_GPIO_Init+0x228>
 8001952:	2305      	movs	r3, #5
 8001954:	e008      	b.n	8001968 <HAL_GPIO_Init+0x228>
 8001956:	2304      	movs	r3, #4
 8001958:	e006      	b.n	8001968 <HAL_GPIO_Init+0x228>
 800195a:	2303      	movs	r3, #3
 800195c:	e004      	b.n	8001968 <HAL_GPIO_Init+0x228>
 800195e:	2302      	movs	r3, #2
 8001960:	e002      	b.n	8001968 <HAL_GPIO_Init+0x228>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <HAL_GPIO_Init+0x228>
 8001966:	2300      	movs	r3, #0
 8001968:	69fa      	ldr	r2, [r7, #28]
 800196a:	f002 0203 	and.w	r2, r2, #3
 800196e:	0092      	lsls	r2, r2, #2
 8001970:	4093      	lsls	r3, r2
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001978:	4935      	ldr	r1, [pc, #212]	; (8001a50 <HAL_GPIO_Init+0x310>)
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	089b      	lsrs	r3, r3, #2
 800197e:	3302      	adds	r3, #2
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001986:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <HAL_GPIO_Init+0x334>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019aa:	4a32      	ldr	r2, [pc, #200]	; (8001a74 <HAL_GPIO_Init+0x334>)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019b0:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <HAL_GPIO_Init+0x334>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d4:	4a27      	ldr	r2, [pc, #156]	; (8001a74 <HAL_GPIO_Init+0x334>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019da:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <HAL_GPIO_Init+0x334>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019fe:	4a1d      	ldr	r2, [pc, #116]	; (8001a74 <HAL_GPIO_Init+0x334>)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_GPIO_Init+0x334>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a28:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <HAL_GPIO_Init+0x334>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3301      	adds	r3, #1
 8001a32:	61fb      	str	r3, [r7, #28]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	2b0f      	cmp	r3, #15
 8001a38:	f67f ae90 	bls.w	800175c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3724      	adds	r7, #36	; 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40013800 	.word	0x40013800
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40020400 	.word	0x40020400
 8001a5c:	40020800 	.word	0x40020800
 8001a60:	40020c00 	.word	0x40020c00
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40021400 	.word	0x40021400
 8001a6c:	40021800 	.word	0x40021800
 8001a70:	40021c00 	.word	0x40021c00
 8001a74:	40013c00 	.word	0x40013c00

08001a78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	887b      	ldrh	r3, [r7, #2]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a90:	2301      	movs	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	e001      	b.n	8001a9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab8:	787b      	ldrb	r3, [r7, #1]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ac4:	e003      	b.n	8001ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	041a      	lsls	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	619a      	str	r2, [r3, #24]
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e264      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d075      	beq.n	8001be6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001afa:	4ba3      	ldr	r3, [pc, #652]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d00c      	beq.n	8001b20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b06:	4ba0      	ldr	r3, [pc, #640]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d112      	bne.n	8001b38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b12:	4b9d      	ldr	r3, [pc, #628]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b1e:	d10b      	bne.n	8001b38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b20:	4b99      	ldr	r3, [pc, #612]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d05b      	beq.n	8001be4 <HAL_RCC_OscConfig+0x108>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d157      	bne.n	8001be4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e23f      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b40:	d106      	bne.n	8001b50 <HAL_RCC_OscConfig+0x74>
 8001b42:	4b91      	ldr	r3, [pc, #580]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a90      	ldr	r2, [pc, #576]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e01d      	b.n	8001b8c <HAL_RCC_OscConfig+0xb0>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x98>
 8001b5a:	4b8b      	ldr	r3, [pc, #556]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a8a      	ldr	r2, [pc, #552]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b88      	ldr	r3, [pc, #544]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a87      	ldr	r2, [pc, #540]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0xb0>
 8001b74:	4b84      	ldr	r3, [pc, #528]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a83      	ldr	r2, [pc, #524]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b81      	ldr	r3, [pc, #516]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a80      	ldr	r2, [pc, #512]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d013      	beq.n	8001bbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fc24 	bl	80013e0 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fc20 	bl	80013e0 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e204      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	4b76      	ldr	r3, [pc, #472]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0xc0>
 8001bba:	e014      	b.n	8001be6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fc10 	bl	80013e0 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fc0c 	bl	80013e0 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e1f0      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd6:	4b6c      	ldr	r3, [pc, #432]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0xe8>
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d063      	beq.n	8001cba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bf2:	4b65      	ldr	r3, [pc, #404]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00b      	beq.n	8001c16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfe:	4b62      	ldr	r3, [pc, #392]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d11c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0a:	4b5f      	ldr	r3, [pc, #380]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d116      	bne.n	8001c44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c16:	4b5c      	ldr	r3, [pc, #368]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d005      	beq.n	8001c2e <HAL_RCC_OscConfig+0x152>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d001      	beq.n	8001c2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e1c4      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2e:	4b56      	ldr	r3, [pc, #344]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4952      	ldr	r1, [pc, #328]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c42:	e03a      	b.n	8001cba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d020      	beq.n	8001c8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c4c:	4b4f      	ldr	r3, [pc, #316]	; (8001d8c <HAL_RCC_OscConfig+0x2b0>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7ff fbc5 	bl	80013e0 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c5a:	f7ff fbc1 	bl	80013e0 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e1a5      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6c:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c78:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4940      	ldr	r1, [pc, #256]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
 8001c8c:	e015      	b.n	8001cba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8e:	4b3f      	ldr	r3, [pc, #252]	; (8001d8c <HAL_RCC_OscConfig+0x2b0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff fba4 	bl	80013e0 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fba0 	bl	80013e0 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e184      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cae:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d030      	beq.n	8001d28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d016      	beq.n	8001cfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cce:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <HAL_RCC_OscConfig+0x2b4>)
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fb84 	bl	80013e0 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fb80 	bl	80013e0 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e164      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x200>
 8001cfa:	e015      	b.n	8001d28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cfc:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <HAL_RCC_OscConfig+0x2b4>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d02:	f7ff fb6d 	bl	80013e0 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fb69 	bl	80013e0 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e14d      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 80a0 	beq.w	8001e76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10f      	bne.n	8001d66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d62:	2301      	movs	r3, #1
 8001d64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d66:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_RCC_OscConfig+0x2b8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d121      	bne.n	8001db6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_RCC_OscConfig+0x2b8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <HAL_RCC_OscConfig+0x2b8>)
 8001d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7e:	f7ff fb2f 	bl	80013e0 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	e011      	b.n	8001daa <HAL_RCC_OscConfig+0x2ce>
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	42470000 	.word	0x42470000
 8001d90:	42470e80 	.word	0x42470e80
 8001d94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d98:	f7ff fb22 	bl	80013e0 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e106      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001daa:	4b85      	ldr	r3, [pc, #532]	; (8001fc0 <HAL_RCC_OscConfig+0x4e4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d106      	bne.n	8001dcc <HAL_RCC_OscConfig+0x2f0>
 8001dbe:	4b81      	ldr	r3, [pc, #516]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a80      	ldr	r2, [pc, #512]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dca:	e01c      	b.n	8001e06 <HAL_RCC_OscConfig+0x32a>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d10c      	bne.n	8001dee <HAL_RCC_OscConfig+0x312>
 8001dd4:	4b7b      	ldr	r3, [pc, #492]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	4a7a      	ldr	r2, [pc, #488]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	6713      	str	r3, [r2, #112]	; 0x70
 8001de0:	4b78      	ldr	r3, [pc, #480]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	4a77      	ldr	r2, [pc, #476]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6713      	str	r3, [r2, #112]	; 0x70
 8001dec:	e00b      	b.n	8001e06 <HAL_RCC_OscConfig+0x32a>
 8001dee:	4b75      	ldr	r3, [pc, #468]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df2:	4a74      	ldr	r2, [pc, #464]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001df4:	f023 0301 	bic.w	r3, r3, #1
 8001df8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfa:	4b72      	ldr	r3, [pc, #456]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfe:	4a71      	ldr	r2, [pc, #452]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001e00:	f023 0304 	bic.w	r3, r3, #4
 8001e04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d015      	beq.n	8001e3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0e:	f7ff fae7 	bl	80013e0 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7ff fae3 	bl	80013e0 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e0c5      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e2c:	4b65      	ldr	r3, [pc, #404]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0ee      	beq.n	8001e16 <HAL_RCC_OscConfig+0x33a>
 8001e38:	e014      	b.n	8001e64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fad1 	bl	80013e0 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	e00a      	b.n	8001e58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e42:	f7ff facd 	bl	80013e0 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e0af      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	4b5a      	ldr	r3, [pc, #360]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1ee      	bne.n	8001e42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d105      	bne.n	8001e76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4b56      	ldr	r3, [pc, #344]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a55      	ldr	r2, [pc, #340]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 809b 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e80:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d05c      	beq.n	8001f46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d141      	bne.n	8001f18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b4c      	ldr	r3, [pc, #304]	; (8001fc8 <HAL_RCC_OscConfig+0x4ec>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7ff faa1 	bl	80013e0 <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea2:	f7ff fa9d 	bl	80013e0 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e081      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb4:	4b43      	ldr	r3, [pc, #268]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69da      	ldr	r2, [r3, #28]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	019b      	lsls	r3, r3, #6
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	085b      	lsrs	r3, r3, #1
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	041b      	lsls	r3, r3, #16
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	061b      	lsls	r3, r3, #24
 8001ee4:	4937      	ldr	r1, [pc, #220]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eea:	4b37      	ldr	r3, [pc, #220]	; (8001fc8 <HAL_RCC_OscConfig+0x4ec>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fa76 	bl	80013e0 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7ff fa72 	bl	80013e0 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e056      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0a:	4b2e      	ldr	r3, [pc, #184]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x41c>
 8001f16:	e04e      	b.n	8001fb6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f18:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <HAL_RCC_OscConfig+0x4ec>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fa5f 	bl	80013e0 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f26:	f7ff fa5b 	bl	80013e0 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e03f      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x44a>
 8001f44:	e037      	b.n	8001fb6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e032      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <HAL_RCC_OscConfig+0x4e8>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d028      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d121      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d11a      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f7c:	68fa      	ldr	r2, [r7, #12]
 8001f7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f82:	4013      	ands	r3, r2
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f88:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d111      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f98:	085b      	lsrs	r3, r3, #1
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d107      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	42470060 	.word	0x42470060

08001fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0cc      	b.n	800217a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b68      	ldr	r3, [pc, #416]	; (8002184 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d90c      	bls.n	8002008 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b65      	ldr	r3, [pc, #404]	; (8002184 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff6:	4b63      	ldr	r3, [pc, #396]	; (8002184 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	429a      	cmp	r2, r3
 8002002:	d001      	beq.n	8002008 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e0b8      	b.n	800217a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d020      	beq.n	8002056 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002020:	4b59      	ldr	r3, [pc, #356]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4a58      	ldr	r2, [pc, #352]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800202a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002038:	4b53      	ldr	r3, [pc, #332]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	4a52      	ldr	r2, [pc, #328]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002042:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002044:	4b50      	ldr	r3, [pc, #320]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	494d      	ldr	r1, [pc, #308]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	4313      	orrs	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d044      	beq.n	80020ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d107      	bne.n	800207a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	4b47      	ldr	r3, [pc, #284]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d119      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e07f      	b.n	800217a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d003      	beq.n	800208a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002086:	2b03      	cmp	r3, #3
 8002088:	d107      	bne.n	800209a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208a:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e06f      	b.n	800217a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209a:	4b3b      	ldr	r3, [pc, #236]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e067      	b.n	800217a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020aa:	4b37      	ldr	r3, [pc, #220]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f023 0203 	bic.w	r2, r3, #3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4934      	ldr	r1, [pc, #208]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 80020b8:	4313      	orrs	r3, r2
 80020ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020bc:	f7ff f990 	bl	80013e0 <HAL_GetTick>
 80020c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	e00a      	b.n	80020da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c4:	f7ff f98c 	bl	80013e0 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e04f      	b.n	800217a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 020c 	and.w	r2, r3, #12
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d1eb      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020ec:	4b25      	ldr	r3, [pc, #148]	; (8002184 <HAL_RCC_ClockConfig+0x1b8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d20c      	bcs.n	8002114 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <HAL_RCC_ClockConfig+0x1b8>)
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <HAL_RCC_ClockConfig+0x1b8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e032      	b.n	800217a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4916      	ldr	r1, [pc, #88]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	490e      	ldr	r1, [pc, #56]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	4313      	orrs	r3, r2
 8002150:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002152:	f000 f821 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8002156:	4602      	mov	r2, r0
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	490a      	ldr	r1, [pc, #40]	; (800218c <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	5ccb      	ldrb	r3, [r1, r3]
 8002166:	fa22 f303 	lsr.w	r3, r2, r3
 800216a:	4a09      	ldr	r2, [pc, #36]	; (8002190 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x1c8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff f8f0 	bl	8001358 <HAL_InitTick>

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40023c00 	.word	0x40023c00
 8002188:	40023800 	.word	0x40023800
 800218c:	08008fd0 	.word	0x08008fd0
 8002190:	20000000 	.word	0x20000000
 8002194:	20000004 	.word	0x20000004

08002198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002198:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	2300      	movs	r3, #0
 80021aa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021b0:	4b67      	ldr	r3, [pc, #412]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d00d      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x40>
 80021bc:	2b08      	cmp	r3, #8
 80021be:	f200 80bd 	bhi.w	800233c <HAL_RCC_GetSysClockFreq+0x1a4>
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0x34>
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d003      	beq.n	80021d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ca:	e0b7      	b.n	800233c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021cc:	4b61      	ldr	r3, [pc, #388]	; (8002354 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021ce:	60bb      	str	r3, [r7, #8]
       break;
 80021d0:	e0b7      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021d2:	4b61      	ldr	r3, [pc, #388]	; (8002358 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80021d4:	60bb      	str	r3, [r7, #8]
      break;
 80021d6:	e0b4      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021d8:	4b5d      	ldr	r3, [pc, #372]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021e2:	4b5b      	ldr	r3, [pc, #364]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d04d      	beq.n	800228a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ee:	4b58      	ldr	r3, [pc, #352]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	099b      	lsrs	r3, r3, #6
 80021f4:	461a      	mov	r2, r3
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021fe:	f04f 0100 	mov.w	r1, #0
 8002202:	ea02 0800 	and.w	r8, r2, r0
 8002206:	ea03 0901 	and.w	r9, r3, r1
 800220a:	4640      	mov	r0, r8
 800220c:	4649      	mov	r1, r9
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	014b      	lsls	r3, r1, #5
 8002218:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800221c:	0142      	lsls	r2, r0, #5
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	ebb0 0008 	subs.w	r0, r0, r8
 8002226:	eb61 0109 	sbc.w	r1, r1, r9
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	018b      	lsls	r3, r1, #6
 8002234:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002238:	0182      	lsls	r2, r0, #6
 800223a:	1a12      	subs	r2, r2, r0
 800223c:	eb63 0301 	sbc.w	r3, r3, r1
 8002240:	f04f 0000 	mov.w	r0, #0
 8002244:	f04f 0100 	mov.w	r1, #0
 8002248:	00d9      	lsls	r1, r3, #3
 800224a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800224e:	00d0      	lsls	r0, r2, #3
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	eb12 0208 	adds.w	r2, r2, r8
 8002258:	eb43 0309 	adc.w	r3, r3, r9
 800225c:	f04f 0000 	mov.w	r0, #0
 8002260:	f04f 0100 	mov.w	r1, #0
 8002264:	0259      	lsls	r1, r3, #9
 8002266:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800226a:	0250      	lsls	r0, r2, #9
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	461a      	mov	r2, r3
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	f7fe fbc6 	bl	8000a0c <__aeabi_uldivmod>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4613      	mov	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	e04a      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800228a:	4b31      	ldr	r3, [pc, #196]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	099b      	lsrs	r3, r3, #6
 8002290:	461a      	mov	r2, r3
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	f240 10ff 	movw	r0, #511	; 0x1ff
 800229a:	f04f 0100 	mov.w	r1, #0
 800229e:	ea02 0400 	and.w	r4, r2, r0
 80022a2:	ea03 0501 	and.w	r5, r3, r1
 80022a6:	4620      	mov	r0, r4
 80022a8:	4629      	mov	r1, r5
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	014b      	lsls	r3, r1, #5
 80022b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022b8:	0142      	lsls	r2, r0, #5
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	1b00      	subs	r0, r0, r4
 80022c0:	eb61 0105 	sbc.w	r1, r1, r5
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	f04f 0300 	mov.w	r3, #0
 80022cc:	018b      	lsls	r3, r1, #6
 80022ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022d2:	0182      	lsls	r2, r0, #6
 80022d4:	1a12      	subs	r2, r2, r0
 80022d6:	eb63 0301 	sbc.w	r3, r3, r1
 80022da:	f04f 0000 	mov.w	r0, #0
 80022de:	f04f 0100 	mov.w	r1, #0
 80022e2:	00d9      	lsls	r1, r3, #3
 80022e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022e8:	00d0      	lsls	r0, r2, #3
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	1912      	adds	r2, r2, r4
 80022f0:	eb45 0303 	adc.w	r3, r5, r3
 80022f4:	f04f 0000 	mov.w	r0, #0
 80022f8:	f04f 0100 	mov.w	r1, #0
 80022fc:	0299      	lsls	r1, r3, #10
 80022fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002302:	0290      	lsls	r0, r2, #10
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	461a      	mov	r2, r3
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	f7fe fb7a 	bl	8000a0c <__aeabi_uldivmod>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4613      	mov	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	0c1b      	lsrs	r3, r3, #16
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	3301      	adds	r3, #1
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	fbb2 f3f3 	udiv	r3, r2, r3
 8002338:	60bb      	str	r3, [r7, #8]
      break;
 800233a:	e002      	b.n	8002342 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800233e:	60bb      	str	r3, [r7, #8]
      break;
 8002340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002342:	68bb      	ldr	r3, [r7, #8]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
 8002354:	00f42400 	.word	0x00f42400
 8002358:	007a1200 	.word	0x007a1200

0800235c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <HAL_RCC_GetHCLKFreq+0x14>)
 8002362:	681b      	ldr	r3, [r3, #0]
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000000 	.word	0x20000000

08002374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002378:	f7ff fff0 	bl	800235c <HAL_RCC_GetHCLKFreq>
 800237c:	4602      	mov	r2, r0
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	0a9b      	lsrs	r3, r3, #10
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	4903      	ldr	r1, [pc, #12]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800238a:	5ccb      	ldrb	r3, [r1, r3]
 800238c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40023800 	.word	0x40023800
 8002398:	08008fe0 	.word	0x08008fe0

0800239c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023a0:	f7ff ffdc 	bl	800235c <HAL_RCC_GetHCLKFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	0b5b      	lsrs	r3, r3, #13
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4903      	ldr	r1, [pc, #12]	; (80023c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40023800 	.word	0x40023800
 80023c0:	08008fe0 	.word	0x08008fe0

080023c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e041      	b.n	800245a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe fea0 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2202      	movs	r2, #2
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3304      	adds	r3, #4
 8002400:	4619      	mov	r1, r3
 8002402:	4610      	mov	r0, r2
 8002404:	f000 f95e 	bl	80026c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d001      	beq.n	800247c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e046      	b.n	800250a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a23      	ldr	r2, [pc, #140]	; (8002518 <HAL_TIM_Base_Start+0xb4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d022      	beq.n	80024d4 <HAL_TIM_Base_Start+0x70>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002496:	d01d      	beq.n	80024d4 <HAL_TIM_Base_Start+0x70>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a1f      	ldr	r2, [pc, #124]	; (800251c <HAL_TIM_Base_Start+0xb8>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d018      	beq.n	80024d4 <HAL_TIM_Base_Start+0x70>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1e      	ldr	r2, [pc, #120]	; (8002520 <HAL_TIM_Base_Start+0xbc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d013      	beq.n	80024d4 <HAL_TIM_Base_Start+0x70>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a1c      	ldr	r2, [pc, #112]	; (8002524 <HAL_TIM_Base_Start+0xc0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00e      	beq.n	80024d4 <HAL_TIM_Base_Start+0x70>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a1b      	ldr	r2, [pc, #108]	; (8002528 <HAL_TIM_Base_Start+0xc4>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d009      	beq.n	80024d4 <HAL_TIM_Base_Start+0x70>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a19      	ldr	r2, [pc, #100]	; (800252c <HAL_TIM_Base_Start+0xc8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d004      	beq.n	80024d4 <HAL_TIM_Base_Start+0x70>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a18      	ldr	r2, [pc, #96]	; (8002530 <HAL_TIM_Base_Start+0xcc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d111      	bne.n	80024f8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d010      	beq.n	8002508 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f042 0201 	orr.w	r2, r2, #1
 80024f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f6:	e007      	b.n	8002508 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	40010000 	.word	0x40010000
 800251c:	40000400 	.word	0x40000400
 8002520:	40000800 	.word	0x40000800
 8002524:	40000c00 	.word	0x40000c00
 8002528:	40010400 	.word	0x40010400
 800252c:	40014000 	.word	0x40014000
 8002530:	40001800 	.word	0x40001800

08002534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <HAL_TIM_ConfigClockSource+0x1c>
 800254c:	2302      	movs	r3, #2
 800254e:	e0b4      	b.n	80026ba <HAL_TIM_ConfigClockSource+0x186>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800256e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002588:	d03e      	beq.n	8002608 <HAL_TIM_ConfigClockSource+0xd4>
 800258a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800258e:	f200 8087 	bhi.w	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 8002592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002596:	f000 8086 	beq.w	80026a6 <HAL_TIM_ConfigClockSource+0x172>
 800259a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259e:	d87f      	bhi.n	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 80025a0:	2b70      	cmp	r3, #112	; 0x70
 80025a2:	d01a      	beq.n	80025da <HAL_TIM_ConfigClockSource+0xa6>
 80025a4:	2b70      	cmp	r3, #112	; 0x70
 80025a6:	d87b      	bhi.n	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 80025a8:	2b60      	cmp	r3, #96	; 0x60
 80025aa:	d050      	beq.n	800264e <HAL_TIM_ConfigClockSource+0x11a>
 80025ac:	2b60      	cmp	r3, #96	; 0x60
 80025ae:	d877      	bhi.n	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 80025b0:	2b50      	cmp	r3, #80	; 0x50
 80025b2:	d03c      	beq.n	800262e <HAL_TIM_ConfigClockSource+0xfa>
 80025b4:	2b50      	cmp	r3, #80	; 0x50
 80025b6:	d873      	bhi.n	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 80025b8:	2b40      	cmp	r3, #64	; 0x40
 80025ba:	d058      	beq.n	800266e <HAL_TIM_ConfigClockSource+0x13a>
 80025bc:	2b40      	cmp	r3, #64	; 0x40
 80025be:	d86f      	bhi.n	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 80025c0:	2b30      	cmp	r3, #48	; 0x30
 80025c2:	d064      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x15a>
 80025c4:	2b30      	cmp	r3, #48	; 0x30
 80025c6:	d86b      	bhi.n	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 80025c8:	2b20      	cmp	r3, #32
 80025ca:	d060      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x15a>
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d867      	bhi.n	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d05c      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x15a>
 80025d4:	2b10      	cmp	r3, #16
 80025d6:	d05a      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x15a>
 80025d8:	e062      	b.n	80026a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6899      	ldr	r1, [r3, #8]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f000 f985 	bl	80028f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	609a      	str	r2, [r3, #8]
      break;
 8002606:	e04f      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6899      	ldr	r1, [r3, #8]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f000 f96e 	bl	80028f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800262a:	609a      	str	r2, [r3, #8]
      break;
 800262c:	e03c      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	461a      	mov	r2, r3
 800263c:	f000 f8e2 	bl	8002804 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2150      	movs	r1, #80	; 0x50
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f93b 	bl	80028c2 <TIM_ITRx_SetConfig>
      break;
 800264c:	e02c      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	6859      	ldr	r1, [r3, #4]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	461a      	mov	r2, r3
 800265c:	f000 f901 	bl	8002862 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2160      	movs	r1, #96	; 0x60
 8002666:	4618      	mov	r0, r3
 8002668:	f000 f92b 	bl	80028c2 <TIM_ITRx_SetConfig>
      break;
 800266c:	e01c      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6859      	ldr	r1, [r3, #4]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	461a      	mov	r2, r3
 800267c:	f000 f8c2 	bl	8002804 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2140      	movs	r1, #64	; 0x40
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f91b 	bl	80028c2 <TIM_ITRx_SetConfig>
      break;
 800268c:	e00c      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4619      	mov	r1, r3
 8002698:	4610      	mov	r0, r2
 800269a:	f000 f912 	bl	80028c2 <TIM_ITRx_SetConfig>
      break;
 800269e:	e003      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
      break;
 80026a4:	e000      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a40      	ldr	r2, [pc, #256]	; (80027d8 <TIM_Base_SetConfig+0x114>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d013      	beq.n	8002704 <TIM_Base_SetConfig+0x40>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e2:	d00f      	beq.n	8002704 <TIM_Base_SetConfig+0x40>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a3d      	ldr	r2, [pc, #244]	; (80027dc <TIM_Base_SetConfig+0x118>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d00b      	beq.n	8002704 <TIM_Base_SetConfig+0x40>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a3c      	ldr	r2, [pc, #240]	; (80027e0 <TIM_Base_SetConfig+0x11c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d007      	beq.n	8002704 <TIM_Base_SetConfig+0x40>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a3b      	ldr	r2, [pc, #236]	; (80027e4 <TIM_Base_SetConfig+0x120>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d003      	beq.n	8002704 <TIM_Base_SetConfig+0x40>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a3a      	ldr	r2, [pc, #232]	; (80027e8 <TIM_Base_SetConfig+0x124>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d108      	bne.n	8002716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a2f      	ldr	r2, [pc, #188]	; (80027d8 <TIM_Base_SetConfig+0x114>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d02b      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002724:	d027      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a2c      	ldr	r2, [pc, #176]	; (80027dc <TIM_Base_SetConfig+0x118>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d023      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a2b      	ldr	r2, [pc, #172]	; (80027e0 <TIM_Base_SetConfig+0x11c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01f      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a2a      	ldr	r2, [pc, #168]	; (80027e4 <TIM_Base_SetConfig+0x120>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d01b      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a29      	ldr	r2, [pc, #164]	; (80027e8 <TIM_Base_SetConfig+0x124>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d017      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a28      	ldr	r2, [pc, #160]	; (80027ec <TIM_Base_SetConfig+0x128>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d013      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a27      	ldr	r2, [pc, #156]	; (80027f0 <TIM_Base_SetConfig+0x12c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00f      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a26      	ldr	r2, [pc, #152]	; (80027f4 <TIM_Base_SetConfig+0x130>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00b      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a25      	ldr	r2, [pc, #148]	; (80027f8 <TIM_Base_SetConfig+0x134>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d007      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a24      	ldr	r2, [pc, #144]	; (80027fc <TIM_Base_SetConfig+0x138>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d003      	beq.n	8002776 <TIM_Base_SetConfig+0xb2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a23      	ldr	r2, [pc, #140]	; (8002800 <TIM_Base_SetConfig+0x13c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d108      	bne.n	8002788 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800277c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4313      	orrs	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <TIM_Base_SetConfig+0x114>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d003      	beq.n	80027bc <TIM_Base_SetConfig+0xf8>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a0c      	ldr	r2, [pc, #48]	; (80027e8 <TIM_Base_SetConfig+0x124>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d103      	bne.n	80027c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	615a      	str	r2, [r3, #20]
}
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40010000 	.word	0x40010000
 80027dc:	40000400 	.word	0x40000400
 80027e0:	40000800 	.word	0x40000800
 80027e4:	40000c00 	.word	0x40000c00
 80027e8:	40010400 	.word	0x40010400
 80027ec:	40014000 	.word	0x40014000
 80027f0:	40014400 	.word	0x40014400
 80027f4:	40014800 	.word	0x40014800
 80027f8:	40001800 	.word	0x40001800
 80027fc:	40001c00 	.word	0x40001c00
 8002800:	40002000 	.word	0x40002000

08002804 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	f023 0201 	bic.w	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800282e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f023 030a 	bic.w	r3, r3, #10
 8002840:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	4313      	orrs	r3, r2
 8002848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	621a      	str	r2, [r3, #32]
}
 8002856:	bf00      	nop
 8002858:	371c      	adds	r7, #28
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002862:	b480      	push	{r7}
 8002864:	b087      	sub	sp, #28
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	f023 0210 	bic.w	r2, r3, #16
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800288c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	031b      	lsls	r3, r3, #12
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800289e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	621a      	str	r2, [r3, #32]
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b085      	sub	sp, #20
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	f043 0307 	orr.w	r3, r3, #7
 80028e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	609a      	str	r2, [r3, #8]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002912:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	021a      	lsls	r2, r3, #8
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	431a      	orrs	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4313      	orrs	r3, r2
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	4313      	orrs	r3, r2
 8002924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	609a      	str	r2, [r3, #8]
}
 800292c:	bf00      	nop
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800294c:	2302      	movs	r3, #2
 800294e:	e05a      	b.n	8002a06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a21      	ldr	r2, [pc, #132]	; (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d022      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299c:	d01d      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d018      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1a      	ldr	r2, [pc, #104]	; (8002a20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00e      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a18      	ldr	r2, [pc, #96]	; (8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a17      	ldr	r2, [pc, #92]	; (8002a28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10c      	bne.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	40010000 	.word	0x40010000
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800
 8002a20:	40000c00 	.word	0x40000c00
 8002a24:	40010400 	.word	0x40010400
 8002a28:	40014000 	.word	0x40014000
 8002a2c:	40001800 	.word	0x40001800

08002a30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e03f      	b.n	8002ac2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe fba2 	bl	80011a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2224      	movs	r2, #36	; 0x24
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fe6f 	bl	8003758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b085      	sub	sp, #20
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	d130      	bne.n	8002b46 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <HAL_UART_Transmit_IT+0x26>
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e029      	b.n	8002b48 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_UART_Transmit_IT+0x38>
 8002afe:	2302      	movs	r3, #2
 8002b00:	e022      	b.n	8002b48 <HAL_UART_Transmit_IT+0x7e>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	88fa      	ldrh	r2, [r7, #6]
 8002b14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	88fa      	ldrh	r2, [r7, #6]
 8002b1a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2221      	movs	r2, #33	; 0x21
 8002b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b40:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	e000      	b.n	8002b48 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
  }
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	d11d      	bne.n	8002baa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <HAL_UART_Receive_IT+0x26>
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e016      	b.n	8002bac <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_UART_Receive_IT+0x38>
 8002b88:	2302      	movs	r3, #2
 8002b8a:	e00f      	b.n	8002bac <HAL_UART_Receive_IT+0x58>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002b9a:	88fb      	ldrh	r3, [r7, #6]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 fbed 	bl	8003380 <UART_Start_Receive_IT>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	e000      	b.n	8002bac <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002baa:	2302      	movs	r3, #2
  }
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b09a      	sub	sp, #104	; 0x68
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	330c      	adds	r3, #12
 8002bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bc6:	e853 3f00 	ldrex	r3, [r3]
 8002bca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002bd2:	667b      	str	r3, [r7, #100]	; 0x64
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	330c      	adds	r3, #12
 8002bda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002bdc:	657a      	str	r2, [r7, #84]	; 0x54
 8002bde:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002be2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002be4:	e841 2300 	strex	r3, r2, [r1]
 8002be8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1e5      	bne.n	8002bbc <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3314      	adds	r3, #20
 8002bf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfa:	e853 3f00 	ldrex	r3, [r3]
 8002bfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c02:	f023 0301 	bic.w	r3, r3, #1
 8002c06:	663b      	str	r3, [r7, #96]	; 0x60
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3314      	adds	r3, #20
 8002c0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c10:	643a      	str	r2, [r7, #64]	; 0x40
 8002c12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c18:	e841 2300 	strex	r3, r2, [r1]
 8002c1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1e5      	bne.n	8002bf0 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d119      	bne.n	8002c60 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	330c      	adds	r3, #12
 8002c32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	e853 3f00 	ldrex	r3, [r3]
 8002c3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	f023 0310 	bic.w	r3, r3, #16
 8002c42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c54:	e841 2300 	strex	r3, r2, [r1]
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1e5      	bne.n	8002c2c <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6a:	2b40      	cmp	r3, #64	; 0x40
 8002c6c:	d13f      	bne.n	8002cee <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3314      	adds	r3, #20
 8002c74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c84:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	3314      	adds	r3, #20
 8002c8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c8e:	61ba      	str	r2, [r7, #24]
 8002c90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	6979      	ldr	r1, [r7, #20]
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	e841 2300 	strex	r3, r2, [r1]
 8002c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e5      	bne.n	8002c6e <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d013      	beq.n	8002cd2 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	4a19      	ldr	r2, [pc, #100]	; (8002d14 <HAL_UART_AbortReceive_IT+0x160>)
 8002cb0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fd1f 	bl	80016fa <HAL_DMA_Abort_IT>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d022      	beq.n	8002d08 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4798      	blx	r3
 8002cd0:	e01a      	b.n	8002d08 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 faae 	bl	8003248 <HAL_UART_AbortReceiveCpltCallback>
 8002cec:	e00c      	b.n	8002d08 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 faa0 	bl	8003248 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3768      	adds	r7, #104	; 0x68
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	080034e3 	.word	0x080034e3

08002d18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b0ba      	sub	sp, #232	; 0xe8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10f      	bne.n	8002d7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d009      	beq.n	8002d7e <HAL_UART_IRQHandler+0x66>
 8002d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 fc33 	bl	80035e2 <UART_Receive_IT>
      return;
 8002d7c:	e256      	b.n	800322c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002d7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 80de 	beq.w	8002f44 <HAL_UART_IRQHandler+0x22c>
 8002d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d106      	bne.n	8002da2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 80d1 	beq.w	8002f44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_UART_IRQHandler+0xae>
 8002dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f043 0201 	orr.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <HAL_UART_IRQHandler+0xd2>
 8002dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d005      	beq.n	8002dea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f043 0202 	orr.w	r2, r3, #2
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00b      	beq.n	8002e0e <HAL_UART_IRQHandler+0xf6>
 8002df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d005      	beq.n	8002e0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f043 0204 	orr.w	r2, r3, #4
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d011      	beq.n	8002e3e <HAL_UART_IRQHandler+0x126>
 8002e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d105      	bne.n	8002e32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f043 0208 	orr.w	r2, r3, #8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 81ed 	beq.w	8003222 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_UART_IRQHandler+0x14e>
 8002e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e58:	f003 0320 	and.w	r3, r3, #32
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fbbe 	bl	80035e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e70:	2b40      	cmp	r3, #64	; 0x40
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d103      	bne.n	8002e92 <HAL_UART_IRQHandler+0x17a>
 8002e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d04f      	beq.n	8002f32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 faae 	bl	80033f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b40      	cmp	r3, #64	; 0x40
 8002ea4:	d141      	bne.n	8002f2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	3314      	adds	r3, #20
 8002eac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002eb4:	e853 3f00 	ldrex	r3, [r3]
 8002eb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ebc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3314      	adds	r3, #20
 8002ece:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ed2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ede:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ee2:	e841 2300 	strex	r3, r2, [r1]
 8002ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1d9      	bne.n	8002ea6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d013      	beq.n	8002f22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	4a7d      	ldr	r2, [pc, #500]	; (80030f4 <HAL_UART_IRQHandler+0x3dc>)
 8002f00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe fbf7 	bl	80016fa <HAL_DMA_Abort_IT>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d016      	beq.n	8002f40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f20:	e00e      	b.n	8002f40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f986 	bl	8003234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f28:	e00a      	b.n	8002f40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f982 	bl	8003234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f30:	e006      	b.n	8002f40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f97e 	bl	8003234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f3e:	e170      	b.n	8003222 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f40:	bf00      	nop
    return;
 8002f42:	e16e      	b.n	8003222 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	f040 814a 	bne.w	80031e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8143 	beq.w	80031e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 813c 	beq.w	80031e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8a:	2b40      	cmp	r3, #64	; 0x40
 8002f8c:	f040 80b4 	bne.w	80030f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8140 	beq.w	8003226 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	f080 8139 	bcs.w	8003226 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002fba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc6:	f000 8088 	beq.w	80030da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	330c      	adds	r3, #12
 8002fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fd8:	e853 3f00 	ldrex	r3, [r3]
 8002fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	330c      	adds	r3, #12
 8002ff2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002ff6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003002:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003006:	e841 2300 	strex	r3, r2, [r1]
 800300a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800300e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1d9      	bne.n	8002fca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3314      	adds	r3, #20
 800301c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800301e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003020:	e853 3f00 	ldrex	r3, [r3]
 8003024:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003028:	f023 0301 	bic.w	r3, r3, #1
 800302c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3314      	adds	r3, #20
 8003036:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800303a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800303e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003040:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003042:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003046:	e841 2300 	strex	r3, r2, [r1]
 800304a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800304c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800304e:	2b00      	cmp	r3, #0
 8003050:	d1e1      	bne.n	8003016 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3314      	adds	r3, #20
 8003058:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800305c:	e853 3f00 	ldrex	r3, [r3]
 8003060:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3314      	adds	r3, #20
 8003072:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003076:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003078:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800307c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800307e:	e841 2300 	strex	r3, r2, [r1]
 8003082:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1e3      	bne.n	8003052 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	330c      	adds	r3, #12
 800309e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030a2:	e853 3f00 	ldrex	r3, [r3]
 80030a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80030a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030aa:	f023 0310 	bic.w	r3, r3, #16
 80030ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	330c      	adds	r3, #12
 80030b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80030bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80030be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80030c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030c4:	e841 2300 	strex	r3, r2, [r1]
 80030c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80030ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e3      	bne.n	8003098 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe faa0 	bl	800161a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	4619      	mov	r1, r3
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f8b6 	bl	800325c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030f0:	e099      	b.n	8003226 <HAL_UART_IRQHandler+0x50e>
 80030f2:	bf00      	nop
 80030f4:	080034bb 	.word	0x080034bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003100:	b29b      	uxth	r3, r3
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 808b 	beq.w	800322a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003114:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 8086 	beq.w	800322a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	330c      	adds	r3, #12
 8003124:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003128:	e853 3f00 	ldrex	r3, [r3]
 800312c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800312e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003130:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003134:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	330c      	adds	r3, #12
 800313e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003142:	647a      	str	r2, [r7, #68]	; 0x44
 8003144:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003146:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800314a:	e841 2300 	strex	r3, r2, [r1]
 800314e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1e3      	bne.n	800311e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	3314      	adds	r3, #20
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	e853 3f00 	ldrex	r3, [r3]
 8003164:	623b      	str	r3, [r7, #32]
   return(result);
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3314      	adds	r3, #20
 8003176:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800317a:	633a      	str	r2, [r7, #48]	; 0x30
 800317c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003182:	e841 2300 	strex	r3, r2, [r1]
 8003186:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e3      	bne.n	8003156 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	330c      	adds	r3, #12
 80031a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	e853 3f00 	ldrex	r3, [r3]
 80031aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0310 	bic.w	r3, r3, #16
 80031b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	330c      	adds	r3, #12
 80031bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80031c0:	61fa      	str	r2, [r7, #28]
 80031c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c4:	69b9      	ldr	r1, [r7, #24]
 80031c6:	69fa      	ldr	r2, [r7, #28]
 80031c8:	e841 2300 	strex	r3, r2, [r1]
 80031cc:	617b      	str	r3, [r7, #20]
   return(result);
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e3      	bne.n	800319c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80031d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031d8:	4619      	mov	r1, r3
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f83e 	bl	800325c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031e0:	e023      	b.n	800322a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d009      	beq.n	8003202 <HAL_UART_IRQHandler+0x4ea>
 80031ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 f989 	bl	8003512 <UART_Transmit_IT>
    return;
 8003200:	e014      	b.n	800322c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00e      	beq.n	800322c <HAL_UART_IRQHandler+0x514>
 800320e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f9c9 	bl	80035b2 <UART_EndTransmit_IT>
    return;
 8003220:	e004      	b.n	800322c <HAL_UART_IRQHandler+0x514>
    return;
 8003222:	bf00      	nop
 8003224:	e002      	b.n	800322c <HAL_UART_IRQHandler+0x514>
      return;
 8003226:	bf00      	nop
 8003228:	e000      	b.n	800322c <HAL_UART_IRQHandler+0x514>
      return;
 800322a:	bf00      	nop
  }
}
 800322c:	37e8      	adds	r7, #232	; 0xe8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop

08003234 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_HalfDuplex_EnableTransmitter+0x1a>
 800328a:	2302      	movs	r3, #2
 800328c:	e020      	b.n	80032d0 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2224      	movs	r2, #36	; 0x24
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f023 030c 	bic.w	r3, r3, #12
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f043 0308 	orr.w	r3, r3, #8
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_HalfDuplex_EnableReceiver+0x1a>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e020      	b.n	8003338 <HAL_HalfDuplex_EnableReceiver+0x5c>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2224      	movs	r2, #36	; 0x24
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f023 030c 	bic.w	r3, r3, #12
 8003314:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f043 0304 	orr.w	r3, r3, #4
 800331c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	2300      	movs	r3, #0
 8003352:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335a:	b2db      	uxtb	r3, r3
 800335c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003364:	b2db      	uxtb	r3, r3
 8003366:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	b2da      	uxtb	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	4313      	orrs	r3, r2
 8003372:	b2db      	uxtb	r3, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	4613      	mov	r3, r2
 800338c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	88fa      	ldrh	r2, [r7, #6]
 8003398:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	88fa      	ldrh	r2, [r7, #6]
 800339e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2222      	movs	r2, #34	; 0x22
 80033aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695a      	ldr	r2, [r3, #20]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0220 	orr.w	r2, r2, #32
 80033e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b095      	sub	sp, #84	; 0x54
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	330c      	adds	r3, #12
 8003402:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800341c:	643a      	str	r2, [r7, #64]	; 0x40
 800341e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800342a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e5      	bne.n	80033fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3314      	adds	r3, #20
 8003436:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	64bb      	str	r3, [r7, #72]	; 0x48
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3314      	adds	r3, #20
 800344e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003450:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003458:	e841 2300 	strex	r3, r2, [r1]
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e5      	bne.n	8003430 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	2b01      	cmp	r3, #1
 800346a:	d119      	bne.n	80034a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	e853 3f00 	ldrex	r3, [r3]
 800347a:	60bb      	str	r3, [r7, #8]
   return(result);
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f023 0310 	bic.w	r3, r3, #16
 8003482:	647b      	str	r3, [r7, #68]	; 0x44
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800348c:	61ba      	str	r2, [r7, #24]
 800348e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6979      	ldr	r1, [r7, #20]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	613b      	str	r3, [r7, #16]
   return(result);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e5      	bne.n	800346c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80034ae:	bf00      	nop
 80034b0:	3754      	adds	r7, #84	; 0x54
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff fead 	bl	8003234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034da:	bf00      	nop
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b084      	sub	sp, #16
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ee:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff fe9f 	bl	8003248 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800350a:	bf00      	nop
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b21      	cmp	r3, #33	; 0x21
 8003524:	d13e      	bne.n	80035a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800352e:	d114      	bne.n	800355a <UART_Transmit_IT+0x48>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d110      	bne.n	800355a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800354c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	1c9a      	adds	r2, r3, #2
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	621a      	str	r2, [r3, #32]
 8003558:	e008      	b.n	800356c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	1c59      	adds	r1, r3, #1
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6211      	str	r1, [r2, #32]
 8003564:	781a      	ldrb	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29b      	uxth	r3, r3
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	4619      	mov	r1, r3
 800357a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10f      	bne.n	80035a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800358e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800359e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	e000      	b.n	80035a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
  }
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f001 fed4 	bl	8005380 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b08c      	sub	sp, #48	; 0x30
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b22      	cmp	r3, #34	; 0x22
 80035f4:	f040 80ab 	bne.w	800374e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003600:	d117      	bne.n	8003632 <UART_Receive_IT+0x50>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d113      	bne.n	8003632 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800360a:	2300      	movs	r3, #0
 800360c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	b29b      	uxth	r3, r3
 800361c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003620:	b29a      	uxth	r2, r3
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	1c9a      	adds	r2, r3, #2
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	629a      	str	r2, [r3, #40]	; 0x28
 8003630:	e026      	b.n	8003680 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003638:	2300      	movs	r3, #0
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003644:	d007      	beq.n	8003656 <UART_Receive_IT+0x74>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10a      	bne.n	8003664 <UART_Receive_IT+0x82>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003660:	701a      	strb	r2, [r3, #0]
 8003662:	e008      	b.n	8003676 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003670:	b2da      	uxtb	r2, r3
 8003672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003674:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29b      	uxth	r3, r3
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	4619      	mov	r1, r3
 800368e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003690:	2b00      	cmp	r3, #0
 8003692:	d15a      	bne.n	800374a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0220 	bic.w	r2, r2, #32
 80036a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d135      	bne.n	8003740 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	330c      	adds	r3, #12
 80036e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	e853 3f00 	ldrex	r3, [r3]
 80036e8:	613b      	str	r3, [r7, #16]
   return(result);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f023 0310 	bic.w	r3, r3, #16
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
 80036f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fa:	623a      	str	r2, [r7, #32]
 80036fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	69f9      	ldr	r1, [r7, #28]
 8003700:	6a3a      	ldr	r2, [r7, #32]
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	61bb      	str	r3, [r7, #24]
   return(result);
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e5      	bne.n	80036da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b10      	cmp	r3, #16
 800371a:	d10a      	bne.n	8003732 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800371c:	2300      	movs	r3, #0
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003736:	4619      	mov	r1, r3
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7ff fd8f 	bl	800325c <HAL_UARTEx_RxEventCallback>
 800373e:	e002      	b.n	8003746 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f001 fe5b 	bl	80053fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e002      	b.n	8003750 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	e000      	b.n	8003750 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800374e:	2302      	movs	r3, #2
  }
}
 8003750:	4618      	mov	r0, r3
 8003752:	3730      	adds	r7, #48	; 0x30
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800375c:	b09f      	sub	sp, #124	; 0x7c
 800375e:	af00      	add	r7, sp, #0
 8003760:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800376c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376e:	68d9      	ldr	r1, [r3, #12]
 8003770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	ea40 0301 	orr.w	r3, r0, r1
 8003778:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800377a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	431a      	orrs	r2, r3
 8003784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	431a      	orrs	r2, r3
 800378a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	4313      	orrs	r3, r2
 8003790:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800379c:	f021 010c 	bic.w	r1, r1, #12
 80037a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037a6:	430b      	orrs	r3, r1
 80037a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80037b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b6:	6999      	ldr	r1, [r3, #24]
 80037b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	ea40 0301 	orr.w	r3, r0, r1
 80037c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	4bc5      	ldr	r3, [pc, #788]	; (8003adc <UART_SetConfig+0x384>)
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d004      	beq.n	80037d6 <UART_SetConfig+0x7e>
 80037cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4bc3      	ldr	r3, [pc, #780]	; (8003ae0 <UART_SetConfig+0x388>)
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d103      	bne.n	80037de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037d6:	f7fe fde1 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 80037da:	6778      	str	r0, [r7, #116]	; 0x74
 80037dc:	e002      	b.n	80037e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037de:	f7fe fdc9 	bl	8002374 <HAL_RCC_GetPCLK1Freq>
 80037e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ec:	f040 80b6 	bne.w	800395c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f2:	461c      	mov	r4, r3
 80037f4:	f04f 0500 	mov.w	r5, #0
 80037f8:	4622      	mov	r2, r4
 80037fa:	462b      	mov	r3, r5
 80037fc:	1891      	adds	r1, r2, r2
 80037fe:	6439      	str	r1, [r7, #64]	; 0x40
 8003800:	415b      	adcs	r3, r3
 8003802:	647b      	str	r3, [r7, #68]	; 0x44
 8003804:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003808:	1912      	adds	r2, r2, r4
 800380a:	eb45 0303 	adc.w	r3, r5, r3
 800380e:	f04f 0000 	mov.w	r0, #0
 8003812:	f04f 0100 	mov.w	r1, #0
 8003816:	00d9      	lsls	r1, r3, #3
 8003818:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800381c:	00d0      	lsls	r0, r2, #3
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	1911      	adds	r1, r2, r4
 8003824:	6639      	str	r1, [r7, #96]	; 0x60
 8003826:	416b      	adcs	r3, r5
 8003828:	667b      	str	r3, [r7, #100]	; 0x64
 800382a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	461a      	mov	r2, r3
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	1891      	adds	r1, r2, r2
 8003836:	63b9      	str	r1, [r7, #56]	; 0x38
 8003838:	415b      	adcs	r3, r3
 800383a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800383c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003840:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003844:	f7fd f8e2 	bl	8000a0c <__aeabi_uldivmod>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4ba5      	ldr	r3, [pc, #660]	; (8003ae4 <UART_SetConfig+0x38c>)
 800384e:	fba3 2302 	umull	r2, r3, r3, r2
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	011e      	lsls	r6, r3, #4
 8003856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003858:	461c      	mov	r4, r3
 800385a:	f04f 0500 	mov.w	r5, #0
 800385e:	4622      	mov	r2, r4
 8003860:	462b      	mov	r3, r5
 8003862:	1891      	adds	r1, r2, r2
 8003864:	6339      	str	r1, [r7, #48]	; 0x30
 8003866:	415b      	adcs	r3, r3
 8003868:	637b      	str	r3, [r7, #52]	; 0x34
 800386a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800386e:	1912      	adds	r2, r2, r4
 8003870:	eb45 0303 	adc.w	r3, r5, r3
 8003874:	f04f 0000 	mov.w	r0, #0
 8003878:	f04f 0100 	mov.w	r1, #0
 800387c:	00d9      	lsls	r1, r3, #3
 800387e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003882:	00d0      	lsls	r0, r2, #3
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	1911      	adds	r1, r2, r4
 800388a:	65b9      	str	r1, [r7, #88]	; 0x58
 800388c:	416b      	adcs	r3, r5
 800388e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	461a      	mov	r2, r3
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	1891      	adds	r1, r2, r2
 800389c:	62b9      	str	r1, [r7, #40]	; 0x28
 800389e:	415b      	adcs	r3, r3
 80038a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80038aa:	f7fd f8af 	bl	8000a0c <__aeabi_uldivmod>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4b8c      	ldr	r3, [pc, #560]	; (8003ae4 <UART_SetConfig+0x38c>)
 80038b4:	fba3 1302 	umull	r1, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	2164      	movs	r1, #100	; 0x64
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	3332      	adds	r3, #50	; 0x32
 80038c6:	4a87      	ldr	r2, [pc, #540]	; (8003ae4 <UART_SetConfig+0x38c>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038d4:	441e      	add	r6, r3
 80038d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d8:	4618      	mov	r0, r3
 80038da:	f04f 0100 	mov.w	r1, #0
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	1894      	adds	r4, r2, r2
 80038e4:	623c      	str	r4, [r7, #32]
 80038e6:	415b      	adcs	r3, r3
 80038e8:	627b      	str	r3, [r7, #36]	; 0x24
 80038ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038ee:	1812      	adds	r2, r2, r0
 80038f0:	eb41 0303 	adc.w	r3, r1, r3
 80038f4:	f04f 0400 	mov.w	r4, #0
 80038f8:	f04f 0500 	mov.w	r5, #0
 80038fc:	00dd      	lsls	r5, r3, #3
 80038fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003902:	00d4      	lsls	r4, r2, #3
 8003904:	4622      	mov	r2, r4
 8003906:	462b      	mov	r3, r5
 8003908:	1814      	adds	r4, r2, r0
 800390a:	653c      	str	r4, [r7, #80]	; 0x50
 800390c:	414b      	adcs	r3, r1
 800390e:	657b      	str	r3, [r7, #84]	; 0x54
 8003910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	461a      	mov	r2, r3
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	1891      	adds	r1, r2, r2
 800391c:	61b9      	str	r1, [r7, #24]
 800391e:	415b      	adcs	r3, r3
 8003920:	61fb      	str	r3, [r7, #28]
 8003922:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003926:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800392a:	f7fd f86f 	bl	8000a0c <__aeabi_uldivmod>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4b6c      	ldr	r3, [pc, #432]	; (8003ae4 <UART_SetConfig+0x38c>)
 8003934:	fba3 1302 	umull	r1, r3, r3, r2
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	2164      	movs	r1, #100	; 0x64
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	3332      	adds	r3, #50	; 0x32
 8003946:	4a67      	ldr	r2, [pc, #412]	; (8003ae4 <UART_SetConfig+0x38c>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	f003 0207 	and.w	r2, r3, #7
 8003952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4432      	add	r2, r6
 8003958:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800395a:	e0b9      	b.n	8003ad0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800395c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800395e:	461c      	mov	r4, r3
 8003960:	f04f 0500 	mov.w	r5, #0
 8003964:	4622      	mov	r2, r4
 8003966:	462b      	mov	r3, r5
 8003968:	1891      	adds	r1, r2, r2
 800396a:	6139      	str	r1, [r7, #16]
 800396c:	415b      	adcs	r3, r3
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003974:	1912      	adds	r2, r2, r4
 8003976:	eb45 0303 	adc.w	r3, r5, r3
 800397a:	f04f 0000 	mov.w	r0, #0
 800397e:	f04f 0100 	mov.w	r1, #0
 8003982:	00d9      	lsls	r1, r3, #3
 8003984:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003988:	00d0      	lsls	r0, r2, #3
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	eb12 0804 	adds.w	r8, r2, r4
 8003992:	eb43 0905 	adc.w	r9, r3, r5
 8003996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4618      	mov	r0, r3
 800399c:	f04f 0100 	mov.w	r1, #0
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	008b      	lsls	r3, r1, #2
 80039aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039ae:	0082      	lsls	r2, r0, #2
 80039b0:	4640      	mov	r0, r8
 80039b2:	4649      	mov	r1, r9
 80039b4:	f7fd f82a 	bl	8000a0c <__aeabi_uldivmod>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4b49      	ldr	r3, [pc, #292]	; (8003ae4 <UART_SetConfig+0x38c>)
 80039be:	fba3 2302 	umull	r2, r3, r3, r2
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	011e      	lsls	r6, r3, #4
 80039c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039c8:	4618      	mov	r0, r3
 80039ca:	f04f 0100 	mov.w	r1, #0
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	1894      	adds	r4, r2, r2
 80039d4:	60bc      	str	r4, [r7, #8]
 80039d6:	415b      	adcs	r3, r3
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039de:	1812      	adds	r2, r2, r0
 80039e0:	eb41 0303 	adc.w	r3, r1, r3
 80039e4:	f04f 0400 	mov.w	r4, #0
 80039e8:	f04f 0500 	mov.w	r5, #0
 80039ec:	00dd      	lsls	r5, r3, #3
 80039ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039f2:	00d4      	lsls	r4, r2, #3
 80039f4:	4622      	mov	r2, r4
 80039f6:	462b      	mov	r3, r5
 80039f8:	1814      	adds	r4, r2, r0
 80039fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80039fc:	414b      	adcs	r3, r1
 80039fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f04f 0100 	mov.w	r1, #0
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	008b      	lsls	r3, r1, #2
 8003a14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a18:	0082      	lsls	r2, r0, #2
 8003a1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003a1e:	f7fc fff5 	bl	8000a0c <__aeabi_uldivmod>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4b2f      	ldr	r3, [pc, #188]	; (8003ae4 <UART_SetConfig+0x38c>)
 8003a28:	fba3 1302 	umull	r1, r3, r3, r2
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	2164      	movs	r1, #100	; 0x64
 8003a30:	fb01 f303 	mul.w	r3, r1, r3
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	011b      	lsls	r3, r3, #4
 8003a38:	3332      	adds	r3, #50	; 0x32
 8003a3a:	4a2a      	ldr	r2, [pc, #168]	; (8003ae4 <UART_SetConfig+0x38c>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a46:	441e      	add	r6, r3
 8003a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f04f 0100 	mov.w	r1, #0
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	1894      	adds	r4, r2, r2
 8003a56:	603c      	str	r4, [r7, #0]
 8003a58:	415b      	adcs	r3, r3
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a60:	1812      	adds	r2, r2, r0
 8003a62:	eb41 0303 	adc.w	r3, r1, r3
 8003a66:	f04f 0400 	mov.w	r4, #0
 8003a6a:	f04f 0500 	mov.w	r5, #0
 8003a6e:	00dd      	lsls	r5, r3, #3
 8003a70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a74:	00d4      	lsls	r4, r2, #3
 8003a76:	4622      	mov	r2, r4
 8003a78:	462b      	mov	r3, r5
 8003a7a:	eb12 0a00 	adds.w	sl, r2, r0
 8003a7e:	eb43 0b01 	adc.w	fp, r3, r1
 8003a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f04f 0100 	mov.w	r1, #0
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	008b      	lsls	r3, r1, #2
 8003a96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a9a:	0082      	lsls	r2, r0, #2
 8003a9c:	4650      	mov	r0, sl
 8003a9e:	4659      	mov	r1, fp
 8003aa0:	f7fc ffb4 	bl	8000a0c <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <UART_SetConfig+0x38c>)
 8003aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	2164      	movs	r1, #100	; 0x64
 8003ab2:	fb01 f303 	mul.w	r3, r1, r3
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	3332      	adds	r3, #50	; 0x32
 8003abc:	4a09      	ldr	r2, [pc, #36]	; (8003ae4 <UART_SetConfig+0x38c>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	095b      	lsrs	r3, r3, #5
 8003ac4:	f003 020f 	and.w	r2, r3, #15
 8003ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4432      	add	r2, r6
 8003ace:	609a      	str	r2, [r3, #8]
}
 8003ad0:	bf00      	nop
 8003ad2:	377c      	adds	r7, #124	; 0x7c
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ada:	bf00      	nop
 8003adc:	40011000 	.word	0x40011000
 8003ae0:	40011400 	.word	0x40011400
 8003ae4:	51eb851f 	.word	0x51eb851f

08003ae8 <microDelay>:
float RH = 0;
extern TIM_HandleTypeDef htim1;
extern TIM_HandleTypeDef htim5;

void microDelay (uint16_t delay)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4603      	mov	r3, r0
 8003af0:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <microDelay+0x30>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2200      	movs	r2, #0
 8003af8:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start(&htim1);
 8003afa:	4807      	ldr	r0, [pc, #28]	; (8003b18 <microDelay+0x30>)
 8003afc:	f7fe fcb2 	bl	8002464 <HAL_TIM_Base_Start>
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8003b00:	bf00      	nop
 8003b02:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <microDelay+0x30>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d3f9      	bcc.n	8003b02 <microDelay+0x1a>
}
 8003b0e:	bf00      	nop
 8003b10:	bf00      	nop
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20004b3c 	.word	0x20004b3c

08003b1c <msdelay>:
void msdelay(uint16_t delay)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003b26:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <msdelay+0x38>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_TIM_Base_Start(&htim1);
 8003b2e:	4809      	ldr	r0, [pc, #36]	; (8003b54 <msdelay+0x38>)
 8003b30:	f7fe fc98 	bl	8002464 <HAL_TIM_Base_Start>
	  while (__HAL_TIM_GET_COUNTER(&htim1) < delay*1000);
 8003b34:	bf00      	nop
 8003b36:	4b07      	ldr	r3, [pc, #28]	; (8003b54 <msdelay+0x38>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	88fa      	ldrh	r2, [r7, #6]
 8003b3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b42:	fb01 f202 	mul.w	r2, r1, r2
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d3f5      	bcc.n	8003b36 <msdelay+0x1a>
}
 8003b4a:	bf00      	nop
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20004b3c 	.word	0x20004b3c

08003b58 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8003b62:	463b      	mov	r3, r7
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	609a      	str	r2, [r3, #8]
 8003b6c:	60da      	str	r2, [r3, #12]
 8003b6e:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8003b74:	2301      	movs	r3, #1
 8003b76:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8003b80:	463b      	mov	r3, r7
 8003b82:	4619      	mov	r1, r3
 8003b84:	482a      	ldr	r0, [pc, #168]	; (8003c30 <DHT11_Start+0xd8>)
 8003b86:	f7fd fddb 	bl	8001740 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2180      	movs	r1, #128	; 0x80
 8003b8e:	4828      	ldr	r0, [pc, #160]	; (8003c30 <DHT11_Start+0xd8>)
 8003b90:	f7fd ff8a 	bl	8001aa8 <HAL_GPIO_WritePin>
  msdelay(20);   // wait for 20ms
 8003b94:	2014      	movs	r0, #20
 8003b96:	f7ff ffc1 	bl	8003b1c <msdelay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	2180      	movs	r1, #128	; 0x80
 8003b9e:	4824      	ldr	r0, [pc, #144]	; (8003c30 <DHT11_Start+0xd8>)
 8003ba0:	f7fd ff82 	bl	8001aa8 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8003ba4:	201e      	movs	r0, #30
 8003ba6:	f7ff ff9f 	bl	8003ae8 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8003baa:	2300      	movs	r3, #0
 8003bac:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8003bb2:	463b      	mov	r3, r7
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	481e      	ldr	r0, [pc, #120]	; (8003c30 <DHT11_Start+0xd8>)
 8003bb8:	f7fd fdc2 	bl	8001740 <HAL_GPIO_Init>
  microDelay (40);
 8003bbc:	2028      	movs	r0, #40	; 0x28
 8003bbe:	f7ff ff93 	bl	8003ae8 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8003bc2:	2180      	movs	r1, #128	; 0x80
 8003bc4:	481a      	ldr	r0, [pc, #104]	; (8003c30 <DHT11_Start+0xd8>)
 8003bc6:	f7fd ff57 	bl	8001a78 <HAL_GPIO_ReadPin>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10b      	bne.n	8003be8 <DHT11_Start+0x90>
  {
    microDelay (80);
 8003bd0:	2050      	movs	r0, #80	; 0x50
 8003bd2:	f7ff ff89 	bl	8003ae8 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8003bd6:	2180      	movs	r1, #128	; 0x80
 8003bd8:	4815      	ldr	r0, [pc, #84]	; (8003c30 <DHT11_Start+0xd8>)
 8003bda:	f7fd ff4d 	bl	8001a78 <HAL_GPIO_ReadPin>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <DHT11_Start+0x90>
 8003be4:	2301      	movs	r3, #1
 8003be6:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8003be8:	f7fd fbfa 	bl	80013e0 <HAL_GetTick>
 8003bec:	4603      	mov	r3, r0
 8003bee:	4a11      	ldr	r2, [pc, #68]	; (8003c34 <DHT11_Start+0xdc>)
 8003bf0:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8003bf2:	f7fd fbf5 	bl	80013e0 <HAL_GetTick>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	4a0f      	ldr	r2, [pc, #60]	; (8003c38 <DHT11_Start+0xe0>)
 8003bfa:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8003bfc:	e004      	b.n	8003c08 <DHT11_Start+0xb0>
  {
    cMillis = HAL_GetTick();
 8003bfe:	f7fd fbef 	bl	80013e0 <HAL_GetTick>
 8003c02:	4603      	mov	r3, r0
 8003c04:	4a0c      	ldr	r2, [pc, #48]	; (8003c38 <DHT11_Start+0xe0>)
 8003c06:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8003c08:	2180      	movs	r1, #128	; 0x80
 8003c0a:	4809      	ldr	r0, [pc, #36]	; (8003c30 <DHT11_Start+0xd8>)
 8003c0c:	f7fd ff34 	bl	8001a78 <HAL_GPIO_ReadPin>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d006      	beq.n	8003c24 <DHT11_Start+0xcc>
 8003c16:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <DHT11_Start+0xdc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	1c9a      	adds	r2, r3, #2
 8003c1c:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <DHT11_Start+0xe0>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d8ec      	bhi.n	8003bfe <DHT11_Start+0xa6>
  }
  return Response;
 8003c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	40020800 	.word	0x40020800
 8003c34:	20004bd8 	.word	0x20004bd8
 8003c38:	20004bd0 	.word	0x20004bd0

08003c3c <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8003c42:	2300      	movs	r3, #0
 8003c44:	71fb      	strb	r3, [r7, #7]
 8003c46:	e063      	b.n	8003d10 <DHT11_Read+0xd4>
  {
    pMillis = HAL_GetTick();
 8003c48:	f7fd fbca 	bl	80013e0 <HAL_GetTick>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4a34      	ldr	r2, [pc, #208]	; (8003d20 <DHT11_Read+0xe4>)
 8003c50:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8003c52:	f7fd fbc5 	bl	80013e0 <HAL_GetTick>
 8003c56:	4603      	mov	r3, r0
 8003c58:	4a32      	ldr	r2, [pc, #200]	; (8003d24 <DHT11_Read+0xe8>)
 8003c5a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8003c5c:	e004      	b.n	8003c68 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8003c5e:	f7fd fbbf 	bl	80013e0 <HAL_GetTick>
 8003c62:	4603      	mov	r3, r0
 8003c64:	4a2f      	ldr	r2, [pc, #188]	; (8003d24 <DHT11_Read+0xe8>)
 8003c66:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8003c68:	2180      	movs	r1, #128	; 0x80
 8003c6a:	482f      	ldr	r0, [pc, #188]	; (8003d28 <DHT11_Read+0xec>)
 8003c6c:	f7fd ff04 	bl	8001a78 <HAL_GPIO_ReadPin>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d106      	bne.n	8003c84 <DHT11_Read+0x48>
 8003c76:	4b2a      	ldr	r3, [pc, #168]	; (8003d20 <DHT11_Read+0xe4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	1c9a      	adds	r2, r3, #2
 8003c7c:	4b29      	ldr	r3, [pc, #164]	; (8003d24 <DHT11_Read+0xe8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d8ec      	bhi.n	8003c5e <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8003c84:	2028      	movs	r0, #40	; 0x28
 8003c86:	f7ff ff2f 	bl	8003ae8 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8003c8a:	2180      	movs	r1, #128	; 0x80
 8003c8c:	4826      	ldr	r0, [pc, #152]	; (8003d28 <DHT11_Read+0xec>)
 8003c8e:	f7fd fef3 	bl	8001a78 <HAL_GPIO_ReadPin>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10e      	bne.n	8003cb6 <DHT11_Read+0x7a>
      b&= ~(1<<(7-a));
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	f1c3 0307 	rsb	r3, r3, #7
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	b25b      	sxtb	r3, r3
 8003ca6:	43db      	mvns	r3, r3
 8003ca8:	b25a      	sxtb	r2, r3
 8003caa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	b25b      	sxtb	r3, r3
 8003cb2:	71bb      	strb	r3, [r7, #6]
 8003cb4:	e00b      	b.n	8003cce <DHT11_Read+0x92>
    else
      b|= (1<<(7-a));
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	f1c3 0307 	rsb	r3, r3, #7
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	b25a      	sxtb	r2, r3
 8003cc4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	b25b      	sxtb	r3, r3
 8003ccc:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8003cce:	f7fd fb87 	bl	80013e0 <HAL_GetTick>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	4a12      	ldr	r2, [pc, #72]	; (8003d20 <DHT11_Read+0xe4>)
 8003cd6:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8003cd8:	f7fd fb82 	bl	80013e0 <HAL_GetTick>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	4a11      	ldr	r2, [pc, #68]	; (8003d24 <DHT11_Read+0xe8>)
 8003ce0:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8003ce2:	e004      	b.n	8003cee <DHT11_Read+0xb2>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8003ce4:	f7fd fb7c 	bl	80013e0 <HAL_GetTick>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <DHT11_Read+0xe8>)
 8003cec:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8003cee:	2180      	movs	r1, #128	; 0x80
 8003cf0:	480d      	ldr	r0, [pc, #52]	; (8003d28 <DHT11_Read+0xec>)
 8003cf2:	f7fd fec1 	bl	8001a78 <HAL_GPIO_ReadPin>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d006      	beq.n	8003d0a <DHT11_Read+0xce>
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <DHT11_Read+0xe4>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	1c9a      	adds	r2, r3, #2
 8003d02:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <DHT11_Read+0xe8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d8ec      	bhi.n	8003ce4 <DHT11_Read+0xa8>
  for (a=0;a<8;a++)
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	71fb      	strb	r3, [r7, #7]
 8003d10:	79fb      	ldrb	r3, [r7, #7]
 8003d12:	2b07      	cmp	r3, #7
 8003d14:	d998      	bls.n	8003c48 <DHT11_Read+0xc>
    }
  }
  return b;
 8003d16:	79bb      	ldrb	r3, [r7, #6]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	20004bd8 	.word	0x20004bd8
 8003d24:	20004bd0 	.word	0x20004bd0
 8003d28:	40020800 	.word	0x40020800

08003d2c <DHT11_ReadAll>:

void DHT11_ReadAll(float * Temp, float * Hump)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	ed2d 8b02 	vpush	{d8}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
	if(DHT11_Start())
 8003d3a:	f7ff ff0d 	bl	8003b58 <DHT11_Start>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8087 	beq.w	8003e54 <DHT11_ReadAll+0x128>
	{
	  RHI = DHT11_Read(); // Relative humidity integral
 8003d46:	f7ff ff79 	bl	8003c3c <DHT11_Read>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	4b44      	ldr	r3, [pc, #272]	; (8003e60 <DHT11_ReadAll+0x134>)
 8003d50:	701a      	strb	r2, [r3, #0]
	  RHD = DHT11_Read(); // Relative humidity decimal
 8003d52:	f7ff ff73 	bl	8003c3c <DHT11_Read>
 8003d56:	4603      	mov	r3, r0
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4b42      	ldr	r3, [pc, #264]	; (8003e64 <DHT11_ReadAll+0x138>)
 8003d5c:	701a      	strb	r2, [r3, #0]
	  TCI = DHT11_Read(); // Celsius integral
 8003d5e:	f7ff ff6d 	bl	8003c3c <DHT11_Read>
 8003d62:	4603      	mov	r3, r0
 8003d64:	461a      	mov	r2, r3
 8003d66:	4b40      	ldr	r3, [pc, #256]	; (8003e68 <DHT11_ReadAll+0x13c>)
 8003d68:	701a      	strb	r2, [r3, #0]
	  TCD = DHT11_Read(); // Celsius decimal
 8003d6a:	f7ff ff67 	bl	8003c3c <DHT11_Read>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	461a      	mov	r2, r3
 8003d72:	4b3e      	ldr	r3, [pc, #248]	; (8003e6c <DHT11_ReadAll+0x140>)
 8003d74:	701a      	strb	r2, [r3, #0]
	  SUM = DHT11_Read(); // Check sum
 8003d76:	f7ff ff61 	bl	8003c3c <DHT11_Read>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4b3c      	ldr	r3, [pc, #240]	; (8003e70 <DHT11_ReadAll+0x144>)
 8003d80:	701a      	strb	r2, [r3, #0]
	  if (RHI + RHD + TCI + TCD == SUM)
 8003d82:	4b37      	ldr	r3, [pc, #220]	; (8003e60 <DHT11_ReadAll+0x134>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	4b36      	ldr	r3, [pc, #216]	; (8003e64 <DHT11_ReadAll+0x138>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	4a36      	ldr	r2, [pc, #216]	; (8003e68 <DHT11_ReadAll+0x13c>)
 8003d90:	7812      	ldrb	r2, [r2, #0]
 8003d92:	4413      	add	r3, r2
 8003d94:	4a35      	ldr	r2, [pc, #212]	; (8003e6c <DHT11_ReadAll+0x140>)
 8003d96:	7812      	ldrb	r2, [r2, #0]
 8003d98:	4413      	add	r3, r2
 8003d9a:	4a35      	ldr	r2, [pc, #212]	; (8003e70 <DHT11_ReadAll+0x144>)
 8003d9c:	7812      	ldrb	r2, [r2, #0]
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d158      	bne.n	8003e54 <DHT11_ReadAll+0x128>
	  {
		// Can use RHI and TCI for any purposes if whole number only needed
		tCelsius = (float)TCI + (float)(TCD/10.0);
 8003da2:	4b31      	ldr	r3, [pc, #196]	; (8003e68 <DHT11_ReadAll+0x13c>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	ee07 3a90 	vmov	s15, r3
 8003daa:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003dae:	4b2f      	ldr	r3, [pc, #188]	; (8003e6c <DHT11_ReadAll+0x140>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fc fb5e 	bl	8000474 <__aeabi_i2d>
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	4b2d      	ldr	r3, [pc, #180]	; (8003e74 <DHT11_ReadAll+0x148>)
 8003dbe:	f7fc fced 	bl	800079c <__aeabi_ddiv>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	4619      	mov	r1, r3
 8003dca:	f7fc fdcf 	bl	800096c <__aeabi_d2f>
 8003dce:	ee07 0a90 	vmov	s15, r0
 8003dd2:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003dd6:	4b28      	ldr	r3, [pc, #160]	; (8003e78 <DHT11_ReadAll+0x14c>)
 8003dd8:	edc3 7a00 	vstr	s15, [r3]
		tFahrenheit = tCelsius * 9/5 + 32;
 8003ddc:	4b26      	ldr	r3, [pc, #152]	; (8003e78 <DHT11_ReadAll+0x14c>)
 8003dde:	edd3 7a00 	vldr	s15, [r3]
 8003de2:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003de6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003dea:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8003dee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003df2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003e7c <DHT11_ReadAll+0x150>
 8003df6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dfa:	4b21      	ldr	r3, [pc, #132]	; (8003e80 <DHT11_ReadAll+0x154>)
 8003dfc:	edc3 7a00 	vstr	s15, [r3]
		RH = (float)RHI + (float)(RHD/10.0);
 8003e00:	4b17      	ldr	r3, [pc, #92]	; (8003e60 <DHT11_ReadAll+0x134>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	ee07 3a90 	vmov	s15, r3
 8003e08:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8003e0c:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <DHT11_ReadAll+0x138>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fc fb2f 	bl	8000474 <__aeabi_i2d>
 8003e16:	f04f 0200 	mov.w	r2, #0
 8003e1a:	4b16      	ldr	r3, [pc, #88]	; (8003e74 <DHT11_ReadAll+0x148>)
 8003e1c:	f7fc fcbe 	bl	800079c <__aeabi_ddiv>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4610      	mov	r0, r2
 8003e26:	4619      	mov	r1, r3
 8003e28:	f7fc fda0 	bl	800096c <__aeabi_d2f>
 8003e2c:	ee07 0a90 	vmov	s15, r0
 8003e30:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003e34:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <DHT11_ReadAll+0x158>)
 8003e36:	edc3 7a00 	vstr	s15, [r3]
		*Temp = tCelsius;
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <DHT11_ReadAll+0x14c>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	601a      	str	r2, [r3, #0]
		*Hump = RHI;
 8003e42:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <DHT11_ReadAll+0x134>)
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	ee07 3a90 	vmov	s15, r3
 8003e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	edc3 7a00 	vstr	s15, [r3]
		// Can use tCelsius, tFahrenheit and RH for any purposes
	  }
	}
}
 8003e54:	bf00      	nop
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	ecbd 8b02 	vpop	{d8}
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20004bd4 	.word	0x20004bd4
 8003e64:	20004bdc 	.word	0x20004bdc
 8003e68:	20004bde 	.word	0x20004bde
 8003e6c:	20004bcc 	.word	0x20004bcc
 8003e70:	20004bdd 	.word	0x20004bdd
 8003e74:	40240000 	.word	0x40240000
 8003e78:	20000090 	.word	0x20000090
 8003e7c:	42000000 	.word	0x42000000
 8003e80:	20000094 	.word	0x20000094
 8003e84:	20000098 	.word	0x20000098

08003e88 <WriteGpio>:
#include "main.h"
#include "Modbus2Gpio.h"

void WriteGpio(uint16_t Pin, bool State)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	460a      	mov	r2, r1
 8003e92:	80fb      	strh	r3, [r7, #6]
 8003e94:	4613      	mov	r3, r2
 8003e96:	717b      	strb	r3, [r7, #5]
    HAL_GPIO_WritePin(GPIO_PORT,Pin,(GPIO_PinState)State);
 8003e98:	797a      	ldrb	r2, [r7, #5]
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4803      	ldr	r0, [pc, #12]	; (8003eac <WriteGpio+0x24>)
 8003ea0:	f7fd fe02 	bl	8001aa8 <HAL_GPIO_WritePin>
}
 8003ea4:	bf00      	nop
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40020000 	.word	0x40020000

08003eb0 <Queue_CoilUpdate>:
#include "Modbus2Gui.h"

void Queue_CoilUpdate(Device_Coil *Coil)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
    bool    CoilVal;
    if(Coil->Addr == AC_ONOFF_STATE_ADDR)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d10a      	bne.n	8003eda <Queue_CoilUpdate+0x2a>
    {
        CoilVal = Coil->Value;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	789b      	ldrb	r3, [r3, #2]
 8003ec8:	73fb      	strb	r3, [r7, #15]
        xQueueSend(Q_Mb2Gui_AcOnOff,&CoilVal,0);
 8003eca:	4b41      	ldr	r3, [pc, #260]	; (8003fd0 <Queue_CoilUpdate+0x120>)
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	f107 010f 	add.w	r1, r7, #15
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f001 ffb3 	bl	8005e40 <xQueueGenericSend>
    }



/**     Update for GPIO       */
    if(Coil->Addr == GPIO_0_ADDR)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	f241 328a 	movw	r2, #5002	; 0x138a
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d111      	bne.n	8003f0a <Queue_CoilUpdate+0x5a>
    {
        CoilVal = Coil->Value;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	789b      	ldrb	r3, [r3, #2]
 8003eea:	73fb      	strb	r3, [r7, #15]
        xQueueSend(Q_Mb2Gui_Gpio0,&CoilVal,0);
 8003eec:	4b39      	ldr	r3, [pc, #228]	; (8003fd4 <Queue_CoilUpdate+0x124>)
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	f107 010f 	add.w	r1, r7, #15
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f001 ffa2 	bl	8005e40 <xQueueGenericSend>
        WriteGpio(GPIO_0_PIN,Coil->Value);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	789b      	ldrb	r3, [r3, #2]
 8003f00:	4619      	mov	r1, r3
 8003f02:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003f06:	f7ff ffbf 	bl	8003e88 <WriteGpio>
    }
    if(Coil->Addr == GPIO_1_ADDR)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	f241 328b 	movw	r2, #5003	; 0x138b
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d111      	bne.n	8003f3a <Queue_CoilUpdate+0x8a>
    {
        CoilVal = Coil->Value;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	789b      	ldrb	r3, [r3, #2]
 8003f1a:	73fb      	strb	r3, [r7, #15]
        xQueueSend(Q_Mb2Gui_Gpio1,&CoilVal,0);
 8003f1c:	4b2e      	ldr	r3, [pc, #184]	; (8003fd8 <Queue_CoilUpdate+0x128>)
 8003f1e:	6818      	ldr	r0, [r3, #0]
 8003f20:	f107 010f 	add.w	r1, r7, #15
 8003f24:	2300      	movs	r3, #0
 8003f26:	2200      	movs	r2, #0
 8003f28:	f001 ff8a 	bl	8005e40 <xQueueGenericSend>
        WriteGpio(GPIO_1_PIN,Coil->Value);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	789b      	ldrb	r3, [r3, #2]
 8003f30:	4619      	mov	r1, r3
 8003f32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003f36:	f7ff ffa7 	bl	8003e88 <WriteGpio>
    }
    if(Coil->Addr == GPIO_2_ADDR)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	f241 328c 	movw	r2, #5004	; 0x138c
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d111      	bne.n	8003f6a <Queue_CoilUpdate+0xba>
    {
        CoilVal = Coil->Value;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	789b      	ldrb	r3, [r3, #2]
 8003f4a:	73fb      	strb	r3, [r7, #15]
        xQueueSend(Q_Mb2Gui_Gpio2,&CoilVal,0);
 8003f4c:	4b23      	ldr	r3, [pc, #140]	; (8003fdc <Queue_CoilUpdate+0x12c>)
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	f107 010f 	add.w	r1, r7, #15
 8003f54:	2300      	movs	r3, #0
 8003f56:	2200      	movs	r2, #0
 8003f58:	f001 ff72 	bl	8005e40 <xQueueGenericSend>
        WriteGpio(GPIO_2_PIN,Coil->Value);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	789b      	ldrb	r3, [r3, #2]
 8003f60:	4619      	mov	r1, r3
 8003f62:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f66:	f7ff ff8f 	bl	8003e88 <WriteGpio>
    }
    if(Coil->Addr == GPIO_3_ADDR)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	f241 328d 	movw	r2, #5005	; 0x138d
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d110      	bne.n	8003f98 <Queue_CoilUpdate+0xe8>
    {
        CoilVal = Coil->Value;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	789b      	ldrb	r3, [r3, #2]
 8003f7a:	73fb      	strb	r3, [r7, #15]
        xQueueSend(Q_Mb2Gui_Gpio3,&CoilVal,0);
 8003f7c:	4b18      	ldr	r3, [pc, #96]	; (8003fe0 <Queue_CoilUpdate+0x130>)
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	f107 010f 	add.w	r1, r7, #15
 8003f84:	2300      	movs	r3, #0
 8003f86:	2200      	movs	r2, #0
 8003f88:	f001 ff5a 	bl	8005e40 <xQueueGenericSend>
        WriteGpio(GPIO_3_PIN,Coil->Value);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	789b      	ldrb	r3, [r3, #2]
 8003f90:	4619      	mov	r1, r3
 8003f92:	2080      	movs	r0, #128	; 0x80
 8003f94:	f7ff ff78 	bl	8003e88 <WriteGpio>
    }
    if(Coil->Addr == GPIO_4_ADDR)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	f241 328e 	movw	r2, #5006	; 0x138e
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d110      	bne.n	8003fc6 <Queue_CoilUpdate+0x116>
    {
        CoilVal = Coil->Value;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	789b      	ldrb	r3, [r3, #2]
 8003fa8:	73fb      	strb	r3, [r7, #15]
        xQueueSend(Q_Mb2Gui_Gpio4,&CoilVal,0);
 8003faa:	4b0e      	ldr	r3, [pc, #56]	; (8003fe4 <Queue_CoilUpdate+0x134>)
 8003fac:	6818      	ldr	r0, [r3, #0]
 8003fae:	f107 010f 	add.w	r1, r7, #15
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f001 ff43 	bl	8005e40 <xQueueGenericSend>
        WriteGpio(GPIO_4_PIN,Coil->Value);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	789b      	ldrb	r3, [r3, #2]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	2040      	movs	r0, #64	; 0x40
 8003fc2:	f7ff ff61 	bl	8003e88 <WriteGpio>
    }


}
 8003fc6:	bf00      	nop
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20004bf8 	.word	0x20004bf8
 8003fd4:	20004bf0 	.word	0x20004bf0
 8003fd8:	20004be0 	.word	0x20004be0
 8003fdc:	20004be8 	.word	0x20004be8
 8003fe0:	20004bec 	.word	0x20004bec
 8003fe4:	20004be4 	.word	0x20004be4

08003fe8 <Queue_RegUpdate>:


void Queue_RegUpdate(Device_Reg *Reg)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
    uint16_t RegVal;
    if(Reg->Addr == AC_TEMP_VALUE_ADDR)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	881b      	ldrh	r3, [r3, #0]
 8003ff4:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d10a      	bne.n	8004012 <Queue_RegUpdate+0x2a>
    {
        RegVal = Reg->Value;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	885b      	ldrh	r3, [r3, #2]
 8004000:	81fb      	strh	r3, [r7, #14]
        xQueueSend(Q_Mb2Gui_AcTempUpdate,&RegVal,0);
 8004002:	4b06      	ldr	r3, [pc, #24]	; (800401c <Queue_RegUpdate+0x34>)
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	f107 010e 	add.w	r1, r7, #14
 800400a:	2300      	movs	r3, #0
 800400c:	2200      	movs	r2, #0
 800400e:	f001 ff17 	bl	8005e40 <xQueueGenericSend>
    }
}
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20004bf4 	.word	0x20004bf4

08004020 <Read_Coil>:
#include "Modbus.h"
#include "Modbus2Gui.h"


bool Read_Coil(uint16_t Addr, modbusHandler_t *modH)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	4603      	mov	r3, r0
 8004028:	6039      	str	r1, [r7, #0]
 800402a:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < MODBUS_SLAVE_COIL_NUM ; i++)
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	e015      	b.n	800405e <Read_Coil+0x3e>
    {
        if(Addr == modH->Device->Coil[i].Addr)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	3214      	adds	r2, #20
 800403c:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8004040:	88fa      	ldrh	r2, [r7, #6]
 8004042:	429a      	cmp	r2, r3
 8004044:	d108      	bne.n	8004058 <Read_Coil+0x38>
        {
            return modH->Device->Coil[i].Value;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3314      	adds	r3, #20
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	789b      	ldrb	r3, [r3, #2]
 8004056:	e005      	b.n	8004064 <Read_Coil+0x44>
    for(int i = 0; i < MODBUS_SLAVE_COIL_NUM ; i++)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3301      	adds	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b13      	cmp	r3, #19
 8004062:	dde6      	ble.n	8004032 <Read_Coil+0x12>
        }
    }
}
 8004064:	4618      	mov	r0, r3
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <Read_Reg>:

uint16_t Read_Reg(uint16_t Addr, modbusHandler_t *modH)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	4603      	mov	r3, r0
 8004078:	6039      	str	r1, [r7, #0]
 800407a:	80fb      	strh	r3, [r7, #6]
    for(int i = 0; i < MODBUS_SLAVE_REG_NUM ; i++)
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	e013      	b.n	80040aa <Read_Reg+0x3a>
    {
        if(Addr == modH->Device->Reg[i].Addr)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	429a      	cmp	r2, r3
 8004092:	d107      	bne.n	80040a4 <Read_Reg+0x34>
        {
            return modH->Device->Reg[i].Value;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	885b      	ldrh	r3, [r3, #2]
 80040a2:	e005      	b.n	80040b0 <Read_Reg+0x40>
    for(int i = 0; i < MODBUS_SLAVE_REG_NUM ; i++)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3301      	adds	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b13      	cmp	r3, #19
 80040ae:	dde8      	ble.n	8004082 <Read_Reg+0x12>
        }
    } 
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <Write_Coil>:

void Write_Coil(uint16_t Addr, uint16_t Value, modbusHandler_t *modH)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	603a      	str	r2, [r7, #0]
 80040c6:	80fb      	strh	r3, [r7, #6]
 80040c8:	460b      	mov	r3, r1
 80040ca:	80bb      	strh	r3, [r7, #4]
    Device_Coil Coil;
    for(int i = 0; i < MODBUS_SLAVE_COIL_NUM ; i++)
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	e029      	b.n	8004126 <Write_Coil+0x6a>
    {
        if(Addr == modH->Device->Coil[i].Addr)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	3214      	adds	r2, #20
 80040dc:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80040e0:	88fa      	ldrh	r2, [r7, #6]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d11c      	bne.n	8004120 <Write_Coil+0x64>
        {
            Coil.Addr = Addr;
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	813b      	strh	r3, [r7, #8]
            Coil.Value = Value;
 80040ea:	88bb      	ldrh	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bf14      	ite	ne
 80040f0:	2301      	movne	r3, #1
 80040f2:	2300      	moveq	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	72bb      	strb	r3, [r7, #10]
            modH->Device->Coil[i].Value = Value;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80040fe:	88bb      	ldrh	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf14      	ite	ne
 8004104:	2301      	movne	r3, #1
 8004106:	2300      	moveq	r3, #0
 8004108:	b2d9      	uxtb	r1, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	3314      	adds	r3, #20
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	460a      	mov	r2, r1
 8004114:	709a      	strb	r2, [r3, #2]
            Queue_CoilUpdate(&Coil);
 8004116:	f107 0308 	add.w	r3, r7, #8
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fec8 	bl	8003eb0 <Queue_CoilUpdate>
    for(int i = 0; i < MODBUS_SLAVE_COIL_NUM ; i++)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3301      	adds	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b13      	cmp	r3, #19
 800412a:	ddd2      	ble.n	80040d2 <Write_Coil+0x16>
        }
    }
}
 800412c:	bf00      	nop
 800412e:	bf00      	nop
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <Write_Reg>:
void Write_Reg(uint16_t Addr, uint16_t Value, modbusHandler_t *modH)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	4603      	mov	r3, r0
 800413e:	603a      	str	r2, [r7, #0]
 8004140:	80fb      	strh	r3, [r7, #6]
 8004142:	460b      	mov	r3, r1
 8004144:	80bb      	strh	r3, [r7, #4]
    Device_Reg  Reg;
    for(int i = 0; i < MODBUS_SLAVE_REG_NUM ; i++)
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	e01c      	b.n	8004186 <Write_Reg+0x50>
    {
        if(Addr == modH->Device->Reg[i].Addr)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8004158:	88fa      	ldrh	r2, [r7, #6]
 800415a:	429a      	cmp	r2, r3
 800415c:	d110      	bne.n	8004180 <Write_Reg+0x4a>
        {
            Reg.Addr = Addr;
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	813b      	strh	r3, [r7, #8]
            Reg.Value = Value;
 8004162:	88bb      	ldrh	r3, [r7, #4]
 8004164:	817b      	strh	r3, [r7, #10]
            modH->Device->Reg[i].Value = Value;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	88ba      	ldrh	r2, [r7, #4]
 8004174:	805a      	strh	r2, [r3, #2]
            Queue_RegUpdate(&Reg);
 8004176:	f107 0308 	add.w	r3, r7, #8
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff ff34 	bl	8003fe8 <Queue_RegUpdate>
    for(int i = 0; i < MODBUS_SLAVE_REG_NUM ; i++)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	3301      	adds	r3, #1
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2b13      	cmp	r3, #19
 800418a:	dddf      	ble.n	800414c <Write_Reg+0x16>
        }
    } 
}
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8004196:	b480      	push	{r7}
 8004198:	b087      	sub	sp, #28
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 80041a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041a6:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 80041a8:	2300      	movs	r3, #0
 80041aa:	74fb      	strb	r3, [r7, #19]
 80041ac:	e023      	b.n	80041f6 <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 80041ae:	7cfb      	ldrb	r3, [r7, #19]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	4413      	add	r3, r2
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	4053      	eors	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 80041be:	2301      	movs	r3, #1
 80041c0:	74bb      	strb	r3, [r7, #18]
 80041c2:	e012      	b.n	80041ea <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	085b      	lsrs	r3, r3, #1
 80041d0:	617b      	str	r3, [r7, #20]
            if (flag)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <calcCRC+0x4e>
                temp ^= 0xA001;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 80041de:	f083 0301 	eor.w	r3, r3, #1
 80041e2:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 80041e4:	7cbb      	ldrb	r3, [r7, #18]
 80041e6:	3301      	adds	r3, #1
 80041e8:	74bb      	strb	r3, [r7, #18]
 80041ea:	7cbb      	ldrb	r3, [r7, #18]
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d9e9      	bls.n	80041c4 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 80041f0:	7cfb      	ldrb	r3, [r7, #19]
 80041f2:	3301      	adds	r3, #1
 80041f4:	74fb      	strb	r3, [r7, #19]
 80041f6:	7cfa      	ldrb	r2, [r7, #19]
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d3d7      	bcc.n	80041ae <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	0a1b      	lsrs	r3, r3, #8
 8004202:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	b29b      	uxth	r3, r3
 8004212:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	b29b      	uxth	r3, r3

}
 8004218:	4618      	mov	r0, r3
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <RingAdd>:
/* Ring Buffer functions */
// This function must be called only after disabling USART RX interrupt or inside of the RX interrupt
void RingAdd(modbusRingBuffer_t *xRingBuffer, uint8_t u8Val)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	70fb      	strb	r3, [r7, #3]

	xRingBuffer->uxBuffer[xRingBuffer->u8end] = u8Val;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004236:	4619      	mov	r1, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	78fa      	ldrb	r2, [r7, #3]
 800423c:	545a      	strb	r2, [r3, r1]
	xRingBuffer->u8end = (xRingBuffer->u8end + 1) % MAX_BUFFER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004244:	3301      	adds	r3, #1
 8004246:	425a      	negs	r2, r3
 8004248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800424c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004250:	bf58      	it	pl
 8004252:	4253      	negpl	r3, r2
 8004254:	b2da      	uxtb	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	if (xRingBuffer->u8available == MAX_BUFFER)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8004262:	2b80      	cmp	r3, #128	; 0x80
 8004264:	d113      	bne.n	800428e <RingAdd+0x6a>
	{
		xRingBuffer->overflow = true;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004274:	3301      	adds	r3, #1
 8004276:	425a      	negs	r2, r3
 8004278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800427c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004280:	bf58      	it	pl
 8004282:	4253      	negpl	r3, r2
 8004284:	b2da      	uxtb	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	{
		xRingBuffer->overflow = false;
		xRingBuffer->u8available++;
	}

}
 800428c:	e00b      	b.n	80042a6 <RingAdd+0x82>
		xRingBuffer->overflow = false;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		xRingBuffer->u8available++;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800429c:	3301      	adds	r3, #1
 800429e:	b2da      	uxtb	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <RingGetAllBytes>:


// This function must be called only after disabling USART RX interrupt
uint8_t RingGetAllBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	6039      	str	r1, [r7, #0]
	return RingGetNBytes(xRingBuffer, buffer, xRingBuffer->u8available);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80042c2:	461a      	mov	r2, r3
 80042c4:	6839      	ldr	r1, [r7, #0]
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f805 	bl	80042d6 <RingGetNBytes>
 80042cc:	4603      	mov	r3, r0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <RingGetNBytes>:

// This function must be called only after disabling USART RX interrupt
uint8_t RingGetNBytes(modbusRingBuffer_t *xRingBuffer, uint8_t *buffer, uint8_t uNumber)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b086      	sub	sp, #24
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	4613      	mov	r3, r2
 80042e2:	71fb      	strb	r3, [r7, #7]
	uint8_t uCounter;
	if(xRingBuffer->u8available == 0  || uNumber == 0 ) return 0;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <RingGetNBytes+0x1e>
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <RingGetNBytes+0x22>
 80042f4:	2300      	movs	r3, #0
 80042f6:	e03e      	b.n	8004376 <RingGetNBytes+0xa0>
	if(uNumber > MAX_BUFFER) return 0;
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	2b80      	cmp	r3, #128	; 0x80
 80042fc:	d901      	bls.n	8004302 <RingGetNBytes+0x2c>
 80042fe:	2300      	movs	r3, #0
 8004300:	e039      	b.n	8004376 <RingGetNBytes+0xa0>

	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 8004302:	2300      	movs	r3, #0
 8004304:	75fb      	strb	r3, [r7, #23]
 8004306:	e01b      	b.n	8004340 <RingGetNBytes+0x6a>
	{
		buffer[uCounter] = xRingBuffer->uxBuffer[xRingBuffer->u8start];
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800430e:	4619      	mov	r1, r3
 8004310:	7dfb      	ldrb	r3, [r7, #23]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	4413      	add	r3, r2
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	5c52      	ldrb	r2, [r2, r1]
 800431a:	701a      	strb	r2, [r3, #0]
		xRingBuffer->u8start = (xRingBuffer->u8start + 1) % MAX_BUFFER;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004322:	3301      	adds	r3, #1
 8004324:	425a      	negs	r2, r3
 8004326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800432a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800432e:	bf58      	it	pl
 8004330:	4253      	negpl	r3, r2
 8004332:	b2da      	uxtb	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	for(uCounter = 0; uCounter < uNumber && uCounter< xRingBuffer->u8available ; uCounter++)
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	3301      	adds	r3, #1
 800433e:	75fb      	strb	r3, [r7, #23]
 8004340:	7dfa      	ldrb	r2, [r7, #23]
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	429a      	cmp	r2, r3
 8004346:	d205      	bcs.n	8004354 <RingGetNBytes+0x7e>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800434e:	7dfa      	ldrb	r2, [r7, #23]
 8004350:	429a      	cmp	r2, r3
 8004352:	d3d9      	bcc.n	8004308 <RingGetNBytes+0x32>
	}
	xRingBuffer->u8available = xRingBuffer->u8available - uCounter;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 800435a:	7dfb      	ldrb	r3, [r7, #23]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	b2da      	uxtb	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	xRingBuffer->overflow = false;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	RingClear(xRingBuffer);
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f805 	bl	800437e <RingClear>

	return uCounter;
 8004374:	7dfb      	ldrb	r3, [r7, #23]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <RingClear>:
{
return xRingBuffer->u8available;
}

void RingClear(modbusRingBuffer_t *xRingBuffer)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
xRingBuffer->u8start = 0;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
xRingBuffer->u8end = 0;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
xRingBuffer->u8available = 0;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
xRingBuffer->overflow = false;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <SModbus_Init>:
    MB_FC_WRITE_MULTIPLE_COILS,
    MB_FC_WRITE_MULTIPLE_REGISTERS
};

void SModbus_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
	Slave_Modbus.uModbusType = MB_SLAVE;
 80043b8:	4b7b      	ldr	r3, [pc, #492]	; (80045a8 <SModbus_Init+0x1f4>)
 80043ba:	2203      	movs	r2, #3
 80043bc:	701a      	strb	r2, [r3, #0]
	Slave_Modbus.u8id = 3; //slave ID
 80043be:	4b7a      	ldr	r3, [pc, #488]	; (80045a8 <SModbus_Init+0x1f4>)
 80043c0:	2203      	movs	r2, #3
 80043c2:	721a      	strb	r2, [r3, #8]
	Slave_Modbus.u16timeOut = 2000;
 80043c4:	4b78      	ldr	r3, [pc, #480]	; (80045a8 <SModbus_Init+0x1f4>)
 80043c6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80043ca:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
	Slave_Modbus.port = &huart2;
 80043ce:	4b76      	ldr	r3, [pc, #472]	; (80045a8 <SModbus_Init+0x1f4>)
 80043d0:	4a76      	ldr	r2, [pc, #472]	; (80045ac <SModbus_Init+0x1f8>)
 80043d2:	605a      	str	r2, [r3, #4]
	Slave_Modbus.EN_Port = NULL;
 80043d4:	4b74      	ldr	r3, [pc, #464]	; (80045a8 <SModbus_Init+0x1f4>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	60da      	str	r2, [r3, #12]
	Slave_Modbus.u16regs = &ModbusDATA;
 80043da:	4b73      	ldr	r3, [pc, #460]	; (80045a8 <SModbus_Init+0x1f4>)
 80043dc:	4a74      	ldr	r2, [pc, #464]	; (80045b0 <SModbus_Init+0x1fc>)
 80043de:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	Slave_Modbus.u16regsize= 0xFFFF; //sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 80043e2:	4b71      	ldr	r3, [pc, #452]	; (80045a8 <SModbus_Init+0x1f4>)
 80043e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043e8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	Slave_Modbus.xTypeHW = USART_HW;
 80043ec:	4b6e      	ldr	r3, [pc, #440]	; (80045a8 <SModbus_Init+0x1f4>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
	//Slave_Modbus.uTcpPort = 502;   // used only for the slave (i.e., server)
	Slave_Modbus.Device = &SlaveDevice;
 80043f4:	4b6c      	ldr	r3, [pc, #432]	; (80045a8 <SModbus_Init+0x1f4>)
 80043f6:	4a6f      	ldr	r2, [pc, #444]	; (80045b4 <SModbus_Init+0x200>)
 80043f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8


	Slave_Modbus.Device->Coil[0].Addr = 0x0020;
 80043fc:	4b6a      	ldr	r3, [pc, #424]	; (80045a8 <SModbus_Init+0x1f4>)
 80043fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004402:	2220      	movs	r2, #32
 8004404:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	Slave_Modbus.Device->Coil[0].Value = true;
 8004408:	4b67      	ldr	r3, [pc, #412]	; (80045a8 <SModbus_Init+0x1f4>)
 800440a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	Slave_Modbus.Device->Coil[1].Addr = 0x0021;
 8004414:	4b64      	ldr	r3, [pc, #400]	; (80045a8 <SModbus_Init+0x1f4>)
 8004416:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800441a:	2221      	movs	r2, #33	; 0x21
 800441c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	Slave_Modbus.Device->Coil[1].Value = true;
 8004420:	4b61      	ldr	r3, [pc, #388]	; (80045a8 <SModbus_Init+0x1f4>)
 8004422:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	Slave_Modbus.Device->Coil[2].Addr = 0x0022;
 800442c:	4b5e      	ldr	r3, [pc, #376]	; (80045a8 <SModbus_Init+0x1f4>)
 800442e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004432:	2222      	movs	r2, #34	; 0x22
 8004434:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	Slave_Modbus.Device->Coil[2].Value = true;
 8004438:	4b5b      	ldr	r3, [pc, #364]	; (80045a8 <SModbus_Init+0x1f4>)
 800443a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800443e:	2201      	movs	r2, #1
 8004440:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	Slave_Modbus.Device->Coil[3].Addr = 0x0023;
 8004444:	4b58      	ldr	r3, [pc, #352]	; (80045a8 <SModbus_Init+0x1f4>)
 8004446:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800444a:	2223      	movs	r2, #35	; 0x23
 800444c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	Slave_Modbus.Device->Coil[3].Value = true;
 8004450:	4b55      	ldr	r3, [pc, #340]	; (80045a8 <SModbus_Init+0x1f4>)
 8004452:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004456:	2201      	movs	r2, #1
 8004458:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Slave_Modbus.Device->Coil[4].Addr = 0x0024;
 800445c:	4b52      	ldr	r3, [pc, #328]	; (80045a8 <SModbus_Init+0x1f4>)
 800445e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004462:	2224      	movs	r2, #36	; 0x24
 8004464:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	Slave_Modbus.Device->Coil[4].Value = true;
 8004468:	4b4f      	ldr	r3, [pc, #316]	; (80045a8 <SModbus_Init+0x1f4>)
 800446a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	Slave_Modbus.Device->Reg[0].Addr = 30010;
 8004474:	4b4c      	ldr	r3, [pc, #304]	; (80045a8 <SModbus_Init+0x1f4>)
 8004476:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800447a:	f247 523a 	movw	r2, #30010	; 0x753a
 800447e:	801a      	strh	r2, [r3, #0]
	Slave_Modbus.Device->Reg[1].Addr = 30011;
 8004480:	4b49      	ldr	r3, [pc, #292]	; (80045a8 <SModbus_Init+0x1f4>)
 8004482:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004486:	f247 523b 	movw	r2, #30011	; 0x753b
 800448a:	809a      	strh	r2, [r3, #4]
	Slave_Modbus.Device->Reg[2].Addr = 30012;
 800448c:	4b46      	ldr	r3, [pc, #280]	; (80045a8 <SModbus_Init+0x1f4>)
 800448e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004492:	f247 523c 	movw	r2, #30012	; 0x753c
 8004496:	811a      	strh	r2, [r3, #8]
	Slave_Modbus.Device->Reg[3].Addr = 30013;
 8004498:	4b43      	ldr	r3, [pc, #268]	; (80045a8 <SModbus_Init+0x1f4>)
 800449a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800449e:	f247 523d 	movw	r2, #30013	; 0x753d
 80044a2:	819a      	strh	r2, [r3, #12]
	Slave_Modbus.Device->Reg[4].Addr = 30014;
 80044a4:	4b40      	ldr	r3, [pc, #256]	; (80045a8 <SModbus_Init+0x1f4>)
 80044a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044aa:	f247 523e 	movw	r2, #30014	; 0x753e
 80044ae:	821a      	strh	r2, [r3, #16]
	Slave_Modbus.Device->Reg[0].Value = 0x0020;
 80044b0:	4b3d      	ldr	r3, [pc, #244]	; (80045a8 <SModbus_Init+0x1f4>)
 80044b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044b6:	2220      	movs	r2, #32
 80044b8:	805a      	strh	r2, [r3, #2]
	Slave_Modbus.Device->Reg[1].Value = 0x0010;
 80044ba:	4b3b      	ldr	r3, [pc, #236]	; (80045a8 <SModbus_Init+0x1f4>)
 80044bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044c0:	2210      	movs	r2, #16
 80044c2:	80da      	strh	r2, [r3, #6]
	Slave_Modbus.Device->Reg[2].Value = 0x0020;
 80044c4:	4b38      	ldr	r3, [pc, #224]	; (80045a8 <SModbus_Init+0x1f4>)
 80044c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044ca:	2220      	movs	r2, #32
 80044cc:	815a      	strh	r2, [r3, #10]
	Slave_Modbus.Device->Reg[3].Value = 0x0040;
 80044ce:	4b36      	ldr	r3, [pc, #216]	; (80045a8 <SModbus_Init+0x1f4>)
 80044d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044d4:	2240      	movs	r2, #64	; 0x40
 80044d6:	81da      	strh	r2, [r3, #14]
	Slave_Modbus.Device->Reg[4].Value = 0xff20;
 80044d8:	4b33      	ldr	r3, [pc, #204]	; (80045a8 <SModbus_Init+0x1f4>)
 80044da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044de:	f64f 7220 	movw	r2, #65312	; 0xff20
 80044e2:	825a      	strh	r2, [r3, #18]




	Slave_Modbus.Device->Coil[5].Addr = AC_ONOFF_STATE_ADDR;
 80044e4:	4b30      	ldr	r3, [pc, #192]	; (80045a8 <SModbus_Init+0x1f4>)
 80044e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	Slave_Modbus.Device->Coil[5].Value = false;
 80044f2:	4b2d      	ldr	r3, [pc, #180]	; (80045a8 <SModbus_Init+0x1f4>)
 80044f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	Slave_Modbus.Device->Reg[5].Addr = AC_TEMP_VALUE_ADDR;
 80044fe:	4b2a      	ldr	r3, [pc, #168]	; (80045a8 <SModbus_Init+0x1f4>)
 8004500:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004504:	f648 02b8 	movw	r2, #35000	; 0x88b8
 8004508:	829a      	strh	r2, [r3, #20]
	Slave_Modbus.Device->Reg[5].Value = 22;
 800450a:	4b27      	ldr	r3, [pc, #156]	; (80045a8 <SModbus_Init+0x1f4>)
 800450c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004510:	2216      	movs	r2, #22
 8004512:	82da      	strh	r2, [r3, #22]

	Slave_Modbus.Device->Coil[6].Addr = GPIO_0_ADDR;
 8004514:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <SModbus_Init+0x1f4>)
 8004516:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800451a:	f241 328a 	movw	r2, #5002	; 0x138a
 800451e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	Slave_Modbus.Device->Coil[6].Value = false;
 8004522:	4b21      	ldr	r3, [pc, #132]	; (80045a8 <SModbus_Init+0x1f4>)
 8004524:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004528:	2200      	movs	r2, #0
 800452a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	Slave_Modbus.Device->Coil[7].Addr = GPIO_1_ADDR;
 800452e:	4b1e      	ldr	r3, [pc, #120]	; (80045a8 <SModbus_Init+0x1f4>)
 8004530:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004534:	f241 328b 	movw	r2, #5003	; 0x138b
 8004538:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	Slave_Modbus.Device->Coil[7].Value = false;
 800453c:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <SModbus_Init+0x1f4>)
 800453e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004542:	2200      	movs	r2, #0
 8004544:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	Slave_Modbus.Device->Coil[8].Addr = GPIO_2_ADDR;
 8004548:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <SModbus_Init+0x1f4>)
 800454a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800454e:	f241 328c 	movw	r2, #5004	; 0x138c
 8004552:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
	Slave_Modbus.Device->Coil[8].Value = false;
 8004556:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <SModbus_Init+0x1f4>)
 8004558:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	Slave_Modbus.Device->Coil[9].Addr = GPIO_3_ADDR;
 8004562:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <SModbus_Init+0x1f4>)
 8004564:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004568:	f241 328d 	movw	r2, #5005	; 0x138d
 800456c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	Slave_Modbus.Device->Coil[9].Value = false;
 8004570:	4b0d      	ldr	r3, [pc, #52]	; (80045a8 <SModbus_Init+0x1f4>)
 8004572:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	Slave_Modbus.Device->Coil[10].Addr = GPIO_4_ADDR;
 800457c:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <SModbus_Init+0x1f4>)
 800457e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004582:	f241 328e 	movw	r2, #5006	; 0x138e
 8004586:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	Slave_Modbus.Device->Coil[10].Value = false;
 800458a:	4b07      	ldr	r3, [pc, #28]	; (80045a8 <SModbus_Init+0x1f4>)
 800458c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004590:	2200      	movs	r2, #0
 8004592:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a

	ModbusInit(&Slave_Modbus);
 8004596:	4804      	ldr	r0, [pc, #16]	; (80045a8 <SModbus_Init+0x1f4>)
 8004598:	f000 f80e 	bl	80045b8 <ModbusInit>
	ModbusStart(&Slave_Modbus);
 800459c:	4802      	ldr	r0, [pc, #8]	; (80045a8 <SModbus_Init+0x1f4>)
 800459e:	f000 f8a1 	bl	80046e4 <ModbusStart>
}
 80045a2:	bf00      	nop
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20004cb8 	.word	0x20004cb8
 80045ac:	20004b84 	.word	0x20004b84
 80045b0:	20004ca4 	.word	0x20004ca4
 80045b4:	20004bfc 	.word	0x20004bfc

080045b8 <ModbusInit>:
 * of the modbus handler
 *
 * @param modH   modbus handler
 */
void ModbusInit(modbusHandler_t * modH)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af02      	add	r7, sp, #8
 80045be:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 80045c0:	4b3e      	ldr	r3, [pc, #248]	; (80046bc <ModbusInit+0x104>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d874      	bhi.n	80046b2 <ModbusInit+0xfa>
  {

	  //Initialize the ring buffer

	  RingClear(&modH->xBufferRX);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	33c4      	adds	r3, #196	; 0xc4
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff fed6 	bl	800437e <RingClear>

	  if(modH->uModbusType == MB_SLAVE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d109      	bne.n	80045ee <ModbusInit+0x36>
		  }
		  else{
			  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
		  }
#else
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 80045da:	4a39      	ldr	r2, [pc, #228]	; (80046c0 <ModbusInit+0x108>)
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	4839      	ldr	r0, [pc, #228]	; (80046c4 <ModbusInit+0x10c>)
 80045e0:	f000 fff4 	bl	80055cc <osThreadNew>
 80045e4:	4602      	mov	r2, r0
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80045ec:	e02a      	b.n	8004644 <ModbusInit+0x8c>
#endif


	  }
	  else if (modH->uModbusType == MB_MASTER)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d125      	bne.n	8004642 <ModbusInit+0x8a>
#endif



		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8b3 30a2 	ldrh.w	r3, [r3, #162]	; 0xa2
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 80045fc:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8004604:	4a30      	ldr	r2, [pc, #192]	; (80046c8 <ModbusInit+0x110>)
 8004606:	9200      	str	r2, [sp, #0]
 8004608:	2200      	movs	r2, #0
 800460a:	4830      	ldr	r0, [pc, #192]	; (80046cc <ModbusInit+0x114>)
 800460c:	f003 fbe0 	bl	8007dd0 <xTimerCreate>
 8004610:	4602      	mov	r2, r0
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);

		  if(modH->xTimerTimeout == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800461e:	2b00      	cmp	r3, #0
 8004620:	d100      	bne.n	8004624 <ModbusInit+0x6c>
		  {
			  while(1); //error creating timer, check heap and stack size
 8004622:	e7fe      	b.n	8004622 <ModbusInit+0x6a>
		  }


		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8004624:	4a2a      	ldr	r2, [pc, #168]	; (80046d0 <ModbusInit+0x118>)
 8004626:	2110      	movs	r1, #16
 8004628:	2002      	movs	r0, #2
 800462a:	f001 f905 	bl	8005838 <osMessageQueueNew>
 800462e:	4602      	mov	r2, r0
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		  if(modH->QueueTelegramHandle == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <ModbusInit+0x8c>
		  {
			  while(1); //error creating queue for telegrams, check heap and stack size
 8004640:	e7fe      	b.n	8004640 <ModbusInit+0x88>
		  }

	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8004642:	e7fe      	b.n	8004642 <ModbusInit+0x8a>
	  }

	  if  (modH->myTaskModbusAHandle == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800464a:	2b00      	cmp	r3, #0
 800464c:	d100      	bne.n	8004650 <ModbusInit+0x98>
	  {
		  while(1); //Error creating Modbus task, check heap and stack size
 800464e:	e7fe      	b.n	800464e <ModbusInit+0x96>


	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	T35 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8004656:	4a1f      	ldr	r2, [pc, #124]	; (80046d4 <ModbusInit+0x11c>)
 8004658:	9200      	str	r2, [sp, #0]
 800465a:	2200      	movs	r2, #0
 800465c:	2105      	movs	r1, #5
 800465e:	481e      	ldr	r0, [pc, #120]	; (80046d8 <ModbusInit+0x120>)
 8004660:	f003 fbb6 	bl	8007dd0 <xTimerCreate>
 8004664:	4602      	mov	r2, r0
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );
	  if (modH->xTimerT35 == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d100      	bne.n	8004678 <ModbusInit+0xc0>
	  {
		  while(1); //Error creating the timer, check heap and stack size
 8004676:	e7fe      	b.n	8004676 <ModbusInit+0xbe>
	  }


	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8004678:	4a18      	ldr	r2, [pc, #96]	; (80046dc <ModbusInit+0x124>)
 800467a:	2101      	movs	r1, #1
 800467c:	2001      	movs	r0, #1
 800467e:	f001 f852 	bl	8005726 <osSemaphoreNew>
 8004682:	4602      	mov	r2, r0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	  if(modH->ModBusSphrHandle == NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d100      	bne.n	8004696 <ModbusInit+0xde>
	  {
		  while(1); //Error creating the semaphore, check heap and stack size
 8004694:	e7fe      	b.n	8004694 <ModbusInit+0xdc>
	  }

	  mHandlers[numberHandlers] = modH;
 8004696:	4b09      	ldr	r3, [pc, #36]	; (80046bc <ModbusInit+0x104>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	4619      	mov	r1, r3
 800469c:	4a10      	ldr	r2, [pc, #64]	; (80046e0 <ModbusInit+0x128>)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <ModbusInit+0x104>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	4b03      	ldr	r3, [pc, #12]	; (80046bc <ModbusInit+0x104>)
 80046ae:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 80046b0:	e000      	b.n	80046b4 <ModbusInit+0xfc>
	  while(1); //error no more Modbus handlers supported
 80046b2:	e7fe      	b.n	80046b2 <ModbusInit+0xfa>
}
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	2000009c 	.word	0x2000009c
 80046c0:	08009000 	.word	0x08009000
 80046c4:	080048cd 	.word	0x080048cd
 80046c8:	08004871 	.word	0x08004871
 80046cc:	08008f78 	.word	0x08008f78
 80046d0:	08008fe8 	.word	0x08008fe8
 80046d4:	080047ed 	.word	0x080047ed
 80046d8:	08008f88 	.word	0x08008f88
 80046dc:	08009024 	.word	0x08009024
 80046e0:	20004c9c 	.word	0x20004c9c

080046e4 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]

	if(modH->xTypeHW != USART_HW && modH->xTypeHW != TCP_HW && modH->xTypeHW != USB_CDC_HW  && modH->xTypeHW != USART_HW_DMA )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d00f      	beq.n	8004716 <ModbusStart+0x32>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d00a      	beq.n	8004716 <ModbusStart+0x32>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8004706:	2b02      	cmp	r3, #2
 8004708:	d005      	beq.n	8004716 <ModbusStart+0x32>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8004710:	2b04      	cmp	r3, #4
 8004712:	d000      	beq.n	8004716 <ModbusStart+0x32>
	{

		while(1); //ERROR select the type of hardware
 8004714:	e7fe      	b.n	8004714 <ModbusStart+0x30>
	}

	if (modH->xTypeHW == USART_HW_DMA && ENABLE_USART_DMA == 0  )
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800471c:	2b04      	cmp	r3, #4
 800471e:	d100      	bne.n	8004722 <ModbusStart+0x3e>
	{
		while(1); //ERROR To use USART_HW_DMA you need to enable it in the ModbusConfig.h file
 8004720:	e7fe      	b.n	8004720 <ModbusStart+0x3c>
	}



	if (modH->xTypeHW == USART_HW || modH->xTypeHW ==  USART_HW_DMA )
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8004728:	2b01      	cmp	r3, #1
 800472a:	d004      	beq.n	8004736 <ModbusStart+0x52>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8004732:	2b04      	cmp	r3, #4
 8004734:	d13c      	bne.n	80047b0 <ModbusStart+0xcc>
	{

	      if (modH->EN_Port != NULL )
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <ModbusStart+0x6a>
          {
              // return RS485 transceiver to transmit mode
          	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68d8      	ldr	r0, [r3, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	8a1b      	ldrh	r3, [r3, #16]
 8004746:	2200      	movs	r2, #0
 8004748:	4619      	mov	r1, r3
 800474a:	f7fd f9ad 	bl	8001aa8 <HAL_GPIO_WritePin>
          }

          if (modH->uModbusType == MB_SLAVE &&  modH->u16regs == NULL )
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b03      	cmp	r3, #3
 8004754:	d105      	bne.n	8004762 <ModbusStart+0x7e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800475c:	2b00      	cmp	r3, #0
 800475e:	d100      	bne.n	8004762 <ModbusStart+0x7e>
          {
          	while(1); //ERROR define the DATA pointer shared through Modbus
 8004760:	e7fe      	b.n	8004760 <ModbusStart+0x7c>
          }

          //check that port is initialized
          while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8004762:	bf00      	nop
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	4618      	mov	r0, r3
 800476a:	f7fe fdeb 	bl	8003344 <HAL_UART_GetState>
 800476e:	4603      	mov	r3, r0
 8004770:	2b20      	cmp	r3, #32
 8004772:	d1f7      	bne.n	8004764 <ModbusStart+0x80>
          }


#else
          // Receive data from serial port for Modbus using interrupt
          if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6858      	ldr	r0, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	33a6      	adds	r3, #166	; 0xa6
 800477c:	2201      	movs	r2, #1
 800477e:	4619      	mov	r1, r3
 8004780:	f7fe f9e8 	bl	8002b54 <HAL_UART_Receive_IT>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d000      	beq.n	800478c <ModbusStart+0xa8>
          {
                while(1)
 800478a:	e7fe      	b.n	800478a <ModbusStart+0xa6>
                 }
          }

#endif

          if(modH->u8id !=0 && modH->uModbusType == MB_MASTER )
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	7a1b      	ldrb	r3, [r3, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <ModbusStart+0xba>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b04      	cmp	r3, #4
 800479a:	d100      	bne.n	800479e <ModbusStart+0xba>
          {
        	  while(1)
 800479c:	e7fe      	b.n	800479c <ModbusStart+0xb8>
        	     	  //error Master ID must be zero
        	  }

          }

          if(modH->u8id ==0 && modH->uModbusType == MB_SLAVE )
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	7a1b      	ldrb	r3, [r3, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d104      	bne.n	80047b0 <ModbusStart+0xcc>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	d100      	bne.n	80047b0 <ModbusStart+0xcc>
          {
             	  while(1)
 80047ae:	e7fe      	b.n	80047ae <ModbusStart+0xca>


#endif


    modH->u8lastRec = modH->u8BufferSize = 0;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 2093 	ldrb.w	r2, [r3, #147]	; 0x93
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8b3 20a0 	ldrh.w	r2, [r3, #160]	; 0xa0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8b3 209e 	ldrh.w	r2, [r3, #158]	; 0x9e
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

}
 80047e4:	bf00      	nop
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <vTimerCallbackT35>:
}
#endif


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af02      	add	r7, sp, #8
 80047f2:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	e02a      	b.n	8004850 <vTimerCallbackT35+0x64>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 80047fa:	4a1b      	ldr	r2, [pc, #108]	; (8004868 <vTimerCallbackT35+0x7c>)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004802:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	429a      	cmp	r2, r3
 800480a:	d11e      	bne.n	800484a <vTimerCallbackT35+0x5e>
			if(mHandlers[i]->uModbusType == MB_MASTER)
 800480c:	4a16      	ldr	r2, [pc, #88]	; (8004868 <vTimerCallbackT35+0x7c>)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b04      	cmp	r3, #4
 8004818:	d10c      	bne.n	8004834 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 800481a:	4a13      	ldr	r2, [pc, #76]	; (8004868 <vTimerCallbackT35+0x7c>)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004822:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
 8004826:	2300      	movs	r3, #0
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	2300      	movs	r3, #0
 800482c:	2200      	movs	r2, #0
 800482e:	2103      	movs	r1, #3
 8004830:	f003 fb2a 	bl	8007e88 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8004834:	4a0c      	ldr	r2, [pc, #48]	; (8004868 <vTimerCallbackT35+0x7c>)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483c:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8004840:	2300      	movs	r3, #0
 8004842:	2203      	movs	r2, #3
 8004844:	2100      	movs	r1, #0
 8004846:	f003 f885 	bl	8007954 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3301      	adds	r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	4b06      	ldr	r3, [pc, #24]	; (800486c <vTimerCallbackT35+0x80>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4293      	cmp	r3, r2
 800485a:	dbce      	blt.n	80047fa <vTimerCallbackT35+0xe>
		}

	}
}
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20004c9c 	.word	0x20004c9c
 800486c:	2000009c 	.word	0x2000009c

08004870 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	e017      	b.n	80048ae <vTimerCallbackTimeout+0x3e>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800487e:	4a11      	ldr	r2, [pc, #68]	; (80048c4 <vTimerCallbackTimeout+0x54>)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004886:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d10b      	bne.n	80048a8 <vTimerCallbackTimeout+0x38>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, ERR_TIME_OUT, eSetValueWithOverwrite);
 8004890:	4a0c      	ldr	r2, [pc, #48]	; (80048c4 <vTimerCallbackTimeout+0x54>)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004898:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 800489c:	2300      	movs	r3, #0
 800489e:	2203      	movs	r2, #3
 80048a0:	f06f 0107 	mvn.w	r1, #7
 80048a4:	f003 f856 	bl	8007954 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	3301      	adds	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <vTimerCallbackTimeout+0x58>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4293      	cmp	r3, r2
 80048b8:	dbe1      	blt.n	800487e <vTimerCallbackTimeout+0xe>
		}

	}

}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	20004c9c 	.word	0x20004c9c
 80048c8:	2000009c 	.word	0x2000009c

080048cc <StartTaskModbusSlave>:
#endif



void StartTaskModbusSlave(void *argument)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	60fb      	str	r3, [r7, #12]
#endif

  for(;;)
  {

	modH->i8lastError = 0;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	749a      	strb	r2, [r3, #18]

	  }
#endif


   if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d004      	beq.n	80048f2 <StartTaskModbusSlave+0x26>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d117      	bne.n	8004922 <StartTaskModbusSlave+0x56>
   {

	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block until a Modbus Frame arrives */
 80048f2:	f04f 31ff 	mov.w	r1, #4294967295
 80048f6:	2001      	movs	r0, #1
 80048f8:	f002 ffe0 	bl	80078bc <ulTaskNotifyTake>

	  if (getRxBuffer(modH) == ERR_BUFF_OVERFLOW)
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f8b7 	bl	8004a70 <getRxBuffer>
 8004902:	4603      	mov	r3, r0
 8004904:	f113 0f03 	cmn.w	r3, #3
 8004908:	d10b      	bne.n	8004922 <StartTaskModbusSlave+0x56>
	  {
	      modH->i8lastError = ERR_BUFF_OVERFLOW;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	22fd      	movs	r2, #253	; 0xfd
 800490e:	749a      	strb	r2, [r3, #18]
	   	  modH->u16errCnt++;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8004916:	3301      	adds	r3, #1
 8004918:	b29a      	uxth	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
		  continue;
 8004920:	e0a4      	b.n	8004a6c <StartTaskModbusSlave+0x1a0>
	  }

   }

   if (modH->u8BufferSize < 7)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004928:	2b06      	cmp	r3, #6
 800492a:	d80b      	bhi.n	8004944 <StartTaskModbusSlave+0x78>
   {
      //The size of the frame is invalid
      modH->i8lastError = ERR_BAD_SIZE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	22fa      	movs	r2, #250	; 0xfa
 8004930:	749a      	strb	r2, [r3, #18]
      modH->u16errCnt++;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8004938:	3301      	adds	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	  continue;
 8004942:	e093      	b.n	8004a6c <StartTaskModbusSlave+0x1a0>
    }


   // check slave id
    if ( modH->u8Buffer[ID] !=  modH->u8id)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	7cda      	ldrb	r2, [r3, #19]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	7a1b      	ldrb	r3, [r3, #8]
 800494c:	429a      	cmp	r2, r3
 800494e:	f040 808c 	bne.w	8004a6a <StartTaskModbusSlave+0x19e>
    	}
#endif
	 }

	  // validate message: CRC, FCT, address and size
    uint8_t u8exception = validateRequest(modH);
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f8d6 	bl	8004b04 <validateRequest>
 8004958:	4603      	mov	r3, r0
 800495a:	72fb      	strb	r3, [r7, #11]
	if (u8exception > 0)
 800495c:	7afb      	ldrb	r3, [r7, #11]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00c      	beq.n	800497c <StartTaskModbusSlave+0xb0>
	{
	    if (u8exception != ERR_TIME_OUT)
		{
		    buildException( u8exception, modH);
 8004962:	7afb      	ldrb	r3, [r7, #11]
 8004964:	68f9      	ldr	r1, [r7, #12]
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fa29 	bl	8004dbe <buildException>
			sendTxBuffer(modH);
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 fa45 	bl	8004dfc <sendTxBuffer>
		}
		modH->i8lastError = u8exception;
 8004972:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	749a      	strb	r2, [r3, #18]
		//return u8exception

		continue;
 800497a:	e077      	b.n	8004a6c <StartTaskModbusSlave+0x1a0>
	 }

	 modH->i8lastError = 0;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	749a      	strb	r2, [r3, #18]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004988:	f04f 31ff 	mov.w	r1, #4294967295
 800498c:	4618      	mov	r0, r3
 800498e:	f001 fcd1 	bl	8006334 <xQueueSemaphoreTake>

	 // process message
	 switch(modH->u8Buffer[ FUNC ] )
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	7d1b      	ldrb	r3, [r3, #20]
 8004996:	3b01      	subs	r3, #1
 8004998:	2b0f      	cmp	r3, #15
 800499a:	d859      	bhi.n	8004a50 <StartTaskModbusSlave+0x184>
 800499c:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <StartTaskModbusSlave+0xd8>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049e5 	.word	0x080049e5
 80049a8:	080049e5 	.word	0x080049e5
 80049ac:	080049f7 	.word	0x080049f7
 80049b0:	080049f7 	.word	0x080049f7
 80049b4:	08004a09 	.word	0x08004a09
 80049b8:	08004a1b 	.word	0x08004a1b
 80049bc:	08004a51 	.word	0x08004a51
 80049c0:	08004a51 	.word	0x08004a51
 80049c4:	08004a51 	.word	0x08004a51
 80049c8:	08004a51 	.word	0x08004a51
 80049cc:	08004a51 	.word	0x08004a51
 80049d0:	08004a51 	.word	0x08004a51
 80049d4:	08004a51 	.word	0x08004a51
 80049d8:	08004a51 	.word	0x08004a51
 80049dc:	08004a2d 	.word	0x08004a2d
 80049e0:	08004a3f 	.word	0x08004a3f
	 {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				// modH->i8state = process_FC1(modH);
				modH->i8state = Slave_Fc1(modH);
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 faac 	bl	8004f42 <Slave_Fc1>
 80049ea:	4603      	mov	r3, r0
 80049ec:	461a      	mov	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				//sendTxBuffer(modH);
				break;
 80049f4:	e02d      	b.n	8004a52 <StartTaskModbusSlave+0x186>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				// modH->i8state = process_FC3(modH);
				modH->i8state = Slave_Fc3(modH);
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fb4e 	bl	8005098 <Slave_Fc3>
 80049fc:	4603      	mov	r3, r0
 80049fe:	461a      	mov	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				//sendTxBuffer(modH);
				break;
 8004a06:	e024      	b.n	8004a52 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_COIL:
				modH->i8state = Slave_Fc5(modH);
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fba8 	bl	800515e <Slave_Fc5>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	461a      	mov	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				//sendTxBuffer(modH);
				break;
 8004a18:	e01b      	b.n	8004a52 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_REGISTER :
				// modH->i8state = process_FC6(modH);
				modH->i8state = Slave_Fc6(modH);
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 fbcb 	bl	80051b6 <Slave_Fc6>
 8004a20:	4603      	mov	r3, r0
 8004a22:	461a      	mov	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				//sendTxBuffer(modH);
				break;
 8004a2a:	e012      	b.n	8004a52 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = Slave_Fc15(modH);
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 fc40 	bl	80052b2 <Slave_Fc15>
 8004a32:	4603      	mov	r3, r0
 8004a34:	461a      	mov	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				//sendTxBuffer(modH);
				break;
 8004a3c:	e009      	b.n	8004a52 <StartTaskModbusSlave+0x186>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				// modH->i8state = process_FC16(modH);
				modH->i8state = Slave_Fc16(modH);
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	f000 fbe6 	bl	8005210 <Slave_Fc16>
 8004a44:	4603      	mov	r3, r0
 8004a46:	461a      	mov	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
				//sendTxBuffer(modH);
				break;
 8004a4e:	e000      	b.n	8004a52 <StartTaskModbusSlave+0x186>
			default:
				break;
 8004a50:	bf00      	nop
	 }
	sendTxBuffer(modH);
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f9d2 	bl	8004dfc <sendTxBuffer>

	 xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8004a5e:	2300      	movs	r3, #0
 8004a60:	2200      	movs	r2, #0
 8004a62:	2100      	movs	r1, #0
 8004a64:	f001 f9ec 	bl	8005e40 <xQueueGenericSend>

	 continue;
 8004a68:	e000      	b.n	8004a6c <StartTaskModbusSlave+0x1a0>
    	continue; // continue this is not for us
 8004a6a:	bf00      	nop
  {
 8004a6c:	e734      	b.n	80048d8 <StartTaskModbusSlave+0xc>
 8004a6e:	bf00      	nop

08004a70 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int16_t getRxBuffer(modbusHandler_t *modH)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]

    int16_t i16result;

    if(modH->xTypeHW == USART_HW)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d104      	bne.n	8004a8c <getRxBuffer+0x1c>
    {
    	HAL_UART_AbortReceive_IT(modH->port); // disable interrupts to avoid race conditions on serial port
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fe f894 	bl	8002bb4 <HAL_UART_AbortReceive_IT>
    }

	if (modH->xBufferRX.overflow)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3147 	ldrb.w	r3, [r3, #327]	; 0x147
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <getRxBuffer+0x38>
    {
       	RingClear(&modH->xBufferRX); // clean up the overflowed buffer
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	33c4      	adds	r3, #196	; 0xc4
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff fc6f 	bl	800437e <RingClear>
       	i16result =  ERR_BUFF_OVERFLOW;
 8004aa0:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8004aa4:	81fb      	strh	r3, [r7, #14]
 8004aa6:	e019      	b.n	8004adc <getRxBuffer+0x6c>
    }
	else
	{
		modH->u8BufferSize = RingGetAllBytes(&modH->xBufferRX, modH->u8Buffer);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3313      	adds	r3, #19
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	f7ff fbfc 	bl	80042b2 <RingGetAllBytes>
 8004aba:	4603      	mov	r3, r0
 8004abc:	461a      	mov	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
		modH->u16InCnt++;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8004aca:	3301      	adds	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
		i16result = modH->u8BufferSize;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004ada:	81fb      	strh	r3, [r7, #14]
	}

	if(modH->xTypeHW == USART_HW)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d107      	bne.n	8004af6 <getRxBuffer+0x86>
	{
		HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6858      	ldr	r0, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	33a6      	adds	r3, #166	; 0xa6
 8004aee:	2201      	movs	r2, #1
 8004af0:	4619      	mov	r1, r3
 8004af2:	f7fe f82f 	bl	8002b54 <HAL_UART_Receive_IT>
	}

    return i16result;
 8004af6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
	    		return ERR_BAD_CRC;
	    		}
	    }
#else
	    uint16_t u16MsgCRC;
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004b12:	3b02      	subs	r3, #2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	4413      	add	r3, r2
 8004b18:	7cdb      	ldrb	r3, [r3, #19]
 8004b1a:	021b      	lsls	r3, r3, #8
	    		   	         | modH->u8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8004b1c:	b21a      	sxth	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004b24:	3b01      	subs	r3, #1
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	440b      	add	r3, r1
 8004b2a:	7cdb      	ldrb	r3, [r3, #19]
 8004b2c:	b21b      	sxth	r3, r3
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	b21b      	sxth	r3, r3
	    u16MsgCRC= ((modH->u8Buffer[modH->u8BufferSize - 2] << 8)
 8004b32:	813b      	strh	r3, [r7, #8]


	    if ( calcCRC( modH->u8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f103 0213 	add.w	r2, r3, #19
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004b40:	3b02      	subs	r3, #2
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f7ff fb25 	bl	8004196 <calcCRC>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	461a      	mov	r2, r3
 8004b50:	893b      	ldrh	r3, [r7, #8]
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d009      	beq.n	8004b6a <validateRequest+0x66>
	    {
	       		modH->u16errCnt ++;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	       		return ERR_BAD_CRC;
 8004b66:	23fc      	movs	r3, #252	; 0xfc
 8004b68:	e10f      	b.n	8004d8a <validateRequest+0x286>


#endif

	    // check fct code
	    bool isSupported = false;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8004b6e:	2300      	movs	r3, #0
 8004b70:	73bb      	strb	r3, [r7, #14]
 8004b72:	e00c      	b.n	8004b8e <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->u8Buffer[FUNC])
 8004b74:	7bbb      	ldrb	r3, [r7, #14]
 8004b76:	4a87      	ldr	r2, [pc, #540]	; (8004d94 <validateRequest+0x290>)
 8004b78:	5cd2      	ldrb	r2, [r2, r3]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	7d1b      	ldrb	r3, [r3, #20]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d102      	bne.n	8004b88 <validateRequest+0x84>
	        {
	            isSupported = 1;
 8004b82:	2301      	movs	r3, #1
 8004b84:	73fb      	strb	r3, [r7, #15]
	            break;
 8004b86:	e005      	b.n	8004b94 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8004b88:	7bbb      	ldrb	r3, [r7, #14]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	73bb      	strb	r3, [r7, #14]
 8004b8e:	7bbb      	ldrb	r3, [r7, #14]
 8004b90:	2b07      	cmp	r3, #7
 8004b92:	d9ef      	bls.n	8004b74 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8004b94:	7bfb      	ldrb	r3, [r7, #15]
 8004b96:	f083 0301 	eor.w	r3, r3, #1
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d009      	beq.n	8004bb4 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	; 0xa0
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	        return EXC_FUNC_CODE;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0ea      	b.n	8004d8a <validateRequest+0x286>
	    }

	    // check start address & nb range
	    uint16_t u16AdRegs = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	81bb      	strh	r3, [r7, #12]
	    uint16_t u16NRegs = 0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	817b      	strh	r3, [r7, #10]

	    //uint8_t u8regs;
	    switch ( modH->u8Buffer[ FUNC ] )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	7d1b      	ldrb	r3, [r3, #20]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	2b0f      	cmp	r3, #15
 8004bc4:	f200 80e0 	bhi.w	8004d88 <validateRequest+0x284>
 8004bc8:	a201      	add	r2, pc, #4	; (adr r2, 8004bd0 <validateRequest+0xcc>)
 8004bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bce:	bf00      	nop
 8004bd0:	08004c11 	.word	0x08004c11
 8004bd4:	08004c11 	.word	0x08004c11
 8004bd8:	08004d29 	.word	0x08004d29
 8004bdc:	08004d29 	.word	0x08004d29
 8004be0:	08004cbd 	.word	0x08004cbd
 8004be4:	08004d05 	.word	0x08004d05
 8004be8:	08004d89 	.word	0x08004d89
 8004bec:	08004d89 	.word	0x08004d89
 8004bf0:	08004d89 	.word	0x08004d89
 8004bf4:	08004d89 	.word	0x08004d89
 8004bf8:	08004d89 	.word	0x08004d89
 8004bfc:	08004d89 	.word	0x08004d89
 8004c00:	08004d89 	.word	0x08004d89
 8004c04:	08004d89 	.word	0x08004d89
 8004c08:	08004c11 	.word	0x08004c11
 8004c0c:	08004d29 	.word	0x08004d29
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	7d5a      	ldrb	r2, [r3, #21]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	7d9b      	ldrb	r3, [r3, #22]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	f000 f8bc 	bl	8004d98 <word>
 8004c20:	4603      	mov	r3, r0
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	81bb      	strh	r3, [r7, #12]
	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) /16;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	7dda      	ldrb	r2, [r3, #23]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	7e1b      	ldrb	r3, [r3, #24]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4610      	mov	r0, r2
 8004c32:	f000 f8b1 	bl	8004d98 <word>
 8004c36:	4603      	mov	r3, r0
 8004c38:	091b      	lsrs	r3, r3, #4
 8004c3a:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 16) u16NRegs++; // check for incomplete words
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	7dda      	ldrb	r2, [r3, #23]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	7e1b      	ldrb	r3, [r3, #24]
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f000 f8a6 	bl	8004d98 <word>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <validateRequest+0x15a>
 8004c58:	897b      	ldrh	r3, [r7, #10]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	817b      	strh	r3, [r7, #10]
	    	// verify address range
	    	if((u16AdRegs + u16NRegs) > modH->u16regsize) return EXC_ADDR_RANGE;
 8004c5e:	89ba      	ldrh	r2, [r7, #12]
 8004c60:	897b      	ldrh	r3, [r7, #10]
 8004c62:	4413      	add	r3, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	dd01      	ble.n	8004c72 <validateRequest+0x16e>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e08b      	b.n	8004d8a <validateRequest+0x286>

	    	//verify answer frame size in bytes

	    	u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) / 8;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	7dda      	ldrb	r2, [r3, #23]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	7e1b      	ldrb	r3, [r3, #24]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	f000 f88b 	bl	8004d98 <word>
 8004c82:	4603      	mov	r3, r0
 8004c84:	08db      	lsrs	r3, r3, #3
 8004c86:	817b      	strh	r3, [r7, #10]
	    	if(word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]) % 8) u16NRegs++;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	7dda      	ldrb	r2, [r3, #23]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	7e1b      	ldrb	r3, [r3, #24]
 8004c90:	4619      	mov	r1, r3
 8004c92:	4610      	mov	r0, r2
 8004c94:	f000 f880 	bl	8004d98 <word>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	f003 0307 	and.w	r3, r3, #7
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <validateRequest+0x1a6>
 8004ca4:	897b      	ldrh	r3, [r7, #10]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	817b      	strh	r3, [r7, #10]
	    	u16NRegs = u16NRegs + 5; // adding the header  and CRC ( Slave address + Function code  + number of data bytes to follow + 2-byte CRC )
 8004caa:	897b      	ldrh	r3, [r7, #10]
 8004cac:	3305      	adds	r3, #5
 8004cae:	817b      	strh	r3, [r7, #10]
	        if(u16NRegs > 256) return EXC_REGS_QUANT;
 8004cb0:	897b      	ldrh	r3, [r7, #10]
 8004cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb6:	d960      	bls.n	8004d7a <validateRequest+0x276>
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e066      	b.n	8004d8a <validateRequest+0x286>

	        break;
	    case MB_FC_WRITE_COIL:
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) / 16;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	7d5a      	ldrb	r2, [r3, #21]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	7d9b      	ldrb	r3, [r3, #22]
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f000 f866 	bl	8004d98 <word>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	091b      	lsrs	r3, r3, #4
 8004cd0:	81bb      	strh	r3, [r7, #12]
	    	if(word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]) % 16) u16AdRegs++;	// check for incomplete words
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	7d5a      	ldrb	r2, [r3, #21]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	7d9b      	ldrb	r3, [r3, #22]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4610      	mov	r0, r2
 8004cde:	f000 f85b 	bl	8004d98 <word>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f003 030f 	and.w	r3, r3, #15
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <validateRequest+0x1f0>
 8004cee:	89bb      	ldrh	r3, [r7, #12]
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH->u16regsize) return EXC_ADDR_RANGE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8004cfa:	89ba      	ldrh	r2, [r7, #12]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d93e      	bls.n	8004d7e <validateRequest+0x27a>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e042      	b.n	8004d8a <validateRequest+0x286>
	        break;
	    case MB_FC_WRITE_REGISTER :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	7d5a      	ldrb	r2, [r3, #21]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	7d9b      	ldrb	r3, [r3, #22]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4610      	mov	r0, r2
 8004d10:	f000 f842 	bl	8004d98 <word>
 8004d14:	4603      	mov	r3, r0
 8004d16:	81bb      	strh	r3, [r7, #12]
	        if (u16AdRegs > modH-> u16regsize) return EXC_ADDR_RANGE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8004d1e:	89ba      	ldrh	r2, [r7, #12]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d92e      	bls.n	8004d82 <validateRequest+0x27e>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e030      	b.n	8004d8a <validateRequest+0x286>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	    	u16AdRegs = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ]);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	7d5a      	ldrb	r2, [r3, #21]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	7d9b      	ldrb	r3, [r3, #22]
 8004d30:	4619      	mov	r1, r3
 8004d32:	4610      	mov	r0, r2
 8004d34:	f000 f830 	bl	8004d98 <word>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	81bb      	strh	r3, [r7, #12]
	        u16NRegs = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ]);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	7dda      	ldrb	r2, [r3, #23]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	7e1b      	ldrb	r3, [r3, #24]
 8004d44:	4619      	mov	r1, r3
 8004d46:	4610      	mov	r0, r2
 8004d48:	f000 f826 	bl	8004d98 <word>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	817b      	strh	r3, [r7, #10]
	        if (( u16AdRegs + u16NRegs ) > modH->u16regsize) return EXC_ADDR_RANGE;
 8004d50:	89ba      	ldrh	r2, [r7, #12]
 8004d52:	897b      	ldrh	r3, [r7, #10]
 8004d54:	4413      	add	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	dd01      	ble.n	8004d64 <validateRequest+0x260>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e012      	b.n	8004d8a <validateRequest+0x286>

	        //verify answer frame size in bytes
	        u16NRegs = u16NRegs*2 + 5; // adding the header  and CRC
 8004d64:	897b      	ldrh	r3, [r7, #10]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3305      	adds	r3, #5
 8004d6c:	817b      	strh	r3, [r7, #10]
	        if ( u16NRegs > 256 ) return EXC_REGS_QUANT;
 8004d6e:	897b      	ldrh	r3, [r7, #10]
 8004d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d74:	d907      	bls.n	8004d86 <validateRequest+0x282>
 8004d76:	2303      	movs	r3, #3
 8004d78:	e007      	b.n	8004d8a <validateRequest+0x286>
	        break;
 8004d7a:	bf00      	nop
 8004d7c:	e004      	b.n	8004d88 <validateRequest+0x284>
	        break;
 8004d7e:	bf00      	nop
 8004d80:	e002      	b.n	8004d88 <validateRequest+0x284>
	        break;
 8004d82:	bf00      	nop
 8004d84:	e000      	b.n	8004d88 <validateRequest+0x284>
	        break;
 8004d86:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8004d88:	2300      	movs	r3, #0

}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	08009034 	.word	0x08009034

08004d98 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	4603      	mov	r3, r0
 8004da0:	460a      	mov	r2, r1
 8004da2:	71fb      	strb	r3, [r7, #7]
 8004da4:	4613      	mov	r3, r2
 8004da6:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8004da8:	79bb      	ldrb	r3, [r7, #6]
 8004daa:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8004db0:	89bb      	ldrh	r3, [r7, #12]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b085      	sub	sp, #20
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	6039      	str	r1, [r7, #0]
 8004dc8:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->u8Buffer[ FUNC ];  // get the original FUNC code
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	7d1b      	ldrb	r3, [r3, #20]
 8004dce:	73fb      	strb	r3, [r7, #15]

    modH->u8Buffer[ ID ]      = modH->u8id;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	7a1a      	ldrb	r2, [r3, #8]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	74da      	strb	r2, [r3, #19]
    modH->u8Buffer[ FUNC ]    = u8func + 0x80;
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	3b80      	subs	r3, #128	; 0x80
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	751a      	strb	r2, [r3, #20]
    modH->u8Buffer[ 2 ]       = u8exception;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	79fa      	ldrb	r2, [r7, #7]
 8004de6:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2203      	movs	r2, #3
 8004dec:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
}
 8004df0:	bf00      	nop
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
static void sendTxBuffer(modbusHandler_t *modH)
{
 8004dfc:	b590      	push	{r4, r7, lr}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af02      	add	r7, sp, #8
 8004e02:	6078      	str	r0, [r7, #4]
#if  ENABLE_TCP == 1
if(modH->xTypeHW != TCP_HW)
	 {
#endif

	uint16_t u16crc = calcCRC(modH->u8Buffer, modH->u8BufferSize);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f103 0213 	add.w	r2, r3, #19
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f7ff f9bf 	bl	8004196 <calcCRC>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	81fb      	strh	r3, [r7, #14]
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8004e1c:	89fb      	ldrh	r3, [r7, #14]
 8004e1e:	0a1b      	lsrs	r3, r3, #8
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004e28:	4619      	mov	r1, r3
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	440b      	add	r3, r1
 8004e30:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004e38:	3301      	adds	r3, #1
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004e48:	4619      	mov	r1, r3
 8004e4a:	89fb      	ldrh	r3, [r7, #14]
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	440b      	add	r3, r1
 8004e52:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
#if ENABLE_USB_CDC == 1 || ENABLE_TCP == 1
    if(modH->xTypeHW == USART_HW || modH->xTypeHW == USART_HW_DMA )
    {
#endif

    	if (modH->EN_Port != NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00c      	beq.n	8004e86 <sendTxBuffer+0x8a>
        {
    		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
    		HAL_HalfDuplex_EnableTransmitter(modH->port);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fe f9ff 	bl	8003274 <HAL_HalfDuplex_EnableTransmitter>
    		HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	68d8      	ldr	r0, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	8a1b      	ldrh	r3, [r3, #16]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	4619      	mov	r1, r3
 8004e82:	f7fc fe11 	bl	8001aa8 <HAL_GPIO_WritePin>
#if ENABLE_USART_DMA ==1
    	if(modH->xTypeHW == USART_HW)
    	{
#endif
    		// transfer buffer to serial line IT
    		HAL_UART_Transmit_IT(modH->port, modH->u8Buffer,  modH->u8BufferSize);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6858      	ldr	r0, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f103 0113 	add.w	r1, r3, #19
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	461a      	mov	r2, r3
 8004e9a:	f7fd fe16 	bl	8002aca <HAL_UART_Transmit_IT>
        	HAL_UART_Transmit_DMA(modH->port, modH->u8Buffer, modH->u8BufferSize);

        }
#endif

        ulTaskNotifyTake(pdTRUE, 250); //wait notification from TXE interrupt
 8004e9e:	21fa      	movs	r1, #250	; 0xfa
 8004ea0:	2001      	movs	r0, #1
 8004ea2:	f002 fd0b 	bl	80078bc <ulTaskNotifyTake>
*/
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)  
          while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
#else
          // F429, F103, L152 ...
	  while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8004ea6:	bf00      	nop
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0f7      	beq.n	8004ea8 <sendTxBuffer+0xac>
         {
 	        //block the task until the the last byte is send out of the shifting buffer in USART
         }


         if (modH->EN_Port != NULL)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00c      	beq.n	8004eda <sendTxBuffer+0xde>
         {

             //return RS485 transceiver to receive mode
        	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68d8      	ldr	r0, [r3, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8a1b      	ldrh	r3, [r3, #16]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	4619      	mov	r1, r3
 8004ecc:	f7fc fdec 	bl	8001aa8 <HAL_GPIO_WritePin>
        	 //enable receiver, disable transmitter
        	 HAL_HalfDuplex_EnableReceiver(modH->port);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7fe fa01 	bl	80032dc <HAL_HalfDuplex_EnableReceiver>

         }

         // set timeout for master query
         if(modH->uModbusType == MB_MASTER )
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d10c      	bne.n	8004efc <sendTxBuffer+0x100>
         {
        	 xTimerReset(modH->xTimerTimeout,0);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 8004ee8:	f002 f80c 	bl	8006f04 <xTaskGetTickCount>
 8004eec:	4602      	mov	r2, r0
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	2102      	movs	r1, #2
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f002 ffc6 	bl	8007e88 <xTimerGenericCommand>

#endif

#endif

     modH->u8BufferSize = 0;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
     // increase message counter
     modH->u16OutCnt++;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8b3 309e 	ldrh.w	r3, [r3, #158]	; 0x9e
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


}
 8004f14:	bf00      	nop
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd90      	pop	{r4, r7, pc}

08004f1c <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	4603      	mov	r3, r0
 8004f24:	460a      	mov	r2, r1
 8004f26:	71fb      	strb	r3, [r7, #7]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8004f2c:	79bb      	ldrb	r3, [r7, #6]
 8004f2e:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8004f34:	89bb      	ldrh	r3, [r7, #12]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <Slave_Fc1>:

int8_t Slave_Fc1(modbusHandler_t *modH)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b086      	sub	sp, #24
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	7d5a      	ldrb	r2, [r3, #21]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	7d9b      	ldrb	r3, [r3, #22]
 8004f52:	4619      	mov	r1, r3
 8004f54:	4610      	mov	r0, r2
 8004f56:	f7ff ffe1 	bl	8004f1c <word>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	7dda      	ldrb	r2, [r3, #23]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	7e1b      	ldrb	r3, [r3, #24]
 8004f66:	4619      	mov	r1, r3
 8004f68:	4610      	mov	r0, r2
 8004f6a:	f7ff ffd7 	bl	8004f1c <word>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8004f72:	8a3b      	ldrh	r3, [r7, #16]
 8004f74:	08db      	lsrs	r3, r3, #3
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8004f7a:	8a3b      	ldrh	r3, [r7, #16]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d002      	beq.n	8004f8c <Slave_Fc1+0x4a>
 8004f86:	7dfb      	ldrb	r3, [r7, #23]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	75fb      	strb	r3, [r7, #23]
    modH->u8Buffer[ ADD_HI ]  = u8bytesno;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	7dfa      	ldrb	r2, [r7, #23]
 8004f90:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2203      	movs	r2, #3
 8004f96:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    modH->u8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	7dfb      	ldrb	r3, [r7, #23]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	4413      	add	r3, r2
 8004fac:	2200      	movs	r2, #0
 8004fae:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	82bb      	strh	r3, [r7, #20]
 8004fb8:	e051      	b.n	800505e <Slave_Fc1+0x11c>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8004fba:	8a7a      	ldrh	r2, [r7, #18]
 8004fbc:	8abb      	ldrh	r3, [r7, #20]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	81bb      	strh	r3, [r7, #12]
        u16currentRegister =  (u16coil / 16);
 8004fc2:	89bb      	ldrh	r3, [r7, #12]
 8004fc4:	091b      	lsrs	r3, r3, #4
 8004fc6:	817b      	strh	r3, [r7, #10]
        u8currentBit = (uint8_t) (u16coil % 16);
 8004fc8:	89bb      	ldrh	r3, [r7, #12]
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	727b      	strb	r3, [r7, #9]

        bitWrite(
 8004fd2:	89bb      	ldrh	r3, [r7, #12]
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff f822 	bl	8004020 <Read_Coil>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d014      	beq.n	800500c <Slave_Fc1+0xca>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004fe8:	461a      	mov	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4413      	add	r3, r2
 8004fee:	7cda      	ldrb	r2, [r3, #19]
 8004ff0:	7dbb      	ldrb	r3, [r7, #22]
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 8005000:	4313      	orrs	r3, r2
 8005002:	b2da      	uxtb	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	440b      	add	r3, r1
 8005008:	74da      	strb	r2, [r3, #19]
 800500a:	e015      	b.n	8005038 <Slave_Fc1+0xf6>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005012:	461a      	mov	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4413      	add	r3, r2
 8005018:	7cda      	ldrb	r2, [r3, #19]
 800501a:	7dbb      	ldrb	r3, [r7, #22]
 800501c:	2101      	movs	r1, #1
 800501e:	fa01 f303 	lsl.w	r3, r1, r3
 8005022:	b2db      	uxtb	r3, r3
 8005024:	43db      	mvns	r3, r3
 8005026:	b2db      	uxtb	r3, r3
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	f891 1093 	ldrb.w	r1, [r1, #147]	; 0x93
 800502e:	4013      	ands	r3, r2
 8005030:	b2da      	uxtb	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	440b      	add	r3, r1
 8005036:	74da      	strb	r2, [r3, #19]
        	modH->u8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    Read_Coil(u16coil,modH) );
        u8bitsno ++;
 8005038:	7dbb      	ldrb	r3, [r7, #22]
 800503a:	3301      	adds	r3, #1
 800503c:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 800503e:	7dbb      	ldrb	r3, [r7, #22]
 8005040:	2b07      	cmp	r3, #7
 8005042:	d909      	bls.n	8005058 <Slave_Fc1+0x116>
        {
            u8bitsno = 0;
 8005044:	2300      	movs	r3, #0
 8005046:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800504e:	3301      	adds	r3, #1
 8005050:	b2da      	uxtb	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8005058:	8abb      	ldrh	r3, [r7, #20]
 800505a:	3301      	adds	r3, #1
 800505c:	82bb      	strh	r3, [r7, #20]
 800505e:	8aba      	ldrh	r2, [r7, #20]
 8005060:	8a3b      	ldrh	r3, [r7, #16]
 8005062:	429a      	cmp	r2, r3
 8005064:	d3a9      	bcc.n	8004fba <Slave_Fc1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8005066:	8a3b      	ldrh	r3, [r7, #16]
 8005068:	f003 0307 	and.w	r3, r3, #7
 800506c:	b29b      	uxth	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <Slave_Fc1+0x140>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005078:	3301      	adds	r3, #1
 800507a:	b2da      	uxtb	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005088:	3302      	adds	r3, #2
 800508a:	73fb      	strb	r3, [r7, #15]
    // 
    return u8CopyBufferSize;
 800508c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <Slave_Fc3>:
int8_t Slave_Fc3(modbusHandler_t *modH)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] ) ;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	7d5a      	ldrb	r2, [r3, #21]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	7d9b      	ldrb	r3, [r3, #22]
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f7ff ff36 	bl	8004f1c <word>
 80050b0:	4603      	mov	r3, r0
 80050b2:	81bb      	strh	r3, [r7, #12]
    uint8_t u8regsno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	7dda      	ldrb	r2, [r3, #23]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	7e1b      	ldrb	r3, [r3, #24]
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f7ff ff2c 	bl	8004f1c <word>
 80050c4:	4603      	mov	r3, r0
 80050c6:	72fb      	strb	r3, [r7, #11]
    uint8_t u8CopyBufferSize;
    uint16_t i;

    modH->u8Buffer[ 2 ]       = u8regsno * 2;
 80050c8:	7afb      	ldrb	r3, [r7, #11]
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2203      	movs	r2, #3
 80050d6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	uint16_t Val;
    for (i = u16StartAdd ; i < u16StartAdd + u8regsno; i++)
 80050da:	89bb      	ldrh	r3, [r7, #12]
 80050dc:	81fb      	strh	r3, [r7, #14]
 80050de:	e02d      	b.n	800513c <Slave_Fc3+0xa4>

		// modH->u8Buffer[ modH->u8BufferSize ] = highByte(modH->Device[1].Value);
    	// modH->u8BufferSize++;
    	// modH->u8Buffer[ modH->u8BufferSize ] = lowByte(modH->Device[1].Value);
    	// modH->u8BufferSize++;
		Val = Read_Reg(i, modH);
 80050e0:	89fb      	ldrh	r3, [r7, #14]
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fe ffc3 	bl	8004070 <Read_Reg>
 80050ea:	4603      	mov	r3, r0
 80050ec:	813b      	strh	r3, [r7, #8]
		modH->u8Buffer[ modH->u8BufferSize ] = highByte(Val);
 80050ee:	893b      	ldrh	r3, [r7, #8]
 80050f0:	0a1b      	lsrs	r3, r3, #8
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80050fa:	4619      	mov	r1, r3
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	440b      	add	r3, r1
 8005102:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800510a:	3301      	adds	r3, #1
 800510c:	b2da      	uxtb	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    	modH->u8Buffer[ modH->u8BufferSize ] = lowByte(Val);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800511a:	4619      	mov	r1, r3
 800511c:	893b      	ldrh	r3, [r7, #8]
 800511e:	b2da      	uxtb	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	440b      	add	r3, r1
 8005124:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800512c:	3301      	adds	r3, #1
 800512e:	b2da      	uxtb	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    for (i = u16StartAdd ; i < u16StartAdd + u8regsno; i++)
 8005136:	89fb      	ldrh	r3, [r7, #14]
 8005138:	3301      	adds	r3, #1
 800513a:	81fb      	strh	r3, [r7, #14]
 800513c:	89fa      	ldrh	r2, [r7, #14]
 800513e:	89b9      	ldrh	r1, [r7, #12]
 8005140:	7afb      	ldrb	r3, [r7, #11]
 8005142:	440b      	add	r3, r1
 8005144:	429a      	cmp	r2, r3
 8005146:	dbcb      	blt.n	80050e0 <Slave_Fc3+0x48>



    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800514e:	3302      	adds	r3, #2
 8005150:	72bb      	strb	r3, [r7, #10]
    

    return u8CopyBufferSize;
 8005152:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <Slave_Fc5>:

int8_t Slave_Fc5( modbusHandler_t *modH )
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
    uint8_t u8currentBit;
    uint16_t u16currentRegister;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	7d5a      	ldrb	r2, [r3, #21]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	7d9b      	ldrb	r3, [r3, #22]
 800516e:	4619      	mov	r1, r3
 8005170:	4610      	mov	r0, r2
 8005172:	f7ff fed3 	bl	8004f1c <word>
 8005176:	4603      	mov	r3, r0
 8005178:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u16currentRegister = (u16coil / 16);
 800517a:	89fb      	ldrh	r3, [r7, #14]
 800517c:	091b      	lsrs	r3, r3, #4
 800517e:	81bb      	strh	r3, [r7, #12]
    u8currentBit = (uint8_t) (u16coil % 16);
 8005180:	89fb      	ldrh	r3, [r7, #14]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	72fb      	strb	r3, [r7, #11]

	// Device_WriteCoil(u16coil,modH->u8Buffer[ NB_HI ]);
	// ModbusGpio_WritebyAddr(u16coil,modH->u8Buffer[ NB_HI ]);
	// Light_QueueUpdate(u16coil);

    Write_Coil(u16coil,modH->u8Buffer[ NB_HI ], modH);
 800518a:	89f8      	ldrh	r0, [r7, #14]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	7ddb      	ldrb	r3, [r3, #23]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	4619      	mov	r1, r3
 8005194:	f7fe ff92 	bl	80040bc <Write_Coil>
	

    // send answer to master
    modH->u8BufferSize = 6;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2206      	movs	r2, #6
 800519c:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize =  modH->u8BufferSize +2;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80051a6:	3302      	adds	r3, #2
 80051a8:	72bb      	strb	r3, [r7, #10]
    

    return u8CopyBufferSize;
 80051aa:	f997 300a 	ldrsb.w	r3, [r7, #10]
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <Slave_Fc6>:

int8_t Slave_Fc6(modbusHandler_t *modH )
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
    uint16_t u16add = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	7d5a      	ldrb	r2, [r3, #21]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	7d9b      	ldrb	r3, [r3, #22]
 80051c6:	4619      	mov	r1, r3
 80051c8:	4610      	mov	r0, r2
 80051ca:	f7ff fea7 	bl	8004f1c <word>
 80051ce:	4603      	mov	r3, r0
 80051d0:	81fb      	strh	r3, [r7, #14]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	7dda      	ldrb	r2, [r3, #23]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	7e1b      	ldrb	r3, [r3, #24]
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f7ff fe9d 	bl	8004f1c <word>
 80051e2:	4603      	mov	r3, r0
 80051e4:	81bb      	strh	r3, [r7, #12]
//     //modH->u16regs[ u16add ] = u16val;
// 	Device_WriteRegister(u16add,u16val);
// /**	USR Call Modbus Create Queue	**/
// 	Ac_TempQueueUpdate(u16val);

    Write_Reg(u16add,u16val,modH);
 80051e6:	89fb      	ldrh	r3, [r7, #14]
 80051e8:	89b9      	ldrh	r1, [r7, #12]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fe ffa2 	bl	8004136 <Write_Reg>


    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2206      	movs	r2, #6
 80051f6:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    u8CopyBufferSize = modH->u8BufferSize + 2;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005200:	3302      	adds	r3, #2
 8005202:	72fb      	strb	r3, [r7, #11]
    

    return u8CopyBufferSize;
 8005204:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <Slave_Fc16>:

int8_t Slave_Fc16(modbusHandler_t *modH)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
    uint16_t u16StartAdd = modH->u8Buffer[ ADD_HI ] << 8 | modH->u8Buffer[ ADD_LO ];
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	7d5b      	ldrb	r3, [r3, #21]
 800521c:	021b      	lsls	r3, r3, #8
 800521e:	b21a      	sxth	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	7d9b      	ldrb	r3, [r3, #22]
 8005224:	b21b      	sxth	r3, r3
 8005226:	4313      	orrs	r3, r2
 8005228:	b21b      	sxth	r3, r3
 800522a:	82bb      	strh	r3, [r7, #20]
    uint16_t u16regsno = modH->u8Buffer[ NB_HI ] << 8 | modH->u8Buffer[ NB_LO ];
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	7ddb      	ldrb	r3, [r3, #23]
 8005230:	021b      	lsls	r3, r3, #8
 8005232:	b21a      	sxth	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	7e1b      	ldrb	r3, [r3, #24]
 8005238:	b21b      	sxth	r3, r3
 800523a:	4313      	orrs	r3, r2
 800523c:	b21b      	sxth	r3, r3
 800523e:	827b      	strh	r3, [r7, #18]
    uint8_t u8CopyBufferSize;
    uint16_t i;
    uint16_t temp;

    // build header
    modH->u8Buffer[ NB_HI ]   = 0;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	75da      	strb	r2, [r3, #23]
    modH->u8Buffer[ NB_LO ]   = (uint8_t) u16regsno; // answer is always 256 or less bytes
 8005246:	8a7b      	ldrh	r3, [r7, #18]
 8005248:	b2da      	uxtb	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2206      	movs	r2, #6
 8005252:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93

    // write registers
    for (i = 0; i < u16regsno; i++)
 8005256:	2300      	movs	r3, #0
 8005258:	82fb      	strh	r3, [r7, #22]
 800525a:	e01b      	b.n	8005294 <Slave_Fc16+0x84>
    {
        temp = word(
        		modH->u8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 800525c:	8afb      	ldrh	r3, [r7, #22]
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	3307      	adds	r3, #7
        temp = word(
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	4413      	add	r3, r2
 8005266:	7cd8      	ldrb	r0, [r3, #19]
				modH->u8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8005268:	8afb      	ldrh	r3, [r7, #22]
 800526a:	3304      	adds	r3, #4
 800526c:	005b      	lsls	r3, r3, #1
        temp = word(
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	4413      	add	r3, r2
 8005272:	7cdb      	ldrb	r3, [r3, #19]
 8005274:	4619      	mov	r1, r3
 8005276:	f7ff fe51 	bl	8004f1c <word>
 800527a:	4603      	mov	r3, r0
 800527c:	81fb      	strh	r3, [r7, #14]

        Write_Reg(u16StartAdd + i,temp, modH );
 800527e:	8aba      	ldrh	r2, [r7, #20]
 8005280:	8afb      	ldrh	r3, [r7, #22]
 8005282:	4413      	add	r3, r2
 8005284:	89f9      	ldrh	r1, [r7, #14]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	4618      	mov	r0, r3
 800528a:	f7fe ff54 	bl	8004136 <Write_Reg>
    for (i = 0; i < u16regsno; i++)
 800528e:	8afb      	ldrh	r3, [r7, #22]
 8005290:	3301      	adds	r3, #1
 8005292:	82fb      	strh	r3, [r7, #22]
 8005294:	8afa      	ldrh	r2, [r7, #22]
 8005296:	8a7b      	ldrh	r3, [r7, #18]
 8005298:	429a      	cmp	r2, r3
 800529a:	d3df      	bcc.n	800525c <Slave_Fc16+0x4c>

        //modH->u16regs[ u16StartAdd + i ] = temp;
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80052a2:	3302      	adds	r3, #2
 80052a4:	747b      	strb	r3, [r7, #17]
    //sendTxBuffer(modH);

    return u8CopyBufferSize;
 80052a6:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <Slave_Fc15>:

int8_t Slave_Fc15( modbusHandler_t *modH )
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b086      	sub	sp, #24
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->u8Buffer[ ADD_HI ], modH->u8Buffer[ ADD_LO ] );
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	7d5a      	ldrb	r2, [r3, #21]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	7d9b      	ldrb	r3, [r3, #22]
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f7ff fe29 	bl	8004f1c <word>
 80052ca:	4603      	mov	r3, r0
 80052cc:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->u8Buffer[ NB_HI ], modH->u8Buffer[ NB_LO ] );
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	7dda      	ldrb	r2, [r3, #23]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	7e1b      	ldrb	r3, [r3, #24]
 80052d6:	4619      	mov	r1, r3
 80052d8:	4610      	mov	r0, r2
 80052da:	f7ff fe1f 	bl	8004f1c <word>
 80052de:	4603      	mov	r3, r0
 80052e0:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 80052e6:	2307      	movs	r3, #7
 80052e8:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80052ea:	2300      	movs	r3, #0
 80052ec:	82bb      	strh	r3, [r7, #20]
 80052ee:	e034      	b.n	800535a <Slave_Fc15+0xa8>
    {

        u16coil = u16StartCoil + u16currentCoil;
 80052f0:	8a7a      	ldrh	r2, [r7, #18]
 80052f2:	8abb      	ldrh	r3, [r7, #20]
 80052f4:	4413      	add	r3, r2
 80052f6:	81bb      	strh	r3, [r7, #12]
		        bTemp = bitRead(
 80052f8:	7dfb      	ldrb	r3, [r7, #23]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	4413      	add	r3, r2
 80052fe:	7cdb      	ldrb	r3, [r3, #19]
 8005300:	461a      	mov	r2, r3
 8005302:	7dbb      	ldrb	r3, [r7, #22]
 8005304:	fa42 f303 	asr.w	r3, r2, r3
 8005308:	f003 0301 	and.w	r3, r3, #1
 800530c:	2b00      	cmp	r3, #0
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	72fb      	strb	r3, [r7, #11]
                    u8bitsno );
		// Device_WriteCoil(u16coil,(bool)(((modH->u8Buffer[ u8frameByte ])>>(u8bitsno)) & 0x01));
		// ModbusGpio_WritebyAddr(u16coil,(bool)(((modH->u8Buffer[ u8frameByte ])>>(u8bitsno)) & 0x01));
	    // Light_QueueUpdate(u16coil);

        Write_Coil(u16coil, (bool)(((modH->u8Buffer[ u8frameByte ])>>(u8bitsno)) & 0x01), modH);
 8005316:	89b8      	ldrh	r0, [r7, #12]
 8005318:	7dfb      	ldrb	r3, [r7, #23]
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	4413      	add	r3, r2
 800531e:	7cdb      	ldrb	r3, [r3, #19]
 8005320:	461a      	mov	r2, r3
 8005322:	7dbb      	ldrb	r3, [r7, #22]
 8005324:	fa42 f303 	asr.w	r3, r2, r3
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	bf14      	ite	ne
 8005330:	2301      	movne	r3, #1
 8005332:	2300      	moveq	r3, #0
 8005334:	b2db      	uxtb	r3, r3
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	4619      	mov	r1, r3
 800533a:	f7fe febf 	bl	80040bc <Write_Coil>
        u8bitsno ++;
 800533e:	7dbb      	ldrb	r3, [r7, #22]
 8005340:	3301      	adds	r3, #1
 8005342:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8005344:	7dbb      	ldrb	r3, [r7, #22]
 8005346:	2b07      	cmp	r3, #7
 8005348:	d904      	bls.n	8005354 <Slave_Fc15+0xa2>
        {
            u8bitsno = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 800534e:	7dfb      	ldrb	r3, [r7, #23]
 8005350:	3301      	adds	r3, #1
 8005352:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8005354:	8abb      	ldrh	r3, [r7, #20]
 8005356:	3301      	adds	r3, #1
 8005358:	82bb      	strh	r3, [r7, #20]
 800535a:	8aba      	ldrh	r2, [r7, #20]
 800535c:	8a3b      	ldrh	r3, [r7, #16]
 800535e:	429a      	cmp	r2, r3
 8005360:	d3c6      	bcc.n	80052f0 <Slave_Fc15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2206      	movs	r2, #6
 8005366:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
    u8CopyBufferSize = modH->u8BufferSize +2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005370:	3302      	adds	r3, #2
 8005372:	73fb      	strb	r3, [r7, #15]

    return u8CopyBufferSize;
 8005374:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3718      	adds	r7, #24
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af02      	add	r7, sp, #8
 8005386:	6078      	str	r0, [r7, #4]
	/* Modbus RTU TX callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005388:	2300      	movs	r3, #0
 800538a:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	e019      	b.n	80053c6 <HAL_UART_TxCpltCallback+0x46>
	{
	   	if (mHandlers[i]->port == huart  )
 8005392:	4a17      	ldr	r2, [pc, #92]	; (80053f0 <HAL_UART_TxCpltCallback+0x70>)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d10e      	bne.n	80053c0 <HAL_UART_TxCpltCallback+0x40>
	   	{
	   		// notify the end of TX
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 80053a2:	4a13      	ldr	r2, [pc, #76]	; (80053f0 <HAL_UART_TxCpltCallback+0x70>)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053aa:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 80053ae:	f107 0308 	add.w	r3, r7, #8
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	2300      	movs	r3, #0
 80053b6:	2200      	movs	r2, #0
 80053b8:	2100      	movs	r1, #0
 80053ba:	f002 fb89 	bl	8007ad0 <xTaskGenericNotifyFromISR>
	   		break;
 80053be:	e008      	b.n	80053d2 <HAL_UART_TxCpltCallback+0x52>
	for (i = 0; i < numberHandlers; i++ )
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	3301      	adds	r3, #1
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	4b0b      	ldr	r3, [pc, #44]	; (80053f4 <HAL_UART_TxCpltCallback+0x74>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4293      	cmp	r3, r2
 80053d0:	dbdf      	blt.n	8005392 <HAL_UART_TxCpltCallback+0x12>
	   	}
	}
	portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d007      	beq.n	80053e8 <HAL_UART_TxCpltCallback+0x68>
 80053d8:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <HAL_UART_TxCpltCallback+0x78>)
 80053da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	f3bf 8f6f 	isb	sy
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	20004c9c 	.word	0x20004c9c
 80053f4:	2000009c 	.word	0x2000009c
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <HAL_UART_RxCpltCallback>:
 * user should implement the correct control flow and verification to maintain
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80053fc:	b590      	push	{r4, r7, lr}
 80053fe:	b087      	sub	sp, #28
 8005400:	af02      	add	r7, sp, #8
 8005402:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8005404:	2300      	movs	r3, #0
 8005406:	60bb      	str	r3, [r7, #8]

	/* Modbus RTU RX callback BEGIN */
    int i;
    for (i = 0; i < numberHandlers; i++ )
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	e042      	b.n	8005494 <HAL_UART_RxCpltCallback+0x98>
    {
    	if (mHandlers[i]->port == UartHandle  )
 800540e:	4a2d      	ldr	r2, [pc, #180]	; (80054c4 <HAL_UART_RxCpltCallback+0xc8>)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	429a      	cmp	r2, r3
 800541c:	d137      	bne.n	800548e <HAL_UART_RxCpltCallback+0x92>
    	{

    		if(mHandlers[i]->xTypeHW == USART_HW)
 800541e:	4a29      	ldr	r2, [pc, #164]	; (80054c4 <HAL_UART_RxCpltCallback+0xc8>)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005426:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 800542a:	2b01      	cmp	r3, #1
 800542c:	d139      	bne.n	80054a2 <HAL_UART_RxCpltCallback+0xa6>
    		{
    			RingAdd(&mHandlers[i]->xBufferRX, mHandlers[i]->dataRX);
 800542e:	4a25      	ldr	r2, [pc, #148]	; (80054c4 <HAL_UART_RxCpltCallback+0xc8>)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005436:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 800543a:	4922      	ldr	r1, [pc, #136]	; (80054c4 <HAL_UART_RxCpltCallback+0xc8>)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005442:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8005446:	4619      	mov	r1, r3
 8005448:	4610      	mov	r0, r2
 800544a:	f7fe feeb 	bl	8004224 <RingAdd>
    			HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 800544e:	4a1d      	ldr	r2, [pc, #116]	; (80054c4 <HAL_UART_RxCpltCallback+0xc8>)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005456:	6858      	ldr	r0, [r3, #4]
 8005458:	4a1a      	ldr	r2, [pc, #104]	; (80054c4 <HAL_UART_RxCpltCallback+0xc8>)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005460:	33a6      	adds	r3, #166	; 0xa6
 8005462:	2201      	movs	r2, #1
 8005464:	4619      	mov	r1, r3
 8005466:	f7fd fb75 	bl	8002b54 <HAL_UART_Receive_IT>
    			xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800546a:	4a16      	ldr	r2, [pc, #88]	; (80054c4 <HAL_UART_RxCpltCallback+0xc8>)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005472:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 8005476:	f001 fd55 	bl	8006f24 <xTaskGetTickCountFromISR>
 800547a:	4602      	mov	r2, r0
 800547c:	f107 0308 	add.w	r3, r7, #8
 8005480:	2100      	movs	r1, #0
 8005482:	9100      	str	r1, [sp, #0]
 8005484:	2107      	movs	r1, #7
 8005486:	4620      	mov	r0, r4
 8005488:	f002 fcfe 	bl	8007e88 <xTimerGenericCommand>
    		}
    		break;
 800548c:	e009      	b.n	80054a2 <HAL_UART_RxCpltCallback+0xa6>
    for (i = 0; i < numberHandlers; i++ )
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	3301      	adds	r3, #1
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <HAL_UART_RxCpltCallback+0xcc>)
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	461a      	mov	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4293      	cmp	r3, r2
 800549e:	dbb6      	blt.n	800540e <HAL_UART_RxCpltCallback+0x12>
 80054a0:	e000      	b.n	80054a4 <HAL_UART_RxCpltCallback+0xa8>
    		break;
 80054a2:	bf00      	nop
    	}
    }
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d007      	beq.n	80054ba <HAL_UART_RxCpltCallback+0xbe>
 80054aa:	4b08      	ldr	r3, [pc, #32]	; (80054cc <HAL_UART_RxCpltCallback+0xd0>)
 80054ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	f3bf 8f6f 	isb	sy
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 *
	 * */

}
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd90      	pop	{r4, r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20004c9c 	.word	0x20004c9c
 80054c8:	2000009c 	.word	0x2000009c
 80054cc:	e000ed04 	.word	0xe000ed04

080054d0 <__NVIC_SetPriority>:
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	6039      	str	r1, [r7, #0]
 80054da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	db0a      	blt.n	80054fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	490c      	ldr	r1, [pc, #48]	; (800551c <__NVIC_SetPriority+0x4c>)
 80054ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ee:	0112      	lsls	r2, r2, #4
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	440b      	add	r3, r1
 80054f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80054f8:	e00a      	b.n	8005510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	4908      	ldr	r1, [pc, #32]	; (8005520 <__NVIC_SetPriority+0x50>)
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	3b04      	subs	r3, #4
 8005508:	0112      	lsls	r2, r2, #4
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	440b      	add	r3, r1
 800550e:	761a      	strb	r2, [r3, #24]
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	e000e100 	.word	0xe000e100
 8005520:	e000ed00 	.word	0xe000ed00

08005524 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005528:	2100      	movs	r1, #0
 800552a:	f06f 0004 	mvn.w	r0, #4
 800552e:	f7ff ffcf 	bl	80054d0 <__NVIC_SetPriority>
#endif
}
 8005532:	bf00      	nop
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800553e:	f3ef 8305 	mrs	r3, IPSR
 8005542:	603b      	str	r3, [r7, #0]
  return(result);
 8005544:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800554a:	f06f 0305 	mvn.w	r3, #5
 800554e:	607b      	str	r3, [r7, #4]
 8005550:	e00c      	b.n	800556c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005552:	4b0a      	ldr	r3, [pc, #40]	; (800557c <osKernelInitialize+0x44>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d105      	bne.n	8005566 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800555a:	4b08      	ldr	r3, [pc, #32]	; (800557c <osKernelInitialize+0x44>)
 800555c:	2201      	movs	r2, #1
 800555e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005560:	2300      	movs	r3, #0
 8005562:	607b      	str	r3, [r7, #4]
 8005564:	e002      	b.n	800556c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005566:	f04f 33ff 	mov.w	r3, #4294967295
 800556a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800556c:	687b      	ldr	r3, [r7, #4]
}
 800556e:	4618      	mov	r0, r3
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	200000a0 	.word	0x200000a0

08005580 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005586:	f3ef 8305 	mrs	r3, IPSR
 800558a:	603b      	str	r3, [r7, #0]
  return(result);
 800558c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005592:	f06f 0305 	mvn.w	r3, #5
 8005596:	607b      	str	r3, [r7, #4]
 8005598:	e010      	b.n	80055bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800559a:	4b0b      	ldr	r3, [pc, #44]	; (80055c8 <osKernelStart+0x48>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d109      	bne.n	80055b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80055a2:	f7ff ffbf 	bl	8005524 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80055a6:	4b08      	ldr	r3, [pc, #32]	; (80055c8 <osKernelStart+0x48>)
 80055a8:	2202      	movs	r2, #2
 80055aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80055ac:	f001 fb8e 	bl	8006ccc <vTaskStartScheduler>
      stat = osOK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	607b      	str	r3, [r7, #4]
 80055b4:	e002      	b.n	80055bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80055b6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055bc:	687b      	ldr	r3, [r7, #4]
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	200000a0 	.word	0x200000a0

080055cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08e      	sub	sp, #56	; 0x38
 80055d0:	af04      	add	r7, sp, #16
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80055d8:	2300      	movs	r3, #0
 80055da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055dc:	f3ef 8305 	mrs	r3, IPSR
 80055e0:	617b      	str	r3, [r7, #20]
  return(result);
 80055e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d17e      	bne.n	80056e6 <osThreadNew+0x11a>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d07b      	beq.n	80056e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80055ee:	2380      	movs	r3, #128	; 0x80
 80055f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80055f2:	2318      	movs	r3, #24
 80055f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80055f6:	2300      	movs	r3, #0
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80055fa:	f04f 33ff 	mov.w	r3, #4294967295
 80055fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d045      	beq.n	8005692 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <osThreadNew+0x48>
        name = attr->name;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <osThreadNew+0x6e>
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	2b38      	cmp	r3, #56	; 0x38
 800562c:	d805      	bhi.n	800563a <osThreadNew+0x6e>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <osThreadNew+0x72>
        return (NULL);
 800563a:	2300      	movs	r3, #0
 800563c:	e054      	b.n	80056e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d003      	beq.n	800564e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	089b      	lsrs	r3, r3, #2
 800564c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00e      	beq.n	8005674 <osThreadNew+0xa8>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	2bbb      	cmp	r3, #187	; 0xbb
 800565c:	d90a      	bls.n	8005674 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005662:	2b00      	cmp	r3, #0
 8005664:	d006      	beq.n	8005674 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <osThreadNew+0xa8>
        mem = 1;
 800566e:	2301      	movs	r3, #1
 8005670:	61bb      	str	r3, [r7, #24]
 8005672:	e010      	b.n	8005696 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10c      	bne.n	8005696 <osThreadNew+0xca>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d108      	bne.n	8005696 <osThreadNew+0xca>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d104      	bne.n	8005696 <osThreadNew+0xca>
          mem = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	61bb      	str	r3, [r7, #24]
 8005690:	e001      	b.n	8005696 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005692:	2300      	movs	r3, #0
 8005694:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d110      	bne.n	80056be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056a4:	9202      	str	r2, [sp, #8]
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	9300      	str	r3, [sp, #0]
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	6a3a      	ldr	r2, [r7, #32]
 80056b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f001 f91e 	bl	80068f4 <xTaskCreateStatic>
 80056b8:	4603      	mov	r3, r0
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	e013      	b.n	80056e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d110      	bne.n	80056e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	f107 0310 	add.w	r3, r7, #16
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f001 f969 	bl	80069ae <xTaskCreate>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d001      	beq.n	80056e6 <osThreadNew+0x11a>
            hTask = NULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80056e6:	693b      	ldr	r3, [r7, #16]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3728      	adds	r7, #40	; 0x28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056f8:	f3ef 8305 	mrs	r3, IPSR
 80056fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80056fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005700:	2b00      	cmp	r3, #0
 8005702:	d003      	beq.n	800570c <osDelay+0x1c>
    stat = osErrorISR;
 8005704:	f06f 0305 	mvn.w	r3, #5
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	e007      	b.n	800571c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f001 faa4 	bl	8006c64 <vTaskDelay>
    }
  }

  return (stat);
 800571c:	68fb      	ldr	r3, [r7, #12]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005726:	b580      	push	{r7, lr}
 8005728:	b08a      	sub	sp, #40	; 0x28
 800572a:	af02      	add	r7, sp, #8
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005732:	2300      	movs	r3, #0
 8005734:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005736:	f3ef 8305 	mrs	r3, IPSR
 800573a:	613b      	str	r3, [r7, #16]
  return(result);
 800573c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800573e:	2b00      	cmp	r3, #0
 8005740:	d175      	bne.n	800582e <osSemaphoreNew+0x108>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d072      	beq.n	800582e <osSemaphoreNew+0x108>
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	429a      	cmp	r2, r3
 800574e:	d86e      	bhi.n	800582e <osSemaphoreNew+0x108>
    mem = -1;
 8005750:	f04f 33ff 	mov.w	r3, #4294967295
 8005754:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d015      	beq.n	8005788 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d006      	beq.n	8005772 <osSemaphoreNew+0x4c>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	2b4f      	cmp	r3, #79	; 0x4f
 800576a:	d902      	bls.n	8005772 <osSemaphoreNew+0x4c>
        mem = 1;
 800576c:	2301      	movs	r3, #1
 800576e:	61bb      	str	r3, [r7, #24]
 8005770:	e00c      	b.n	800578c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d108      	bne.n	800578c <osSemaphoreNew+0x66>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d104      	bne.n	800578c <osSemaphoreNew+0x66>
          mem = 0;
 8005782:	2300      	movs	r3, #0
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	e001      	b.n	800578c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d04c      	beq.n	800582e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d128      	bne.n	80057ec <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d10a      	bne.n	80057b6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	2203      	movs	r2, #3
 80057a6:	9200      	str	r2, [sp, #0]
 80057a8:	2200      	movs	r2, #0
 80057aa:	2100      	movs	r1, #0
 80057ac:	2001      	movs	r0, #1
 80057ae:	f000 fa07 	bl	8005bc0 <xQueueGenericCreateStatic>
 80057b2:	61f8      	str	r0, [r7, #28]
 80057b4:	e005      	b.n	80057c2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80057b6:	2203      	movs	r2, #3
 80057b8:	2100      	movs	r1, #0
 80057ba:	2001      	movs	r0, #1
 80057bc:	f000 fa78 	bl	8005cb0 <xQueueGenericCreate>
 80057c0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d022      	beq.n	800580e <osSemaphoreNew+0xe8>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d01f      	beq.n	800580e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80057ce:	2300      	movs	r3, #0
 80057d0:	2200      	movs	r2, #0
 80057d2:	2100      	movs	r1, #0
 80057d4:	69f8      	ldr	r0, [r7, #28]
 80057d6:	f000 fb33 	bl	8005e40 <xQueueGenericSend>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d016      	beq.n	800580e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80057e0:	69f8      	ldr	r0, [r7, #28]
 80057e2:	f000 feb3 	bl	800654c <vQueueDelete>
            hSemaphore = NULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61fb      	str	r3, [r7, #28]
 80057ea:	e010      	b.n	800580e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d108      	bne.n	8005804 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	461a      	mov	r2, r3
 80057f8:	68b9      	ldr	r1, [r7, #8]
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f000 fab5 	bl	8005d6a <xQueueCreateCountingSemaphoreStatic>
 8005800:	61f8      	str	r0, [r7, #28]
 8005802:	e004      	b.n	800580e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 fae6 	bl	8005dd8 <xQueueCreateCountingSemaphore>
 800580c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00c      	beq.n	800582e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <osSemaphoreNew+0xfc>
          name = attr->name;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	e001      	b.n	8005826 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005822:	2300      	movs	r3, #0
 8005824:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005826:	6979      	ldr	r1, [r7, #20]
 8005828:	69f8      	ldr	r0, [r7, #28]
 800582a:	f000 ffdb 	bl	80067e4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800582e:	69fb      	ldr	r3, [r7, #28]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3720      	adds	r7, #32
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005838:	b580      	push	{r7, lr}
 800583a:	b08a      	sub	sp, #40	; 0x28
 800583c:	af02      	add	r7, sp, #8
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005844:	2300      	movs	r3, #0
 8005846:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005848:	f3ef 8305 	mrs	r3, IPSR
 800584c:	613b      	str	r3, [r7, #16]
  return(result);
 800584e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005850:	2b00      	cmp	r3, #0
 8005852:	d15f      	bne.n	8005914 <osMessageQueueNew+0xdc>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d05c      	beq.n	8005914 <osMessageQueueNew+0xdc>
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d059      	beq.n	8005914 <osMessageQueueNew+0xdc>
    mem = -1;
 8005860:	f04f 33ff 	mov.w	r3, #4294967295
 8005864:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d029      	beq.n	80058c0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d012      	beq.n	800589a <osMessageQueueNew+0x62>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	2b4f      	cmp	r3, #79	; 0x4f
 800587a:	d90e      	bls.n	800589a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00a      	beq.n	800589a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695a      	ldr	r2, [r3, #20]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68b9      	ldr	r1, [r7, #8]
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	429a      	cmp	r2, r3
 8005892:	d302      	bcc.n	800589a <osMessageQueueNew+0x62>
        mem = 1;
 8005894:	2301      	movs	r3, #1
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	e014      	b.n	80058c4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d110      	bne.n	80058c4 <osMessageQueueNew+0x8c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10c      	bne.n	80058c4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d108      	bne.n	80058c4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d104      	bne.n	80058c4 <osMessageQueueNew+0x8c>
          mem = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61bb      	str	r3, [r7, #24]
 80058be:	e001      	b.n	80058c4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d10b      	bne.n	80058e2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	2100      	movs	r1, #0
 80058d4:	9100      	str	r1, [sp, #0]
 80058d6:	68b9      	ldr	r1, [r7, #8]
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f000 f971 	bl	8005bc0 <xQueueGenericCreateStatic>
 80058de:	61f8      	str	r0, [r7, #28]
 80058e0:	e008      	b.n	80058f4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d105      	bne.n	80058f4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80058e8:	2200      	movs	r2, #0
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f9df 	bl	8005cb0 <xQueueGenericCreate>
 80058f2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00c      	beq.n	8005914 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	617b      	str	r3, [r7, #20]
 8005906:	e001      	b.n	800590c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800590c:	6979      	ldr	r1, [r7, #20]
 800590e:	69f8      	ldr	r0, [r7, #28]
 8005910:	f000 ff68 	bl	80067e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005914:	69fb      	ldr	r3, [r7, #28]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3720      	adds	r7, #32
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4a07      	ldr	r2, [pc, #28]	; (800594c <vApplicationGetIdleTaskMemory+0x2c>)
 8005930:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	4a06      	ldr	r2, [pc, #24]	; (8005950 <vApplicationGetIdleTaskMemory+0x30>)
 8005936:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2280      	movs	r2, #128	; 0x80
 800593c:	601a      	str	r2, [r3, #0]
}
 800593e:	bf00      	nop
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	200000a4 	.word	0x200000a4
 8005950:	20000160 	.word	0x20000160

08005954 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4a07      	ldr	r2, [pc, #28]	; (8005980 <vApplicationGetTimerTaskMemory+0x2c>)
 8005964:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4a06      	ldr	r2, [pc, #24]	; (8005984 <vApplicationGetTimerTaskMemory+0x30>)
 800596a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005972:	601a      	str	r2, [r3, #0]
}
 8005974:	bf00      	nop
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	20000360 	.word	0x20000360
 8005984:	2000041c 	.word	0x2000041c

08005988 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f103 0208 	add.w	r2, r3, #8
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f04f 32ff 	mov.w	r2, #4294967295
 80059a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f103 0208 	add.w	r2, r3, #8
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f103 0208 	add.w	r2, r3, #8
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059e2:	b480      	push	{r7}
 80059e4:	b085      	sub	sp, #20
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	1c5a      	adds	r2, r3, #1
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	601a      	str	r2, [r3, #0]
}
 8005a1e:	bf00      	nop
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b085      	sub	sp, #20
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a40:	d103      	bne.n	8005a4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	e00c      	b.n	8005a64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	e002      	b.n	8005a58 <vListInsert+0x2e>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d2f6      	bcs.n	8005a52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	601a      	str	r2, [r3, #0]
}
 8005a90:	bf00      	nop
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6892      	ldr	r2, [r2, #8]
 8005ab2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6852      	ldr	r2, [r2, #4]
 8005abc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d103      	bne.n	8005ad0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	1e5a      	subs	r2, r3, #1
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b1a:	f002 fdeb 	bl	80086f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b26:	68f9      	ldr	r1, [r7, #12]
 8005b28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b2a:	fb01 f303 	mul.w	r3, r1, r3
 8005b2e:	441a      	add	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	68f9      	ldr	r1, [r7, #12]
 8005b4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b50:	fb01 f303 	mul.w	r3, r1, r3
 8005b54:	441a      	add	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	22ff      	movs	r2, #255	; 0xff
 8005b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	22ff      	movs	r2, #255	; 0xff
 8005b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d114      	bne.n	8005b9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01a      	beq.n	8005bae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	3310      	adds	r3, #16
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f001 fb51 	bl	8007224 <xTaskRemoveFromEventList>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d012      	beq.n	8005bae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b88:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <xQueueGenericReset+0xcc>)
 8005b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	e009      	b.n	8005bae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3310      	adds	r3, #16
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff fef2 	bl	8005988 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	3324      	adds	r3, #36	; 0x24
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff feed 	bl	8005988 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005bae:	f002 fdd1 	bl	8008754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005bb2:	2301      	movs	r3, #1
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	e000ed04 	.word	0xe000ed04

08005bc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08e      	sub	sp, #56	; 0x38
 8005bc4:	af02      	add	r7, sp, #8
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	607a      	str	r2, [r7, #4]
 8005bcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005be6:	bf00      	nop
 8005be8:	e7fe      	b.n	8005be8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <xQueueGenericCreateStatic+0x52>
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <xQueueGenericCreateStatic+0x56>
 8005c12:	2301      	movs	r3, #1
 8005c14:	e000      	b.n	8005c18 <xQueueGenericCreateStatic+0x58>
 8005c16:	2300      	movs	r3, #0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	623b      	str	r3, [r7, #32]
}
 8005c2e:	bf00      	nop
 8005c30:	e7fe      	b.n	8005c30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <xQueueGenericCreateStatic+0x7e>
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <xQueueGenericCreateStatic+0x82>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <xQueueGenericCreateStatic+0x84>
 8005c42:	2300      	movs	r3, #0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10a      	bne.n	8005c5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4c:	f383 8811 	msr	BASEPRI, r3
 8005c50:	f3bf 8f6f 	isb	sy
 8005c54:	f3bf 8f4f 	dsb	sy
 8005c58:	61fb      	str	r3, [r7, #28]
}
 8005c5a:	bf00      	nop
 8005c5c:	e7fe      	b.n	8005c5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c5e:	2350      	movs	r3, #80	; 0x50
 8005c60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2b50      	cmp	r3, #80	; 0x50
 8005c66:	d00a      	beq.n	8005c7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	61bb      	str	r3, [r7, #24]
}
 8005c7a:	bf00      	nop
 8005c7c:	e7fe      	b.n	8005c7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00d      	beq.n	8005ca6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	68b9      	ldr	r1, [r7, #8]
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 f83f 	bl	8005d24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3730      	adds	r7, #48	; 0x30
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08a      	sub	sp, #40	; 0x28
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10a      	bne.n	8005cda <xQueueGenericCreate+0x2a>
	__asm volatile
 8005cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	613b      	str	r3, [r7, #16]
}
 8005cd6:	bf00      	nop
 8005cd8:	e7fe      	b.n	8005cd8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
 8005ce2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	3350      	adds	r3, #80	; 0x50
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f002 fe25 	bl	8008938 <pvPortMalloc>
 8005cee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d011      	beq.n	8005d1a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	3350      	adds	r3, #80	; 0x50
 8005cfe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d08:	79fa      	ldrb	r2, [r7, #7]
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	68b9      	ldr	r1, [r7, #8]
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 f805 	bl	8005d24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d1a:	69bb      	ldr	r3, [r7, #24]
	}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3720      	adds	r7, #32
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d103      	bne.n	8005d40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	e002      	b.n	8005d46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d52:	2101      	movs	r1, #1
 8005d54:	69b8      	ldr	r0, [r7, #24]
 8005d56:	f7ff fecb 	bl	8005af0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	78fa      	ldrb	r2, [r7, #3]
 8005d5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d62:	bf00      	nop
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b08a      	sub	sp, #40	; 0x28
 8005d6e:	af02      	add	r7, sp, #8
 8005d70:	60f8      	str	r0, [r7, #12]
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10a      	bne.n	8005d92 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	61bb      	str	r3, [r7, #24]
}
 8005d8e:	bf00      	nop
 8005d90:	e7fe      	b.n	8005d90 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d90a      	bls.n	8005db0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	f383 8811 	msr	BASEPRI, r3
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	f3bf 8f4f 	dsb	sy
 8005daa:	617b      	str	r3, [r7, #20]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005db0:	2302      	movs	r3, #2
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	2100      	movs	r1, #0
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f7ff ff00 	bl	8005bc0 <xQueueGenericCreateStatic>
 8005dc0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005dce:	69fb      	ldr	r3, [r7, #28]
	}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3720      	adds	r7, #32
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10a      	bne.n	8005dfe <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	613b      	str	r3, [r7, #16]
}
 8005dfa:	bf00      	nop
 8005dfc:	e7fe      	b.n	8005dfc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d90a      	bls.n	8005e1c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	60fb      	str	r3, [r7, #12]
}
 8005e18:	bf00      	nop
 8005e1a:	e7fe      	b.n	8005e1a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005e1c:	2202      	movs	r2, #2
 8005e1e:	2100      	movs	r1, #0
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff ff45 	bl	8005cb0 <xQueueGenericCreate>
 8005e26:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005e34:	697b      	ldr	r3, [r7, #20]
	}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08e      	sub	sp, #56	; 0x38
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
 8005e4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10a      	bne.n	8005e72 <xQueueGenericSend+0x32>
	__asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e6e:	bf00      	nop
 8005e70:	e7fe      	b.n	8005e70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d103      	bne.n	8005e80 <xQueueGenericSend+0x40>
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <xQueueGenericSend+0x44>
 8005e80:	2301      	movs	r3, #1
 8005e82:	e000      	b.n	8005e86 <xQueueGenericSend+0x46>
 8005e84:	2300      	movs	r3, #0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <xQueueGenericSend+0x60>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d103      	bne.n	8005eae <xQueueGenericSend+0x6e>
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <xQueueGenericSend+0x72>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e000      	b.n	8005eb4 <xQueueGenericSend+0x74>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <xQueueGenericSend+0x8e>
	__asm volatile
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	623b      	str	r3, [r7, #32]
}
 8005eca:	bf00      	nop
 8005ecc:	e7fe      	b.n	8005ecc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ece:	f001 fb6b 	bl	80075a8 <xTaskGetSchedulerState>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d102      	bne.n	8005ede <xQueueGenericSend+0x9e>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <xQueueGenericSend+0xa2>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <xQueueGenericSend+0xa4>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <xQueueGenericSend+0xbe>
	__asm volatile
 8005ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	61fb      	str	r3, [r7, #28]
}
 8005efa:	bf00      	nop
 8005efc:	e7fe      	b.n	8005efc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005efe:	f002 fbf9 	bl	80086f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d302      	bcc.n	8005f14 <xQueueGenericSend+0xd4>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d129      	bne.n	8005f68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	68b9      	ldr	r1, [r7, #8]
 8005f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f1a:	f000 fb52 	bl	80065c2 <prvCopyDataToQueue>
 8005f1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d010      	beq.n	8005f4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	3324      	adds	r3, #36	; 0x24
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f001 f979 	bl	8007224 <xTaskRemoveFromEventList>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d013      	beq.n	8005f60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f38:	4b3f      	ldr	r3, [pc, #252]	; (8006038 <xQueueGenericSend+0x1f8>)
 8005f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	f3bf 8f6f 	isb	sy
 8005f48:	e00a      	b.n	8005f60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d007      	beq.n	8005f60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f50:	4b39      	ldr	r3, [pc, #228]	; (8006038 <xQueueGenericSend+0x1f8>)
 8005f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f60:	f002 fbf8 	bl	8008754 <vPortExitCritical>
				return pdPASS;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e063      	b.n	8006030 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d103      	bne.n	8005f76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f6e:	f002 fbf1 	bl	8008754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	e05c      	b.n	8006030 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d106      	bne.n	8005f8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f7c:	f107 0314 	add.w	r3, r7, #20
 8005f80:	4618      	mov	r0, r3
 8005f82:	f001 f9b3 	bl	80072ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f86:	2301      	movs	r3, #1
 8005f88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f8a:	f002 fbe3 	bl	8008754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f8e:	f000 ff0d 	bl	8006dac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f92:	f002 fbaf 	bl	80086f4 <vPortEnterCritical>
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f9c:	b25b      	sxtb	r3, r3
 8005f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa2:	d103      	bne.n	8005fac <xQueueGenericSend+0x16c>
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fb2:	b25b      	sxtb	r3, r3
 8005fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb8:	d103      	bne.n	8005fc2 <xQueueGenericSend+0x182>
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fc2:	f002 fbc7 	bl	8008754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fc6:	1d3a      	adds	r2, r7, #4
 8005fc8:	f107 0314 	add.w	r3, r7, #20
 8005fcc:	4611      	mov	r1, r2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f001 f9a2 	bl	8007318 <xTaskCheckForTimeOut>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d124      	bne.n	8006024 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005fda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fdc:	f000 fbe9 	bl	80067b2 <prvIsQueueFull>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d018      	beq.n	8006018 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe8:	3310      	adds	r3, #16
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	4611      	mov	r1, r2
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f001 f8c8 	bl	8007184 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ff6:	f000 fb74 	bl	80066e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ffa:	f000 fee5 	bl	8006dc8 <xTaskResumeAll>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	f47f af7c 	bne.w	8005efe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006006:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <xQueueGenericSend+0x1f8>)
 8006008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	e772      	b.n	8005efe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800601a:	f000 fb62 	bl	80066e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800601e:	f000 fed3 	bl	8006dc8 <xTaskResumeAll>
 8006022:	e76c      	b.n	8005efe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006026:	f000 fb5c 	bl	80066e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800602a:	f000 fecd 	bl	8006dc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800602e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006030:	4618      	mov	r0, r3
 8006032:	3738      	adds	r7, #56	; 0x38
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	e000ed04 	.word	0xe000ed04

0800603c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b090      	sub	sp, #64	; 0x40
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800604e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006066:	bf00      	nop
 8006068:	e7fe      	b.n	8006068 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d103      	bne.n	8006078 <xQueueGenericSendFromISR+0x3c>
 8006070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <xQueueGenericSendFromISR+0x40>
 8006078:	2301      	movs	r3, #1
 800607a:	e000      	b.n	800607e <xQueueGenericSendFromISR+0x42>
 800607c:	2300      	movs	r3, #0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006094:	bf00      	nop
 8006096:	e7fe      	b.n	8006096 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b02      	cmp	r3, #2
 800609c:	d103      	bne.n	80060a6 <xQueueGenericSendFromISR+0x6a>
 800609e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <xQueueGenericSendFromISR+0x6e>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <xQueueGenericSendFromISR+0x70>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	623b      	str	r3, [r7, #32]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060c6:	f002 fbf7 	bl	80088b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060ca:	f3ef 8211 	mrs	r2, BASEPRI
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	61fa      	str	r2, [r7, #28]
 80060e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80060e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d302      	bcc.n	80060f8 <xQueueGenericSendFromISR+0xbc>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d12f      	bne.n	8006158 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800610e:	f000 fa58 	bl	80065c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006112:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d112      	bne.n	8006142 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	2b00      	cmp	r3, #0
 8006122:	d016      	beq.n	8006152 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	3324      	adds	r3, #36	; 0x24
 8006128:	4618      	mov	r0, r3
 800612a:	f001 f87b 	bl	8007224 <xTaskRemoveFromEventList>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00e      	beq.n	8006152 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00b      	beq.n	8006152 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	e007      	b.n	8006152 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006142:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006146:	3301      	adds	r3, #1
 8006148:	b2db      	uxtb	r3, r3
 800614a:	b25a      	sxtb	r2, r3
 800614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006152:	2301      	movs	r3, #1
 8006154:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006156:	e001      	b.n	800615c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006158:	2300      	movs	r3, #0
 800615a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800615c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800615e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006166:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800616a:	4618      	mov	r0, r3
 800616c:	3740      	adds	r7, #64	; 0x40
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
	...

08006174 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08c      	sub	sp, #48	; 0x30
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006180:	2300      	movs	r3, #0
 8006182:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <xQueueReceive+0x30>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	623b      	str	r3, [r7, #32]
}
 80061a0:	bf00      	nop
 80061a2:	e7fe      	b.n	80061a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d103      	bne.n	80061b2 <xQueueReceive+0x3e>
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <xQueueReceive+0x42>
 80061b2:	2301      	movs	r3, #1
 80061b4:	e000      	b.n	80061b8 <xQueueReceive+0x44>
 80061b6:	2300      	movs	r3, #0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <xQueueReceive+0x5e>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	61fb      	str	r3, [r7, #28]
}
 80061ce:	bf00      	nop
 80061d0:	e7fe      	b.n	80061d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061d2:	f001 f9e9 	bl	80075a8 <xTaskGetSchedulerState>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d102      	bne.n	80061e2 <xQueueReceive+0x6e>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d101      	bne.n	80061e6 <xQueueReceive+0x72>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <xQueueReceive+0x74>
 80061e6:	2300      	movs	r3, #0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <xQueueReceive+0x8e>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	61bb      	str	r3, [r7, #24]
}
 80061fe:	bf00      	nop
 8006200:	e7fe      	b.n	8006200 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006202:	f002 fa77 	bl	80086f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	2b00      	cmp	r3, #0
 8006210:	d01f      	beq.n	8006252 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006216:	f000 fa3e 	bl	8006696 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	1e5a      	subs	r2, r3, #1
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00f      	beq.n	800624a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	3310      	adds	r3, #16
 800622e:	4618      	mov	r0, r3
 8006230:	f000 fff8 	bl	8007224 <xTaskRemoveFromEventList>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d007      	beq.n	800624a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800623a:	4b3d      	ldr	r3, [pc, #244]	; (8006330 <xQueueReceive+0x1bc>)
 800623c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800624a:	f002 fa83 	bl	8008754 <vPortExitCritical>
				return pdPASS;
 800624e:	2301      	movs	r3, #1
 8006250:	e069      	b.n	8006326 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d103      	bne.n	8006260 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006258:	f002 fa7c 	bl	8008754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800625c:	2300      	movs	r3, #0
 800625e:	e062      	b.n	8006326 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006262:	2b00      	cmp	r3, #0
 8006264:	d106      	bne.n	8006274 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006266:	f107 0310 	add.w	r3, r7, #16
 800626a:	4618      	mov	r0, r3
 800626c:	f001 f83e 	bl	80072ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006270:	2301      	movs	r3, #1
 8006272:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006274:	f002 fa6e 	bl	8008754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006278:	f000 fd98 	bl	8006dac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800627c:	f002 fa3a 	bl	80086f4 <vPortEnterCritical>
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006286:	b25b      	sxtb	r3, r3
 8006288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628c:	d103      	bne.n	8006296 <xQueueReceive+0x122>
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800629c:	b25b      	sxtb	r3, r3
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a2:	d103      	bne.n	80062ac <xQueueReceive+0x138>
 80062a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062ac:	f002 fa52 	bl	8008754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062b0:	1d3a      	adds	r2, r7, #4
 80062b2:	f107 0310 	add.w	r3, r7, #16
 80062b6:	4611      	mov	r1, r2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f001 f82d 	bl	8007318 <xTaskCheckForTimeOut>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d123      	bne.n	800630c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062c6:	f000 fa5e 	bl	8006786 <prvIsQueueEmpty>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d017      	beq.n	8006300 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	3324      	adds	r3, #36	; 0x24
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	4611      	mov	r1, r2
 80062d8:	4618      	mov	r0, r3
 80062da:	f000 ff53 	bl	8007184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e0:	f000 f9ff 	bl	80066e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062e4:	f000 fd70 	bl	8006dc8 <xTaskResumeAll>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d189      	bne.n	8006202 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80062ee:	4b10      	ldr	r3, [pc, #64]	; (8006330 <xQueueReceive+0x1bc>)
 80062f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	e780      	b.n	8006202 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006302:	f000 f9ee 	bl	80066e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006306:	f000 fd5f 	bl	8006dc8 <xTaskResumeAll>
 800630a:	e77a      	b.n	8006202 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800630c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800630e:	f000 f9e8 	bl	80066e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006312:	f000 fd59 	bl	8006dc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006318:	f000 fa35 	bl	8006786 <prvIsQueueEmpty>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	f43f af6f 	beq.w	8006202 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006324:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006326:	4618      	mov	r0, r3
 8006328:	3730      	adds	r7, #48	; 0x30
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	e000ed04 	.word	0xe000ed04

08006334 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b08e      	sub	sp, #56	; 0x38
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800633e:	2300      	movs	r3, #0
 8006340:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006346:	2300      	movs	r3, #0
 8006348:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800634a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10a      	bne.n	8006366 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006354:	f383 8811 	msr	BASEPRI, r3
 8006358:	f3bf 8f6f 	isb	sy
 800635c:	f3bf 8f4f 	dsb	sy
 8006360:	623b      	str	r3, [r7, #32]
}
 8006362:	bf00      	nop
 8006364:	e7fe      	b.n	8006364 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	61fb      	str	r3, [r7, #28]
}
 8006380:	bf00      	nop
 8006382:	e7fe      	b.n	8006382 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006384:	f001 f910 	bl	80075a8 <xTaskGetSchedulerState>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d102      	bne.n	8006394 <xQueueSemaphoreTake+0x60>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <xQueueSemaphoreTake+0x64>
 8006394:	2301      	movs	r3, #1
 8006396:	e000      	b.n	800639a <xQueueSemaphoreTake+0x66>
 8006398:	2300      	movs	r3, #0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	61bb      	str	r3, [r7, #24]
}
 80063b0:	bf00      	nop
 80063b2:	e7fe      	b.n	80063b2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063b4:	f002 f99e 	bl	80086f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d024      	beq.n	800640e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	1e5a      	subs	r2, r3, #1
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80063cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d104      	bne.n	80063de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80063d4:	f001 fa5e 	bl	8007894 <pvTaskIncrementMutexHeldCount>
 80063d8:	4602      	mov	r2, r0
 80063da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00f      	beq.n	8006406 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e8:	3310      	adds	r3, #16
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 ff1a 	bl	8007224 <xTaskRemoveFromEventList>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063f6:	4b54      	ldr	r3, [pc, #336]	; (8006548 <xQueueSemaphoreTake+0x214>)
 80063f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006406:	f002 f9a5 	bl	8008754 <vPortExitCritical>
				return pdPASS;
 800640a:	2301      	movs	r3, #1
 800640c:	e097      	b.n	800653e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d111      	bne.n	8006438 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	617b      	str	r3, [r7, #20]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006430:	f002 f990 	bl	8008754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006434:	2300      	movs	r3, #0
 8006436:	e082      	b.n	800653e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643a:	2b00      	cmp	r3, #0
 800643c:	d106      	bne.n	800644c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800643e:	f107 030c 	add.w	r3, r7, #12
 8006442:	4618      	mov	r0, r3
 8006444:	f000 ff52 	bl	80072ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006448:	2301      	movs	r3, #1
 800644a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800644c:	f002 f982 	bl	8008754 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006450:	f000 fcac 	bl	8006dac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006454:	f002 f94e 	bl	80086f4 <vPortEnterCritical>
 8006458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800645e:	b25b      	sxtb	r3, r3
 8006460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006464:	d103      	bne.n	800646e <xQueueSemaphoreTake+0x13a>
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006468:	2200      	movs	r2, #0
 800646a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800646e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006474:	b25b      	sxtb	r3, r3
 8006476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647a:	d103      	bne.n	8006484 <xQueueSemaphoreTake+0x150>
 800647c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006484:	f002 f966 	bl	8008754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006488:	463a      	mov	r2, r7
 800648a:	f107 030c 	add.w	r3, r7, #12
 800648e:	4611      	mov	r1, r2
 8006490:	4618      	mov	r0, r3
 8006492:	f000 ff41 	bl	8007318 <xTaskCheckForTimeOut>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d132      	bne.n	8006502 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800649c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800649e:	f000 f972 	bl	8006786 <prvIsQueueEmpty>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d026      	beq.n	80064f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d109      	bne.n	80064c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80064b0:	f002 f920 	bl	80086f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80064b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f001 f893 	bl	80075e4 <xTaskPriorityInherit>
 80064be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80064c0:	f002 f948 	bl	8008754 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80064c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c6:	3324      	adds	r3, #36	; 0x24
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	4611      	mov	r1, r2
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fe59 	bl	8007184 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80064d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064d4:	f000 f905 	bl	80066e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80064d8:	f000 fc76 	bl	8006dc8 <xTaskResumeAll>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f47f af68 	bne.w	80063b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80064e4:	4b18      	ldr	r3, [pc, #96]	; (8006548 <xQueueSemaphoreTake+0x214>)
 80064e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	e75e      	b.n	80063b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80064f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064f8:	f000 f8f3 	bl	80066e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064fc:	f000 fc64 	bl	8006dc8 <xTaskResumeAll>
 8006500:	e758      	b.n	80063b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006504:	f000 f8ed 	bl	80066e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006508:	f000 fc5e 	bl	8006dc8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800650c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800650e:	f000 f93a 	bl	8006786 <prvIsQueueEmpty>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	f43f af4d 	beq.w	80063b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800651a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00d      	beq.n	800653c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006520:	f002 f8e8 	bl	80086f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006526:	f000 f834 	bl	8006592 <prvGetDisinheritPriorityAfterTimeout>
 800652a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006532:	4618      	mov	r0, r3
 8006534:	f001 f92c 	bl	8007790 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006538:	f002 f90c 	bl	8008754 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800653c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800653e:	4618      	mov	r0, r3
 8006540:	3738      	adds	r7, #56	; 0x38
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	e000ed04 	.word	0xe000ed04

0800654c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10a      	bne.n	8006574 <vQueueDelete+0x28>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	60bb      	str	r3, [r7, #8]
}
 8006570:	bf00      	nop
 8006572:	e7fe      	b.n	8006572 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 f95f 	bl	8006838 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006580:	2b00      	cmp	r3, #0
 8006582:	d102      	bne.n	800658a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f002 faa3 	bl	8008ad0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800658a:	bf00      	nop
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006592:	b480      	push	{r7}
 8006594:	b085      	sub	sp, #20
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d006      	beq.n	80065b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	e001      	b.n	80065b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80065b0:	2300      	movs	r3, #0
 80065b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80065b4:	68fb      	ldr	r3, [r7, #12]
	}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b086      	sub	sp, #24
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	60f8      	str	r0, [r7, #12]
 80065ca:	60b9      	str	r1, [r7, #8]
 80065cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10d      	bne.n	80065fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d14d      	bne.n	8006684 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f001 f861 	bl	80076b4 <xTaskPriorityDisinherit>
 80065f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	609a      	str	r2, [r3, #8]
 80065fa:	e043      	b.n	8006684 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d119      	bne.n	8006636 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6858      	ldr	r0, [r3, #4]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	461a      	mov	r2, r3
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	f002 fba3 	bl	8008d58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	441a      	add	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	429a      	cmp	r2, r3
 800662a:	d32b      	bcc.n	8006684 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	605a      	str	r2, [r3, #4]
 8006634:	e026      	b.n	8006684 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	68d8      	ldr	r0, [r3, #12]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	461a      	mov	r2, r3
 8006640:	68b9      	ldr	r1, [r7, #8]
 8006642:	f002 fb89 	bl	8008d58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	425b      	negs	r3, r3
 8006650:	441a      	add	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	429a      	cmp	r2, r3
 8006660:	d207      	bcs.n	8006672 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666a:	425b      	negs	r3, r3
 800666c:	441a      	add	r2, r3
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d105      	bne.n	8006684 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d002      	beq.n	8006684 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	3b01      	subs	r3, #1
 8006682:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800668c:	697b      	ldr	r3, [r7, #20]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d018      	beq.n	80066da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68da      	ldr	r2, [r3, #12]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	441a      	add	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d303      	bcc.n	80066ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68d9      	ldr	r1, [r3, #12]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d2:	461a      	mov	r2, r3
 80066d4:	6838      	ldr	r0, [r7, #0]
 80066d6:	f002 fb3f 	bl	8008d58 <memcpy>
	}
}
 80066da:	bf00      	nop
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b084      	sub	sp, #16
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80066ea:	f002 f803 	bl	80086f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066f6:	e011      	b.n	800671c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d012      	beq.n	8006726 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3324      	adds	r3, #36	; 0x24
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fd8d 	bl	8007224 <xTaskRemoveFromEventList>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006710:	f000 fe64 	bl	80073dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006714:	7bfb      	ldrb	r3, [r7, #15]
 8006716:	3b01      	subs	r3, #1
 8006718:	b2db      	uxtb	r3, r3
 800671a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800671c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006720:	2b00      	cmp	r3, #0
 8006722:	dce9      	bgt.n	80066f8 <prvUnlockQueue+0x16>
 8006724:	e000      	b.n	8006728 <prvUnlockQueue+0x46>
					break;
 8006726:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	22ff      	movs	r2, #255	; 0xff
 800672c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006730:	f002 f810 	bl	8008754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006734:	f001 ffde 	bl	80086f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800673e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006740:	e011      	b.n	8006766 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d012      	beq.n	8006770 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	3310      	adds	r3, #16
 800674e:	4618      	mov	r0, r3
 8006750:	f000 fd68 	bl	8007224 <xTaskRemoveFromEventList>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800675a:	f000 fe3f 	bl	80073dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800675e:	7bbb      	ldrb	r3, [r7, #14]
 8006760:	3b01      	subs	r3, #1
 8006762:	b2db      	uxtb	r3, r3
 8006764:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006766:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800676a:	2b00      	cmp	r3, #0
 800676c:	dce9      	bgt.n	8006742 <prvUnlockQueue+0x60>
 800676e:	e000      	b.n	8006772 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006770:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	22ff      	movs	r2, #255	; 0xff
 8006776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800677a:	f001 ffeb 	bl	8008754 <vPortExitCritical>
}
 800677e:	bf00      	nop
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b084      	sub	sp, #16
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800678e:	f001 ffb1 	bl	80086f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006796:	2b00      	cmp	r3, #0
 8006798:	d102      	bne.n	80067a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800679a:	2301      	movs	r3, #1
 800679c:	60fb      	str	r3, [r7, #12]
 800679e:	e001      	b.n	80067a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80067a0:	2300      	movs	r3, #0
 80067a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067a4:	f001 ffd6 	bl	8008754 <vPortExitCritical>

	return xReturn;
 80067a8:	68fb      	ldr	r3, [r7, #12]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067ba:	f001 ff9b 	bl	80086f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d102      	bne.n	80067d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80067ca:	2301      	movs	r3, #1
 80067cc:	60fb      	str	r3, [r7, #12]
 80067ce:	e001      	b.n	80067d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80067d0:	2300      	movs	r3, #0
 80067d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067d4:	f001 ffbe 	bl	8008754 <vPortExitCritical>

	return xReturn;
 80067d8:	68fb      	ldr	r3, [r7, #12]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	e014      	b.n	800681e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80067f4:	4a0f      	ldr	r2, [pc, #60]	; (8006834 <vQueueAddToRegistry+0x50>)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10b      	bne.n	8006818 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006800:	490c      	ldr	r1, [pc, #48]	; (8006834 <vQueueAddToRegistry+0x50>)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800680a:	4a0a      	ldr	r2, [pc, #40]	; (8006834 <vQueueAddToRegistry+0x50>)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	4413      	add	r3, r2
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006816:	e006      	b.n	8006826 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3301      	adds	r3, #1
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b07      	cmp	r3, #7
 8006822:	d9e7      	bls.n	80067f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006824:	bf00      	nop
 8006826:	bf00      	nop
 8006828:	3714      	adds	r7, #20
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	20004e04 	.word	0x20004e04

08006838 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006840:	2300      	movs	r3, #0
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	e016      	b.n	8006874 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006846:	4a10      	ldr	r2, [pc, #64]	; (8006888 <vQueueUnregisterQueue+0x50>)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	00db      	lsls	r3, r3, #3
 800684c:	4413      	add	r3, r2
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	429a      	cmp	r2, r3
 8006854:	d10b      	bne.n	800686e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006856:	4a0c      	ldr	r2, [pc, #48]	; (8006888 <vQueueUnregisterQueue+0x50>)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2100      	movs	r1, #0
 800685c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006860:	4a09      	ldr	r2, [pc, #36]	; (8006888 <vQueueUnregisterQueue+0x50>)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	4413      	add	r3, r2
 8006868:	2200      	movs	r2, #0
 800686a:	605a      	str	r2, [r3, #4]
				break;
 800686c:	e006      	b.n	800687c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	3301      	adds	r3, #1
 8006872:	60fb      	str	r3, [r7, #12]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b07      	cmp	r3, #7
 8006878:	d9e5      	bls.n	8006846 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800687a:	bf00      	nop
 800687c:	bf00      	nop
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	20004e04 	.word	0x20004e04

0800688c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800689c:	f001 ff2a 	bl	80086f4 <vPortEnterCritical>
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068a6:	b25b      	sxtb	r3, r3
 80068a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ac:	d103      	bne.n	80068b6 <vQueueWaitForMessageRestricted+0x2a>
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068bc:	b25b      	sxtb	r3, r3
 80068be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c2:	d103      	bne.n	80068cc <vQueueWaitForMessageRestricted+0x40>
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068cc:	f001 ff42 	bl	8008754 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d106      	bne.n	80068e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	3324      	adds	r3, #36	; 0x24
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	68b9      	ldr	r1, [r7, #8]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 fc73 	bl	80071cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80068e6:	6978      	ldr	r0, [r7, #20]
 80068e8:	f7ff fefb 	bl	80066e2 <prvUnlockQueue>
	}
 80068ec:	bf00      	nop
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08e      	sub	sp, #56	; 0x38
 80068f8:	af04      	add	r7, sp, #16
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <xTaskCreateStatic+0x2a>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	623b      	str	r3, [r7, #32]
}
 800691a:	bf00      	nop
 800691c:	e7fe      	b.n	800691c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10a      	bne.n	800693a <xTaskCreateStatic+0x46>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	61fb      	str	r3, [r7, #28]
}
 8006936:	bf00      	nop
 8006938:	e7fe      	b.n	8006938 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800693a:	23bc      	movs	r3, #188	; 0xbc
 800693c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	2bbc      	cmp	r3, #188	; 0xbc
 8006942:	d00a      	beq.n	800695a <xTaskCreateStatic+0x66>
	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	61bb      	str	r3, [r7, #24]
}
 8006956:	bf00      	nop
 8006958:	e7fe      	b.n	8006958 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800695a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800695c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695e:	2b00      	cmp	r3, #0
 8006960:	d01e      	beq.n	80069a0 <xTaskCreateStatic+0xac>
 8006962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006964:	2b00      	cmp	r3, #0
 8006966:	d01b      	beq.n	80069a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006970:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	2202      	movs	r2, #2
 8006976:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800697a:	2300      	movs	r3, #0
 800697c:	9303      	str	r3, [sp, #12]
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	9302      	str	r3, [sp, #8]
 8006982:	f107 0314 	add.w	r3, r7, #20
 8006986:	9301      	str	r3, [sp, #4]
 8006988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	68b9      	ldr	r1, [r7, #8]
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 f850 	bl	8006a38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800699a:	f000 f8f3 	bl	8006b84 <prvAddNewTaskToReadyList>
 800699e:	e001      	b.n	80069a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80069a4:	697b      	ldr	r3, [r7, #20]
	}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3728      	adds	r7, #40	; 0x28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b08c      	sub	sp, #48	; 0x30
 80069b2:	af04      	add	r7, sp, #16
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	603b      	str	r3, [r7, #0]
 80069ba:	4613      	mov	r3, r2
 80069bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069be:	88fb      	ldrh	r3, [r7, #6]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f001 ffb8 	bl	8008938 <pvPortMalloc>
 80069c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00e      	beq.n	80069ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069d0:	20bc      	movs	r0, #188	; 0xbc
 80069d2:	f001 ffb1 	bl	8008938 <pvPortMalloc>
 80069d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	631a      	str	r2, [r3, #48]	; 0x30
 80069e4:	e005      	b.n	80069f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069e6:	6978      	ldr	r0, [r7, #20]
 80069e8:	f002 f872 	bl	8008ad0 <vPortFree>
 80069ec:	e001      	b.n	80069f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069ee:	2300      	movs	r3, #0
 80069f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d017      	beq.n	8006a28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a00:	88fa      	ldrh	r2, [r7, #6]
 8006a02:	2300      	movs	r3, #0
 8006a04:	9303      	str	r3, [sp, #12]
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	9302      	str	r3, [sp, #8]
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	9301      	str	r3, [sp, #4]
 8006a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	68b9      	ldr	r1, [r7, #8]
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 f80e 	bl	8006a38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a1c:	69f8      	ldr	r0, [r7, #28]
 8006a1e:	f000 f8b1 	bl	8006b84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a22:	2301      	movs	r3, #1
 8006a24:	61bb      	str	r3, [r7, #24]
 8006a26:	e002      	b.n	8006a2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a28:	f04f 33ff 	mov.w	r3, #4294967295
 8006a2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a2e:	69bb      	ldr	r3, [r7, #24]
	}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3720      	adds	r7, #32
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b088      	sub	sp, #32
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	461a      	mov	r2, r3
 8006a50:	21a5      	movs	r1, #165	; 0xa5
 8006a52:	f002 f98f 	bl	8008d74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a60:	3b01      	subs	r3, #1
 8006a62:	009b      	lsls	r3, r3, #2
 8006a64:	4413      	add	r3, r2
 8006a66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	f023 0307 	bic.w	r3, r3, #7
 8006a6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	f003 0307 	and.w	r3, r3, #7
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	617b      	str	r3, [r7, #20]
}
 8006a8c:	bf00      	nop
 8006a8e:	e7fe      	b.n	8006a8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d01f      	beq.n	8006ad6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a96:	2300      	movs	r3, #0
 8006a98:	61fb      	str	r3, [r7, #28]
 8006a9a:	e012      	b.n	8006ac2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	7819      	ldrb	r1, [r3, #0]
 8006aa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	4413      	add	r3, r2
 8006aaa:	3334      	adds	r3, #52	; 0x34
 8006aac:	460a      	mov	r2, r1
 8006aae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d006      	beq.n	8006aca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	61fb      	str	r3, [r7, #28]
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	2b0f      	cmp	r3, #15
 8006ac6:	d9e9      	bls.n	8006a9c <prvInitialiseNewTask+0x64>
 8006ac8:	e000      	b.n	8006acc <prvInitialiseNewTask+0x94>
			{
				break;
 8006aca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ad4:	e003      	b.n	8006ade <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	2b37      	cmp	r3, #55	; 0x37
 8006ae2:	d901      	bls.n	8006ae8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ae4:	2337      	movs	r3, #55	; 0x37
 8006ae6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006af2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	2200      	movs	r2, #0
 8006af8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	3304      	adds	r3, #4
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fe ff62 	bl	80059c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	3318      	adds	r3, #24
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fe ff5d 	bl	80059c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	3354      	adds	r3, #84	; 0x54
 8006b38:	2260      	movs	r2, #96	; 0x60
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f002 f919 	bl	8008d74 <memset>
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	4a0c      	ldr	r2, [pc, #48]	; (8006b78 <prvInitialiseNewTask+0x140>)
 8006b46:	659a      	str	r2, [r3, #88]	; 0x58
 8006b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4a:	4a0c      	ldr	r2, [pc, #48]	; (8006b7c <prvInitialiseNewTask+0x144>)
 8006b4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	4a0b      	ldr	r2, [pc, #44]	; (8006b80 <prvInitialiseNewTask+0x148>)
 8006b52:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	68f9      	ldr	r1, [r7, #12]
 8006b58:	69b8      	ldr	r0, [r7, #24]
 8006b5a:	f001 fc9b 	bl	8008494 <pxPortInitialiseStack>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b70:	bf00      	nop
 8006b72:	3720      	adds	r7, #32
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	0800905c 	.word	0x0800905c
 8006b7c:	0800907c 	.word	0x0800907c
 8006b80:	0800903c 	.word	0x0800903c

08006b84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b8c:	f001 fdb2 	bl	80086f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b90:	4b2d      	ldr	r3, [pc, #180]	; (8006c48 <prvAddNewTaskToReadyList+0xc4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3301      	adds	r3, #1
 8006b96:	4a2c      	ldr	r2, [pc, #176]	; (8006c48 <prvAddNewTaskToReadyList+0xc4>)
 8006b98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b9a:	4b2c      	ldr	r3, [pc, #176]	; (8006c4c <prvAddNewTaskToReadyList+0xc8>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d109      	bne.n	8006bb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ba2:	4a2a      	ldr	r2, [pc, #168]	; (8006c4c <prvAddNewTaskToReadyList+0xc8>)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ba8:	4b27      	ldr	r3, [pc, #156]	; (8006c48 <prvAddNewTaskToReadyList+0xc4>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d110      	bne.n	8006bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006bb0:	f000 fc38 	bl	8007424 <prvInitialiseTaskLists>
 8006bb4:	e00d      	b.n	8006bd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006bb6:	4b26      	ldr	r3, [pc, #152]	; (8006c50 <prvAddNewTaskToReadyList+0xcc>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d109      	bne.n	8006bd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006bbe:	4b23      	ldr	r3, [pc, #140]	; (8006c4c <prvAddNewTaskToReadyList+0xc8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d802      	bhi.n	8006bd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006bcc:	4a1f      	ldr	r2, [pc, #124]	; (8006c4c <prvAddNewTaskToReadyList+0xc8>)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006bd2:	4b20      	ldr	r3, [pc, #128]	; (8006c54 <prvAddNewTaskToReadyList+0xd0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	4a1e      	ldr	r2, [pc, #120]	; (8006c54 <prvAddNewTaskToReadyList+0xd0>)
 8006bda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006bdc:	4b1d      	ldr	r3, [pc, #116]	; (8006c54 <prvAddNewTaskToReadyList+0xd0>)
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be8:	4b1b      	ldr	r3, [pc, #108]	; (8006c58 <prvAddNewTaskToReadyList+0xd4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d903      	bls.n	8006bf8 <prvAddNewTaskToReadyList+0x74>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf4:	4a18      	ldr	r2, [pc, #96]	; (8006c58 <prvAddNewTaskToReadyList+0xd4>)
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4a15      	ldr	r2, [pc, #84]	; (8006c5c <prvAddNewTaskToReadyList+0xd8>)
 8006c06:	441a      	add	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4610      	mov	r0, r2
 8006c10:	f7fe fee7 	bl	80059e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c14:	f001 fd9e 	bl	8008754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c18:	4b0d      	ldr	r3, [pc, #52]	; (8006c50 <prvAddNewTaskToReadyList+0xcc>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00e      	beq.n	8006c3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c20:	4b0a      	ldr	r3, [pc, #40]	; (8006c4c <prvAddNewTaskToReadyList+0xc8>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d207      	bcs.n	8006c3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c2e:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <prvAddNewTaskToReadyList+0xdc>)
 8006c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000cf0 	.word	0x20000cf0
 8006c4c:	2000081c 	.word	0x2000081c
 8006c50:	20000cfc 	.word	0x20000cfc
 8006c54:	20000d0c 	.word	0x20000d0c
 8006c58:	20000cf8 	.word	0x20000cf8
 8006c5c:	20000820 	.word	0x20000820
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d017      	beq.n	8006ca6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c76:	4b13      	ldr	r3, [pc, #76]	; (8006cc4 <vTaskDelay+0x60>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <vTaskDelay+0x30>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	60bb      	str	r3, [r7, #8]
}
 8006c90:	bf00      	nop
 8006c92:	e7fe      	b.n	8006c92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c94:	f000 f88a 	bl	8006dac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c98:	2100      	movs	r1, #0
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fffc 	bl	8007c98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ca0:	f000 f892 	bl	8006dc8 <xTaskResumeAll>
 8006ca4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d107      	bne.n	8006cbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006cac:	4b06      	ldr	r3, [pc, #24]	; (8006cc8 <vTaskDelay+0x64>)
 8006cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cbc:	bf00      	nop
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	20000d18 	.word	0x20000d18
 8006cc8:	e000ed04 	.word	0xe000ed04

08006ccc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08a      	sub	sp, #40	; 0x28
 8006cd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cda:	463a      	mov	r2, r7
 8006cdc:	1d39      	adds	r1, r7, #4
 8006cde:	f107 0308 	add.w	r3, r7, #8
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fe1c 	bl	8005920 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	9202      	str	r2, [sp, #8]
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	460a      	mov	r2, r1
 8006cfa:	4924      	ldr	r1, [pc, #144]	; (8006d8c <vTaskStartScheduler+0xc0>)
 8006cfc:	4824      	ldr	r0, [pc, #144]	; (8006d90 <vTaskStartScheduler+0xc4>)
 8006cfe:	f7ff fdf9 	bl	80068f4 <xTaskCreateStatic>
 8006d02:	4603      	mov	r3, r0
 8006d04:	4a23      	ldr	r2, [pc, #140]	; (8006d94 <vTaskStartScheduler+0xc8>)
 8006d06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d08:	4b22      	ldr	r3, [pc, #136]	; (8006d94 <vTaskStartScheduler+0xc8>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d10:	2301      	movs	r3, #1
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	e001      	b.n	8006d1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d102      	bne.n	8006d26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d20:	f001 f80e 	bl	8007d40 <xTimerCreateTimerTask>
 8006d24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d11b      	bne.n	8006d64 <vTaskStartScheduler+0x98>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	613b      	str	r3, [r7, #16]
}
 8006d3e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006d40:	4b15      	ldr	r3, [pc, #84]	; (8006d98 <vTaskStartScheduler+0xcc>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3354      	adds	r3, #84	; 0x54
 8006d46:	4a15      	ldr	r2, [pc, #84]	; (8006d9c <vTaskStartScheduler+0xd0>)
 8006d48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d4a:	4b15      	ldr	r3, [pc, #84]	; (8006da0 <vTaskStartScheduler+0xd4>)
 8006d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d52:	4b14      	ldr	r3, [pc, #80]	; (8006da4 <vTaskStartScheduler+0xd8>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d58:	4b13      	ldr	r3, [pc, #76]	; (8006da8 <vTaskStartScheduler+0xdc>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d5e:	f001 fc27 	bl	80085b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d62:	e00e      	b.n	8006d82 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6a:	d10a      	bne.n	8006d82 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	60fb      	str	r3, [r7, #12]
}
 8006d7e:	bf00      	nop
 8006d80:	e7fe      	b.n	8006d80 <vTaskStartScheduler+0xb4>
}
 8006d82:	bf00      	nop
 8006d84:	3718      	adds	r7, #24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	08008f94 	.word	0x08008f94
 8006d90:	080073f5 	.word	0x080073f5
 8006d94:	20000d14 	.word	0x20000d14
 8006d98:	2000081c 	.word	0x2000081c
 8006d9c:	20000010 	.word	0x20000010
 8006da0:	20000d10 	.word	0x20000d10
 8006da4:	20000cfc 	.word	0x20000cfc
 8006da8:	20000cf4 	.word	0x20000cf4

08006dac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006db0:	4b04      	ldr	r3, [pc, #16]	; (8006dc4 <vTaskSuspendAll+0x18>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	3301      	adds	r3, #1
 8006db6:	4a03      	ldr	r2, [pc, #12]	; (8006dc4 <vTaskSuspendAll+0x18>)
 8006db8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006dba:	bf00      	nop
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	20000d18 	.word	0x20000d18

08006dc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006dd6:	4b42      	ldr	r3, [pc, #264]	; (8006ee0 <xTaskResumeAll+0x118>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10a      	bne.n	8006df4 <xTaskResumeAll+0x2c>
	__asm volatile
 8006dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de2:	f383 8811 	msr	BASEPRI, r3
 8006de6:	f3bf 8f6f 	isb	sy
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	603b      	str	r3, [r7, #0]
}
 8006df0:	bf00      	nop
 8006df2:	e7fe      	b.n	8006df2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006df4:	f001 fc7e 	bl	80086f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006df8:	4b39      	ldr	r3, [pc, #228]	; (8006ee0 <xTaskResumeAll+0x118>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	4a38      	ldr	r2, [pc, #224]	; (8006ee0 <xTaskResumeAll+0x118>)
 8006e00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e02:	4b37      	ldr	r3, [pc, #220]	; (8006ee0 <xTaskResumeAll+0x118>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d162      	bne.n	8006ed0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e0a:	4b36      	ldr	r3, [pc, #216]	; (8006ee4 <xTaskResumeAll+0x11c>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d05e      	beq.n	8006ed0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e12:	e02f      	b.n	8006e74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e14:	4b34      	ldr	r3, [pc, #208]	; (8006ee8 <xTaskResumeAll+0x120>)
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	3318      	adds	r3, #24
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7fe fe3b 	bl	8005a9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	3304      	adds	r3, #4
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fe fe36 	bl	8005a9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e34:	4b2d      	ldr	r3, [pc, #180]	; (8006eec <xTaskResumeAll+0x124>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d903      	bls.n	8006e44 <xTaskResumeAll+0x7c>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	4a2a      	ldr	r2, [pc, #168]	; (8006eec <xTaskResumeAll+0x124>)
 8006e42:	6013      	str	r3, [r2, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e48:	4613      	mov	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	4413      	add	r3, r2
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4a27      	ldr	r2, [pc, #156]	; (8006ef0 <xTaskResumeAll+0x128>)
 8006e52:	441a      	add	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3304      	adds	r3, #4
 8006e58:	4619      	mov	r1, r3
 8006e5a:	4610      	mov	r0, r2
 8006e5c:	f7fe fdc1 	bl	80059e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e64:	4b23      	ldr	r3, [pc, #140]	; (8006ef4 <xTaskResumeAll+0x12c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d302      	bcc.n	8006e74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006e6e:	4b22      	ldr	r3, [pc, #136]	; (8006ef8 <xTaskResumeAll+0x130>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e74:	4b1c      	ldr	r3, [pc, #112]	; (8006ee8 <xTaskResumeAll+0x120>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1cb      	bne.n	8006e14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e82:	f000 fb71 	bl	8007568 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e86:	4b1d      	ldr	r3, [pc, #116]	; (8006efc <xTaskResumeAll+0x134>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d010      	beq.n	8006eb4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e92:	f000 f859 	bl	8006f48 <xTaskIncrementTick>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006e9c:	4b16      	ldr	r3, [pc, #88]	; (8006ef8 <xTaskResumeAll+0x130>)
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1f1      	bne.n	8006e92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006eae:	4b13      	ldr	r3, [pc, #76]	; (8006efc <xTaskResumeAll+0x134>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006eb4:	4b10      	ldr	r3, [pc, #64]	; (8006ef8 <xTaskResumeAll+0x130>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d009      	beq.n	8006ed0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ec0:	4b0f      	ldr	r3, [pc, #60]	; (8006f00 <xTaskResumeAll+0x138>)
 8006ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ed0:	f001 fc40 	bl	8008754 <vPortExitCritical>

	return xAlreadyYielded;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20000d18 	.word	0x20000d18
 8006ee4:	20000cf0 	.word	0x20000cf0
 8006ee8:	20000cb0 	.word	0x20000cb0
 8006eec:	20000cf8 	.word	0x20000cf8
 8006ef0:	20000820 	.word	0x20000820
 8006ef4:	2000081c 	.word	0x2000081c
 8006ef8:	20000d04 	.word	0x20000d04
 8006efc:	20000d00 	.word	0x20000d00
 8006f00:	e000ed04 	.word	0xe000ed04

08006f04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f0a:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <xTaskGetTickCount+0x1c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f10:	687b      	ldr	r3, [r7, #4]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	370c      	adds	r7, #12
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
 8006f1e:	bf00      	nop
 8006f20:	20000cf4 	.word	0x20000cf4

08006f24 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f2a:	f001 fcc5 	bl	80088b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006f2e:	2300      	movs	r3, #0
 8006f30:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006f32:	4b04      	ldr	r3, [pc, #16]	; (8006f44 <xTaskGetTickCountFromISR+0x20>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f38:	683b      	ldr	r3, [r7, #0]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20000cf4 	.word	0x20000cf4

08006f48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f52:	4b4f      	ldr	r3, [pc, #316]	; (8007090 <xTaskIncrementTick+0x148>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f040 808f 	bne.w	800707a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f5c:	4b4d      	ldr	r3, [pc, #308]	; (8007094 <xTaskIncrementTick+0x14c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3301      	adds	r3, #1
 8006f62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f64:	4a4b      	ldr	r2, [pc, #300]	; (8007094 <xTaskIncrementTick+0x14c>)
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d120      	bne.n	8006fb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f70:	4b49      	ldr	r3, [pc, #292]	; (8007098 <xTaskIncrementTick+0x150>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <xTaskIncrementTick+0x48>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	603b      	str	r3, [r7, #0]
}
 8006f8c:	bf00      	nop
 8006f8e:	e7fe      	b.n	8006f8e <xTaskIncrementTick+0x46>
 8006f90:	4b41      	ldr	r3, [pc, #260]	; (8007098 <xTaskIncrementTick+0x150>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	4b41      	ldr	r3, [pc, #260]	; (800709c <xTaskIncrementTick+0x154>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a3f      	ldr	r2, [pc, #252]	; (8007098 <xTaskIncrementTick+0x150>)
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	4a3f      	ldr	r2, [pc, #252]	; (800709c <xTaskIncrementTick+0x154>)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	4b3e      	ldr	r3, [pc, #248]	; (80070a0 <xTaskIncrementTick+0x158>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	4a3d      	ldr	r2, [pc, #244]	; (80070a0 <xTaskIncrementTick+0x158>)
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	f000 fadb 	bl	8007568 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fb2:	4b3c      	ldr	r3, [pc, #240]	; (80070a4 <xTaskIncrementTick+0x15c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	693a      	ldr	r2, [r7, #16]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d349      	bcc.n	8007050 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fbc:	4b36      	ldr	r3, [pc, #216]	; (8007098 <xTaskIncrementTick+0x150>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fc6:	4b37      	ldr	r3, [pc, #220]	; (80070a4 <xTaskIncrementTick+0x15c>)
 8006fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fcc:	601a      	str	r2, [r3, #0]
					break;
 8006fce:	e03f      	b.n	8007050 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fd0:	4b31      	ldr	r3, [pc, #196]	; (8007098 <xTaskIncrementTick+0x150>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d203      	bcs.n	8006ff0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006fe8:	4a2e      	ldr	r2, [pc, #184]	; (80070a4 <xTaskIncrementTick+0x15c>)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006fee:	e02f      	b.n	8007050 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7fe fd51 	bl	8005a9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d004      	beq.n	800700c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	3318      	adds	r3, #24
 8007006:	4618      	mov	r0, r3
 8007008:	f7fe fd48 	bl	8005a9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007010:	4b25      	ldr	r3, [pc, #148]	; (80070a8 <xTaskIncrementTick+0x160>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	429a      	cmp	r2, r3
 8007016:	d903      	bls.n	8007020 <xTaskIncrementTick+0xd8>
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	4a22      	ldr	r2, [pc, #136]	; (80070a8 <xTaskIncrementTick+0x160>)
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4a1f      	ldr	r2, [pc, #124]	; (80070ac <xTaskIncrementTick+0x164>)
 800702e:	441a      	add	r2, r3
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	3304      	adds	r3, #4
 8007034:	4619      	mov	r1, r3
 8007036:	4610      	mov	r0, r2
 8007038:	f7fe fcd3 	bl	80059e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007040:	4b1b      	ldr	r3, [pc, #108]	; (80070b0 <xTaskIncrementTick+0x168>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007046:	429a      	cmp	r2, r3
 8007048:	d3b8      	bcc.n	8006fbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800704a:	2301      	movs	r3, #1
 800704c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800704e:	e7b5      	b.n	8006fbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007050:	4b17      	ldr	r3, [pc, #92]	; (80070b0 <xTaskIncrementTick+0x168>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007056:	4915      	ldr	r1, [pc, #84]	; (80070ac <xTaskIncrementTick+0x164>)
 8007058:	4613      	mov	r3, r2
 800705a:	009b      	lsls	r3, r3, #2
 800705c:	4413      	add	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	440b      	add	r3, r1
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d901      	bls.n	800706c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007068:	2301      	movs	r3, #1
 800706a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800706c:	4b11      	ldr	r3, [pc, #68]	; (80070b4 <xTaskIncrementTick+0x16c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d007      	beq.n	8007084 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007074:	2301      	movs	r3, #1
 8007076:	617b      	str	r3, [r7, #20]
 8007078:	e004      	b.n	8007084 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800707a:	4b0f      	ldr	r3, [pc, #60]	; (80070b8 <xTaskIncrementTick+0x170>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	3301      	adds	r3, #1
 8007080:	4a0d      	ldr	r2, [pc, #52]	; (80070b8 <xTaskIncrementTick+0x170>)
 8007082:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007084:	697b      	ldr	r3, [r7, #20]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20000d18 	.word	0x20000d18
 8007094:	20000cf4 	.word	0x20000cf4
 8007098:	20000ca8 	.word	0x20000ca8
 800709c:	20000cac 	.word	0x20000cac
 80070a0:	20000d08 	.word	0x20000d08
 80070a4:	20000d10 	.word	0x20000d10
 80070a8:	20000cf8 	.word	0x20000cf8
 80070ac:	20000820 	.word	0x20000820
 80070b0:	2000081c 	.word	0x2000081c
 80070b4:	20000d04 	.word	0x20000d04
 80070b8:	20000d00 	.word	0x20000d00

080070bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070c2:	4b2a      	ldr	r3, [pc, #168]	; (800716c <vTaskSwitchContext+0xb0>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070ca:	4b29      	ldr	r3, [pc, #164]	; (8007170 <vTaskSwitchContext+0xb4>)
 80070cc:	2201      	movs	r2, #1
 80070ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070d0:	e046      	b.n	8007160 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80070d2:	4b27      	ldr	r3, [pc, #156]	; (8007170 <vTaskSwitchContext+0xb4>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070d8:	4b26      	ldr	r3, [pc, #152]	; (8007174 <vTaskSwitchContext+0xb8>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	e010      	b.n	8007102 <vTaskSwitchContext+0x46>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10a      	bne.n	80070fc <vTaskSwitchContext+0x40>
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	607b      	str	r3, [r7, #4]
}
 80070f8:	bf00      	nop
 80070fa:	e7fe      	b.n	80070fa <vTaskSwitchContext+0x3e>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3b01      	subs	r3, #1
 8007100:	60fb      	str	r3, [r7, #12]
 8007102:	491d      	ldr	r1, [pc, #116]	; (8007178 <vTaskSwitchContext+0xbc>)
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4613      	mov	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4413      	add	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	440b      	add	r3, r1
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0e4      	beq.n	80070e0 <vTaskSwitchContext+0x24>
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	4613      	mov	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4a15      	ldr	r2, [pc, #84]	; (8007178 <vTaskSwitchContext+0xbc>)
 8007122:	4413      	add	r3, r2
 8007124:	60bb      	str	r3, [r7, #8]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	605a      	str	r2, [r3, #4]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	3308      	adds	r3, #8
 8007138:	429a      	cmp	r2, r3
 800713a:	d104      	bne.n	8007146 <vTaskSwitchContext+0x8a>
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	605a      	str	r2, [r3, #4]
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	4a0b      	ldr	r2, [pc, #44]	; (800717c <vTaskSwitchContext+0xc0>)
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	4a08      	ldr	r2, [pc, #32]	; (8007174 <vTaskSwitchContext+0xb8>)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007156:	4b09      	ldr	r3, [pc, #36]	; (800717c <vTaskSwitchContext+0xc0>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	3354      	adds	r3, #84	; 0x54
 800715c:	4a08      	ldr	r2, [pc, #32]	; (8007180 <vTaskSwitchContext+0xc4>)
 800715e:	6013      	str	r3, [r2, #0]
}
 8007160:	bf00      	nop
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	20000d18 	.word	0x20000d18
 8007170:	20000d04 	.word	0x20000d04
 8007174:	20000cf8 	.word	0x20000cf8
 8007178:	20000820 	.word	0x20000820
 800717c:	2000081c 	.word	0x2000081c
 8007180:	20000010 	.word	0x20000010

08007184 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10a      	bne.n	80071aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	60fb      	str	r3, [r7, #12]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071aa:	4b07      	ldr	r3, [pc, #28]	; (80071c8 <vTaskPlaceOnEventList+0x44>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3318      	adds	r3, #24
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7fe fc39 	bl	8005a2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071b8:	2101      	movs	r1, #1
 80071ba:	6838      	ldr	r0, [r7, #0]
 80071bc:	f000 fd6c 	bl	8007c98 <prvAddCurrentTaskToDelayedList>
}
 80071c0:	bf00      	nop
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	2000081c 	.word	0x2000081c

080071cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10a      	bne.n	80071f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	617b      	str	r3, [r7, #20]
}
 80071f0:	bf00      	nop
 80071f2:	e7fe      	b.n	80071f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071f4:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <vTaskPlaceOnEventListRestricted+0x54>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3318      	adds	r3, #24
 80071fa:	4619      	mov	r1, r3
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7fe fbf0 	bl	80059e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007208:	f04f 33ff 	mov.w	r3, #4294967295
 800720c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	68b8      	ldr	r0, [r7, #8]
 8007212:	f000 fd41 	bl	8007c98 <prvAddCurrentTaskToDelayedList>
	}
 8007216:	bf00      	nop
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	2000081c 	.word	0x2000081c

08007224 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10a      	bne.n	8007250 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	60fb      	str	r3, [r7, #12]
}
 800724c:	bf00      	nop
 800724e:	e7fe      	b.n	800724e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	3318      	adds	r3, #24
 8007254:	4618      	mov	r0, r3
 8007256:	f7fe fc21 	bl	8005a9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800725a:	4b1e      	ldr	r3, [pc, #120]	; (80072d4 <xTaskRemoveFromEventList+0xb0>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d11d      	bne.n	800729e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	3304      	adds	r3, #4
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe fc18 	bl	8005a9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007270:	4b19      	ldr	r3, [pc, #100]	; (80072d8 <xTaskRemoveFromEventList+0xb4>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	429a      	cmp	r2, r3
 8007276:	d903      	bls.n	8007280 <xTaskRemoveFromEventList+0x5c>
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	4a16      	ldr	r2, [pc, #88]	; (80072d8 <xTaskRemoveFromEventList+0xb4>)
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007284:	4613      	mov	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4a13      	ldr	r2, [pc, #76]	; (80072dc <xTaskRemoveFromEventList+0xb8>)
 800728e:	441a      	add	r2, r3
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	3304      	adds	r3, #4
 8007294:	4619      	mov	r1, r3
 8007296:	4610      	mov	r0, r2
 8007298:	f7fe fba3 	bl	80059e2 <vListInsertEnd>
 800729c:	e005      	b.n	80072aa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	3318      	adds	r3, #24
 80072a2:	4619      	mov	r1, r3
 80072a4:	480e      	ldr	r0, [pc, #56]	; (80072e0 <xTaskRemoveFromEventList+0xbc>)
 80072a6:	f7fe fb9c 	bl	80059e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072ae:	4b0d      	ldr	r3, [pc, #52]	; (80072e4 <xTaskRemoveFromEventList+0xc0>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d905      	bls.n	80072c4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072b8:	2301      	movs	r3, #1
 80072ba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <xTaskRemoveFromEventList+0xc4>)
 80072be:	2201      	movs	r2, #1
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	e001      	b.n	80072c8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80072c4:	2300      	movs	r3, #0
 80072c6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80072c8:	697b      	ldr	r3, [r7, #20]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20000d18 	.word	0x20000d18
 80072d8:	20000cf8 	.word	0x20000cf8
 80072dc:	20000820 	.word	0x20000820
 80072e0:	20000cb0 	.word	0x20000cb0
 80072e4:	2000081c 	.word	0x2000081c
 80072e8:	20000d04 	.word	0x20000d04

080072ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072f4:	4b06      	ldr	r3, [pc, #24]	; (8007310 <vTaskInternalSetTimeOutState+0x24>)
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072fc:	4b05      	ldr	r3, [pc, #20]	; (8007314 <vTaskInternalSetTimeOutState+0x28>)
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	605a      	str	r2, [r3, #4]
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	20000d08 	.word	0x20000d08
 8007314:	20000cf4 	.word	0x20000cf4

08007318 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b088      	sub	sp, #32
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	613b      	str	r3, [r7, #16]
}
 800733a:	bf00      	nop
 800733c:	e7fe      	b.n	800733c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10a      	bne.n	800735a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	60fb      	str	r3, [r7, #12]
}
 8007356:	bf00      	nop
 8007358:	e7fe      	b.n	8007358 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800735a:	f001 f9cb 	bl	80086f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800735e:	4b1d      	ldr	r3, [pc, #116]	; (80073d4 <xTaskCheckForTimeOut+0xbc>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007376:	d102      	bne.n	800737e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007378:	2300      	movs	r3, #0
 800737a:	61fb      	str	r3, [r7, #28]
 800737c:	e023      	b.n	80073c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <xTaskCheckForTimeOut+0xc0>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d007      	beq.n	800739a <xTaskCheckForTimeOut+0x82>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	429a      	cmp	r2, r3
 8007392:	d302      	bcc.n	800739a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007394:	2301      	movs	r3, #1
 8007396:	61fb      	str	r3, [r7, #28]
 8007398:	e015      	b.n	80073c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d20b      	bcs.n	80073bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	1ad2      	subs	r2, r2, r3
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff ff9b 	bl	80072ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073b6:	2300      	movs	r3, #0
 80073b8:	61fb      	str	r3, [r7, #28]
 80073ba:	e004      	b.n	80073c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	2200      	movs	r2, #0
 80073c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073c2:	2301      	movs	r3, #1
 80073c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073c6:	f001 f9c5 	bl	8008754 <vPortExitCritical>

	return xReturn;
 80073ca:	69fb      	ldr	r3, [r7, #28]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3720      	adds	r7, #32
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	20000cf4 	.word	0x20000cf4
 80073d8:	20000d08 	.word	0x20000d08

080073dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073dc:	b480      	push	{r7}
 80073de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073e0:	4b03      	ldr	r3, [pc, #12]	; (80073f0 <vTaskMissedYield+0x14>)
 80073e2:	2201      	movs	r2, #1
 80073e4:	601a      	str	r2, [r3, #0]
}
 80073e6:	bf00      	nop
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	20000d04 	.word	0x20000d04

080073f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073fc:	f000 f852 	bl	80074a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007400:	4b06      	ldr	r3, [pc, #24]	; (800741c <prvIdleTask+0x28>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d9f9      	bls.n	80073fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007408:	4b05      	ldr	r3, [pc, #20]	; (8007420 <prvIdleTask+0x2c>)
 800740a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007418:	e7f0      	b.n	80073fc <prvIdleTask+0x8>
 800741a:	bf00      	nop
 800741c:	20000820 	.word	0x20000820
 8007420:	e000ed04 	.word	0xe000ed04

08007424 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800742a:	2300      	movs	r3, #0
 800742c:	607b      	str	r3, [r7, #4]
 800742e:	e00c      	b.n	800744a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	4613      	mov	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4413      	add	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4a12      	ldr	r2, [pc, #72]	; (8007484 <prvInitialiseTaskLists+0x60>)
 800743c:	4413      	add	r3, r2
 800743e:	4618      	mov	r0, r3
 8007440:	f7fe faa2 	bl	8005988 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	3301      	adds	r3, #1
 8007448:	607b      	str	r3, [r7, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2b37      	cmp	r3, #55	; 0x37
 800744e:	d9ef      	bls.n	8007430 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007450:	480d      	ldr	r0, [pc, #52]	; (8007488 <prvInitialiseTaskLists+0x64>)
 8007452:	f7fe fa99 	bl	8005988 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007456:	480d      	ldr	r0, [pc, #52]	; (800748c <prvInitialiseTaskLists+0x68>)
 8007458:	f7fe fa96 	bl	8005988 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800745c:	480c      	ldr	r0, [pc, #48]	; (8007490 <prvInitialiseTaskLists+0x6c>)
 800745e:	f7fe fa93 	bl	8005988 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007462:	480c      	ldr	r0, [pc, #48]	; (8007494 <prvInitialiseTaskLists+0x70>)
 8007464:	f7fe fa90 	bl	8005988 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007468:	480b      	ldr	r0, [pc, #44]	; (8007498 <prvInitialiseTaskLists+0x74>)
 800746a:	f7fe fa8d 	bl	8005988 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800746e:	4b0b      	ldr	r3, [pc, #44]	; (800749c <prvInitialiseTaskLists+0x78>)
 8007470:	4a05      	ldr	r2, [pc, #20]	; (8007488 <prvInitialiseTaskLists+0x64>)
 8007472:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007474:	4b0a      	ldr	r3, [pc, #40]	; (80074a0 <prvInitialiseTaskLists+0x7c>)
 8007476:	4a05      	ldr	r2, [pc, #20]	; (800748c <prvInitialiseTaskLists+0x68>)
 8007478:	601a      	str	r2, [r3, #0]
}
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	20000820 	.word	0x20000820
 8007488:	20000c80 	.word	0x20000c80
 800748c:	20000c94 	.word	0x20000c94
 8007490:	20000cb0 	.word	0x20000cb0
 8007494:	20000cc4 	.word	0x20000cc4
 8007498:	20000cdc 	.word	0x20000cdc
 800749c:	20000ca8 	.word	0x20000ca8
 80074a0:	20000cac 	.word	0x20000cac

080074a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074aa:	e019      	b.n	80074e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074ac:	f001 f922 	bl	80086f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074b0:	4b10      	ldr	r3, [pc, #64]	; (80074f4 <prvCheckTasksWaitingTermination+0x50>)
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3304      	adds	r3, #4
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fe faed 	bl	8005a9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074c2:	4b0d      	ldr	r3, [pc, #52]	; (80074f8 <prvCheckTasksWaitingTermination+0x54>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	3b01      	subs	r3, #1
 80074c8:	4a0b      	ldr	r2, [pc, #44]	; (80074f8 <prvCheckTasksWaitingTermination+0x54>)
 80074ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074cc:	4b0b      	ldr	r3, [pc, #44]	; (80074fc <prvCheckTasksWaitingTermination+0x58>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3b01      	subs	r3, #1
 80074d2:	4a0a      	ldr	r2, [pc, #40]	; (80074fc <prvCheckTasksWaitingTermination+0x58>)
 80074d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074d6:	f001 f93d 	bl	8008754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f810 	bl	8007500 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074e0:	4b06      	ldr	r3, [pc, #24]	; (80074fc <prvCheckTasksWaitingTermination+0x58>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1e1      	bne.n	80074ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20000cc4 	.word	0x20000cc4
 80074f8:	20000cf0 	.word	0x20000cf0
 80074fc:	20000cd8 	.word	0x20000cd8

08007500 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	3354      	adds	r3, #84	; 0x54
 800750c:	4618      	mov	r0, r3
 800750e:	f001 fc47 	bl	8008da0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007518:	2b00      	cmp	r3, #0
 800751a:	d108      	bne.n	800752e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007520:	4618      	mov	r0, r3
 8007522:	f001 fad5 	bl	8008ad0 <vPortFree>
				vPortFree( pxTCB );
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f001 fad2 	bl	8008ad0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800752c:	e018      	b.n	8007560 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007534:	2b01      	cmp	r3, #1
 8007536:	d103      	bne.n	8007540 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 fac9 	bl	8008ad0 <vPortFree>
	}
 800753e:	e00f      	b.n	8007560 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007546:	2b02      	cmp	r3, #2
 8007548:	d00a      	beq.n	8007560 <prvDeleteTCB+0x60>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	60fb      	str	r3, [r7, #12]
}
 800755c:	bf00      	nop
 800755e:	e7fe      	b.n	800755e <prvDeleteTCB+0x5e>
	}
 8007560:	bf00      	nop
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800756e:	4b0c      	ldr	r3, [pc, #48]	; (80075a0 <prvResetNextTaskUnblockTime+0x38>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d104      	bne.n	8007582 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007578:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <prvResetNextTaskUnblockTime+0x3c>)
 800757a:	f04f 32ff 	mov.w	r2, #4294967295
 800757e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007580:	e008      	b.n	8007594 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007582:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <prvResetNextTaskUnblockTime+0x38>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	4a04      	ldr	r2, [pc, #16]	; (80075a4 <prvResetNextTaskUnblockTime+0x3c>)
 8007592:	6013      	str	r3, [r2, #0]
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	20000ca8 	.word	0x20000ca8
 80075a4:	20000d10 	.word	0x20000d10

080075a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075ae:	4b0b      	ldr	r3, [pc, #44]	; (80075dc <xTaskGetSchedulerState+0x34>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d102      	bne.n	80075bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075b6:	2301      	movs	r3, #1
 80075b8:	607b      	str	r3, [r7, #4]
 80075ba:	e008      	b.n	80075ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075bc:	4b08      	ldr	r3, [pc, #32]	; (80075e0 <xTaskGetSchedulerState+0x38>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d102      	bne.n	80075ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075c4:	2302      	movs	r3, #2
 80075c6:	607b      	str	r3, [r7, #4]
 80075c8:	e001      	b.n	80075ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075ca:	2300      	movs	r3, #0
 80075cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075ce:	687b      	ldr	r3, [r7, #4]
	}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr
 80075dc:	20000cfc 	.word	0x20000cfc
 80075e0:	20000d18 	.word	0x20000d18

080075e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80075f0:	2300      	movs	r3, #0
 80075f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d051      	beq.n	800769e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075fe:	4b2a      	ldr	r3, [pc, #168]	; (80076a8 <xTaskPriorityInherit+0xc4>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	429a      	cmp	r2, r3
 8007606:	d241      	bcs.n	800768c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	699b      	ldr	r3, [r3, #24]
 800760c:	2b00      	cmp	r3, #0
 800760e:	db06      	blt.n	800761e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007610:	4b25      	ldr	r3, [pc, #148]	; (80076a8 <xTaskPriorityInherit+0xc4>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	6959      	ldr	r1, [r3, #20]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4a1f      	ldr	r2, [pc, #124]	; (80076ac <xTaskPriorityInherit+0xc8>)
 8007630:	4413      	add	r3, r2
 8007632:	4299      	cmp	r1, r3
 8007634:	d122      	bne.n	800767c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	3304      	adds	r3, #4
 800763a:	4618      	mov	r0, r3
 800763c:	f7fe fa2e 	bl	8005a9c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007640:	4b19      	ldr	r3, [pc, #100]	; (80076a8 <xTaskPriorityInherit+0xc4>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764e:	4b18      	ldr	r3, [pc, #96]	; (80076b0 <xTaskPriorityInherit+0xcc>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	429a      	cmp	r2, r3
 8007654:	d903      	bls.n	800765e <xTaskPriorityInherit+0x7a>
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765a:	4a15      	ldr	r2, [pc, #84]	; (80076b0 <xTaskPriorityInherit+0xcc>)
 800765c:	6013      	str	r3, [r2, #0]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007662:	4613      	mov	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4a10      	ldr	r2, [pc, #64]	; (80076ac <xTaskPriorityInherit+0xc8>)
 800766c:	441a      	add	r2, r3
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	3304      	adds	r3, #4
 8007672:	4619      	mov	r1, r3
 8007674:	4610      	mov	r0, r2
 8007676:	f7fe f9b4 	bl	80059e2 <vListInsertEnd>
 800767a:	e004      	b.n	8007686 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800767c:	4b0a      	ldr	r3, [pc, #40]	; (80076a8 <xTaskPriorityInherit+0xc4>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007686:	2301      	movs	r3, #1
 8007688:	60fb      	str	r3, [r7, #12]
 800768a:	e008      	b.n	800769e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007690:	4b05      	ldr	r3, [pc, #20]	; (80076a8 <xTaskPriorityInherit+0xc4>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007696:	429a      	cmp	r2, r3
 8007698:	d201      	bcs.n	800769e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800769a:	2301      	movs	r3, #1
 800769c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800769e:	68fb      	ldr	r3, [r7, #12]
	}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	2000081c 	.word	0x2000081c
 80076ac:	20000820 	.word	0x20000820
 80076b0:	20000cf8 	.word	0x20000cf8

080076b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076c0:	2300      	movs	r3, #0
 80076c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d056      	beq.n	8007778 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076ca:	4b2e      	ldr	r3, [pc, #184]	; (8007784 <xTaskPriorityDisinherit+0xd0>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d00a      	beq.n	80076ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	60fb      	str	r3, [r7, #12]
}
 80076e6:	bf00      	nop
 80076e8:	e7fe      	b.n	80076e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10a      	bne.n	8007708 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60bb      	str	r3, [r7, #8]
}
 8007704:	bf00      	nop
 8007706:	e7fe      	b.n	8007706 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800770c:	1e5a      	subs	r2, r3, #1
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800771a:	429a      	cmp	r2, r3
 800771c:	d02c      	beq.n	8007778 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007722:	2b00      	cmp	r3, #0
 8007724:	d128      	bne.n	8007778 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	3304      	adds	r3, #4
 800772a:	4618      	mov	r0, r3
 800772c:	f7fe f9b6 	bl	8005a9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007748:	4b0f      	ldr	r3, [pc, #60]	; (8007788 <xTaskPriorityDisinherit+0xd4>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	429a      	cmp	r2, r3
 800774e:	d903      	bls.n	8007758 <xTaskPriorityDisinherit+0xa4>
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007754:	4a0c      	ldr	r2, [pc, #48]	; (8007788 <xTaskPriorityDisinherit+0xd4>)
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800775c:	4613      	mov	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4a09      	ldr	r2, [pc, #36]	; (800778c <xTaskPriorityDisinherit+0xd8>)
 8007766:	441a      	add	r2, r3
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	3304      	adds	r3, #4
 800776c:	4619      	mov	r1, r3
 800776e:	4610      	mov	r0, r2
 8007770:	f7fe f937 	bl	80059e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007774:	2301      	movs	r3, #1
 8007776:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007778:	697b      	ldr	r3, [r7, #20]
	}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	2000081c 	.word	0x2000081c
 8007788:	20000cf8 	.word	0x20000cf8
 800778c:	20000820 	.word	0x20000820

08007790 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800779e:	2301      	movs	r3, #1
 80077a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d06a      	beq.n	800787e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d10a      	bne.n	80077c6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	60fb      	str	r3, [r7, #12]
}
 80077c2:	bf00      	nop
 80077c4:	e7fe      	b.n	80077c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d902      	bls.n	80077d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	61fb      	str	r3, [r7, #28]
 80077d4:	e002      	b.n	80077dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e0:	69fa      	ldr	r2, [r7, #28]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d04b      	beq.n	800787e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d146      	bne.n	800787e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80077f0:	4b25      	ldr	r3, [pc, #148]	; (8007888 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d10a      	bne.n	8007810 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	60bb      	str	r3, [r7, #8]
}
 800780c:	bf00      	nop
 800780e:	e7fe      	b.n	800780e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	69fa      	ldr	r2, [r7, #28]
 800781a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	2b00      	cmp	r3, #0
 8007822:	db04      	blt.n	800782e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	6959      	ldr	r1, [r3, #20]
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4a13      	ldr	r2, [pc, #76]	; (800788c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800783e:	4413      	add	r3, r2
 8007840:	4299      	cmp	r1, r3
 8007842:	d11c      	bne.n	800787e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	3304      	adds	r3, #4
 8007848:	4618      	mov	r0, r3
 800784a:	f7fe f927 	bl	8005a9c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007852:	4b0f      	ldr	r3, [pc, #60]	; (8007890 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d903      	bls.n	8007862 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785e:	4a0c      	ldr	r2, [pc, #48]	; (8007890 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007866:	4613      	mov	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4413      	add	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4a07      	ldr	r2, [pc, #28]	; (800788c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007870:	441a      	add	r2, r3
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	3304      	adds	r3, #4
 8007876:	4619      	mov	r1, r3
 8007878:	4610      	mov	r0, r2
 800787a:	f7fe f8b2 	bl	80059e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800787e:	bf00      	nop
 8007880:	3720      	adds	r7, #32
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	2000081c 	.word	0x2000081c
 800788c:	20000820 	.word	0x20000820
 8007890:	20000cf8 	.word	0x20000cf8

08007894 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007894:	b480      	push	{r7}
 8007896:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007898:	4b07      	ldr	r3, [pc, #28]	; (80078b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d004      	beq.n	80078aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80078a0:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078a6:	3201      	adds	r2, #1
 80078a8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80078aa:	4b03      	ldr	r3, [pc, #12]	; (80078b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80078ac:	681b      	ldr	r3, [r3, #0]
	}
 80078ae:	4618      	mov	r0, r3
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	2000081c 	.word	0x2000081c

080078bc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80078c6:	f000 ff15 	bl	80086f4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80078ca:	4b20      	ldr	r3, [pc, #128]	; (800794c <ulTaskNotifyTake+0x90>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d113      	bne.n	80078fe <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80078d6:	4b1d      	ldr	r3, [pc, #116]	; (800794c <ulTaskNotifyTake+0x90>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00b      	beq.n	80078fe <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078e6:	2101      	movs	r1, #1
 80078e8:	6838      	ldr	r0, [r7, #0]
 80078ea:	f000 f9d5 	bl	8007c98 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80078ee:	4b18      	ldr	r3, [pc, #96]	; (8007950 <ulTaskNotifyTake+0x94>)
 80078f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078f4:	601a      	str	r2, [r3, #0]
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80078fe:	f000 ff29 	bl	8008754 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007902:	f000 fef7 	bl	80086f4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007906:	4b11      	ldr	r3, [pc, #68]	; (800794c <ulTaskNotifyTake+0x90>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800790e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00e      	beq.n	8007934 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d005      	beq.n	8007928 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800791c:	4b0b      	ldr	r3, [pc, #44]	; (800794c <ulTaskNotifyTake+0x90>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2200      	movs	r2, #0
 8007922:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8007926:	e005      	b.n	8007934 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007928:	4b08      	ldr	r3, [pc, #32]	; (800794c <ulTaskNotifyTake+0x90>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	3a01      	subs	r2, #1
 8007930:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007934:	4b05      	ldr	r3, [pc, #20]	; (800794c <ulTaskNotifyTake+0x90>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 800793e:	f000 ff09 	bl	8008754 <vPortExitCritical>

		return ulReturn;
 8007942:	68fb      	ldr	r3, [r7, #12]
	}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	2000081c 	.word	0x2000081c
 8007950:	e000ed04 	.word	0xe000ed04

08007954 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007954:	b580      	push	{r7, lr}
 8007956:	b08a      	sub	sp, #40	; 0x28
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	603b      	str	r3, [r7, #0]
 8007960:	4613      	mov	r3, r2
 8007962:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007964:	2301      	movs	r3, #1
 8007966:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10a      	bne.n	8007984 <xTaskGenericNotify+0x30>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	61bb      	str	r3, [r7, #24]
}
 8007980:	bf00      	nop
 8007982:	e7fe      	b.n	8007982 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007988:	f000 feb4 	bl	80086f4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d004      	beq.n	800799c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80079a2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80079a4:	6a3b      	ldr	r3, [r7, #32]
 80079a6:	2202      	movs	r2, #2
 80079a8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80079ac:	79fb      	ldrb	r3, [r7, #7]
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d82d      	bhi.n	8007a0e <xTaskGenericNotify+0xba>
 80079b2:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <xTaskGenericNotify+0x64>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	08007a31 	.word	0x08007a31
 80079bc:	080079cd 	.word	0x080079cd
 80079c0:	080079df 	.word	0x080079df
 80079c4:	080079ef 	.word	0x080079ef
 80079c8:	080079f9 	.word	0x080079f9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	431a      	orrs	r2, r3
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80079dc:	e02b      	b.n	8007a36 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80079de:	6a3b      	ldr	r3, [r7, #32]
 80079e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80079e4:	1c5a      	adds	r2, r3, #1
 80079e6:	6a3b      	ldr	r3, [r7, #32]
 80079e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80079ec:	e023      	b.n	8007a36 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80079f6:	e01e      	b.n	8007a36 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80079f8:	7ffb      	ldrb	r3, [r7, #31]
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d004      	beq.n	8007a08 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007a06:	e016      	b.n	8007a36 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8007a0c:	e013      	b.n	8007a36 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a18:	d00c      	beq.n	8007a34 <xTaskGenericNotify+0xe0>
	__asm volatile
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	617b      	str	r3, [r7, #20]
}
 8007a2c:	bf00      	nop
 8007a2e:	e7fe      	b.n	8007a2e <xTaskGenericNotify+0xda>
					break;
 8007a30:	bf00      	nop
 8007a32:	e000      	b.n	8007a36 <xTaskGenericNotify+0xe2>

					break;
 8007a34:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007a36:	7ffb      	ldrb	r3, [r7, #31]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d13a      	bne.n	8007ab2 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	3304      	adds	r3, #4
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fe f82b 	bl	8005a9c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4a:	4b1d      	ldr	r3, [pc, #116]	; (8007ac0 <xTaskGenericNotify+0x16c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d903      	bls.n	8007a5a <xTaskGenericNotify+0x106>
 8007a52:	6a3b      	ldr	r3, [r7, #32]
 8007a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a56:	4a1a      	ldr	r2, [pc, #104]	; (8007ac0 <xTaskGenericNotify+0x16c>)
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	6a3b      	ldr	r3, [r7, #32]
 8007a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4a17      	ldr	r2, [pc, #92]	; (8007ac4 <xTaskGenericNotify+0x170>)
 8007a68:	441a      	add	r2, r3
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	4619      	mov	r1, r3
 8007a70:	4610      	mov	r0, r2
 8007a72:	f7fd ffb6 	bl	80059e2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <xTaskGenericNotify+0x140>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	613b      	str	r3, [r7, #16]
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a98:	4b0b      	ldr	r3, [pc, #44]	; (8007ac8 <xTaskGenericNotify+0x174>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d907      	bls.n	8007ab2 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007aa2:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <xTaskGenericNotify+0x178>)
 8007aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa8:	601a      	str	r2, [r3, #0]
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007ab2:	f000 fe4f 	bl	8008754 <vPortExitCritical>

		return xReturn;
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3728      	adds	r7, #40	; 0x28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	20000cf8 	.word	0x20000cf8
 8007ac4:	20000820 	.word	0x20000820
 8007ac8:	2000081c 	.word	0x2000081c
 8007acc:	e000ed04 	.word	0xe000ed04

08007ad0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08e      	sub	sp, #56	; 0x38
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	603b      	str	r3, [r7, #0]
 8007adc:	4613      	mov	r3, r2
 8007ade:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d10a      	bne.n	8007b00 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8007aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007afc:	bf00      	nop
 8007afe:	e7fe      	b.n	8007afe <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b00:	f000 feda 	bl	80088b8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8007b08:	f3ef 8211 	mrs	r2, BASEPRI
 8007b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	623a      	str	r2, [r7, #32]
 8007b1e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007b20:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b22:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d004      	beq.n	8007b34 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b36:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	2202      	movs	r2, #2
 8007b42:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	2b04      	cmp	r3, #4
 8007b4a:	d82f      	bhi.n	8007bac <xTaskGenericNotifyFromISR+0xdc>
 8007b4c:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <xTaskGenericNotifyFromISR+0x84>)
 8007b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b52:	bf00      	nop
 8007b54:	08007bcf 	.word	0x08007bcf
 8007b58:	08007b69 	.word	0x08007b69
 8007b5c:	08007b7b 	.word	0x08007b7b
 8007b60:	08007b8b 	.word	0x08007b8b
 8007b64:	08007b95 	.word	0x08007b95
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	431a      	orrs	r2, r3
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007b78:	e02c      	b.n	8007bd4 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b80:	1c5a      	adds	r2, r3, #1
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007b88:	e024      	b.n	8007bd4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007b92:	e01f      	b.n	8007bd4 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007b94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d004      	beq.n	8007ba6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007ba4:	e016      	b.n	8007bd4 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8007baa:	e013      	b.n	8007bd4 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb6:	d00c      	beq.n	8007bd2 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	61bb      	str	r3, [r7, #24]
}
 8007bca:	bf00      	nop
 8007bcc:	e7fe      	b.n	8007bcc <xTaskGenericNotifyFromISR+0xfc>
					break;
 8007bce:	bf00      	nop
 8007bd0:	e000      	b.n	8007bd4 <xTaskGenericNotifyFromISR+0x104>
					break;
 8007bd2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007bd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d146      	bne.n	8007c6a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00a      	beq.n	8007bfa <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	617b      	str	r3, [r7, #20]
}
 8007bf6:	bf00      	nop
 8007bf8:	e7fe      	b.n	8007bf8 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bfa:	4b21      	ldr	r3, [pc, #132]	; (8007c80 <xTaskGenericNotifyFromISR+0x1b0>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d11d      	bne.n	8007c3e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	3304      	adds	r3, #4
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7fd ff48 	bl	8005a9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c10:	4b1c      	ldr	r3, [pc, #112]	; (8007c84 <xTaskGenericNotifyFromISR+0x1b4>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d903      	bls.n	8007c20 <xTaskGenericNotifyFromISR+0x150>
 8007c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1c:	4a19      	ldr	r2, [pc, #100]	; (8007c84 <xTaskGenericNotifyFromISR+0x1b4>)
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c24:	4613      	mov	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4a16      	ldr	r2, [pc, #88]	; (8007c88 <xTaskGenericNotifyFromISR+0x1b8>)
 8007c2e:	441a      	add	r2, r3
 8007c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c32:	3304      	adds	r3, #4
 8007c34:	4619      	mov	r1, r3
 8007c36:	4610      	mov	r0, r2
 8007c38:	f7fd fed3 	bl	80059e2 <vListInsertEnd>
 8007c3c:	e005      	b.n	8007c4a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	3318      	adds	r3, #24
 8007c42:	4619      	mov	r1, r3
 8007c44:	4811      	ldr	r0, [pc, #68]	; (8007c8c <xTaskGenericNotifyFromISR+0x1bc>)
 8007c46:	f7fd fecc 	bl	80059e2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c4e:	4b10      	ldr	r3, [pc, #64]	; (8007c90 <xTaskGenericNotifyFromISR+0x1c0>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d908      	bls.n	8007c6a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c60:	2201      	movs	r2, #1
 8007c62:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007c64:	4b0b      	ldr	r3, [pc, #44]	; (8007c94 <xTaskGenericNotifyFromISR+0x1c4>)
 8007c66:	2201      	movs	r2, #1
 8007c68:	601a      	str	r2, [r3, #0]
 8007c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f383 8811 	msr	BASEPRI, r3
}
 8007c74:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3738      	adds	r7, #56	; 0x38
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20000d18 	.word	0x20000d18
 8007c84:	20000cf8 	.word	0x20000cf8
 8007c88:	20000820 	.word	0x20000820
 8007c8c:	20000cb0 	.word	0x20000cb0
 8007c90:	2000081c 	.word	0x2000081c
 8007c94:	20000d04 	.word	0x20000d04

08007c98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ca2:	4b21      	ldr	r3, [pc, #132]	; (8007d28 <prvAddCurrentTaskToDelayedList+0x90>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ca8:	4b20      	ldr	r3, [pc, #128]	; (8007d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3304      	adds	r3, #4
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7fd fef4 	bl	8005a9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cba:	d10a      	bne.n	8007cd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d007      	beq.n	8007cd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cc2:	4b1a      	ldr	r3, [pc, #104]	; (8007d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3304      	adds	r3, #4
 8007cc8:	4619      	mov	r1, r3
 8007cca:	4819      	ldr	r0, [pc, #100]	; (8007d30 <prvAddCurrentTaskToDelayedList+0x98>)
 8007ccc:	f7fd fe89 	bl	80059e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cd0:	e026      	b.n	8007d20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cda:	4b14      	ldr	r3, [pc, #80]	; (8007d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d209      	bcs.n	8007cfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cea:	4b12      	ldr	r3, [pc, #72]	; (8007d34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	4b0f      	ldr	r3, [pc, #60]	; (8007d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	f7fd fe97 	bl	8005a2a <vListInsert>
}
 8007cfc:	e010      	b.n	8007d20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cfe:	4b0e      	ldr	r3, [pc, #56]	; (8007d38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	4b0a      	ldr	r3, [pc, #40]	; (8007d2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3304      	adds	r3, #4
 8007d08:	4619      	mov	r1, r3
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	f7fd fe8d 	bl	8005a2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d10:	4b0a      	ldr	r3, [pc, #40]	; (8007d3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d202      	bcs.n	8007d20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d1a:	4a08      	ldr	r2, [pc, #32]	; (8007d3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	6013      	str	r3, [r2, #0]
}
 8007d20:	bf00      	nop
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20000cf4 	.word	0x20000cf4
 8007d2c:	2000081c 	.word	0x2000081c
 8007d30:	20000cdc 	.word	0x20000cdc
 8007d34:	20000cac 	.word	0x20000cac
 8007d38:	20000ca8 	.word	0x20000ca8
 8007d3c:	20000d10 	.word	0x20000d10

08007d40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b08a      	sub	sp, #40	; 0x28
 8007d44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d4a:	f000 fb63 	bl	8008414 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d4e:	4b1c      	ldr	r3, [pc, #112]	; (8007dc0 <xTimerCreateTimerTask+0x80>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d021      	beq.n	8007d9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d56:	2300      	movs	r3, #0
 8007d58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d5e:	1d3a      	adds	r2, r7, #4
 8007d60:	f107 0108 	add.w	r1, r7, #8
 8007d64:	f107 030c 	add.w	r3, r7, #12
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fd fdf3 	bl	8005954 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d6e:	6879      	ldr	r1, [r7, #4]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	9202      	str	r2, [sp, #8]
 8007d76:	9301      	str	r3, [sp, #4]
 8007d78:	2302      	movs	r3, #2
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	460a      	mov	r2, r1
 8007d80:	4910      	ldr	r1, [pc, #64]	; (8007dc4 <xTimerCreateTimerTask+0x84>)
 8007d82:	4811      	ldr	r0, [pc, #68]	; (8007dc8 <xTimerCreateTimerTask+0x88>)
 8007d84:	f7fe fdb6 	bl	80068f4 <xTaskCreateStatic>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	4a10      	ldr	r2, [pc, #64]	; (8007dcc <xTimerCreateTimerTask+0x8c>)
 8007d8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d8e:	4b0f      	ldr	r3, [pc, #60]	; (8007dcc <xTimerCreateTimerTask+0x8c>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d96:	2301      	movs	r3, #1
 8007d98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	613b      	str	r3, [r7, #16]
}
 8007db2:	bf00      	nop
 8007db4:	e7fe      	b.n	8007db4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007db6:	697b      	ldr	r3, [r7, #20]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	20000d4c 	.word	0x20000d4c
 8007dc4:	08008f9c 	.word	0x08008f9c
 8007dc8:	08007fbd 	.word	0x08007fbd
 8007dcc:	20000d50 	.word	0x20000d50

08007dd0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b088      	sub	sp, #32
 8007dd4:	af02      	add	r7, sp, #8
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007dde:	202c      	movs	r0, #44	; 0x2c
 8007de0:	f000 fdaa 	bl	8008938 <pvPortMalloc>
 8007de4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00d      	beq.n	8007e08 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	68b9      	ldr	r1, [r7, #8]
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f000 f805 	bl	8007e12 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007e08:	697b      	ldr	r3, [r7, #20]
	}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b086      	sub	sp, #24
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
 8007e1e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10a      	bne.n	8007e3c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	617b      	str	r3, [r7, #20]
}
 8007e38:	bf00      	nop
 8007e3a:	e7fe      	b.n	8007e3a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d01e      	beq.n	8007e80 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007e42:	f000 fae7 	bl	8008414 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5a:	6a3a      	ldr	r2, [r7, #32]
 8007e5c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	3304      	adds	r3, #4
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fd fdb0 	bl	80059c8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d008      	beq.n	8007e80 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e74:	f043 0304 	orr.w	r3, r3, #4
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007e80:	bf00      	nop
 8007e82:	3718      	adds	r7, #24
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b08a      	sub	sp, #40	; 0x28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
 8007e94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e96:	2300      	movs	r3, #0
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d10a      	bne.n	8007eb6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	623b      	str	r3, [r7, #32]
}
 8007eb2:	bf00      	nop
 8007eb4:	e7fe      	b.n	8007eb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007eb6:	4b1a      	ldr	r3, [pc, #104]	; (8007f20 <xTimerGenericCommand+0x98>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d02a      	beq.n	8007f14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2b05      	cmp	r3, #5
 8007ece:	dc18      	bgt.n	8007f02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ed0:	f7ff fb6a 	bl	80075a8 <xTaskGetSchedulerState>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d109      	bne.n	8007eee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007eda:	4b11      	ldr	r3, [pc, #68]	; (8007f20 <xTimerGenericCommand+0x98>)
 8007edc:	6818      	ldr	r0, [r3, #0]
 8007ede:	f107 0110 	add.w	r1, r7, #16
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ee6:	f7fd ffab 	bl	8005e40 <xQueueGenericSend>
 8007eea:	6278      	str	r0, [r7, #36]	; 0x24
 8007eec:	e012      	b.n	8007f14 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007eee:	4b0c      	ldr	r3, [pc, #48]	; (8007f20 <xTimerGenericCommand+0x98>)
 8007ef0:	6818      	ldr	r0, [r3, #0]
 8007ef2:	f107 0110 	add.w	r1, r7, #16
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f7fd ffa1 	bl	8005e40 <xQueueGenericSend>
 8007efe:	6278      	str	r0, [r7, #36]	; 0x24
 8007f00:	e008      	b.n	8007f14 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f02:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <xTimerGenericCommand+0x98>)
 8007f04:	6818      	ldr	r0, [r3, #0]
 8007f06:	f107 0110 	add.w	r1, r7, #16
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	f7fe f895 	bl	800603c <xQueueGenericSendFromISR>
 8007f12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3728      	adds	r7, #40	; 0x28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20000d4c 	.word	0x20000d4c

08007f24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b088      	sub	sp, #32
 8007f28:	af02      	add	r7, sp, #8
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f2e:	4b22      	ldr	r3, [pc, #136]	; (8007fb8 <prvProcessExpiredTimer+0x94>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fd fdad 	bl	8005a9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d022      	beq.n	8007f96 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	699a      	ldr	r2, [r3, #24]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	18d1      	adds	r1, r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	6978      	ldr	r0, [r7, #20]
 8007f5e:	f000 f8d1 	bl	8008104 <prvInsertTimerInActiveList>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d01f      	beq.n	8007fa8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f68:	2300      	movs	r3, #0
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	2100      	movs	r1, #0
 8007f72:	6978      	ldr	r0, [r7, #20]
 8007f74:	f7ff ff88 	bl	8007e88 <xTimerGenericCommand>
 8007f78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d113      	bne.n	8007fa8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	60fb      	str	r3, [r7, #12]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f9c:	f023 0301 	bic.w	r3, r3, #1
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	6978      	ldr	r0, [r7, #20]
 8007fae:	4798      	blx	r3
}
 8007fb0:	bf00      	nop
 8007fb2:	3718      	adds	r7, #24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20000d44 	.word	0x20000d44

08007fbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fc4:	f107 0308 	add.w	r3, r7, #8
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 f857 	bl	800807c <prvGetNextExpireTime>
 8007fce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f000 f803 	bl	8007fe0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007fda:	f000 f8d5 	bl	8008188 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fde:	e7f1      	b.n	8007fc4 <prvTimerTask+0x8>

08007fe0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007fea:	f7fe fedf 	bl	8006dac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fee:	f107 0308 	add.w	r3, r7, #8
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 f866 	bl	80080c4 <prvSampleTimeNow>
 8007ff8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d130      	bne.n	8008062 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10a      	bne.n	800801c <prvProcessTimerOrBlockTask+0x3c>
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	429a      	cmp	r2, r3
 800800c:	d806      	bhi.n	800801c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800800e:	f7fe fedb 	bl	8006dc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008012:	68f9      	ldr	r1, [r7, #12]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f7ff ff85 	bl	8007f24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800801a:	e024      	b.n	8008066 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d008      	beq.n	8008034 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008022:	4b13      	ldr	r3, [pc, #76]	; (8008070 <prvProcessTimerOrBlockTask+0x90>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <prvProcessTimerOrBlockTask+0x50>
 800802c:	2301      	movs	r3, #1
 800802e:	e000      	b.n	8008032 <prvProcessTimerOrBlockTask+0x52>
 8008030:	2300      	movs	r3, #0
 8008032:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008034:	4b0f      	ldr	r3, [pc, #60]	; (8008074 <prvProcessTimerOrBlockTask+0x94>)
 8008036:	6818      	ldr	r0, [r3, #0]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	4619      	mov	r1, r3
 8008042:	f7fe fc23 	bl	800688c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008046:	f7fe febf 	bl	8006dc8 <xTaskResumeAll>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10a      	bne.n	8008066 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008050:	4b09      	ldr	r3, [pc, #36]	; (8008078 <prvProcessTimerOrBlockTask+0x98>)
 8008052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	f3bf 8f6f 	isb	sy
}
 8008060:	e001      	b.n	8008066 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008062:	f7fe feb1 	bl	8006dc8 <xTaskResumeAll>
}
 8008066:	bf00      	nop
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000d48 	.word	0x20000d48
 8008074:	20000d4c 	.word	0x20000d4c
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008084:	4b0e      	ldr	r3, [pc, #56]	; (80080c0 <prvGetNextExpireTime+0x44>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <prvGetNextExpireTime+0x16>
 800808e:	2201      	movs	r2, #1
 8008090:	e000      	b.n	8008094 <prvGetNextExpireTime+0x18>
 8008092:	2200      	movs	r2, #0
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d105      	bne.n	80080ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080a0:	4b07      	ldr	r3, [pc, #28]	; (80080c0 <prvGetNextExpireTime+0x44>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	60fb      	str	r3, [r7, #12]
 80080aa:	e001      	b.n	80080b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80080b0:	68fb      	ldr	r3, [r7, #12]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	20000d44 	.word	0x20000d44

080080c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80080cc:	f7fe ff1a 	bl	8006f04 <xTaskGetTickCount>
 80080d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80080d2:	4b0b      	ldr	r3, [pc, #44]	; (8008100 <prvSampleTimeNow+0x3c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68fa      	ldr	r2, [r7, #12]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d205      	bcs.n	80080e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80080dc:	f000 f936 	bl	800834c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	e002      	b.n	80080ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80080ee:	4a04      	ldr	r2, [pc, #16]	; (8008100 <prvSampleTimeNow+0x3c>)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80080f4:	68fb      	ldr	r3, [r7, #12]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20000d54 	.word	0x20000d54

08008104 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
 8008110:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008112:	2300      	movs	r3, #0
 8008114:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	429a      	cmp	r2, r3
 8008128:	d812      	bhi.n	8008150 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	1ad2      	subs	r2, r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	429a      	cmp	r2, r3
 8008136:	d302      	bcc.n	800813e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008138:	2301      	movs	r3, #1
 800813a:	617b      	str	r3, [r7, #20]
 800813c:	e01b      	b.n	8008176 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800813e:	4b10      	ldr	r3, [pc, #64]	; (8008180 <prvInsertTimerInActiveList+0x7c>)
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	3304      	adds	r3, #4
 8008146:	4619      	mov	r1, r3
 8008148:	4610      	mov	r0, r2
 800814a:	f7fd fc6e 	bl	8005a2a <vListInsert>
 800814e:	e012      	b.n	8008176 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	429a      	cmp	r2, r3
 8008156:	d206      	bcs.n	8008166 <prvInsertTimerInActiveList+0x62>
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	429a      	cmp	r2, r3
 800815e:	d302      	bcc.n	8008166 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008160:	2301      	movs	r3, #1
 8008162:	617b      	str	r3, [r7, #20]
 8008164:	e007      	b.n	8008176 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008166:	4b07      	ldr	r3, [pc, #28]	; (8008184 <prvInsertTimerInActiveList+0x80>)
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	3304      	adds	r3, #4
 800816e:	4619      	mov	r1, r3
 8008170:	4610      	mov	r0, r2
 8008172:	f7fd fc5a 	bl	8005a2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008176:	697b      	ldr	r3, [r7, #20]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3718      	adds	r7, #24
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20000d48 	.word	0x20000d48
 8008184:	20000d44 	.word	0x20000d44

08008188 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b08e      	sub	sp, #56	; 0x38
 800818c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800818e:	e0ca      	b.n	8008326 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	da18      	bge.n	80081c8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008196:	1d3b      	adds	r3, r7, #4
 8008198:	3304      	adds	r3, #4
 800819a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800819c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d10a      	bne.n	80081b8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80081a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a6:	f383 8811 	msr	BASEPRI, r3
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	61fb      	str	r3, [r7, #28]
}
 80081b4:	bf00      	nop
 80081b6:	e7fe      	b.n	80081b6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80081b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081be:	6850      	ldr	r0, [r2, #4]
 80081c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081c2:	6892      	ldr	r2, [r2, #8]
 80081c4:	4611      	mov	r1, r2
 80081c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f2c0 80aa 	blt.w	8008324 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80081d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d004      	beq.n	80081e6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081de:	3304      	adds	r3, #4
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7fd fc5b 	bl	8005a9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081e6:	463b      	mov	r3, r7
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7ff ff6b 	bl	80080c4 <prvSampleTimeNow>
 80081ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b09      	cmp	r3, #9
 80081f4:	f200 8097 	bhi.w	8008326 <prvProcessReceivedCommands+0x19e>
 80081f8:	a201      	add	r2, pc, #4	; (adr r2, 8008200 <prvProcessReceivedCommands+0x78>)
 80081fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fe:	bf00      	nop
 8008200:	08008229 	.word	0x08008229
 8008204:	08008229 	.word	0x08008229
 8008208:	08008229 	.word	0x08008229
 800820c:	0800829d 	.word	0x0800829d
 8008210:	080082b1 	.word	0x080082b1
 8008214:	080082fb 	.word	0x080082fb
 8008218:	08008229 	.word	0x08008229
 800821c:	08008229 	.word	0x08008229
 8008220:	0800829d 	.word	0x0800829d
 8008224:	080082b1 	.word	0x080082b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800822e:	f043 0301 	orr.w	r3, r3, #1
 8008232:	b2da      	uxtb	r2, r3
 8008234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008236:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	18d1      	adds	r1, r2, r3
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008248:	f7ff ff5c 	bl	8008104 <prvInsertTimerInActiveList>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d069      	beq.n	8008326 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008258:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800825a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008260:	f003 0304 	and.w	r3, r3, #4
 8008264:	2b00      	cmp	r3, #0
 8008266:	d05e      	beq.n	8008326 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	441a      	add	r2, r3
 8008270:	2300      	movs	r3, #0
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	2300      	movs	r3, #0
 8008276:	2100      	movs	r1, #0
 8008278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800827a:	f7ff fe05 	bl	8007e88 <xTimerGenericCommand>
 800827e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008280:	6a3b      	ldr	r3, [r7, #32]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d14f      	bne.n	8008326 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	61bb      	str	r3, [r7, #24]
}
 8008298:	bf00      	nop
 800829a:	e7fe      	b.n	800829a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082a2:	f023 0301 	bic.w	r3, r3, #1
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80082ae:	e03a      	b.n	8008326 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082b6:	f043 0301 	orr.w	r3, r3, #1
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10a      	bne.n	80082e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80082d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	617b      	str	r3, [r7, #20]
}
 80082e2:	bf00      	nop
 80082e4:	e7fe      	b.n	80082e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e8:	699a      	ldr	r2, [r3, #24]
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	18d1      	adds	r1, r2, r3
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082f4:	f7ff ff06 	bl	8008104 <prvInsertTimerInActiveList>
					break;
 80082f8:	e015      	b.n	8008326 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80082fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008300:	f003 0302 	and.w	r3, r3, #2
 8008304:	2b00      	cmp	r3, #0
 8008306:	d103      	bne.n	8008310 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800830a:	f000 fbe1 	bl	8008ad0 <vPortFree>
 800830e:	e00a      	b.n	8008326 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008316:	f023 0301 	bic.w	r3, r3, #1
 800831a:	b2da      	uxtb	r2, r3
 800831c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008322:	e000      	b.n	8008326 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008324:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008326:	4b08      	ldr	r3, [pc, #32]	; (8008348 <prvProcessReceivedCommands+0x1c0>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	1d39      	adds	r1, r7, #4
 800832c:	2200      	movs	r2, #0
 800832e:	4618      	mov	r0, r3
 8008330:	f7fd ff20 	bl	8006174 <xQueueReceive>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	f47f af2a 	bne.w	8008190 <prvProcessReceivedCommands+0x8>
	}
}
 800833c:	bf00      	nop
 800833e:	bf00      	nop
 8008340:	3730      	adds	r7, #48	; 0x30
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	20000d4c 	.word	0x20000d4c

0800834c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b088      	sub	sp, #32
 8008350:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008352:	e048      	b.n	80083e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008354:	4b2d      	ldr	r3, [pc, #180]	; (800840c <prvSwitchTimerLists+0xc0>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800835e:	4b2b      	ldr	r3, [pc, #172]	; (800840c <prvSwitchTimerLists+0xc0>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3304      	adds	r3, #4
 800836c:	4618      	mov	r0, r3
 800836e:	f7fd fb95 	bl	8005a9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b00      	cmp	r3, #0
 8008386:	d02e      	beq.n	80083e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	4413      	add	r3, r2
 8008390:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	429a      	cmp	r2, r3
 8008398:	d90e      	bls.n	80083b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083a6:	4b19      	ldr	r3, [pc, #100]	; (800840c <prvSwitchTimerLists+0xc0>)
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	3304      	adds	r3, #4
 80083ae:	4619      	mov	r1, r3
 80083b0:	4610      	mov	r0, r2
 80083b2:	f7fd fb3a 	bl	8005a2a <vListInsert>
 80083b6:	e016      	b.n	80083e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083b8:	2300      	movs	r3, #0
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	2300      	movs	r3, #0
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	2100      	movs	r1, #0
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f7ff fd60 	bl	8007e88 <xTimerGenericCommand>
 80083c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	603b      	str	r3, [r7, #0]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083e6:	4b09      	ldr	r3, [pc, #36]	; (800840c <prvSwitchTimerLists+0xc0>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1b1      	bne.n	8008354 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80083f0:	4b06      	ldr	r3, [pc, #24]	; (800840c <prvSwitchTimerLists+0xc0>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083f6:	4b06      	ldr	r3, [pc, #24]	; (8008410 <prvSwitchTimerLists+0xc4>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a04      	ldr	r2, [pc, #16]	; (800840c <prvSwitchTimerLists+0xc0>)
 80083fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083fe:	4a04      	ldr	r2, [pc, #16]	; (8008410 <prvSwitchTimerLists+0xc4>)
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	6013      	str	r3, [r2, #0]
}
 8008404:	bf00      	nop
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	20000d44 	.word	0x20000d44
 8008410:	20000d48 	.word	0x20000d48

08008414 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800841a:	f000 f96b 	bl	80086f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800841e:	4b15      	ldr	r3, [pc, #84]	; (8008474 <prvCheckForValidListAndQueue+0x60>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d120      	bne.n	8008468 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008426:	4814      	ldr	r0, [pc, #80]	; (8008478 <prvCheckForValidListAndQueue+0x64>)
 8008428:	f7fd faae 	bl	8005988 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800842c:	4813      	ldr	r0, [pc, #76]	; (800847c <prvCheckForValidListAndQueue+0x68>)
 800842e:	f7fd faab 	bl	8005988 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008432:	4b13      	ldr	r3, [pc, #76]	; (8008480 <prvCheckForValidListAndQueue+0x6c>)
 8008434:	4a10      	ldr	r2, [pc, #64]	; (8008478 <prvCheckForValidListAndQueue+0x64>)
 8008436:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008438:	4b12      	ldr	r3, [pc, #72]	; (8008484 <prvCheckForValidListAndQueue+0x70>)
 800843a:	4a10      	ldr	r2, [pc, #64]	; (800847c <prvCheckForValidListAndQueue+0x68>)
 800843c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800843e:	2300      	movs	r3, #0
 8008440:	9300      	str	r3, [sp, #0]
 8008442:	4b11      	ldr	r3, [pc, #68]	; (8008488 <prvCheckForValidListAndQueue+0x74>)
 8008444:	4a11      	ldr	r2, [pc, #68]	; (800848c <prvCheckForValidListAndQueue+0x78>)
 8008446:	2110      	movs	r1, #16
 8008448:	200a      	movs	r0, #10
 800844a:	f7fd fbb9 	bl	8005bc0 <xQueueGenericCreateStatic>
 800844e:	4603      	mov	r3, r0
 8008450:	4a08      	ldr	r2, [pc, #32]	; (8008474 <prvCheckForValidListAndQueue+0x60>)
 8008452:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008454:	4b07      	ldr	r3, [pc, #28]	; (8008474 <prvCheckForValidListAndQueue+0x60>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d005      	beq.n	8008468 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800845c:	4b05      	ldr	r3, [pc, #20]	; (8008474 <prvCheckForValidListAndQueue+0x60>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	490b      	ldr	r1, [pc, #44]	; (8008490 <prvCheckForValidListAndQueue+0x7c>)
 8008462:	4618      	mov	r0, r3
 8008464:	f7fe f9be 	bl	80067e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008468:	f000 f974 	bl	8008754 <vPortExitCritical>
}
 800846c:	bf00      	nop
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	20000d4c 	.word	0x20000d4c
 8008478:	20000d1c 	.word	0x20000d1c
 800847c:	20000d30 	.word	0x20000d30
 8008480:	20000d44 	.word	0x20000d44
 8008484:	20000d48 	.word	0x20000d48
 8008488:	20000df8 	.word	0x20000df8
 800848c:	20000d58 	.word	0x20000d58
 8008490:	08008fa4 	.word	0x08008fa4

08008494 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3b04      	subs	r3, #4
 80084a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3b04      	subs	r3, #4
 80084b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	f023 0201 	bic.w	r2, r3, #1
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	3b04      	subs	r3, #4
 80084c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084c4:	4a0c      	ldr	r2, [pc, #48]	; (80084f8 <pxPortInitialiseStack+0x64>)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3b14      	subs	r3, #20
 80084ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3b04      	subs	r3, #4
 80084da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f06f 0202 	mvn.w	r2, #2
 80084e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	3b20      	subs	r3, #32
 80084e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084ea:	68fb      	ldr	r3, [r7, #12]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3714      	adds	r7, #20
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	080084fd 	.word	0x080084fd

080084fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008506:	4b12      	ldr	r3, [pc, #72]	; (8008550 <prvTaskExitError+0x54>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850e:	d00a      	beq.n	8008526 <prvTaskExitError+0x2a>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	60fb      	str	r3, [r7, #12]
}
 8008522:	bf00      	nop
 8008524:	e7fe      	b.n	8008524 <prvTaskExitError+0x28>
	__asm volatile
 8008526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	60bb      	str	r3, [r7, #8]
}
 8008538:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800853a:	bf00      	nop
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d0fc      	beq.n	800853c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008542:	bf00      	nop
 8008544:	bf00      	nop
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	2000000c 	.word	0x2000000c
	...

08008560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008560:	4b07      	ldr	r3, [pc, #28]	; (8008580 <pxCurrentTCBConst2>)
 8008562:	6819      	ldr	r1, [r3, #0]
 8008564:	6808      	ldr	r0, [r1, #0]
 8008566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856a:	f380 8809 	msr	PSP, r0
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f04f 0000 	mov.w	r0, #0
 8008576:	f380 8811 	msr	BASEPRI, r0
 800857a:	4770      	bx	lr
 800857c:	f3af 8000 	nop.w

08008580 <pxCurrentTCBConst2>:
 8008580:	2000081c 	.word	0x2000081c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008584:	bf00      	nop
 8008586:	bf00      	nop

08008588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008588:	4808      	ldr	r0, [pc, #32]	; (80085ac <prvPortStartFirstTask+0x24>)
 800858a:	6800      	ldr	r0, [r0, #0]
 800858c:	6800      	ldr	r0, [r0, #0]
 800858e:	f380 8808 	msr	MSP, r0
 8008592:	f04f 0000 	mov.w	r0, #0
 8008596:	f380 8814 	msr	CONTROL, r0
 800859a:	b662      	cpsie	i
 800859c:	b661      	cpsie	f
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	df00      	svc	0
 80085a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085aa:	bf00      	nop
 80085ac:	e000ed08 	.word	0xe000ed08

080085b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085b6:	4b46      	ldr	r3, [pc, #280]	; (80086d0 <xPortStartScheduler+0x120>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a46      	ldr	r2, [pc, #280]	; (80086d4 <xPortStartScheduler+0x124>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d10a      	bne.n	80085d6 <xPortStartScheduler+0x26>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	613b      	str	r3, [r7, #16]
}
 80085d2:	bf00      	nop
 80085d4:	e7fe      	b.n	80085d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085d6:	4b3e      	ldr	r3, [pc, #248]	; (80086d0 <xPortStartScheduler+0x120>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a3f      	ldr	r2, [pc, #252]	; (80086d8 <xPortStartScheduler+0x128>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d10a      	bne.n	80085f6 <xPortStartScheduler+0x46>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	60fb      	str	r3, [r7, #12]
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085f6:	4b39      	ldr	r3, [pc, #228]	; (80086dc <xPortStartScheduler+0x12c>)
 80085f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	22ff      	movs	r2, #255	; 0xff
 8008606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008618:	b2da      	uxtb	r2, r3
 800861a:	4b31      	ldr	r3, [pc, #196]	; (80086e0 <xPortStartScheduler+0x130>)
 800861c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800861e:	4b31      	ldr	r3, [pc, #196]	; (80086e4 <xPortStartScheduler+0x134>)
 8008620:	2207      	movs	r2, #7
 8008622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008624:	e009      	b.n	800863a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008626:	4b2f      	ldr	r3, [pc, #188]	; (80086e4 <xPortStartScheduler+0x134>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3b01      	subs	r3, #1
 800862c:	4a2d      	ldr	r2, [pc, #180]	; (80086e4 <xPortStartScheduler+0x134>)
 800862e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008630:	78fb      	ldrb	r3, [r7, #3]
 8008632:	b2db      	uxtb	r3, r3
 8008634:	005b      	lsls	r3, r3, #1
 8008636:	b2db      	uxtb	r3, r3
 8008638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800863a:	78fb      	ldrb	r3, [r7, #3]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008642:	2b80      	cmp	r3, #128	; 0x80
 8008644:	d0ef      	beq.n	8008626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008646:	4b27      	ldr	r3, [pc, #156]	; (80086e4 <xPortStartScheduler+0x134>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f1c3 0307 	rsb	r3, r3, #7
 800864e:	2b04      	cmp	r3, #4
 8008650:	d00a      	beq.n	8008668 <xPortStartScheduler+0xb8>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	60bb      	str	r3, [r7, #8]
}
 8008664:	bf00      	nop
 8008666:	e7fe      	b.n	8008666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008668:	4b1e      	ldr	r3, [pc, #120]	; (80086e4 <xPortStartScheduler+0x134>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	021b      	lsls	r3, r3, #8
 800866e:	4a1d      	ldr	r2, [pc, #116]	; (80086e4 <xPortStartScheduler+0x134>)
 8008670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008672:	4b1c      	ldr	r3, [pc, #112]	; (80086e4 <xPortStartScheduler+0x134>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800867a:	4a1a      	ldr	r2, [pc, #104]	; (80086e4 <xPortStartScheduler+0x134>)
 800867c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	b2da      	uxtb	r2, r3
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008686:	4b18      	ldr	r3, [pc, #96]	; (80086e8 <xPortStartScheduler+0x138>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a17      	ldr	r2, [pc, #92]	; (80086e8 <xPortStartScheduler+0x138>)
 800868c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008692:	4b15      	ldr	r3, [pc, #84]	; (80086e8 <xPortStartScheduler+0x138>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a14      	ldr	r2, [pc, #80]	; (80086e8 <xPortStartScheduler+0x138>)
 8008698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800869c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800869e:	f000 f8dd 	bl	800885c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086a2:	4b12      	ldr	r3, [pc, #72]	; (80086ec <xPortStartScheduler+0x13c>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086a8:	f000 f8fc 	bl	80088a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086ac:	4b10      	ldr	r3, [pc, #64]	; (80086f0 <xPortStartScheduler+0x140>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a0f      	ldr	r2, [pc, #60]	; (80086f0 <xPortStartScheduler+0x140>)
 80086b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086b8:	f7ff ff66 	bl	8008588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086bc:	f7fe fcfe 	bl	80070bc <vTaskSwitchContext>
	prvTaskExitError();
 80086c0:	f7ff ff1c 	bl	80084fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	e000ed00 	.word	0xe000ed00
 80086d4:	410fc271 	.word	0x410fc271
 80086d8:	410fc270 	.word	0x410fc270
 80086dc:	e000e400 	.word	0xe000e400
 80086e0:	20000e48 	.word	0x20000e48
 80086e4:	20000e4c 	.word	0x20000e4c
 80086e8:	e000ed20 	.word	0xe000ed20
 80086ec:	2000000c 	.word	0x2000000c
 80086f0:	e000ef34 	.word	0xe000ef34

080086f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
	__asm volatile
 80086fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fe:	f383 8811 	msr	BASEPRI, r3
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	607b      	str	r3, [r7, #4]
}
 800870c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800870e:	4b0f      	ldr	r3, [pc, #60]	; (800874c <vPortEnterCritical+0x58>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3301      	adds	r3, #1
 8008714:	4a0d      	ldr	r2, [pc, #52]	; (800874c <vPortEnterCritical+0x58>)
 8008716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008718:	4b0c      	ldr	r3, [pc, #48]	; (800874c <vPortEnterCritical+0x58>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d10f      	bne.n	8008740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008720:	4b0b      	ldr	r3, [pc, #44]	; (8008750 <vPortEnterCritical+0x5c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <vPortEnterCritical+0x4c>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	603b      	str	r3, [r7, #0]
}
 800873c:	bf00      	nop
 800873e:	e7fe      	b.n	800873e <vPortEnterCritical+0x4a>
	}
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	2000000c 	.word	0x2000000c
 8008750:	e000ed04 	.word	0xe000ed04

08008754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800875a:	4b12      	ldr	r3, [pc, #72]	; (80087a4 <vPortExitCritical+0x50>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10a      	bne.n	8008778 <vPortExitCritical+0x24>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	607b      	str	r3, [r7, #4]
}
 8008774:	bf00      	nop
 8008776:	e7fe      	b.n	8008776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008778:	4b0a      	ldr	r3, [pc, #40]	; (80087a4 <vPortExitCritical+0x50>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3b01      	subs	r3, #1
 800877e:	4a09      	ldr	r2, [pc, #36]	; (80087a4 <vPortExitCritical+0x50>)
 8008780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008782:	4b08      	ldr	r3, [pc, #32]	; (80087a4 <vPortExitCritical+0x50>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d105      	bne.n	8008796 <vPortExitCritical+0x42>
 800878a:	2300      	movs	r3, #0
 800878c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	f383 8811 	msr	BASEPRI, r3
}
 8008794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008796:	bf00      	nop
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	2000000c 	.word	0x2000000c
	...

080087b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087b0:	f3ef 8009 	mrs	r0, PSP
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	4b15      	ldr	r3, [pc, #84]	; (8008810 <pxCurrentTCBConst>)
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	f01e 0f10 	tst.w	lr, #16
 80087c0:	bf08      	it	eq
 80087c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ca:	6010      	str	r0, [r2, #0]
 80087cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087d4:	f380 8811 	msr	BASEPRI, r0
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f7fe fc6c 	bl	80070bc <vTaskSwitchContext>
 80087e4:	f04f 0000 	mov.w	r0, #0
 80087e8:	f380 8811 	msr	BASEPRI, r0
 80087ec:	bc09      	pop	{r0, r3}
 80087ee:	6819      	ldr	r1, [r3, #0]
 80087f0:	6808      	ldr	r0, [r1, #0]
 80087f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f6:	f01e 0f10 	tst.w	lr, #16
 80087fa:	bf08      	it	eq
 80087fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008800:	f380 8809 	msr	PSP, r0
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	f3af 8000 	nop.w

08008810 <pxCurrentTCBConst>:
 8008810:	2000081c 	.word	0x2000081c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop

08008818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	607b      	str	r3, [r7, #4]
}
 8008830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008832:	f7fe fb89 	bl	8006f48 <xTaskIncrementTick>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800883c:	4b06      	ldr	r3, [pc, #24]	; (8008858 <xPortSysTickHandler+0x40>)
 800883e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	2300      	movs	r3, #0
 8008846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	f383 8811 	msr	BASEPRI, r3
}
 800884e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008850:	bf00      	nop
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	e000ed04 	.word	0xe000ed04

0800885c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800885c:	b480      	push	{r7}
 800885e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008860:	4b0b      	ldr	r3, [pc, #44]	; (8008890 <vPortSetupTimerInterrupt+0x34>)
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008866:	4b0b      	ldr	r3, [pc, #44]	; (8008894 <vPortSetupTimerInterrupt+0x38>)
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800886c:	4b0a      	ldr	r3, [pc, #40]	; (8008898 <vPortSetupTimerInterrupt+0x3c>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a0a      	ldr	r2, [pc, #40]	; (800889c <vPortSetupTimerInterrupt+0x40>)
 8008872:	fba2 2303 	umull	r2, r3, r2, r3
 8008876:	099b      	lsrs	r3, r3, #6
 8008878:	4a09      	ldr	r2, [pc, #36]	; (80088a0 <vPortSetupTimerInterrupt+0x44>)
 800887a:	3b01      	subs	r3, #1
 800887c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800887e:	4b04      	ldr	r3, [pc, #16]	; (8008890 <vPortSetupTimerInterrupt+0x34>)
 8008880:	2207      	movs	r2, #7
 8008882:	601a      	str	r2, [r3, #0]
}
 8008884:	bf00      	nop
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	e000e010 	.word	0xe000e010
 8008894:	e000e018 	.word	0xe000e018
 8008898:	20000000 	.word	0x20000000
 800889c:	10624dd3 	.word	0x10624dd3
 80088a0:	e000e014 	.word	0xe000e014

080088a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80088b4 <vPortEnableVFP+0x10>
 80088a8:	6801      	ldr	r1, [r0, #0]
 80088aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088ae:	6001      	str	r1, [r0, #0]
 80088b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088b2:	bf00      	nop
 80088b4:	e000ed88 	.word	0xe000ed88

080088b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088be:	f3ef 8305 	mrs	r3, IPSR
 80088c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2b0f      	cmp	r3, #15
 80088c8:	d914      	bls.n	80088f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088ca:	4a17      	ldr	r2, [pc, #92]	; (8008928 <vPortValidateInterruptPriority+0x70>)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088d4:	4b15      	ldr	r3, [pc, #84]	; (800892c <vPortValidateInterruptPriority+0x74>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	7afa      	ldrb	r2, [r7, #11]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d20a      	bcs.n	80088f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	607b      	str	r3, [r7, #4]
}
 80088f0:	bf00      	nop
 80088f2:	e7fe      	b.n	80088f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088f4:	4b0e      	ldr	r3, [pc, #56]	; (8008930 <vPortValidateInterruptPriority+0x78>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088fc:	4b0d      	ldr	r3, [pc, #52]	; (8008934 <vPortValidateInterruptPriority+0x7c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	d90a      	bls.n	800891a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	603b      	str	r3, [r7, #0]
}
 8008916:	bf00      	nop
 8008918:	e7fe      	b.n	8008918 <vPortValidateInterruptPriority+0x60>
	}
 800891a:	bf00      	nop
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	e000e3f0 	.word	0xe000e3f0
 800892c:	20000e48 	.word	0x20000e48
 8008930:	e000ed0c 	.word	0xe000ed0c
 8008934:	20000e4c 	.word	0x20000e4c

08008938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08a      	sub	sp, #40	; 0x28
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008940:	2300      	movs	r3, #0
 8008942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008944:	f7fe fa32 	bl	8006dac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008948:	4b5b      	ldr	r3, [pc, #364]	; (8008ab8 <pvPortMalloc+0x180>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d101      	bne.n	8008954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008950:	f000 f920 	bl	8008b94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008954:	4b59      	ldr	r3, [pc, #356]	; (8008abc <pvPortMalloc+0x184>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4013      	ands	r3, r2
 800895c:	2b00      	cmp	r3, #0
 800895e:	f040 8093 	bne.w	8008a88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d01d      	beq.n	80089a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008968:	2208      	movs	r2, #8
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4413      	add	r3, r2
 800896e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f003 0307 	and.w	r3, r3, #7
 8008976:	2b00      	cmp	r3, #0
 8008978:	d014      	beq.n	80089a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f023 0307 	bic.w	r3, r3, #7
 8008980:	3308      	adds	r3, #8
 8008982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00a      	beq.n	80089a4 <pvPortMalloc+0x6c>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	617b      	str	r3, [r7, #20]
}
 80089a0:	bf00      	nop
 80089a2:	e7fe      	b.n	80089a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d06e      	beq.n	8008a88 <pvPortMalloc+0x150>
 80089aa:	4b45      	ldr	r3, [pc, #276]	; (8008ac0 <pvPortMalloc+0x188>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d869      	bhi.n	8008a88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089b4:	4b43      	ldr	r3, [pc, #268]	; (8008ac4 <pvPortMalloc+0x18c>)
 80089b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089b8:	4b42      	ldr	r3, [pc, #264]	; (8008ac4 <pvPortMalloc+0x18c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089be:	e004      	b.n	80089ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d903      	bls.n	80089dc <pvPortMalloc+0xa4>
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d1f1      	bne.n	80089c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089dc:	4b36      	ldr	r3, [pc, #216]	; (8008ab8 <pvPortMalloc+0x180>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d050      	beq.n	8008a88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089e6:	6a3b      	ldr	r3, [r7, #32]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2208      	movs	r2, #8
 80089ec:	4413      	add	r3, r2
 80089ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	1ad2      	subs	r2, r2, r3
 8008a00:	2308      	movs	r3, #8
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d91f      	bls.n	8008a48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	f003 0307 	and.w	r3, r3, #7
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <pvPortMalloc+0xf8>
	__asm volatile
 8008a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a1e:	f383 8811 	msr	BASEPRI, r3
 8008a22:	f3bf 8f6f 	isb	sy
 8008a26:	f3bf 8f4f 	dsb	sy
 8008a2a:	613b      	str	r3, [r7, #16]
}
 8008a2c:	bf00      	nop
 8008a2e:	e7fe      	b.n	8008a2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	685a      	ldr	r2, [r3, #4]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	1ad2      	subs	r2, r2, r3
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a42:	69b8      	ldr	r0, [r7, #24]
 8008a44:	f000 f908 	bl	8008c58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a48:	4b1d      	ldr	r3, [pc, #116]	; (8008ac0 <pvPortMalloc+0x188>)
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	4a1b      	ldr	r2, [pc, #108]	; (8008ac0 <pvPortMalloc+0x188>)
 8008a54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a56:	4b1a      	ldr	r3, [pc, #104]	; (8008ac0 <pvPortMalloc+0x188>)
 8008a58:	681a      	ldr	r2, [r3, #0]
 8008a5a:	4b1b      	ldr	r3, [pc, #108]	; (8008ac8 <pvPortMalloc+0x190>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d203      	bcs.n	8008a6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a62:	4b17      	ldr	r3, [pc, #92]	; (8008ac0 <pvPortMalloc+0x188>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a18      	ldr	r2, [pc, #96]	; (8008ac8 <pvPortMalloc+0x190>)
 8008a68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	4b13      	ldr	r3, [pc, #76]	; (8008abc <pvPortMalloc+0x184>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	431a      	orrs	r2, r3
 8008a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a7e:	4b13      	ldr	r3, [pc, #76]	; (8008acc <pvPortMalloc+0x194>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	3301      	adds	r3, #1
 8008a84:	4a11      	ldr	r2, [pc, #68]	; (8008acc <pvPortMalloc+0x194>)
 8008a86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a88:	f7fe f99e 	bl	8006dc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00a      	beq.n	8008aac <pvPortMalloc+0x174>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	60fb      	str	r3, [r7, #12]
}
 8008aa8:	bf00      	nop
 8008aaa:	e7fe      	b.n	8008aaa <pvPortMalloc+0x172>
	return pvReturn;
 8008aac:	69fb      	ldr	r3, [r7, #28]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3728      	adds	r7, #40	; 0x28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20004a58 	.word	0x20004a58
 8008abc:	20004a6c 	.word	0x20004a6c
 8008ac0:	20004a5c 	.word	0x20004a5c
 8008ac4:	20004a50 	.word	0x20004a50
 8008ac8:	20004a60 	.word	0x20004a60
 8008acc:	20004a64 	.word	0x20004a64

08008ad0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d04d      	beq.n	8008b7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ae2:	2308      	movs	r3, #8
 8008ae4:	425b      	negs	r3, r3
 8008ae6:	697a      	ldr	r2, [r7, #20]
 8008ae8:	4413      	add	r3, r2
 8008aea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	4b24      	ldr	r3, [pc, #144]	; (8008b88 <vPortFree+0xb8>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4013      	ands	r3, r2
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10a      	bne.n	8008b14 <vPortFree+0x44>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	60fb      	str	r3, [r7, #12]
}
 8008b10:	bf00      	nop
 8008b12:	e7fe      	b.n	8008b12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d00a      	beq.n	8008b32 <vPortFree+0x62>
	__asm volatile
 8008b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b20:	f383 8811 	msr	BASEPRI, r3
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	f3bf 8f4f 	dsb	sy
 8008b2c:	60bb      	str	r3, [r7, #8]
}
 8008b2e:	bf00      	nop
 8008b30:	e7fe      	b.n	8008b30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	685a      	ldr	r2, [r3, #4]
 8008b36:	4b14      	ldr	r3, [pc, #80]	; (8008b88 <vPortFree+0xb8>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d01e      	beq.n	8008b7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d11a      	bne.n	8008b7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	685a      	ldr	r2, [r3, #4]
 8008b4c:	4b0e      	ldr	r3, [pc, #56]	; (8008b88 <vPortFree+0xb8>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	43db      	mvns	r3, r3
 8008b52:	401a      	ands	r2, r3
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b58:	f7fe f928 	bl	8006dac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	685a      	ldr	r2, [r3, #4]
 8008b60:	4b0a      	ldr	r3, [pc, #40]	; (8008b8c <vPortFree+0xbc>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4413      	add	r3, r2
 8008b66:	4a09      	ldr	r2, [pc, #36]	; (8008b8c <vPortFree+0xbc>)
 8008b68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b6a:	6938      	ldr	r0, [r7, #16]
 8008b6c:	f000 f874 	bl	8008c58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b70:	4b07      	ldr	r3, [pc, #28]	; (8008b90 <vPortFree+0xc0>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3301      	adds	r3, #1
 8008b76:	4a06      	ldr	r2, [pc, #24]	; (8008b90 <vPortFree+0xc0>)
 8008b78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b7a:	f7fe f925 	bl	8006dc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b7e:	bf00      	nop
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	20004a6c 	.word	0x20004a6c
 8008b8c:	20004a5c 	.word	0x20004a5c
 8008b90:	20004a68 	.word	0x20004a68

08008b94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ba0:	4b27      	ldr	r3, [pc, #156]	; (8008c40 <prvHeapInit+0xac>)
 8008ba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f003 0307 	and.w	r3, r3, #7
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00c      	beq.n	8008bc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	3307      	adds	r3, #7
 8008bb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 0307 	bic.w	r3, r3, #7
 8008bba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	4a1f      	ldr	r2, [pc, #124]	; (8008c40 <prvHeapInit+0xac>)
 8008bc4:	4413      	add	r3, r2
 8008bc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bcc:	4a1d      	ldr	r2, [pc, #116]	; (8008c44 <prvHeapInit+0xb0>)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bd2:	4b1c      	ldr	r3, [pc, #112]	; (8008c44 <prvHeapInit+0xb0>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	4413      	add	r3, r2
 8008bde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008be0:	2208      	movs	r2, #8
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	1a9b      	subs	r3, r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f023 0307 	bic.w	r3, r3, #7
 8008bee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4a15      	ldr	r2, [pc, #84]	; (8008c48 <prvHeapInit+0xb4>)
 8008bf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bf6:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <prvHeapInit+0xb4>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bfe:	4b12      	ldr	r3, [pc, #72]	; (8008c48 <prvHeapInit+0xb4>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	1ad2      	subs	r2, r2, r3
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c14:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <prvHeapInit+0xb4>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	4a0a      	ldr	r2, [pc, #40]	; (8008c4c <prvHeapInit+0xb8>)
 8008c22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	4a09      	ldr	r2, [pc, #36]	; (8008c50 <prvHeapInit+0xbc>)
 8008c2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c2c:	4b09      	ldr	r3, [pc, #36]	; (8008c54 <prvHeapInit+0xc0>)
 8008c2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c32:	601a      	str	r2, [r3, #0]
}
 8008c34:	bf00      	nop
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	20000e50 	.word	0x20000e50
 8008c44:	20004a50 	.word	0x20004a50
 8008c48:	20004a58 	.word	0x20004a58
 8008c4c:	20004a60 	.word	0x20004a60
 8008c50:	20004a5c 	.word	0x20004a5c
 8008c54:	20004a6c 	.word	0x20004a6c

08008c58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c60:	4b28      	ldr	r3, [pc, #160]	; (8008d04 <prvInsertBlockIntoFreeList+0xac>)
 8008c62:	60fb      	str	r3, [r7, #12]
 8008c64:	e002      	b.n	8008c6c <prvInsertBlockIntoFreeList+0x14>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	60fb      	str	r3, [r7, #12]
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d8f7      	bhi.n	8008c66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	68ba      	ldr	r2, [r7, #8]
 8008c80:	4413      	add	r3, r2
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d108      	bne.n	8008c9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	441a      	add	r2, r3
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	68ba      	ldr	r2, [r7, #8]
 8008ca4:	441a      	add	r2, r3
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d118      	bne.n	8008ce0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681a      	ldr	r2, [r3, #0]
 8008cb2:	4b15      	ldr	r3, [pc, #84]	; (8008d08 <prvInsertBlockIntoFreeList+0xb0>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d00d      	beq.n	8008cd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	441a      	add	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	e008      	b.n	8008ce8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cd6:	4b0c      	ldr	r3, [pc, #48]	; (8008d08 <prvInsertBlockIntoFreeList+0xb0>)
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	601a      	str	r2, [r3, #0]
 8008cde:	e003      	b.n	8008ce8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d002      	beq.n	8008cf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cf6:	bf00      	nop
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	20004a50 	.word	0x20004a50
 8008d08:	20004a58 	.word	0x20004a58

08008d0c <__libc_init_array>:
 8008d0c:	b570      	push	{r4, r5, r6, lr}
 8008d0e:	4d0d      	ldr	r5, [pc, #52]	; (8008d44 <__libc_init_array+0x38>)
 8008d10:	4c0d      	ldr	r4, [pc, #52]	; (8008d48 <__libc_init_array+0x3c>)
 8008d12:	1b64      	subs	r4, r4, r5
 8008d14:	10a4      	asrs	r4, r4, #2
 8008d16:	2600      	movs	r6, #0
 8008d18:	42a6      	cmp	r6, r4
 8008d1a:	d109      	bne.n	8008d30 <__libc_init_array+0x24>
 8008d1c:	4d0b      	ldr	r5, [pc, #44]	; (8008d4c <__libc_init_array+0x40>)
 8008d1e:	4c0c      	ldr	r4, [pc, #48]	; (8008d50 <__libc_init_array+0x44>)
 8008d20:	f000 f8f6 	bl	8008f10 <_init>
 8008d24:	1b64      	subs	r4, r4, r5
 8008d26:	10a4      	asrs	r4, r4, #2
 8008d28:	2600      	movs	r6, #0
 8008d2a:	42a6      	cmp	r6, r4
 8008d2c:	d105      	bne.n	8008d3a <__libc_init_array+0x2e>
 8008d2e:	bd70      	pop	{r4, r5, r6, pc}
 8008d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d34:	4798      	blx	r3
 8008d36:	3601      	adds	r6, #1
 8008d38:	e7ee      	b.n	8008d18 <__libc_init_array+0xc>
 8008d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d3e:	4798      	blx	r3
 8008d40:	3601      	adds	r6, #1
 8008d42:	e7f2      	b.n	8008d2a <__libc_init_array+0x1e>
 8008d44:	080090a4 	.word	0x080090a4
 8008d48:	080090a4 	.word	0x080090a4
 8008d4c:	080090a4 	.word	0x080090a4
 8008d50:	080090a8 	.word	0x080090a8

08008d54 <__retarget_lock_acquire_recursive>:
 8008d54:	4770      	bx	lr

08008d56 <__retarget_lock_release_recursive>:
 8008d56:	4770      	bx	lr

08008d58 <memcpy>:
 8008d58:	440a      	add	r2, r1
 8008d5a:	4291      	cmp	r1, r2
 8008d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d60:	d100      	bne.n	8008d64 <memcpy+0xc>
 8008d62:	4770      	bx	lr
 8008d64:	b510      	push	{r4, lr}
 8008d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d6e:	4291      	cmp	r1, r2
 8008d70:	d1f9      	bne.n	8008d66 <memcpy+0xe>
 8008d72:	bd10      	pop	{r4, pc}

08008d74 <memset>:
 8008d74:	4402      	add	r2, r0
 8008d76:	4603      	mov	r3, r0
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d100      	bne.n	8008d7e <memset+0xa>
 8008d7c:	4770      	bx	lr
 8008d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d82:	e7f9      	b.n	8008d78 <memset+0x4>

08008d84 <cleanup_glue>:
 8008d84:	b538      	push	{r3, r4, r5, lr}
 8008d86:	460c      	mov	r4, r1
 8008d88:	6809      	ldr	r1, [r1, #0]
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	b109      	cbz	r1, 8008d92 <cleanup_glue+0xe>
 8008d8e:	f7ff fff9 	bl	8008d84 <cleanup_glue>
 8008d92:	4621      	mov	r1, r4
 8008d94:	4628      	mov	r0, r5
 8008d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d9a:	f000 b869 	b.w	8008e70 <_free_r>
	...

08008da0 <_reclaim_reent>:
 8008da0:	4b2c      	ldr	r3, [pc, #176]	; (8008e54 <_reclaim_reent+0xb4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4283      	cmp	r3, r0
 8008da6:	b570      	push	{r4, r5, r6, lr}
 8008da8:	4604      	mov	r4, r0
 8008daa:	d051      	beq.n	8008e50 <_reclaim_reent+0xb0>
 8008dac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008dae:	b143      	cbz	r3, 8008dc2 <_reclaim_reent+0x22>
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d14a      	bne.n	8008e4c <_reclaim_reent+0xac>
 8008db6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008db8:	6819      	ldr	r1, [r3, #0]
 8008dba:	b111      	cbz	r1, 8008dc2 <_reclaim_reent+0x22>
 8008dbc:	4620      	mov	r0, r4
 8008dbe:	f000 f857 	bl	8008e70 <_free_r>
 8008dc2:	6961      	ldr	r1, [r4, #20]
 8008dc4:	b111      	cbz	r1, 8008dcc <_reclaim_reent+0x2c>
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	f000 f852 	bl	8008e70 <_free_r>
 8008dcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008dce:	b111      	cbz	r1, 8008dd6 <_reclaim_reent+0x36>
 8008dd0:	4620      	mov	r0, r4
 8008dd2:	f000 f84d 	bl	8008e70 <_free_r>
 8008dd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008dd8:	b111      	cbz	r1, 8008de0 <_reclaim_reent+0x40>
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f000 f848 	bl	8008e70 <_free_r>
 8008de0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008de2:	b111      	cbz	r1, 8008dea <_reclaim_reent+0x4a>
 8008de4:	4620      	mov	r0, r4
 8008de6:	f000 f843 	bl	8008e70 <_free_r>
 8008dea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008dec:	b111      	cbz	r1, 8008df4 <_reclaim_reent+0x54>
 8008dee:	4620      	mov	r0, r4
 8008df0:	f000 f83e 	bl	8008e70 <_free_r>
 8008df4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008df6:	b111      	cbz	r1, 8008dfe <_reclaim_reent+0x5e>
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f000 f839 	bl	8008e70 <_free_r>
 8008dfe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008e00:	b111      	cbz	r1, 8008e08 <_reclaim_reent+0x68>
 8008e02:	4620      	mov	r0, r4
 8008e04:	f000 f834 	bl	8008e70 <_free_r>
 8008e08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e0a:	b111      	cbz	r1, 8008e12 <_reclaim_reent+0x72>
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f000 f82f 	bl	8008e70 <_free_r>
 8008e12:	69a3      	ldr	r3, [r4, #24]
 8008e14:	b1e3      	cbz	r3, 8008e50 <_reclaim_reent+0xb0>
 8008e16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008e18:	4620      	mov	r0, r4
 8008e1a:	4798      	blx	r3
 8008e1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008e1e:	b1b9      	cbz	r1, 8008e50 <_reclaim_reent+0xb0>
 8008e20:	4620      	mov	r0, r4
 8008e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e26:	f7ff bfad 	b.w	8008d84 <cleanup_glue>
 8008e2a:	5949      	ldr	r1, [r1, r5]
 8008e2c:	b941      	cbnz	r1, 8008e40 <_reclaim_reent+0xa0>
 8008e2e:	3504      	adds	r5, #4
 8008e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e32:	2d80      	cmp	r5, #128	; 0x80
 8008e34:	68d9      	ldr	r1, [r3, #12]
 8008e36:	d1f8      	bne.n	8008e2a <_reclaim_reent+0x8a>
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f000 f819 	bl	8008e70 <_free_r>
 8008e3e:	e7ba      	b.n	8008db6 <_reclaim_reent+0x16>
 8008e40:	680e      	ldr	r6, [r1, #0]
 8008e42:	4620      	mov	r0, r4
 8008e44:	f000 f814 	bl	8008e70 <_free_r>
 8008e48:	4631      	mov	r1, r6
 8008e4a:	e7ef      	b.n	8008e2c <_reclaim_reent+0x8c>
 8008e4c:	2500      	movs	r5, #0
 8008e4e:	e7ef      	b.n	8008e30 <_reclaim_reent+0x90>
 8008e50:	bd70      	pop	{r4, r5, r6, pc}
 8008e52:	bf00      	nop
 8008e54:	20000010 	.word	0x20000010

08008e58 <__malloc_lock>:
 8008e58:	4801      	ldr	r0, [pc, #4]	; (8008e60 <__malloc_lock+0x8>)
 8008e5a:	f7ff bf7b 	b.w	8008d54 <__retarget_lock_acquire_recursive>
 8008e5e:	bf00      	nop
 8008e60:	20004e48 	.word	0x20004e48

08008e64 <__malloc_unlock>:
 8008e64:	4801      	ldr	r0, [pc, #4]	; (8008e6c <__malloc_unlock+0x8>)
 8008e66:	f7ff bf76 	b.w	8008d56 <__retarget_lock_release_recursive>
 8008e6a:	bf00      	nop
 8008e6c:	20004e48 	.word	0x20004e48

08008e70 <_free_r>:
 8008e70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e72:	2900      	cmp	r1, #0
 8008e74:	d048      	beq.n	8008f08 <_free_r+0x98>
 8008e76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e7a:	9001      	str	r0, [sp, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f1a1 0404 	sub.w	r4, r1, #4
 8008e82:	bfb8      	it	lt
 8008e84:	18e4      	addlt	r4, r4, r3
 8008e86:	f7ff ffe7 	bl	8008e58 <__malloc_lock>
 8008e8a:	4a20      	ldr	r2, [pc, #128]	; (8008f0c <_free_r+0x9c>)
 8008e8c:	9801      	ldr	r0, [sp, #4]
 8008e8e:	6813      	ldr	r3, [r2, #0]
 8008e90:	4615      	mov	r5, r2
 8008e92:	b933      	cbnz	r3, 8008ea2 <_free_r+0x32>
 8008e94:	6063      	str	r3, [r4, #4]
 8008e96:	6014      	str	r4, [r2, #0]
 8008e98:	b003      	add	sp, #12
 8008e9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e9e:	f7ff bfe1 	b.w	8008e64 <__malloc_unlock>
 8008ea2:	42a3      	cmp	r3, r4
 8008ea4:	d90b      	bls.n	8008ebe <_free_r+0x4e>
 8008ea6:	6821      	ldr	r1, [r4, #0]
 8008ea8:	1862      	adds	r2, r4, r1
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	bf04      	itt	eq
 8008eae:	681a      	ldreq	r2, [r3, #0]
 8008eb0:	685b      	ldreq	r3, [r3, #4]
 8008eb2:	6063      	str	r3, [r4, #4]
 8008eb4:	bf04      	itt	eq
 8008eb6:	1852      	addeq	r2, r2, r1
 8008eb8:	6022      	streq	r2, [r4, #0]
 8008eba:	602c      	str	r4, [r5, #0]
 8008ebc:	e7ec      	b.n	8008e98 <_free_r+0x28>
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	b10b      	cbz	r3, 8008ec8 <_free_r+0x58>
 8008ec4:	42a3      	cmp	r3, r4
 8008ec6:	d9fa      	bls.n	8008ebe <_free_r+0x4e>
 8008ec8:	6811      	ldr	r1, [r2, #0]
 8008eca:	1855      	adds	r5, r2, r1
 8008ecc:	42a5      	cmp	r5, r4
 8008ece:	d10b      	bne.n	8008ee8 <_free_r+0x78>
 8008ed0:	6824      	ldr	r4, [r4, #0]
 8008ed2:	4421      	add	r1, r4
 8008ed4:	1854      	adds	r4, r2, r1
 8008ed6:	42a3      	cmp	r3, r4
 8008ed8:	6011      	str	r1, [r2, #0]
 8008eda:	d1dd      	bne.n	8008e98 <_free_r+0x28>
 8008edc:	681c      	ldr	r4, [r3, #0]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	6053      	str	r3, [r2, #4]
 8008ee2:	4421      	add	r1, r4
 8008ee4:	6011      	str	r1, [r2, #0]
 8008ee6:	e7d7      	b.n	8008e98 <_free_r+0x28>
 8008ee8:	d902      	bls.n	8008ef0 <_free_r+0x80>
 8008eea:	230c      	movs	r3, #12
 8008eec:	6003      	str	r3, [r0, #0]
 8008eee:	e7d3      	b.n	8008e98 <_free_r+0x28>
 8008ef0:	6825      	ldr	r5, [r4, #0]
 8008ef2:	1961      	adds	r1, r4, r5
 8008ef4:	428b      	cmp	r3, r1
 8008ef6:	bf04      	itt	eq
 8008ef8:	6819      	ldreq	r1, [r3, #0]
 8008efa:	685b      	ldreq	r3, [r3, #4]
 8008efc:	6063      	str	r3, [r4, #4]
 8008efe:	bf04      	itt	eq
 8008f00:	1949      	addeq	r1, r1, r5
 8008f02:	6021      	streq	r1, [r4, #0]
 8008f04:	6054      	str	r4, [r2, #4]
 8008f06:	e7c7      	b.n	8008e98 <_free_r+0x28>
 8008f08:	b003      	add	sp, #12
 8008f0a:	bd30      	pop	{r4, r5, pc}
 8008f0c:	20004a70 	.word	0x20004a70

08008f10 <_init>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	bf00      	nop
 8008f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f16:	bc08      	pop	{r3}
 8008f18:	469e      	mov	lr, r3
 8008f1a:	4770      	bx	lr

08008f1c <_fini>:
 8008f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1e:	bf00      	nop
 8008f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f22:	bc08      	pop	{r3}
 8008f24:	469e      	mov	lr, r3
 8008f26:	4770      	bx	lr
